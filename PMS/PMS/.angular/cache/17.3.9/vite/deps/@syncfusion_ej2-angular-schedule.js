import {
  DropDownList,
  MultiSelect
} from "./chunk-BN7JGLEB.js";
import {
  Toolbar,
  TreeView
} from "./chunk-35BNGUR5.js";
import {
  Calendar,
  DatePicker,
  DateTimePicker
} from "./chunk-3GTMPMRH.js";
import {
  DataManager,
  Deferred,
  ListBase,
  Predicate,
  Query
} from "./chunk-SSAM3KVE.js";
import {
  FormValidator,
  Input,
  NumericTextBox
} from "./chunk-N5UY6QDA.js";
import "./chunk-AS5YIVX4.js";
import {
  Dialog,
  Popup,
  Tooltip,
  createSpinner,
  hideSpinner,
  isCollide,
  showSpinner
} from "./chunk-2M5HFFVS.js";
import {
  ArrayBase,
  Button,
  CheckBox,
  ComplexBase,
  ComponentBase,
  ComponentMixins,
  RadioButton,
  Template,
  setValue
} from "./chunk-2S3DOBG7.js";
import {
  Animation,
  Browser,
  ChildProperty,
  Collection,
  Complex,
  Component as Component2,
  Draggable,
  Event,
  EventHandler,
  HijriParser,
  Internationalization,
  KeyboardEvents,
  L10n,
  NotifyPropertyChanges,
  Property,
  SanitizeHtmlHelper,
  Touch,
  addClass,
  append,
  classList,
  cldrData,
  closest,
  compile,
  createElement,
  detach,
  extend,
  formatUnit,
  getDefaultDateObject,
  getElement,
  getValue,
  initializeCSPTemplate,
  isNullOrUndefined,
  prepend,
  print,
  remove,
  removeClass,
  setStyleAttribute
} from "./chunk-HEJJC6ZW.js";
import {
  CommonModule
} from "./chunk-ZNKC5GL5.js";
import {
  ChangeDetectionStrategy,
  Component,
  ContentChild,
  ContentChildren,
  Directive,
  ElementRef,
  Injector,
  NgModule,
  Renderer2,
  ViewContainerRef,
  __decorate,
  setClassMetadata,
  ɵɵInheritDefinitionFeature,
  ɵɵcontentQuery,
  ɵɵdefineComponent,
  ɵɵdefineDirective,
  ɵɵdefineInjector,
  ɵɵdefineNgModule,
  ɵɵdirectiveInject,
  ɵɵloadQuery,
  ɵɵqueryRefresh
} from "./chunk-RXOX46UK.js";
import "./chunk-J4B6MK7R.js";

// node_modules/@syncfusion/ej2-schedule/src/schedule/base/constant.js
var cellClick = "cellClick";
var cellDoubleClick = "cellDoubleClick";
var moreEventsClick = "moreEventsClick";
var select = "select";
var hover = "hover";
var actionBegin = "actionBegin";
var actionComplete = "actionComplete";
var actionFailure = "actionFailure";
var navigating = "navigating";
var renderCell = "renderCell";
var eventClick = "eventClick";
var eventDoubleClick = "eventDoubleClick";
var eventRendered = "eventRendered";
var dataBinding = "dataBinding";
var dataBound = "dataBound";
var popupOpen = "popupOpen";
var popupClose = "popupClose";
var dragStart = "dragStart";
var drag = "drag";
var dragStop = "dragStop";
var resizeStart = "resizeStart";
var resizing = "resizing";
var resizeStop = "resizeStop";
var inlineClick = "inlineClick";
var cellSelect = "cellSelect";
var virtualScrollStart = "virtualScrollStart";
var virtualScrollStop = "virtualScrollStop";
var initialLoad = "initial-load";
var initialEnd = "initial-end";
var print2 = "print";
var dataReady = "data-ready";
var eventsLoaded = "events-loaded";
var contentReady = "content-ready";
var scroll = "scroll";
var virtualScroll = "virtual-scroll";
var scrollUiUpdate = "scroll-ui-update";
var uiUpdate = "ui-update";
var documentClick = "document-click";
var cellMouseDown = "cell-mouse-down";

// node_modules/@syncfusion/ej2-schedule/src/schedule/base/util.js
var WEEK_LENGTH = 7;
var DEFAULT_WEEKS = 6;
var MS_PER_DAY = 864e5;
var MS_PER_MINUTE = 6e4;
function getElementHeightFromClass(container, elementClass, isTransformed) {
  var height = 0;
  var el = createElement("div", { className: elementClass }).cloneNode();
  el.style.visibility = "hidden";
  el.style.position = "absolute";
  container.appendChild(el);
  height = getElementHeight(el, isTransformed);
  remove(el);
  return height;
}
function getElementWidthFromClass(container, elementClass, isTransformed) {
  var width = 0;
  var el = createElement("div", { className: elementClass }).cloneNode();
  el.style.visibility = "hidden";
  el.style.position = "absolute";
  container.appendChild(el);
  width = getElementWidth(el, isTransformed);
  remove(el);
  return width;
}
function getTranslateY(element) {
  var style = getComputedStyle(element);
  return window.WebKitCSSMatrix ? new WebKitCSSMatrix(style.webkitTransform).m42 : 0;
}
function getTranslateX(element) {
  var style = getComputedStyle(element);
  return window.WebKitCSSMatrix ? new WebKitCSSMatrix(style.webkitTransform).m41 : 0;
}
function getWeekFirstDate(date, firstDayOfWeek) {
  var date1 = new Date(date.getTime());
  firstDayOfWeek = (firstDayOfWeek - date1.getDay() + 7 * -1) % 7;
  return new Date(date1.setDate(date1.getDate() + (isNaN(firstDayOfWeek) ? 0 : firstDayOfWeek)));
}
function getWeekLastDate(date, firstDayOfWeek) {
  var weekFirst = getWeekFirstDate(date, firstDayOfWeek);
  var weekLast = new Date(weekFirst.getFullYear(), weekFirst.getMonth(), weekFirst.getDate() + 6);
  return new Date(weekLast.getTime());
}
function firstDateOfMonth(date) {
  return new Date(date.getFullYear(), date.getMonth(), 1);
}
function lastDateOfMonth(date) {
  return new Date(date.getFullYear(), date.getMonth() + 1, 0);
}
function getWeekNumber(date) {
  var date1 = new Date(date.getFullYear(), 0, 1).valueOf();
  var currentDate = new Date(date.getFullYear(), date.getMonth(), date.getDate()).valueOf();
  var dayOfYear = (currentDate - date1 + MS_PER_DAY) / MS_PER_DAY;
  return Math.ceil(dayOfYear / 7);
}
function getWeekMiddleDate(weekFirst, weekLast) {
  return new Date(weekLast.valueOf() - (weekLast.valueOf() - weekFirst.valueOf()) / 2);
}
function setTime(date, time) {
  var tzOffsetBefore = date.getTimezoneOffset();
  var d = new Date(date.getTime() + time);
  var tzOffsetDiff = d.getTimezoneOffset() - tzOffsetBefore;
  date.setTime(d.getTime() + tzOffsetDiff * MS_PER_MINUTE);
  return date;
}
function resetTime(date) {
  return new Date(date.getFullYear(), date.getMonth(), date.getDate());
}
function getDateInMs(date) {
  var localOffset = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0).getTimezoneOffset();
  var dateOffset = date.getTimezoneOffset();
  var timezoneOffset = dateOffset - localOffset;
  return date.getTime() - new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0).getTime() - timezoneOffset * 60 * 1e3;
}
function getDateCount(startDate, endDate) {
  return Math.ceil((endDate.getTime() - startDate.getTime()) / MS_PER_DAY);
}
function addDays(date, noOfDays) {
  date = /* @__PURE__ */ new Date("" + date);
  return new Date(date.setDate(date.getDate() + noOfDays));
}
function addMonths(date, noOfMonths) {
  date = /* @__PURE__ */ new Date("" + date);
  var day = date.getDate();
  date.setDate(1);
  date.setMonth(date.getMonth() + noOfMonths);
  date.setDate(Math.min(day, getMaxDays(date)));
  return date;
}
function addYears(date, noOfYears) {
  date = /* @__PURE__ */ new Date("" + date);
  var day = date.getDate();
  date.setDate(1);
  date.setFullYear(date.getFullYear() + noOfYears);
  date.setDate(Math.min(day, getMaxDays(date)));
  return date;
}
function getStartEndHours(date, startHour, endHour) {
  var date1 = new Date(date.getTime());
  date1.setHours(startHour.getHours());
  date1.setMinutes(startHour.getMinutes());
  date1.setSeconds(startHour.getSeconds());
  var date2 = new Date(date.getTime());
  if (endHour.getHours() === 0) {
    date2 = addDays(date2, 1);
  } else {
    date2.setHours(endHour.getHours());
    date2.setMinutes(endHour.getMinutes());
    date2.setSeconds(endHour.getSeconds());
  }
  return { startHour: date1, endHour: date2 };
}
function getMaxDays(date) {
  return lastDateOfMonth(date).getDate();
}
function getDaysCount(startDate, endDate) {
  var strTime = resetTime(new Date(startDate));
  var endTime = resetTime(new Date(endDate));
  return Math.round((endTime.getTime() - strTime.getTime()) / MS_PER_DAY);
}
function getDateFromString(date) {
  return date.indexOf("Date") !== -1 ? new Date(parseInt(date.match(/\d+/g).toString(), 10)) : date.indexOf("T") !== -1 ? new Date(date) : new Date(date.replace(/-/g, "/"));
}
var scrollWidth = null;
var pixelRatio = null;
function getScrollBarWidth() {
  if (scrollWidth !== null) {
    return scrollWidth;
  }
  if (pixelRatio === null) {
    pixelRatio = window.devicePixelRatio || window.screen.availWidth / document.documentElement.clientWidth;
  }
  var divNode = createElement("div");
  var value = 0;
  divNode.style.cssText = "width:100px;height: 100px;overflow: scroll;position: absolute;top: -9999px;";
  document.body.appendChild(divNode);
  var ratio = devicePixelRatio ? devicePixelRatio.toFixed(2) === "1.10" || devicePixelRatio <= 1 ? Math.ceil(devicePixelRatio % 1) : Math.floor(devicePixelRatio % 1) : 0;
  value = divNode.offsetWidth - divNode.clientWidth - ratio | 0;
  document.body.removeChild(divNode);
  return scrollWidth = value;
}
function resetScrollbarWidth() {
  var zoomPixelRatio = window.devicePixelRatio || window.screen.availWidth / document.documentElement.clientWidth;
  if (pixelRatio && pixelRatio !== zoomPixelRatio) {
    scrollWidth = null;
    pixelRatio = zoomPixelRatio;
  }
}
function findIndexInData(data, field, value, event, resourceCollection) {
  for (var i = 0, length_1 = data.length; i < length_1; i++) {
    if (data[parseInt(i.toString(), 10)]["" + field] === value) {
      if (event) {
        var field_1 = resourceCollection.slice(-2)[0].field;
        var res = event["" + field_1] instanceof Array ? event["" + field_1] : [event["" + field_1]];
        var resData = res.join(",");
        if (resData.includes(data[parseInt(i.toString(), 10)][resourceCollection.slice(-1)[0].groupIDField])) {
          return i;
        }
      } else {
        return i;
      }
    }
  }
  return -1;
}
function getOuterHeight(element) {
  var style = getComputedStyle(element);
  return element.offsetHeight + (parseInt(style.marginTop, 10) || 0) + (parseInt(style.marginBottom, 10) || 0);
}
function removeChildren(element) {
  var elementChildren = [].slice.call(element.children);
  for (var _i = 0, elementChildren_1 = elementChildren; _i < elementChildren_1.length; _i++) {
    var elementChild = elementChildren_1[_i];
    element.removeChild(elementChild);
  }
}
function isDaylightSavingTime(date) {
  var jan = new Date(date.getFullYear(), 0, 1);
  var jul = new Date(date.getFullYear(), 6, 1);
  return date.getTimezoneOffset() < Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());
}
function getUniversalTime(date) {
  var year = date.getFullYear();
  var month = date.getMonth();
  var day = date.getDate();
  var hours = date.getHours();
  var minutes = date.getMinutes();
  var seconds = date.getSeconds();
  var milliseconds = date.getMilliseconds();
  return Date.UTC(year, month, day, hours, minutes, seconds, milliseconds);
}
function isMobile() {
  return window.navigator.userAgent.toLowerCase().indexOf("mobi") > -1;
}
function isIPadDevice() {
  return window.navigator.userAgent.toLowerCase().indexOf("ipad") > -1;
}
function capitalizeFirstWord(inputString, type) {
  if (type === "multiple") {
    inputString = inputString.split(" ").map(function(e) {
      return e.charAt(0).toLocaleUpperCase() + e.substring(1);
    }).join(" ");
  } else if (type === "single") {
    if (inputString[0] >= "0" && inputString[0] <= "9") {
      var array = inputString.match(/[a-zA-Z]/);
      inputString = isNullOrUndefined(array) ? inputString : inputString.slice(0, array.index) + inputString[array.index].toLocaleUpperCase() + inputString.slice(array.index + 1);
    }
    inputString = inputString[0].toLocaleUpperCase() + inputString.slice(1);
  }
  return inputString;
}
function getElementWidth(element, isTransformed) {
  return isTransformed ? element.offsetWidth : element.getBoundingClientRect().width;
}
function getElementHeight(element, isTransformed) {
  return isTransformed ? element.offsetHeight : element.getBoundingClientRect().height;
}
function getElementTop(element, isTransformed) {
  return isTransformed ? element.offsetTop : element.getBoundingClientRect().top;
}

// node_modules/@syncfusion/ej2-schedule/src/schedule/base/css-constant.js
var ROOT = "e-schedule";
var RTL = "e-rtl";
var DEVICE_CLASS = "e-device";
var ADAPTIVE_CLASS = "e-adaptive";
var MULTI_DRAG = "e-multi-drag";
var ICON = "e-icons";
var ENABLE_CLASS = "e-enable";
var DISABLE_CLASS = "e-disable";
var TABLE_CONTAINER_CLASS = "e-table-container";
var SCHEDULE_TABLE_CLASS = "e-schedule-table";
var ALLDAY_CELLS_CLASS = "e-all-day-cells";
var HEADER_POPUP_CLASS = "e-header-popup";
var HEADER_CALENDAR_CLASS = "e-header-calendar";
var ALLDAY_ROW_CLASS = "e-all-day-row";
var CONTENT_TABLE_CLASS = "e-content-table";
var WORK_CELLS_CLASS = "e-work-cells";
var WORK_HOURS_CLASS = "e-work-hours";
var POPUP_OPEN = "e-popup-open";
var POPUP_CLOSE = "e-popup-close";
var DATE_HEADER_WRAP_CLASS = "e-date-header-wrap";
var DATE_HEADER_CONTAINER_CLASS = "e-date-header-container";
var HEADER_CELLS_CLASS = "e-header-cells";
var HEADER_WEEK_CELLS_CLASS = "e-header-week-cell";
var HEADER_MONTH_CELLS_CLASS = "e-header-month-cell";
var HEADER_YEAR_CELLS_CLASS = "e-header-year-cell";
var WORKDAY_CLASS = "e-work-days";
var OTHERMONTH_CLASS = "e-other-month";
var CURRENT_DAY_CLASS = "e-current-day";
var CURRENTDATE_CLASS = "e-current-date";
var CURRENT_PANEL_CLASS = "e-current-panel";
var PREVIOUS_PANEL_CLASS = "e-previous-panel";
var NEXT_PANEL_CLASS = "e-next-panel";
var PREVIOUS_DATE_CLASS = "e-prev";
var NEXT_DATE_CLASS = "e-next";
var TRANSLATE_CLASS = "e-translate";
var LEFT_INDENT_CLASS = "e-left-indent";
var LEFT_INDENT_WRAP_CLASS = "e-left-indent-wrap";
var EVENT_TABLE_CLASS = "e-event-table";
var RESOURCE_LEFT_TD_CLASS = "e-resource-left-td";
var RESOURCE_GROUP_CELLS_CLASS = "e-resource-group-cells";
var RESOURCE_TEXT_CLASS = "e-resource-text";
var RESOURCE_COLUMN_WRAP_CLASS = "e-resource-column-wrap";
var RESOURCE_COLUMN_TABLE_CLASS = "e-resource-column-table";
var RESOURCE_CHILD_CLASS = "e-child-node";
var RESOURCE_PARENT_CLASS = "e-parent-node";
var RESOURCE_EXPAND_CLASS = "e-resource-expand";
var RESOURCE_COLLAPSE_CLASS = "e-resource-collapse";
var RESOURCE_TREE_ICON_CLASS = "e-resource-tree-icon";
var RESOURCE_CELLS_CLASS = "e-resource-cells";
var TIME_CELLS_WRAP_CLASS = "e-time-cells-wrap";
var TIME_CELLS_CLASS = "e-time-cells";
var TIME_SLOT_CLASS = "e-time-slots";
var ALTERNATE_CELLS_CLASS = "e-alternate-cells";
var CURRENT_TIME_CLASS = "e-current-time";
var CURRENT_TIMELINE_CLASS = "e-current-timeline";
var PREVIOUS_TIMELINE_CLASS = "e-previous-timeline";
var HIDE_CHILDS_CLASS = "e-hide-childs";
var SCROLL_CONTAINER_CLASS = "e-scroll-container";
var TIMELINE_WRAPPER_CLASS = "e-timeline-wrapper";
var APPOINTMENT_WRAPPER_CLASS = "e-appointment-wrapper";
var APPOINTMENT_WRAPPER_HIDDEN_CLASS = "e-appointment-wrapper-hidden";
var DAY_WRAPPER_CLASS = "e-day-wrapper";
var TOOLBAR_CONTAINER = "e-schedule-toolbar-container";
var RESOURCE_TOOLBAR_CONTAINER = "e-schedule-resource-toolbar-container";
var HEADER_TOOLBAR = "e-schedule-toolbar";
var RESOURCE_HEADER_TOOLBAR = "e-schedule-resource-toolbar";
var SELECTED_CELL_CLASS = "e-selected-cell";
var WEEK_NUMBER_WRAPPER_CLASS = "e-week-number-wrapper";
var WEEK_NUMBER_CLASS = "e-week-number";
var APPOINTMENT_WRAP_CLASS = "e-appointment-wrap";
var WRAPPER_CONTAINER_CLASS = "e-wrapper-container";
var APPOINTMENT_CONTAINER_CLASS = "e-appointment-container";
var APPOINTMENT_CLASS = "e-appointment";
var BLOCK_APPOINTMENT_CLASS = "e-block-appointment";
var BLOCK_INDICATOR_CLASS = "e-block-indicator";
var APPOINTMENT_BORDER = "e-appointment-border";
var APPOINTMENT_DETAILS = "e-appointment-details";
var SUBJECT_WRAP = "e-subject-wrap";
var RESOURCE_NAME = "e-resource-name";
var APPOINTMENT_TIME = "e-time";
var TABLE_WRAP_CLASS = "e-table-wrap";
var OUTER_TABLE_CLASS = "e-outer-table";
var CONTENT_WRAP_CLASS = "e-content-wrap";
var VIRTUAL_TRACK_CLASS = "e-virtual-track";
var AGENDA_CELLS_CLASS = "e-agenda-cells";
var AGENDA_CURRENT_DAY_CLASS = "e-current-day";
var AGENDA_SELECTED_CELL = "e-active-appointment-agenda";
var MONTH_HEADER_CLASS = "e-month-header";
var AGENDA_HEADER_CLASS = "e-day-date-header";
var AGENDA_RESOURCE_CLASS = "e-resource-column";
var AGENDA_DATE_CLASS = "e-date-column";
var NAVIGATE_CLASS = "e-navigate";
var DATE_HEADER_CLASS = "e-date-header";
var AGENDA_DAY_BORDER_CLASS = "e-day-border";
var DATE_BORDER_CLASS = "e-date-border";
var AGENDA_DAY_PADDING_CLASS = "e-day-padding";
var DATE_TIME_CLASS = "e-date-time";
var DATE_TIME_WRAPPER_CLASS = "e-date-time-wrapper";
var AGENDA_EMPTY_EVENT_CLASS = "e-empty-event";
var AGENDA_NO_EVENT_CLASS = "e-no-event";
var APPOINTMENT_INDICATOR_CLASS = "e-appointment-indicator";
var EVENT_INDICATOR_CLASS = "e-indicator";
var EVENT_ICON_UP_CLASS = "e-up-icon";
var EVENT_ICON_DOWN_CLASS = "e-down-icon";
var EVENT_ICON_LEFT_CLASS = "e-left-icon";
var EVENT_ICON_RIGHT_CLASS = "e-right-icon";
var EVENT_ACTION_CLASS = "e-event-action";
var NEW_EVENT_CLASS = "e-new-event";
var CLONE_ELEMENT_CLASS = "e-schedule-event-clone";
var MONTH_CLONE_ELEMENT_CLASS = "e-month-event";
var CLONE_TIME_INDICATOR_CLASS = "e-clone-time-indicator";
var DRAG_CLONE_CLASS = "e-drag-clone";
var EVENT_RESIZE_CLASS = "e-event-resize";
var RESIZE_CLONE_CLASS = "e-resize-clone";
var LEFT_RESIZE_HANDLER = "e-left-handler";
var RIGHT_RESIZE_HANDLER = "e-right-handler";
var TOP_RESIZE_HANDLER = "e-top-handler";
var BOTTOM_RESIZE_HANDLER = "e-bottom-handler";
var EVENT_RECURRENCE_ICON_CLASS = "e-recurrence-icon";
var EVENT_RECURRENCE_EDIT_ICON_CLASS = "e-recurrence-edit-icon";
var HEADER_ROW_CLASS = "e-header-row";
var ALLDAY_APPOINTMENT_WRAPPER_CLASS = "e-all-day-appointment-wrapper";
var ALLDAY_APPOINTMENT_CLASS = "e-all-day-appointment";
var EVENT_COUNT_CLASS = "e-appointment-hide";
var ROW_COUNT_WRAPPER_CLASS = "e-row-count-wrapper";
var ALLDAY_APPOINTMENT_SECTION_CLASS = "e-all-day-appointment-section";
var APPOINTMENT_ROW_EXPAND_CLASS = "e-appointment-expand";
var APPOINTMENT_ROW_COLLAPSE_CLASS = "e-appointment-collapse";
var MORE_INDICATOR_CLASS = "e-more-indicator";
var CELL_POPUP_CLASS = "e-cell-popup";
var EVENT_POPUP_CLASS = "e-event-popup";
var MULTIPLE_EVENT_POPUP_CLASS = "e-multiple-event-popup";
var POPUP_HEADER_CLASS = "e-popup-header";
var POPUP_HEADER_ICON_WRAPPER = "e-header-icon-wrapper";
var POPUP_CONTENT_CLASS = "e-popup-content";
var POPUP_FOOTER_CLASS = "e-popup-footer";
var DATE_TIME_DETAILS_CLASS = "e-date-time-details";
var RECURRENCE_SUMMARY_CLASS = "e-recurrence-summary";
var QUICK_POPUP_EVENT_DETAILS_CLASS = "e-event-details";
var EVENT_CREATE_CLASS = "e-event-create";
var EDIT_EVENT_CLASS = "e-event-edit";
var DELETE_EVENT_CLASS = "e-event-delete";
var TEXT_ELLIPSIS = "e-text-ellipsis";
var MORE_POPUP_WRAPPER_CLASS = "e-more-popup-wrapper";
var MORE_EVENT_POPUP_CLASS = "e-more-event-popup";
var MORE_EVENT_HEADER_CLASS = "e-more-event-header";
var MORE_EVENT_DATE_HEADER_CLASS = "e-more-event-date-header";
var MORE_EVENT_HEADER_DAY_CLASS = "e-header-day";
var MORE_EVENT_HEADER_DATE_CLASS = "e-header-date";
var MORE_EVENT_CLOSE_CLASS = "e-more-event-close";
var MORE_EVENT_CONTENT_CLASS = "e-more-event-content";
var MORE_EVENT_WRAPPER_CLASS = "e-more-appointment-wrapper";
var QUICK_DIALOG_CLASS = "e-quick-dialog";
var QUICK_DIALOG_OCCURRENCE_CLASS = "e-quick-dialog-occurrence-event";
var QUICK_DIALOG_SERIES_CLASS = "e-quick-dialog-series-event";
var QUICK_DIALOG_FOLLOWING_EVENTS_CLASS = "e-quick-dialog-following-events";
var FOLLOWING_EVENTS_DIALOG = "e-following-events-dialog";
var QUICK_DIALOG_DELETE_CLASS = "e-quick-dialog-delete";
var QUICK_DIALOG_CANCEL_CLASS = "e-quick-dialog-cancel";
var QUICK_DIALOG_ALERT_OK = "e-quick-alertok";
var QUICK_DIALOG_ALERT_CANCEL = "e-quick-alertcancel";
var QUICK_DIALOG_ALERT_FOLLOWING = "e-quick-alertfollowing";
var QUICK_DIALOG_ALERT_BTN_CLASS = "e-quick-dialog-alert-btn";
var EVENT_WINDOW_DIALOG_CLASS = "e-schedule-dialog";
var FORM_CONTAINER_CLASS = "e-form-container";
var FORM_CLASS = "e-schedule-form";
var EVENT_WINDOW_ALLDAY_TZ_DIV_CLASS = "e-all-day-time-zone-row";
var EVENT_WINDOW_ALL_DAY_CLASS = "e-all-day";
var TIME_ZONE_CLASS = "e-time-zone";
var TIME_ZONE_ICON_CLASS = "e-time-zone-icon";
var TIME_ZONE_DETAILS_CLASS = "e-time-zone-details";
var EVENT_WINDOW_REPEAT_DIV_CLASS = "e-repeat-parent-row";
var EVENT_WINDOW_REPEAT_CLASS = "e-repeat";
var EVENT_WINDOW_TITLE_LOCATION_DIV_CLASS = "e-title-location-row";
var SUBJECT_CLASS = "e-subject";
var LOCATION_CLASS = "e-location";
var LOCATION_ICON_CLASS = "e-location-icon";
var LOCATION_DETAILS_CLASS = "e-location-details";
var EVENT_WINDOW_START_END_DIV_CLASS = "e-start-end-row";
var EVENT_WINDOW_START_CLASS = "e-start";
var EVENT_WINDOW_END_CLASS = "e-end";
var EVENT_WINDOW_RESOURCES_DIV_CLASS = "e-resources-row";
var DESCRIPTION_CLASS = "e-description";
var DESCRIPTION_ICON_CLASS = "e-description-icon";
var DESCRIPTION_DETAILS_CLASS = "e-description-details";
var EVENT_WINDOW_TIME_ZONE_DIV_CLASS = "e-time-zone-row";
var EVENT_WINDOW_START_TZ_CLASS = "e-start-time-zone";
var EVENT_WINDOW_END_TZ_CLASS = "e-end-time-zone";
var EVENT_WINDOW_BACK_ICON_CLASS = "e-back-icon";
var EVENT_WINDOW_SAVE_ICON_CLASS = "e-save-icon";
var EVENT_WINDOW_CANCEL_BUTTON_CLASS = "e-event-cancel";
var EVENT_WINDOW_SAVE_BUTTON_CLASS = "e-event-save";
var EVENT_WINDOW_DIALOG_PARENT_CLASS = "e-dialog-parent";
var EVENT_WINDOW_TITLE_TEXT_CLASS = "e-title-text";
var EVENT_WINDOW_ICON_DISABLE_CLASS = "e-icon-disable";
var EDIT_CLASS = "e-edit";
var EDIT_ICON_CLASS = "e-edit-icon";
var DELETE_CLASS = "e-delete";
var DELETE_ICON_CLASS = "e-delete-icon";
var CLOSE_CLASS = "e-close";
var CLOSE_ICON_CLASS = "e-close-icon";
var ERROR_VALIDATION_CLASS = "e-schedule-error";
var EVENT_TOOLTIP_ROOT_CLASS = "e-schedule-event-tooltip";
var ALLDAY_ROW_ANIMATE_CLASS = "e-animate";
var TIMESCALE_DISABLE = "e-timescale-disable";
var DISABLE_DATE = "e-disable-date";
var HIDDEN_CLASS = "e-hidden";
var DISABLE_DATES = "e-disable-dates";
var POPUP_WRAPPER_CLASS = "e-quick-popup-wrapper";
var POPUP_TABLE_CLASS = "e-popup-table";
var RESOURCE_MENU = "e-resource-menu";
var RESOURCE_MENU_ICON = "e-icon-menu";
var RESOURCE_LEVEL_TITLE = "e-resource-level-title";
var RESOURCE_TREE = "e-resource-tree";
var RESOURCE_TREE_POPUP_OVERLAY = "e-resource-tree-popup-overlay";
var RESOURCE_TREE_POPUP = "e-resource-tree-popup";
var RESOURCE_CLASS = "e-resource";
var RESOURCE_ICON_CLASS = "e-resource-icon";
var RESOURCE_DETAILS_CLASS = "e-resource-details";
var DATE_TIME_ICON_CLASS = "e-date-time-icon";
var VIRTUAL_SCROLL_CLASS = "e-virtual-scroll";
var ICON_DISABLE_CLASS = "e-icon-disable";
var AUTO_HEIGHT = "e-auto-height";
var IGNORE_WHITESPACE = "e-ignore-whitespace";
var EVENT_TEMPLATE = "e-template";
var READ_ONLY = "e-read-only";
var MONTH_HEADER_WRAPPER = "e-month-header-wrapper";
var INLINE_SUBJECT_CLASS = "e-inline-subject";
var INLINE_APPOINTMENT_CLASS = "e-inline-appointment";
var SCROLL_HIDDEN = "e-scroll-hidden";
var ALLDAY_APPOINTMENT_SCROLL = "e-all-day-scroll";
var ALLDAY_APPOINTMENT_AUTO = "e-all-day-auto";

// node_modules/@syncfusion/ej2-schedule/src/schedule/renderer/header-renderer.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var HeaderRenderer = (
  /** @class */
  function() {
    function HeaderRenderer2(parent) {
      this.parent = parent;
      this.l10n = this.parent.localeObj;
      this.renderHeader();
      this.addEventListener();
    }
    HeaderRenderer2.prototype.addEventListener = function() {
      this.parent.on(documentClick, this.closeHeaderPopup, this);
    };
    HeaderRenderer2.prototype.removeEventListener = function() {
      this.parent.off(documentClick, this.closeHeaderPopup);
    };
    HeaderRenderer2.prototype.closeHeaderPopup = function(e) {
      var closestEle = closest(e.event.target, ".e-date-range,.e-header-popup,.e-day,.e-selected");
      var closestPop = closest(e.event.target, ".e-hor-nav,.e-toolbar-pop");
      var contentWrap = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
      if (this.parent.isAdaptive) {
        if (!isNullOrUndefined(closestPop) && (closestPop.classList.contains("e-toolbar-pop") || closestPop.classList.contains("e-hor-nav")) && !(closestPop.classList.contains("e-hor-nav") && this.element.querySelector(".e-toolbar-pop").classList.contains(POPUP_OPEN))) {
          addClass([contentWrap], SCROLL_HIDDEN);
        } else {
          removeClass([contentWrap], SCROLL_HIDDEN);
          var popupEle = this.element.querySelector(".e-toolbar-pop");
          if (!isNullOrUndefined(popupEle)) {
            var popupObj = popupEle.ej2_instances[0];
            if (popupObj && !(!isNullOrUndefined(closestPop) && closestPop.classList.contains("e-hor-nav") && popupEle.classList.contains(POPUP_OPEN))) {
              popupObj.hide();
            }
          }
        }
      }
      if (!isNullOrUndefined(closestEle)) {
        return;
      }
      this.hideHeaderPopup();
    };
    HeaderRenderer2.prototype.hideHeaderPopup = function() {
      if (this.headerPopup) {
        this.headerPopup.hide();
      }
    };
    HeaderRenderer2.prototype.renderHeader = function() {
      this.element = createElement("div", { className: TOOLBAR_CONTAINER });
      var toolbarEle = createElement("div", { className: HEADER_TOOLBAR });
      this.element.appendChild(toolbarEle);
      this.parent.element.insertBefore(this.element, this.parent.element.firstElementChild);
      this.renderToolbar();
    };
    HeaderRenderer2.prototype.renderToolbar = function() {
      var _this = this;
      var items = this.parent.toolbarItems && this.parent.toolbarItems.length > 0 ? this.getToolbarItems() : this.getItems();
      this.parent.trigger(actionBegin, { requestType: "toolbarItemRendering", items }, function(args) {
        _this.toolbarObj = new Toolbar({
          items: args.items,
          overflowMode: "Popup",
          clicked: _this.toolbarClickHandler.bind(_this),
          enableRtl: _this.parent.enableRtl,
          enableHtmlSanitizer: _this.parent.enableHtmlSanitizer,
          locale: _this.parent.locale
        });
        _this.toolbarObj.root = _this.parent.root ? _this.parent.root : _this.parent;
        _this.toolbarObj.appendTo(_this.parent.element.querySelector("." + HEADER_TOOLBAR));
        _this.toolbarObj.element.setAttribute("aria-label", "Scheduler");
        var prevNavEle = _this.toolbarObj.element.querySelector(".e-prev");
        if (prevNavEle) {
          prevNavEle.firstElementChild.setAttribute("title", _this.l10n.getConstant("previous"));
        }
        var nextNavEle = _this.toolbarObj.element.querySelector(".e-next");
        if (nextNavEle) {
          nextNavEle.firstElementChild.setAttribute("title", _this.l10n.getConstant("next"));
        }
        _this.updateAddIcon();
        _this.updateActiveView();
        _this.parent.trigger(actionComplete, { requestType: "toolBarItemRendered", items: _this.toolbarObj.items });
      });
    };
    HeaderRenderer2.prototype.updateItems = function() {
      var _this = this;
      if (this.toolbarObj) {
        var items = this.getItems();
        this.parent.trigger(actionBegin, { requestType: "toolbarItemRendering", items }, function(args) {
          _this.toolbarObj.items = args.items;
          _this.toolbarObj.dataBind();
          _this.parent.trigger(actionComplete, { requestType: "toolBarItemRendered", items: _this.toolbarObj.items });
        });
      }
    };
    HeaderRenderer2.prototype.getPopUpRelativeElement = function() {
      if (this.parent.isAdaptive) {
        return this.toolbarObj.element;
      }
      return this.element.querySelector(".e-date-range");
    };
    HeaderRenderer2.prototype.setDayOfWeek = function(index) {
      if (this.headerCalendar) {
        this.headerCalendar.firstDayOfWeek = index;
        this.headerCalendar.dataBind();
      }
    };
    HeaderRenderer2.prototype.setCalendarDate = function(date) {
      if (this.headerCalendar) {
        this.headerCalendar.value = date;
        this.headerCalendar.dataBind();
      }
    };
    HeaderRenderer2.prototype.setCalendarMinMaxDate = function() {
      if (this.headerCalendar) {
        this.headerCalendar.min = this.parent.minDate;
        this.headerCalendar.max = this.parent.maxDate;
        this.headerCalendar.dataBind();
      }
    };
    HeaderRenderer2.prototype.getCalendarView = function() {
      if (["Month", "MonthAgenda", "TimelineMonth"].indexOf(this.parent.currentView) > -1) {
        return "Year";
      } else if (["Year", "TimelineYear"].indexOf(this.parent.currentView) > -1) {
        return "Decade";
      } else {
        return "Month";
      }
    };
    HeaderRenderer2.prototype.setCalendarView = function() {
      if (this.headerCalendar) {
        var calendarView = this.getCalendarView();
        this.headerCalendar.depth = calendarView;
        this.headerCalendar.start = calendarView;
        this.headerCalendar.refresh();
      }
    };
    HeaderRenderer2.prototype.updateActiveView = function() {
      var selEle = [].slice.call(this.toolbarObj.element.querySelectorAll(".e-views"));
      removeClass(selEle, ["e-active-view"]);
      if (selEle.length > 0 && selEle[this.parent.viewIndex]) {
        addClass([selEle[this.parent.viewIndex]], ["e-active-view"]);
      }
    };
    HeaderRenderer2.prototype.updateDateRange = function(date) {
      var selEle = this.toolbarObj.element.querySelector(".e-date-range");
      if (!selEle) {
        return;
      }
      selEle.firstElementChild.setAttribute("aria-haspopup", "true");
      var textEle = selEle.querySelector(".e-tbar-btn-text");
      if (this.parent.activeViewOptions.dateRangeTemplate) {
        textEle.textContent = "";
        var args = {
          startDate: this.parent.activeView.getStartDate(),
          endDate: this.parent.activeView.getEndDate(),
          currentView: this.parent.currentView
        };
        var viewName = this.parent.activeViewOptions.dateRangeTemplateName;
        var templateId = this.parent.element.id + "_" + viewName + "dateRangeTemplate";
        var dateTemplate = [].slice.call(this.parent.getDateRangeTemplate()(args, this.parent, "dateRangeTemplate", templateId, false, void 0, void 0, this.parent.root));
        append(dateTemplate, textEle);
      } else {
        var text = this.parent.activeView.getDateRangeText(date);
        selEle.firstElementChild.setAttribute("aria-label", text);
        textEle.textContent = text;
      }
      this.refresh();
    };
    HeaderRenderer2.prototype.refresh = function() {
      if (this.toolbarObj) {
        this.toolbarObj.refreshOverflow();
      }
    };
    HeaderRenderer2.prototype.updateAddIcon = function() {
      var addEle = this.toolbarObj.element.querySelector(".e-add");
      if (addEle) {
        if (!this.parent.eventSettings.allowAdding) {
          addClass([addEle], HIDDEN_CLASS);
        } else {
          removeClass([addEle], HIDDEN_CLASS);
        }
      }
    };
    HeaderRenderer2.prototype.getDateRangeText = function() {
      var dateString = this.parent.globalize.formatDate(this.parent.selectedDate, {
        format: "MMMM y",
        calendar: this.parent.getCalendarMode()
      });
      return capitalizeFirstWord(dateString, "single");
    };
    HeaderRenderer2.prototype.getItemModel = function(propItem) {
      var item = {};
      if (propItem.id) {
        item.id = propItem.id;
      }
      if (propItem.text) {
        item.text = propItem.text;
      }
      if (propItem.tooltipText) {
        item.tooltipText = propItem.tooltipText;
      }
      if (propItem.prefixIcon) {
        item.prefixIcon = propItem.prefixIcon;
      }
      if (propItem.cssClass) {
        item.cssClass = propItem.cssClass;
      }
      if (propItem.showTextOn !== "Both") {
        item.showTextOn = propItem.showTextOn;
      }
      if (propItem.template) {
        item.template = propItem.template;
      }
      if (propItem.disabled) {
        item.disabled = propItem.disabled;
      }
      if (propItem.width !== "auto") {
        item.width = propItem.width;
      }
      if (propItem.suffixIcon) {
        item.suffixIcon = propItem.suffixIcon;
      }
      if (propItem.align !== "Left") {
        item.align = propItem.align;
      }
      if (propItem.overflow !== "None") {
        item.overflow = propItem.overflow;
      }
      if (propItem.htmlAttributes) {
        item.htmlAttributes = propItem.htmlAttributes;
      }
      if (propItem.type !== "Button") {
        item.type = propItem.type;
      }
      if (propItem.visible !== true) {
        item.visible = propItem.visible;
      }
      if (propItem.showAlwaysInPopup) {
        item.showAlwaysInPopup = propItem.showAlwaysInPopup;
      }
      if (propItem.tabIndex !== -1) {
        item.tabIndex = propItem.tabIndex;
      }
      return item;
    };
    HeaderRenderer2.prototype.getToolbarItems = function() {
      var items = [];
      var propItem;
      for (var _i = 0, _a = this.parent.toolbarItems; _i < _a.length; _i++) {
        var item = _a[_i];
        propItem = this.getItemModel(item);
        var tbItem = void 0;
        if (item.name) {
          switch (item.name) {
            case "Today":
              tbItem = {
                showAlwaysInPopup: this.parent.isAdaptive || this.parent.enableAdaptiveUI,
                prefixIcon: "e-icon-today",
                text: this.l10n.getConstant("today"),
                cssClass: "e-today",
                overflow: "Show"
              };
              tbItem.align = propItem.align ? propItem.align : item.align;
              items.push(__assign({}, tbItem, propItem));
              break;
            case "Previous":
              tbItem = {
                prefixIcon: "e-icon-prev",
                tooltipText: "Previous",
                overflow: "Show",
                cssClass: "e-prev",
                htmlAttributes: { "role": "navigation" }
              };
              tbItem.align = propItem.align ? propItem.align : item.align;
              items.push(__assign({}, tbItem, propItem));
              break;
            case "Next":
              tbItem = {
                prefixIcon: "e-icon-next",
                tooltipText: "Next",
                overflow: "Show",
                cssClass: "e-next",
                htmlAttributes: { "role": "navigation" }
              };
              tbItem.align = propItem.align ? propItem.align : item.align;
              items.push(__assign({}, tbItem, propItem));
              break;
            case "DateRangeText":
              tbItem = {
                text: this.getDateRangeText(),
                suffixIcon: "e-icon-down-arrow",
                cssClass: "e-date-range",
                overflow: "Show",
                htmlAttributes: { "aria-atomic": "true", "aria-live": "assertive", "role": "navigation" }
              };
              tbItem.align = propItem.align ? propItem.align : item.align;
              items.push(__assign({}, tbItem, propItem));
              break;
            case "NewEvent":
              tbItem = {
                showAlwaysInPopup: this.parent.isAdaptive || this.parent.enableAdaptiveUI,
                prefixIcon: "e-icon-add",
                text: this.l10n.getConstant("newEvent"),
                cssClass: "e-add",
                overflow: "Show"
              };
              tbItem.align = propItem.align ? propItem.align : item.align;
              items.push(__assign({}, tbItem, propItem));
              break;
            case "Views":
              if (!isNullOrUndefined(this.parent.views) && this.parent.views.length > 1) {
                for (var _b = 0, _c = this.parent.views; _b < _c.length; _b++) {
                  var view = _c[_b];
                  tbItem = this.getItemObject(view);
                  tbItem.align = propItem.align ? propItem.align : item.align;
                  items.push(__assign({}, tbItem, propItem));
                }
              }
              break;
            case "Custom":
              items.push(item);
              break;
          }
        } else {
          items.push(item);
        }
      }
      return items;
    };
    HeaderRenderer2.prototype.getItems = function() {
      var items = [];
      items.push({
        align: "Left",
        prefixIcon: "e-icon-prev",
        tooltipText: "Previous",
        overflow: "Show",
        cssClass: "e-prev"
      });
      items.push({
        align: "Left",
        prefixIcon: "e-icon-next",
        tooltipText: "Next",
        overflow: "Show",
        cssClass: "e-next"
      });
      items.push({
        align: "Left",
        text: this.getDateRangeText(),
        suffixIcon: "e-icon-down-arrow",
        cssClass: "e-date-range",
        overflow: "Show",
        htmlAttributes: { "aria-atomic": "true", "aria-live": "assertive" }
      });
      if (this.parent.isAdaptive || this.parent.enableAdaptiveUI) {
        items.push({
          align: "Right",
          showAlwaysInPopup: this.parent.isAdaptive || this.parent.enableAdaptiveUI,
          prefixIcon: "e-icon-add",
          text: this.l10n.getConstant("newEvent"),
          cssClass: "e-add",
          overflow: "Show"
        });
        items.push({
          align: "Right",
          showAlwaysInPopup: this.parent.isAdaptive || this.parent.enableAdaptiveUI,
          prefixIcon: "e-icon-today",
          text: this.l10n.getConstant("today"),
          cssClass: "e-today",
          overflow: "Show"
        });
      } else {
        items.push({
          align: "Right",
          showAlwaysInPopup: this.parent.isAdaptive || this.parent.enableAdaptiveUI,
          prefixIcon: "e-icon-today",
          text: this.l10n.getConstant("today"),
          cssClass: "e-today",
          overflow: "Show"
        });
        if (!isNullOrUndefined(this.parent.views) && this.parent.views.length > 1) {
          items.push({ align: "Right", type: "Separator", cssClass: "e-schedule-seperator" });
        }
      }
      if (!isNullOrUndefined(this.parent.views) && this.parent.views.length > 1) {
        for (var _i = 0, _a = this.parent.views; _i < _a.length; _i++) {
          var item = _a[_i];
          items.push(this.getItemObject(item));
        }
      }
      return items;
    };
    HeaderRenderer2.prototype.getItemObject = function(item) {
      var viewName;
      var displayName;
      if (typeof item === "string") {
        viewName = item.toLowerCase();
        displayName = null;
      } else {
        viewName = item.option.toLowerCase();
        displayName = item.displayName;
      }
      var view;
      var orientationClass;
      var isItemInsidePopup = this.parent.isAdaptive || this.parent.enableAdaptiveUI;
      switch (viewName) {
        case "day":
          view = {
            align: "Right",
            showAlwaysInPopup: isItemInsidePopup,
            prefixIcon: "e-icon-day",
            text: displayName || this.l10n.getConstant("day"),
            cssClass: "e-views e-day"
          };
          break;
        case "week":
          view = {
            align: "Right",
            showAlwaysInPopup: isItemInsidePopup,
            prefixIcon: "e-icon-week",
            text: displayName || this.l10n.getConstant("week"),
            cssClass: "e-views e-week"
          };
          break;
        case "workweek":
          view = {
            align: "Right",
            showAlwaysInPopup: isItemInsidePopup,
            prefixIcon: "e-icon-workweek",
            text: displayName || this.l10n.getConstant("workWeek"),
            cssClass: "e-views e-work-week"
          };
          break;
        case "month":
          view = {
            align: "Right",
            showAlwaysInPopup: isItemInsidePopup,
            prefixIcon: "e-icon-month",
            text: displayName || this.l10n.getConstant("month"),
            cssClass: "e-views e-month"
          };
          break;
        case "year":
          view = {
            align: "Right",
            showAlwaysInPopup: isItemInsidePopup,
            prefixIcon: "e-icon-year",
            text: displayName || this.l10n.getConstant("year"),
            cssClass: "e-views e-year"
          };
          break;
        case "agenda":
          view = {
            align: "Right",
            showAlwaysInPopup: isItemInsidePopup,
            prefixIcon: "e-icon-agenda",
            text: displayName || this.l10n.getConstant("agenda"),
            cssClass: "e-views e-agenda"
          };
          break;
        case "monthagenda":
          view = {
            align: "Right",
            showAlwaysInPopup: isItemInsidePopup,
            prefixIcon: "e-icon-month-agenda",
            text: displayName || this.l10n.getConstant("monthAgenda"),
            cssClass: "e-views e-month-agenda"
          };
          break;
        case "timelineday":
          view = {
            align: "Right",
            showAlwaysInPopup: isItemInsidePopup,
            prefixIcon: "e-icon-timeline-day",
            text: displayName || this.l10n.getConstant("timelineDay"),
            cssClass: "e-views e-timeline-day"
          };
          break;
        case "timelineweek":
          view = {
            align: "Right",
            showAlwaysInPopup: isItemInsidePopup,
            prefixIcon: "e-icon-timeline-week",
            text: displayName || this.l10n.getConstant("timelineWeek"),
            cssClass: "e-views e-timeline-week"
          };
          break;
        case "timelineworkweek":
          view = {
            align: "Right",
            showAlwaysInPopup: isItemInsidePopup,
            prefixIcon: "e-icon-timeline-workweek",
            text: displayName || this.l10n.getConstant("timelineWorkWeek"),
            cssClass: "e-views e-timeline-work-week"
          };
          break;
        case "timelinemonth":
          view = {
            align: "Right",
            showAlwaysInPopup: isItemInsidePopup,
            prefixIcon: "e-icon-timeline-month",
            text: displayName || this.l10n.getConstant("timelineMonth"),
            cssClass: "e-views e-timeline-month"
          };
          break;
        case "timelineyear":
          orientationClass = item.orientation === "Vertical" ? "vertical" : "horizontal";
          view = {
            align: "Right",
            showAlwaysInPopup: isItemInsidePopup,
            prefixIcon: "e-icon-timeline-year-" + orientationClass,
            text: displayName || this.l10n.getConstant("timelineYear"),
            cssClass: "e-views e-timeline-year"
          };
          break;
      }
      return view;
    };
    HeaderRenderer2.prototype.renderHeaderPopup = function() {
      var headerPopupEle = createElement("div", { className: HEADER_POPUP_CLASS });
      var headerCalendarEle = createElement("div", { className: HEADER_CALENDAR_CLASS });
      headerPopupEle.appendChild(headerCalendarEle);
      this.element.appendChild(headerPopupEle);
      this.headerPopup = new Popup(headerPopupEle, {
        actionOnScroll: "hide",
        targetType: "relative",
        relateTo: this.getPopUpRelativeElement(),
        position: { X: "left", Y: "bottom" },
        enableRtl: this.parent.enableRtl
      });
      var calendarView = this.getCalendarView();
      var isDisplayDate = this.parent.currentView === "Month" && !isNullOrUndefined(this.parent.activeViewOptions.displayDate) && !this.hasSelectedDate();
      this.headerCalendar = new Calendar({
        value: isDisplayDate ? this.parent.activeViewOptions.displayDate : this.parent.selectedDate,
        min: this.parent.minDate,
        max: this.parent.maxDate,
        firstDayOfWeek: this.parent.activeViewOptions.firstDayOfWeek,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        depth: calendarView,
        start: calendarView,
        calendarMode: this.parent.calendarMode,
        change: this.calendarChange.bind(this)
      });
      this.setCalendarTimezone();
      this.headerCalendar.appendTo(headerCalendarEle);
      this.headerPopup.hide();
    };
    HeaderRenderer2.prototype.calendarChange = function(args) {
      if (args.value.getTime() !== this.parent.selectedDate.getTime()) {
        var calendarDate = resetTime(new Date(args.value));
        this.parent.changeDate(calendarDate);
      }
      this.headerPopup.hide();
    };
    HeaderRenderer2.prototype.setCalendarTimezone = function() {
      if (this.headerCalendar) {
        this.headerCalendar.timezone = this.parent.timezone || this.parent.tzModule.getLocalTimezoneName();
      }
    };
    HeaderRenderer2.prototype.calculateViewIndex = function(args) {
      var target = closest(args.originalEvent.target, ".e-views");
      var views = [].slice.call(this.element.querySelectorAll(".e-views"));
      return views.indexOf(target);
    };
    HeaderRenderer2.prototype.toolbarClickHandler = function(args) {
      if (!args.item) {
        return;
      }
      var strClass = args.item.cssClass.replace("e-views ", "");
      var data;
      var isSameTime;
      var currentTime;
      switch (strClass) {
        case "e-date-range":
          if (!this.headerPopup) {
            this.renderHeaderPopup();
          }
          if (this.headerPopup.element.classList.contains(POPUP_OPEN)) {
            this.headerPopup.hide();
          } else {
            this.headerPopup.show();
          }
          break;
        case "e-day":
          this.parent.changeView("Day", args.originalEvent, void 0, this.calculateViewIndex(args));
          break;
        case "e-week":
          this.parent.changeView("Week", args.originalEvent, void 0, this.calculateViewIndex(args));
          break;
        case "e-work-week":
          this.parent.changeView("WorkWeek", args.originalEvent, void 0, this.calculateViewIndex(args));
          break;
        case "e-month":
          this.parent.changeView("Month", args.originalEvent, void 0, this.calculateViewIndex(args));
          break;
        case "e-year":
          this.parent.changeView("Year", args.originalEvent, void 0, this.calculateViewIndex(args));
          break;
        case "e-agenda":
          this.parent.changeView("Agenda", args.originalEvent, void 0, this.calculateViewIndex(args));
          break;
        case "e-month-agenda":
          this.parent.changeView("MonthAgenda", args.originalEvent, void 0, this.calculateViewIndex(args));
          break;
        case "e-timeline-day":
          this.parent.changeView("TimelineDay", args.originalEvent, void 0, this.calculateViewIndex(args));
          break;
        case "e-timeline-week":
          this.parent.changeView("TimelineWeek", args.originalEvent, void 0, this.calculateViewIndex(args));
          break;
        case "e-timeline-work-week":
          this.parent.changeView("TimelineWorkWeek", args.originalEvent, void 0, this.calculateViewIndex(args));
          break;
        case "e-timeline-month":
          this.parent.changeView("TimelineMonth", args.originalEvent, void 0, this.calculateViewIndex(args));
          break;
        case "e-timeline-year":
          this.parent.changeView("TimelineYear", args.originalEvent, void 0, this.calculateViewIndex(args));
          break;
        case "e-today":
          currentTime = resetTime(this.parent.getCurrentTime());
          if (this.parent.currentView === "Agenda" || this.parent.currentView === "MonthAgenda" || !this.parent.isSelectedDate(currentTime) || this.parent.currentView === "Month" && this.parent.activeViewOptions.displayDate && !this.hasSelectedDate() && resetTime(this.parent.activeViewOptions.displayDate) !== currentTime || this.parent.currentView === "Month" && this.parent.activeViewOptions.numberOfWeeks > 0 && !this.hasSelectedDate() && resetTime(firstDateOfMonth(this.parent.selectedDate)) !== currentTime) {
            this.parent.changeDate(currentTime, args.originalEvent);
          }
          break;
        case "e-prev":
          this.parent.changeDate(this.parent.activeView.getNextPreviousDate("previous"), args.originalEvent);
          break;
        case "e-next":
          this.parent.changeDate(this.parent.activeView.getNextPreviousDate("next"), args.originalEvent);
          break;
        case "e-add":
          isSameTime = this.parent.activeCellsData.startTime.getTime() === this.parent.activeCellsData.endTime.getTime();
          if (this.parent.activeCellsData && !isSameTime) {
            data = this.parent.activeCellsData;
          } else {
            var interval = this.parent.activeViewOptions.timeScale.interval;
            var slotCount = this.parent.activeViewOptions.timeScale.slotCount;
            var msInterval = interval * MS_PER_MINUTE / slotCount;
            var startTime = new Date(this.parent.selectedDate.getTime());
            var currentTime_1 = this.parent.getCurrentTime();
            startTime.setHours(currentTime_1.getHours(), Math.round(startTime.getMinutes() / msInterval) * msInterval, 0);
            var endTime = new Date(new Date(startTime.getTime()).setMilliseconds(startTime.getMilliseconds() + msInterval));
            data = { startTime, endTime, isAllDay: false };
          }
          this.parent.eventWindow.openEditor(extend(data, { cancel: false, event: args.originalEvent }), "Add");
          break;
      }
      if (isNullOrUndefined(this.toolbarObj)) {
        return;
      }
      var toolbarPopUp = this.toolbarObj.element.querySelector(".e-toolbar-pop");
      if (toolbarPopUp && args.item.type !== "Input") {
        toolbarPopUp.ej2_instances[0].hide({ name: "SlideUp", duration: 100 });
      }
    };
    HeaderRenderer2.prototype.hasSelectedDate = function() {
      var selectedTime = resetTime(this.parent.selectedDate).getTime();
      return selectedTime >= this.parent.activeView.getStartDate().getTime() && selectedTime <= this.parent.activeView.getEndDate().getTime();
    };
    HeaderRenderer2.prototype.getHeaderElement = function() {
      return this.toolbarObj.element;
    };
    HeaderRenderer2.prototype.updateHeaderItems = function(classType) {
      var prevNavEle = this.toolbarObj.element.querySelector(".e-prev");
      var nextNavEle = this.toolbarObj.element.querySelector(".e-next");
      var dateRangeEle = this.toolbarObj.element.querySelector(".e-date-range");
      if (prevNavEle) {
        if (classType === "add") {
          addClass([prevNavEle], HIDDEN_CLASS);
        } else {
          removeClass([prevNavEle], HIDDEN_CLASS);
        }
      }
      if (nextNavEle) {
        if (classType === "add") {
          addClass([nextNavEle], HIDDEN_CLASS);
        } else {
          removeClass([nextNavEle], HIDDEN_CLASS);
        }
      }
      if (dateRangeEle) {
        if (classType === "add") {
          addClass([dateRangeEle], TEXT_ELLIPSIS);
        } else {
          removeClass([dateRangeEle], TEXT_ELLIPSIS);
        }
      }
    };
    HeaderRenderer2.prototype.previousNextIconHandler = function() {
      var dates = this.parent.currentView === "Agenda" ? [this.parent.getCurrentViewDates()[0]] : this.parent.getCurrentViewDates();
      var prevNavEle = this.toolbarObj.element.querySelector("." + PREVIOUS_DATE_CLASS);
      var nextNavEle = this.toolbarObj.element.querySelector("." + NEXT_DATE_CLASS);
      var firstDate = new Date(dates[0].getTime());
      var lastDate = new Date(dates[dates.length - 1].getTime());
      if (this.parent.currentView === "WorkWeek" || this.parent.currentView === "TimelineWorkWeek") {
        firstDate = getWeekFirstDate(resetTime(this.parent.selectedDate), this.parent.firstDayOfWeek);
        lastDate = addDays(firstDate, 7 * this.parent.activeViewOptions.interval);
      } else if (this.parent.currentView === "Month") {
        var isCustomMonth = !isNullOrUndefined(this.parent.activeViewOptions.displayDate) || this.parent.activeViewOptions.numberOfWeeks > 0;
        firstDate = isCustomMonth ? this.parent.activeView.getStartDate() : firstDateOfMonth(this.parent.selectedDate);
        lastDate = isCustomMonth ? this.parent.activeView.getEndDate() : lastDateOfMonth(addMonths(firstDate, this.parent.activeViewOptions.interval - 1));
      }
      if (!isNullOrUndefined(prevNavEle)) {
        this.toolbarObj.enableItems(prevNavEle, firstDate > resetTime(this.parent.minDate));
      }
      if (!isNullOrUndefined(nextNavEle)) {
        this.toolbarObj.enableItems(nextNavEle, lastDate < resetTime(this.parent.maxDate));
      }
      this.setCalendarMinMaxDate();
    };
    HeaderRenderer2.prototype.getModuleName = function() {
      return "headerbar";
    };
    HeaderRenderer2.prototype.destroy = function() {
      if (this.headerPopup && !this.headerPopup.isDestroyed) {
        this.headerPopup.destroy();
        this.headerPopup = null;
      }
      if (this.headerCalendar && !this.headerCalendar.isDestroyed) {
        this.headerCalendar.destroy();
        this.headerCalendar = null;
      }
      if (this.toolbarObj && !this.toolbarObj.isDestroyed) {
        this.toolbarObj.destroy();
        this.removeEventListener();
        remove(this.element);
        this.toolbarObj = null;
      }
      this.element = null;
      this.parent = null;
      this.l10n = null;
    };
    return HeaderRenderer2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/actions/scroll.js
var Scroll = (
  /** @class */
  function() {
    function Scroll2(parent) {
      this.parent = parent;
      this.addEventListener();
    }
    Scroll2.prototype.getModuleName = function() {
      return "scroll";
    };
    Scroll2.prototype.setWidth = function() {
      this.parent.element.style.width = formatUnit(this.parent.width);
    };
    Scroll2.prototype.setHeight = function() {
      this.parent.element.style.height = formatUnit(this.parent.height);
    };
    Scroll2.prototype.addEventListener = function() {
      this.parent.on(contentReady, this.setDimensions, this);
      this.parent.on(uiUpdate, this.onPropertyChanged, this);
    };
    Scroll2.prototype.removeEventListener = function() {
      this.parent.off(contentReady, this.setDimensions);
      this.parent.off(uiUpdate, this.onPropertyChanged);
    };
    Scroll2.prototype.setDimensions = function() {
      this.setWidth();
      this.setHeight();
      var data = { cssProperties: this.parent.getCssProperties(), module: this.getModuleName() };
      this.parent.notify(scrollUiUpdate, data);
    };
    Scroll2.prototype.onPropertyChanged = function() {
      this.setDimensions();
    };
    Scroll2.prototype.destroy = function() {
      this.removeEventListener();
    };
    return Scroll2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/actions/touch.js
var ScheduleTouch = (
  /** @class */
  function() {
    function ScheduleTouch2(parent) {
      this.parent = parent;
      this.element = this.parent.element.querySelector("." + TABLE_CONTAINER_CLASS);
      this.touchObj = new Touch(this.element, {
        scroll: this.scrollHandler.bind(this),
        swipe: this.swipeHandler.bind(this),
        tapHold: this.tapHoldHandler.bind(this),
        swipeSettings: { swipeThresholdDistance: 1 }
      });
      EventHandler.add(this.element, "transitionend", this.onTransitionEnd, this);
      this.touchLeftDirection = this.parent.enableRtl ? "Right" : "Left";
      this.touchRightDirection = this.parent.enableRtl ? "Left" : "Right";
    }
    ScheduleTouch2.prototype.scrollHandler = function(e) {
      var blockSwipe = !this.parent.isAdaptive && e.originalEvent && e.originalEvent.target && !isNullOrUndefined(closest(e.originalEvent.target, "." + APPOINTMENT_CLASS));
      this.parent.uiStateValues.isTouchScroll = blockSwipe && e.originalEvent.type === "touchmove" && !this.parent.uiStateValues.action;
      if (blockSwipe || this.parent.currentView === "Agenda" || this.parent.uiStateValues.action || !this.parent.allowSwiping || this.parent.uiStateValues.isTapHold) {
        return;
      }
      if (!this.timeStampStart) {
        this.timeStampStart = Date.now();
      }
      if (this.element.classList.contains(TRANSLATE_CLASS)) {
        this.onTransitionEnd();
      }
      if (e.scrollDirection === "Left" || e.scrollDirection === "Right") {
        var args = { requestType: "dateNavigate", cancel: false, event: e.originalEvent };
        this.parent.trigger(actionBegin, args);
        if (args.cancel) {
          return;
        }
        var scrollDiv = this.element.querySelector("." + CONTENT_WRAP_CLASS);
        if (scrollDiv && scrollDiv.scrollWidth > scrollDiv.clientWidth) {
          return;
        } else {
          this.isScrollTriggered = true;
          e.originalEvent.preventDefault();
          e.originalEvent.stopPropagation();
        }
      }
      if (e.scrollDirection === this.touchLeftDirection) {
        if (!this.nextPanel) {
          this.renderPanel(NEXT_PANEL_CLASS, "next");
          this.nextPanel = {
            element: this.parent.activeView.getPanel(),
            selectedDate: new Date(this.parent.selectedDate.getTime()),
            renderDates: this.parent.activeView.renderDates,
            colLevels: this.parent.activeView.colLevels
          };
          this.setDimensions(this.nextPanel.element);
        }
        var x = this.parent.enableRtl ? e.distanceX : -e.distanceX;
        this.element.style.transform = "translatex(" + (this.getTranslateX(this.element) + x) + "px)";
      } else if (e.scrollDirection === this.touchRightDirection) {
        var prevWidth = 0;
        if (!this.previousPanel) {
          this.renderPanel(PREVIOUS_PANEL_CLASS, "previous");
          this.previousPanel = {
            element: this.parent.activeView.getPanel(),
            selectedDate: new Date(this.parent.selectedDate.getTime()),
            renderDates: this.parent.activeView.renderDates,
            colLevels: this.parent.activeView.colLevels
          };
          this.setDimensions(this.previousPanel.element);
          prevWidth = this.previousPanel.element.offsetWidth;
        }
        var x = this.parent.enableRtl ? prevWidth - e.distanceX : -prevWidth + e.distanceX;
        this.element.style.transform = "translatex(" + (this.getTranslateX(this.element) + x) + "px)";
      }
    };
    ScheduleTouch2.prototype.swipeHandler = function(e) {
      if (!this.isScrollTriggered || this.parent.uiStateValues.action || !this.parent.allowSwiping || this.parent.uiStateValues.isTapHold) {
        return;
      }
      this.isScrollTriggered = false;
      var swipeDate = e.swipeDirection === "Left" ? this.parent.activeView.renderDates[0] : this.parent.activeView.renderDates.slice(-1)[0];
      if (e.swipeDirection === "Left" && swipeDate < this.parent.maxDate || e.swipeDirection === "Right" && swipeDate >= this.parent.minDate) {
        var time = Date.now() - this.timeStampStart;
        var offsetDist = e.distanceX * (Browser.isDevice ? 6 : 1.66);
        if (offsetDist > time || e.distanceX > this.parent.element.offsetWidth / 2) {
          this.swapPanels(e.swipeDirection);
          if (offsetDist > time && e.distanceX > this.parent.element.offsetWidth / 2) {
            this.element.style.transitionDuration = (Browser.isDevice ? e.distanceX : offsetDist) / time / 10 + "s";
          }
          this.confirmSwipe(e.swipeDirection);
        } else {
          this.cancelSwipe();
        }
        var args = { requestType: "dateNavigate", cancel: false, event: e.originalEvent };
        this.parent.trigger(actionComplete, args);
      } else {
        this.cancelSwipe();
      }
      this.timeStampStart = null;
    };
    ScheduleTouch2.prototype.tapHoldHandler = function(e) {
      var target = closest(e.originalEvent.target, "." + APPOINTMENT_CLASS);
      if (!isNullOrUndefined(target)) {
        this.parent.uiStateValues.isTapHold = true;
        if (this.parent.isAdaptive) {
          if (Browser.isIos) {
            EventHandler.add(this.element, "touchend", this.preventEventClick, this);
          }
          this.parent.quickPopup.tapHoldEventPopup(e.originalEvent);
        } else if (["Agenda", "MonthAgenda", "Year"].indexOf(this.parent.currentView) < 0) {
          this.parent.selectedElements = [];
          this.parent.eventBase.getSelectedEventElements(target);
          if (this.parent.resizeModule && closest(e.originalEvent.target, "." + EVENT_RESIZE_CLASS)) {
            this.parent.resizeModule.resizeStart(e.originalEvent);
          }
        }
      }
    };
    ScheduleTouch2.prototype.preventEventClick = function(e) {
      e.preventDefault();
      EventHandler.remove(this.element, "touchend", this.preventEventClick);
    };
    ScheduleTouch2.prototype.renderPanel = function(clsName, nextPrevType) {
      if (!this.currentPanel) {
        this.currentPanel = {
          element: this.parent.activeView.getPanel(),
          selectedDate: new Date(this.parent.selectedDate.getTime()),
          renderDates: this.parent.activeView.renderDates,
          colLevels: this.parent.activeView.colLevels
        };
        this.setDimensions(this.currentPanel.element);
      } else {
        this.parent.setProperties({ selectedDate: this.currentPanel.selectedDate }, true);
      }
      this.parent.setProperties({ selectedDate: this.parent.activeView.getNextPreviousDate(nextPrevType) }, true);
      if (this.parent.headerModule) {
        this.parent.headerModule.setCalendarDate(this.parent.selectedDate);
      }
      this.parent.activeView.getRenderDates();
      this.parent.activeView.renderLayout(clsName);
    };
    ScheduleTouch2.prototype.swapPanels = function(direction) {
      if (direction === this.touchLeftDirection) {
        var temp = this.nextPanel;
        this.nextPanel = this.currentPanel;
        this.currentPanel = temp;
      } else {
        var temp = this.previousPanel;
        this.previousPanel = this.currentPanel;
        this.currentPanel = temp;
      }
    };
    ScheduleTouch2.prototype.confirmSwipe = function(swipeDirection) {
      var _this = this;
      var previousDate = swipeDirection === this.touchLeftDirection ? this.nextPanel.selectedDate : this.previousPanel.selectedDate;
      var args = {
        action: "date",
        cancel: false,
        previousDate,
        currentDate: this.currentPanel.selectedDate
      };
      this.parent.trigger(navigating, args, function(navArgs) {
        if (navArgs.cancel) {
          _this.swapPanels(swipeDirection);
          _this.cancelSwipe();
        } else {
          _this.parent.activeView.setPanel(_this.currentPanel.element);
          _this.parent.setProperties({ selectedDate: _this.currentPanel.selectedDate }, true);
          var translateX = void 0;
          if (_this.parent.enableRtl) {
            translateX = swipeDirection === _this.touchLeftDirection ? _this.previousPanel ? _this.previousPanel.element.offsetLeft : _this.currentPanel.element.offsetWidth : 0;
          } else {
            translateX = swipeDirection === _this.touchLeftDirection ? -_this.currentPanel.element.offsetLeft : 0;
          }
          _this.parent.activeView.renderDates = _this.currentPanel.renderDates;
          _this.parent.activeView.colLevels = _this.currentPanel.colLevels;
          addClass([_this.element], TRANSLATE_CLASS);
          _this.element.style.transform = "translatex(" + translateX + "px)";
          if (_this.parent.headerModule) {
            _this.parent.headerModule.updateDateRange();
          }
          _this.parent.renderTemplates();
          _this.parent.crudModule.refreshDataManager();
        }
      });
    };
    ScheduleTouch2.prototype.cancelSwipe = function() {
      this.parent.activeView.setPanel(this.currentPanel.element);
      this.parent.setProperties({ selectedDate: this.currentPanel.selectedDate }, true);
      this.parent.activeView.renderDates = this.currentPanel.renderDates;
      this.parent.activeView.colLevels = this.currentPanel.colLevels;
      addClass([this.element], TRANSLATE_CLASS);
      var prevWidth = this.previousPanel ? this.previousPanel.element.offsetWidth : 0;
      this.element.style.transform = "translatex(" + (this.parent.enableRtl ? prevWidth : -this.currentPanel.element.offsetLeft) + "px)";
    };
    ScheduleTouch2.prototype.onTransitionEnd = function() {
      removeClass([this.element], TRANSLATE_CLASS);
      this.element.style.transitionDuration = "";
      this.element.style.transform = "";
      if (this.previousPanel) {
        remove(this.previousPanel.element);
        this.previousPanel = null;
        removeClass([this.currentPanel.element], PREVIOUS_PANEL_CLASS);
        addClass([this.currentPanel.element], CURRENT_PANEL_CLASS);
      }
      if (this.nextPanel) {
        remove(this.nextPanel.element);
        this.nextPanel = null;
        removeClass([this.currentPanel.element], NEXT_PANEL_CLASS);
        addClass([this.currentPanel.element], CURRENT_PANEL_CLASS);
      }
      this.currentPanel = null;
      this.parent.activeView.getPanel().style.width = "";
    };
    ScheduleTouch2.prototype.getTranslateX = function(element) {
      var style = window.getComputedStyle(element);
      return new WebKitCSSMatrix(style.webkitTransform).m41;
    };
    ScheduleTouch2.prototype.setDimensions = function(element) {
      element.style.width = this.parent.element.clientWidth + "px";
    };
    ScheduleTouch2.prototype.resetValues = function() {
      this.currentPanel = null;
      this.previousPanel = null;
      this.nextPanel = null;
      this.timeStampStart = null;
      this.element.style.transform = "";
      this.element.style.transitionDuration = "";
      removeChildren(this.element);
      removeClass([this.element], TRANSLATE_CLASS);
    };
    ScheduleTouch2.prototype.destroy = function() {
      if (this.touchObj) {
        this.touchObj.destroy();
        this.touchObj = null;
      }
      EventHandler.remove(this.element, "transitionend", this.onTransitionEnd);
      this.resetValues();
    };
    return ScheduleTouch2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/actions/keyboard.js
var KeyboardInteraction = (
  /** @class */
  function() {
    function KeyboardInteraction2(parent) {
      this.selectedCells = [];
      this.keyConfigs = {
        downArrow: "downarrow",
        upArrow: "uparrow",
        rightArrow: "rightarrow",
        leftArrow: "leftarrow",
        shiftDownArrow: "shift+downarrow",
        shiftUpArrow: "shift+uparrow",
        shiftRightArrow: "shift+rightarrow",
        shiftLeftArrow: "shift+leftarrow",
        ctrlLeftArrow: "ctrl+leftarrow",
        ctrlRightArrow: "ctrl+rightarrow",
        altOne: "alt+1",
        altTwo: "alt+2",
        altThree: "alt+3",
        altFour: "alt+4",
        altFive: "alt+5",
        altSix: "alt+6",
        altSeven: "alt+7",
        altEight: "alt+8",
        altNine: "alt+9",
        enter: "enter",
        escape: "escape",
        delete: "delete",
        backspace: "backspace",
        home: "home",
        pageUp: "pageup",
        pageDown: "pagedown",
        tab: "tab",
        shiftTab: "shift+tab",
        ctrlShiftUpArrow: "ctrl+shift+uparrow",
        ctrlShiftDownArrow: "ctrl+shift+downarrow",
        ctrlShiftLeftArrow: "ctrl+shift+leftarrow",
        ctrlShiftRightArrow: "ctrl+shift+rightarrow"
      };
      this.parent = parent;
      this.parent.element.tabIndex = this.parent.element.tabIndex === -1 ? 0 : this.parent.element.tabIndex;
      this.keyboardModule = new KeyboardEvents(this.parent.element, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
      this.addEventListener();
    }
    KeyboardInteraction2.prototype.keyActionHandler = function(e) {
      switch (e.action) {
        case "downArrow":
        case "shiftDownArrow":
          this.processDown(e, e.shiftKey);
          break;
        case "upArrow":
        case "shiftUpArrow":
          this.processUp(e, e.shiftKey);
          break;
        case "leftArrow":
        case "shiftLeftArrow":
          this.processLeft(e, e.shiftKey);
          break;
        case "rightArrow":
        case "shiftRightArrow":
          this.processRight(e, e.shiftKey);
          break;
        case "ctrlLeftArrow":
          this.parent.changeDate(this.parent.activeView.getNextPreviousDate("previous"), e);
          if (this.parent.headerModule) {
            this.parent.headerModule.element.querySelector(".e-prev button").focus();
          }
          break;
        case "ctrlRightArrow":
          this.parent.changeDate(this.parent.activeView.getNextPreviousDate("next"), e);
          if (this.parent.headerModule) {
            this.parent.headerModule.element.querySelector(".e-next button").focus();
          }
          break;
        case "altOne":
        case "altTwo":
        case "altThree":
        case "altFour":
        case "altFive":
        case "altSix":
        case "altSeven":
        case "altEight":
        case "altNine":
          this.processViewNavigation(e);
          break;
        case "enter":
          this.processEnter(e);
          break;
        case "home":
          this.focusFirstCell();
          break;
        case "tab":
        case "shiftTab":
          this.processTab(e, e.shiftKey);
          break;
        case "delete":
        case "backspace":
          this.processDelete(e);
          break;
        case "ctrlShiftUpArrow":
        case "ctrlShiftDownArrow":
        case "ctrlShiftLeftArrow":
        case "ctrlShiftRightArrow":
          this.processCtrlShiftNavigationArrows(e);
          break;
        case "escape":
          this.processEscape(e);
          break;
        case "fTwelve":
          if (this.parent.allowInline && this.parent.inlineModule) {
            e.preventDefault();
            this.processFTwelve(e);
          }
          break;
      }
    };
    KeyboardInteraction2.prototype.processFTwelve = function(e) {
      var target = e.target;
      if (target.classList.contains(WORK_CELLS_CLASS) || target.classList.contains(ALLDAY_CELLS_CLASS)) {
        this.parent.activeCellsData = this.getSelectedElements(target);
        var args = extend(this.parent.activeCellsData, { cancel: false, event: e });
        var inlineArgs = {
          element: args.element,
          groupIndex: args.groupIndex,
          type: "Cell"
        };
        this.parent.notify(inlineClick, inlineArgs);
      }
      if (target.classList.contains(APPOINTMENT_CLASS)) {
        target.click();
        return;
      }
    };
    KeyboardInteraction2.prototype.addEventListener = function() {
      this.parent.on(cellMouseDown, this.onCellMouseDown, this);
    };
    KeyboardInteraction2.prototype.removeEventListener = function() {
      this.parent.off(cellMouseDown, this.onCellMouseDown);
    };
    KeyboardInteraction2.prototype.onCellMouseDown = function(e) {
      if (e.event.shiftKey) {
        return;
      }
      this.initialTarget = this.getClosestCell(e.event);
      if (this.parent.activeViewOptions.readonly || this.parent.currentView === "MonthAgenda" || !this.initialTarget) {
        return;
      }
      if (e.event.target.classList.contains(WORK_CELLS_CLASS) && e.event.which !== 3) {
        this.parent.removeSelectedClass();
        EventHandler.add(this.parent.getContentTable(), "mousemove", this.onMouseSelection, this);
        EventHandler.add(this.parent.getContentTable(), "mouseup", this.onMoveUp, this);
      }
      if (e.event.target.classList.contains(ALLDAY_CELLS_CLASS) && e.event.which !== 3) {
        this.parent.removeSelectedClass();
        var allDayRow = this.parent.getAllDayRow();
        EventHandler.add(allDayRow, "mousemove", this.onMouseSelection, this);
        EventHandler.add(allDayRow, "mouseup", this.onMoveUp, this);
      }
    };
    KeyboardInteraction2.prototype.onMouseSelection = function(e) {
      var appointments = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_CLASS));
      addClass(appointments, "e-allow-select");
      var selectionEdges = this.parent.boundaryValidation(e.pageY, e.pageX);
      if (selectionEdges.bottom || selectionEdges.top || selectionEdges.left || selectionEdges.right) {
        var parent_1 = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
        var yInBounds = parent_1.offsetHeight <= parent_1.scrollHeight && parent_1.scrollTop >= 0 && parent_1.scrollTop + parent_1.offsetHeight <= parent_1.scrollHeight;
        var xInBounds = parent_1.offsetWidth <= parent_1.scrollWidth && parent_1.scrollLeft >= 0 && parent_1.scrollLeft + parent_1.offsetWidth <= parent_1.scrollWidth;
        if (yInBounds && (selectionEdges.top || selectionEdges.bottom)) {
          parent_1.scrollTop += selectionEdges.top ? -e.target.offsetHeight : e.target.offsetHeight;
        }
        if (xInBounds && (selectionEdges.left || selectionEdges.right)) {
          parent_1.scrollLeft += selectionEdges.left ? -e.target.offsetWidth : e.target.offsetWidth;
        }
      }
      var target = this.getClosestCell(e);
      if (target) {
        this.selectCells(true, target);
      }
    };
    KeyboardInteraction2.prototype.getClosestCell = function(e) {
      return closest(e.target, "." + WORK_CELLS_CLASS + ",." + ALLDAY_CELLS_CLASS);
    };
    KeyboardInteraction2.prototype.onMoveUp = function(e) {
      var _this = this;
      var appointments = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_CLASS));
      removeClass(appointments, "e-allow-select");
      if (e.target.classList.contains(WORK_CELLS_CLASS)) {
        EventHandler.remove(this.parent.getContentTable(), "mousemove", this.onMouseSelection);
        EventHandler.remove(this.parent.getContentTable(), "mouseup", this.onMoveUp);
      }
      if (e.target.classList.contains(ALLDAY_CELLS_CLASS)) {
        var allDayRow = this.parent.getAllDayRow();
        EventHandler.remove(allDayRow, "mousemove", this.onMouseSelection);
        EventHandler.remove(allDayRow, "mouseup", this.onMoveUp);
      }
      if (this.isPreventAction(e)) {
        return;
      }
      var queryStr = "." + WORK_CELLS_CLASS + ",." + ALLDAY_CELLS_CLASS + ",." + HEADER_CELLS_CLASS;
      var target = closest(e.target, queryStr);
      var selectedCells = this.parent.getSelectedCells();
      if (selectedCells.length > 0 && selectedCells.indexOf(target) === -1) {
        target = selectedCells[selectedCells.length - 1];
      }
      if (this.parent.currentView === "TimelineYear" && target.classList.contains(OTHERMONTH_CLASS)) {
        return;
      }
      this.parent.activeCellsData = this.getSelectedElements(target);
      var cellData = {};
      if (this.parent.eventWindow) {
        this.parent.eventWindow.convertToEventData(this.parent.activeCellsData, cellData);
      }
      var args = {
        data: cellData,
        element: this.parent.activeCellsData.element,
        event: e,
        requestType: cellSelect,
        showQuickPopup: false
      };
      this.parent.trigger(select, args, function(selectArgs) {
        var isPopupShow = selectArgs.showQuickPopup || _this.parent.quickInfoOnSelectionEnd;
        if (isPopupShow && selectedCells.length > 1) {
          var cellArgs = extend(_this.parent.activeCellsData, { cancel: false, event: e, name: "cellClick" });
          _this.parent.notify(cellClick, cellArgs);
        }
      });
    };
    KeyboardInteraction2.prototype.processEnter = function(e) {
      if (this.parent.activeViewOptions.readonly && !e.target.classList.contains(APPOINTMENT_CLASS) || this.isPreventAction(e)) {
        return;
      }
      if (this.parent.currentView === "TimelineYear" && e.target.classList.contains(OTHERMONTH_CLASS)) {
        return;
      }
      var target = e.target;
      if (closest(target, "." + POPUP_WRAPPER_CLASS)) {
        if (target.classList.contains(QUICK_POPUP_EVENT_DETAILS_CLASS) || target.classList.contains(EVENT_CREATE_CLASS) || target.classList.contains(EDIT_EVENT_CLASS) || target.classList.contains(DELETE_EVENT_CLASS) || target.classList.contains(CLOSE_CLASS)) {
          target.click();
          e.preventDefault();
        } else if (target.classList.contains(SUBJECT_CLASS)) {
          this.parent.element.querySelector("." + EVENT_CREATE_CLASS).click();
          e.preventDefault();
        }
        return;
      }
      if (target.classList.contains(RESOURCE_CELLS_CLASS) && target.classList.contains(RESOURCE_PARENT_CLASS)) {
        var resourceIcon = target.querySelector("." + RESOURCE_TREE_ICON_CLASS);
        if (resourceIcon) {
          resourceIcon.click();
        }
        return;
      }
      if (target.classList.contains(WORK_CELLS_CLASS) || target.classList.contains(ALLDAY_CELLS_CLASS)) {
        this.parent.activeCellsData = this.getSelectedElements(target);
        var args = extend(this.parent.activeCellsData, { cancel: false, event: e });
        if (this.parent.allowInline) {
          var inlineArgs = {
            element: args.element,
            groupIndex: args.groupIndex,
            type: "Cell"
          };
          this.parent.notify(inlineClick, inlineArgs);
        } else {
          if (this.parent.currentView === "Year") {
            target.click();
          } else {
            this.parent.notify(cellClick, args);
          }
        }
        return;
      }
      if (target.classList.contains(INLINE_SUBJECT_CLASS) && this.parent.inlineModule) {
        this.parent.inlineModule.inlineCrudActions(target);
        return;
      }
      if (target.classList.contains(APPOINTMENT_CLASS) || target.classList.contains(MORE_EVENT_CLOSE_CLASS) || target.classList.contains(ALLDAY_APPOINTMENT_SECTION_CLASS) || target.classList.contains(MORE_INDICATOR_CLASS)) {
        target.click();
        return;
      }
      if (target.classList.contains(MORE_EVENT_HEADER_DATE_CLASS)) {
        this.parent.setProperties({ selectedDate: this.parent.getDateFromElement(target) }, true);
        this.parent.changeView(this.parent.getNavigateView(), e);
        this.processEscape(e);
        return;
      }
    };
    KeyboardInteraction2.prototype.getSelectedElements = function(target) {
      var cellDetails;
      if (this.selectedCells.length > 1 && target.classList.contains(SELECTED_CELL_CLASS)) {
        var start = this.parent.getCellDetails(this.selectedCells[0]);
        var end = this.parent.getCellDetails(this.selectedCells.slice(-1)[0]);
        start.endTime = end.endTime;
        start.element = target;
        cellDetails = start;
      } else {
        cellDetails = this.parent.getCellDetails(target);
      }
      return cellDetails;
    };
    KeyboardInteraction2.prototype.getCells = function(isInverseTable, start, end) {
      var tableEle = this.parent.getContentTable();
      var isTimelineYear = this.parent.currentView === "TimelineYear";
      var query = isTimelineYear && !isInverseTable ? "." + WORK_CELLS_CLASS + ":not(." + OTHERMONTH_CLASS + ")" : "td";
      var cells = [].slice.call(tableEle.querySelectorAll(query));
      var maxRow = tableEle.rows.length;
      var maxColumn = tableEle.rows[0].cells.length;
      if (start && start.classList.contains(ALLDAY_CELLS_CLASS)) {
        var allDayRow = this.parent.getAllDayRow();
        cells = [].slice.call(allDayRow.cells);
        maxRow = 1;
        maxColumn = allDayRow.cells.length;
      }
      var startIndex = cells.indexOf(start);
      var endIndex = cells.indexOf(end);
      var inverseCells = [];
      if (isInverseTable) {
        for (var i = 0; i < maxColumn; i++) {
          for (var j = 0; j < maxRow; j++) {
            var cell = cells[maxColumn * j + i];
            if (isTimelineYear && cell.classList.contains(OTHERMONTH_CLASS)) {
              continue;
            }
            inverseCells.push(cell);
          }
        }
        startIndex = inverseCells.indexOf(start);
        endIndex = inverseCells.indexOf(end);
      }
      if (startIndex > endIndex) {
        var temp = startIndex;
        startIndex = endIndex;
        endIndex = temp;
      }
      var sCells = isInverseTable ? inverseCells : cells;
      return sCells.slice(startIndex, endIndex + 1);
    };
    KeyboardInteraction2.prototype.focusFirstCell = function() {
      if (this.parent.currentView === "Agenda") {
        var focusCell = this.parent.getContentTable().querySelector("." + AGENDA_CELLS_CLASS);
        focusCell.setAttribute("tabindex", "0");
        focusCell.focus();
        return;
      }
      this.parent.eventBase.removeSelectedAppointmentClass();
      if (this.parent.activeView.isTimelineView() && this.parent.currentView !== "TimelineYear") {
        var cell = this.parent.element.querySelector("." + CONTENT_TABLE_CLASS + " tr:not(." + HIDDEN_CLASS + ") ." + WORK_CELLS_CLASS + ":not(." + RESOURCE_GROUP_CELLS_CLASS + ")");
        this.selectCells(false, cell);
      } else if (this.parent.currentView.indexOf("Year") > -1) {
        var query = "." + WORK_CELLS_CLASS + ":not(." + OTHERMONTH_CLASS + "):not(." + RESOURCE_GROUP_CELLS_CLASS + ")";
        var isVerticalYear = this.parent.currentView === "TimelineYear" && this.parent.activeViewOptions.orientation === "Vertical";
        query += isVerticalYear ? '[data-date="' + this.parent.activeView.startDate().getTime() + '"]' : "";
        this.selectCells(false, this.parent.element.querySelector(query));
      } else {
        this.selectCells(false, this.parent.getWorkCellElements()[0]);
      }
    };
    KeyboardInteraction2.prototype.isInverseTableSelect = function() {
      return this.parent.activeView.isInverseTableSelect;
    };
    KeyboardInteraction2.prototype.selectCells = function(isMultiple, targetCell) {
      var _this = this;
      this.parent.removeSelectedClass();
      var target = targetCell instanceof Array ? targetCell.slice(-1)[0] : targetCell;
      if (isMultiple) {
        var initialId_1;
        var views_1 = ["Day", "Week", "WorkWeek", "TimelineDay", "TimelineWeek", "TimelineWorkWeek", "TimelineMonth", "TimelineYear"];
        var args = { element: targetCell, requestType: "mousemove", allowMultipleRow: true };
        this.parent.inlineModule.removeInlineAppointmentElement();
        this.parent.trigger(select, args, function(selectArgs) {
          var allowMultipleRow = !selectArgs.allowMultipleRow || !_this.parent.allowMultiRowSelection;
          if (allowMultipleRow) {
            var isTimelineYear = _this.parent.currentView === "TimelineYear";
            if (isTimelineYear && _this.parent.activeViewOptions.orientation === "Horizontal" || _this.parent.currentView === "Month") {
              var isGroupYear = isTimelineYear && _this.parent.activeViewOptions.group.resources.length > 0;
              target = isGroupYear ? _this.initialTarget : _this.initialTarget.parentElement.children[target.cellIndex];
            } else if (views_1.indexOf(_this.parent.currentView) > -1) {
              target = target.parentElement.children[_this.initialTarget.cellIndex];
            }
          }
          var selectedCells = _this.getCells(_this.isInverseTableSelect(), _this.initialTarget, target);
          if (_this.parent.activeViewOptions.group.resources.length > 0) {
            initialId_1 = _this.initialTarget.getAttribute("data-group-index");
            var resourceSelectedCells = [];
            for (var _i = 0, selectedCells_1 = selectedCells; _i < selectedCells_1.length; _i++) {
              var cell = selectedCells_1[_i];
              if (cell.getAttribute("data-group-index") === initialId_1) {
                resourceSelectedCells.push(cell);
              }
            }
            selectedCells = resourceSelectedCells;
          }
          if (!_this.parent.allowMultiCellSelection) {
            selectedCells = [_this.initialTarget];
          }
          _this.selectedCells = selectedCells;
          if (selectedCells.length > 2 && !target.classList.contains(ALLDAY_CELLS_CLASS)) {
            var allDayCells = _this.getAllDayCells(selectedCells);
            if (_this.parent.activeViewOptions.group.resources.length > 0) {
              var resourceAllDayCells = [];
              for (var _a = 0, allDayCells_1 = allDayCells; _a < allDayCells_1.length; _a++) {
                var cell = allDayCells_1[_a];
                if (cell.getAttribute("data-group-index") === initialId_1) {
                  resourceAllDayCells.push(cell);
                }
              }
              allDayCells = resourceAllDayCells;
            }
            selectedCells = selectedCells.concat(allDayCells);
          }
          if (target.getAttribute("data-group-index") !== initialId_1 && _this.parent.activeViewOptions.group.resources.length > 0) {
            target = _this.selectedCells[_this.selectedCells.length - 1];
          }
          _this.parent.addSelectedClass(selectedCells, target);
        });
      } else {
        var args = {
          element: target,
          requestType: cellSelect
        };
        this.parent.trigger(select, args, function() {
          _this.initialTarget = target;
          _this.selectedCells = [target];
          _this.parent.addSelectedClass([target], target);
        });
      }
    };
    KeyboardInteraction2.prototype.selectAppointment = function(isReverse, target) {
      var appointments = this.getAppointmentElements();
      if (appointments.length < 0) {
        return;
      }
      this.parent.eventBase.removeSelectedAppointmentClass();
      var nextAppEle;
      if (target.classList.contains(APPOINTMENT_CLASS)) {
        var targetIndex = appointments.indexOf(target);
        nextAppEle = appointments[isReverse ? targetIndex - 1 : targetIndex + 1];
      } else {
        nextAppEle = isReverse ? appointments[appointments.length - 1] : appointments[0];
      }
      if (nextAppEle) {
        this.parent.eventBase.addSelectedAppointments([nextAppEle], true);
        nextAppEle.focus();
        addClass([nextAppEle], AGENDA_SELECTED_CELL);
      }
    };
    KeyboardInteraction2.prototype.selectAppointmentElementFromWorkCell = function(isReverse, target) {
      var _this = this;
      this.parent.eventBase.removeSelectedAppointmentClass();
      this.parent.removeSelectedClass();
      if (target.classList.contains(WORK_CELLS_CLASS) || target.classList.contains(ALLDAY_CELLS_CLASS)) {
        var appointmentElements_1 = this.getUniqueAppointmentElements();
        var filteredElements_1 = [];
        var selectedDate_1 = this.parent.getDateFromElement(target).getTime();
        var selectedSeriesEvents = this.parent.eventsProcessed.filter(function(eventObject) {
          return !isReverse ? eventObject[_this.parent.eventFields.startTime].getTime() >= selectedDate_1 : eventObject[_this.parent.eventFields.startTime].getTime() <= selectedDate_1;
        });
        selectedSeriesEvents.filter(function(event) {
          appointmentElements_1.filter(function(element) {
            if (JSON.stringify(event.Guid) === JSON.stringify(element.getAttribute("data-guid"))) {
              filteredElements_1.push(element);
            }
          });
        });
        if (filteredElements_1.length > 0) {
          var selectedElement = isReverse ? filteredElements_1[filteredElements_1.length - 1] : filteredElements_1[0];
          var focusElements = this.getAppointmentElementsByGuid(selectedElement.getAttribute("data-guid"));
          this.parent.eventBase.addSelectedAppointments(focusElements, true);
          focusElements[focusElements.length - 1].focus();
        }
      }
    };
    KeyboardInteraction2.prototype.getAllDayCells = function(cells) {
      var allDayRow = this.parent.getAllDayRow();
      if (!allDayRow) {
        return [];
      }
      var startCell = cells[0];
      var endCell = cells[cells.length - 1];
      var start = this.parent.getCellDetails(startCell);
      var end = this.parent.getCellDetails(endCell);
      if (end.endTime.getTime() - start.startTime.getTime() >= MS_PER_DAY) {
        var allDayCells = [].slice.call(allDayRow.cells);
        return allDayCells.slice(startCell.cellIndex, endCell.cellIndex + 1);
      }
      return [];
    };
    KeyboardInteraction2.prototype.getAppointmentElements = function() {
      return [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_CLASS));
    };
    KeyboardInteraction2.prototype.getAppointmentElementsByGuid = function(guid) {
      return [].slice.call(this.parent.element.querySelectorAll('div[data-guid="' + guid + '"]'));
    };
    KeyboardInteraction2.prototype.getUniqueAppointmentElements = function() {
      var appointments = this.getAppointmentElements();
      var appointmentElements = [];
      appointments.map(function(value) {
        return value.getAttribute("data-guid");
      }).filter(function(value, index, self) {
        if (self.indexOf(value) === index) {
          appointmentElements.push(appointments[parseInt(index.toString(), 10)]);
        }
      });
      return appointmentElements;
    };
    KeyboardInteraction2.prototype.getWorkCellFromAppointmentElement = function(target) {
      var selectedObject = this.parent.eventBase.getEventByGuid(target.getAttribute("data-guid"));
      return this.parent.eventBase.selectWorkCellByTime([selectedObject]);
    };
    KeyboardInteraction2.prototype.processViewNavigation = function(e) {
      var index = parseInt(e.key, 10) - 1;
      if (!isNullOrUndefined(this.parent.views) && index < this.parent.views.length) {
        var view = this.parent.viewCollections[parseInt(index.toString(), 10)].option;
        this.parent.changeView(view, e, void 0, index);
        if (this.parent.headerModule) {
          this.parent.headerModule.element.querySelector(".e-active-view button").focus();
        }
      }
    };
    KeyboardInteraction2.prototype.isCalendarTarget = function(e) {
      var keyTarget = e.currentTarget || e.target;
      if (keyTarget && !isNullOrUndefined(keyTarget.querySelector(".e-header-popup.e-popup-open"))) {
        return true;
      }
      return false;
    };
    KeyboardInteraction2.prototype.cancelUpDownAction = function(isTimelineYear) {
      var isVerticalYear = isTimelineYear && this.parent.activeViewOptions.orientation === "Vertical";
      var isGroup = this.parent.activeViewOptions.group.resources.length > 0;
      if (isVerticalYear && isGroup || isTimelineYear && this.initialTarget.classList.contains(OTHERMONTH_CLASS)) {
        return true;
      }
      if (this.parent.activeView.isTimelineView() && !isTimelineYear || this.parent.currentView === "MonthAgenda") {
        return true;
      }
      return false;
    };
    KeyboardInteraction2.prototype.processUp = function(e, isMultiple) {
      var isTimelineYear = this.parent.currentView === "TimelineYear";
      if (isMultiple && this.cancelUpDownAction(isTimelineYear) || this.isCalendarTarget(e)) {
        return;
      }
      var target = e.target;
      var selectedElements = this.parent.getSelectedCells();
      var selectedEventElements = this.parent.eventBase.getSelectedAppointments();
      var moreEventWrapper = this.parent.element.querySelector("." + MORE_POPUP_WRAPPER_CLASS);
      var quickPopupWrapper = this.getQuickPopupElement();
      if (selectedElements.length > 0 && !e.target.classList.contains(WORK_CELLS_CLASS)) {
        target = selectedElements[selectedElements.length - 1];
      }
      if (selectedEventElements.length > 0 && !moreEventWrapper.classList.contains(POPUP_OPEN) && !quickPopupWrapper.classList.contains(POPUP_OPEN) && ["Day", "Week", "WorkWeek", "Month"].indexOf(this.parent.currentView) !== -1) {
        target = this.getWorkCellFromAppointmentElement(selectedEventElements[selectedEventElements.length - 1]);
        this.parent.eventBase.removeSelectedAppointmentClass();
      }
      if (!target) {
        return;
      }
      if (target.classList.contains(WORK_CELLS_CLASS) && !this.parent.element.querySelector("." + POPUP_OPEN)) {
        var tableRows = this.parent.getTableRows();
        var curRowIndex = tableRows.indexOf(target.parentElement);
        var targetCell = void 0;
        if (isTimelineYear && isMultiple && this.parent.activeViewOptions.group.resources.length === 0) {
          targetCell = this.isInverseTableSelect() ? this.getVerticalUpDownCell(tableRows, target, curRowIndex, true) : this.getHorizontalUpDownCell(tableRows, target, curRowIndex, true);
        }
        if ((curRowIndex > 0 || targetCell) && curRowIndex < tableRows.length) {
          targetCell = targetCell ? targetCell : tableRows[curRowIndex - 1].cells[target.cellIndex];
          if (this.parent.currentView === "Year" && targetCell.classList.contains(OTHERMONTH_CLASS)) {
            if (this.parent.activeView.getStartDate().getTime() < +targetCell.getAttribute("data-date")) {
              targetCell = this.getYearUpDownCell(tableRows, curRowIndex - 1, target.cellIndex, true);
            } else {
              return;
            }
          }
          e.preventDefault();
          this.selectCells(isMultiple, targetCell);
        }
      } else if (this.parent.currentView === "Agenda" || this.parent.currentView === "MonthAgenda") {
        this.selectAppointment(true, target);
      }
    };
    KeyboardInteraction2.prototype.processDown = function(e, isMultiple) {
      var isTimelineYear = this.parent.currentView === "TimelineYear";
      if (isMultiple && this.cancelUpDownAction(isTimelineYear) || this.isCalendarTarget(e)) {
        return;
      }
      var target = e.target;
      var selectedCells = this.parent.getSelectedCells();
      var selectedElements = this.parent.eventBase.getSelectedAppointments();
      var moreEventWrapper = this.parent.element.querySelector("." + MORE_POPUP_WRAPPER_CLASS);
      var quickPopupWrapper = this.getQuickPopupElement();
      if (selectedCells.length > 0 && !e.target.classList.contains(WORK_CELLS_CLASS)) {
        target = selectedCells[selectedCells.length - 1];
      }
      if (selectedElements.length > 0 && !moreEventWrapper.classList.contains(POPUP_OPEN) && !quickPopupWrapper.classList.contains(POPUP_OPEN) && ["Day", "Week", "WorkWeek", "Month"].indexOf(this.parent.currentView) !== -1) {
        target = this.getWorkCellFromAppointmentElement(selectedElements[selectedElements.length - 1]);
        this.parent.eventBase.removeSelectedAppointmentClass();
      }
      var tableRows = this.parent.getTableRows();
      if (!target) {
        return;
      }
      if (target.classList.contains(WORK_CELLS_CLASS) && !this.parent.element.querySelector("." + POPUP_OPEN)) {
        var curRowIndex = tableRows.indexOf(target.parentElement);
        var targetCell = void 0;
        if (isTimelineYear && isMultiple && this.parent.activeViewOptions.group.resources.length === 0) {
          targetCell = this.isInverseTableSelect() ? this.getVerticalUpDownCell(tableRows, target, curRowIndex, false) : this.getHorizontalUpDownCell(tableRows, target, curRowIndex, false);
        }
        if (curRowIndex >= 0 && (curRowIndex < tableRows.length - 1 || targetCell)) {
          targetCell = targetCell ? targetCell : tableRows[curRowIndex + 1].cells[target.cellIndex];
          if (this.parent.currentView === "Year" && targetCell.classList.contains(OTHERMONTH_CLASS)) {
            if (this.parent.activeView.getEndDate().getTime() > +targetCell.getAttribute("data-date")) {
              targetCell = this.getYearUpDownCell(tableRows, curRowIndex + 1, target.cellIndex, false);
            } else {
              return;
            }
          }
          e.preventDefault();
          this.selectCells(isMultiple, targetCell);
        }
      } else if (this.parent.currentView === "Agenda" || this.parent.currentView === "MonthAgenda") {
        this.selectAppointment(false, target);
      }
    };
    KeyboardInteraction2.prototype.getYearUpDownCell = function(tableRows, rowIndex, cellIndex, isUp) {
      while (tableRows[parseInt(rowIndex.toString(), 10)] && tableRows[parseInt(rowIndex.toString(), 10)].cells[parseInt(cellIndex.toString(), 10)].classList.contains(OTHERMONTH_CLASS)) {
        rowIndex = rowIndex + (isUp ? -1 : 1);
      }
      return tableRows[parseInt(rowIndex.toString(), 10)].cells[parseInt(cellIndex.toString(), 10)];
    };
    KeyboardInteraction2.prototype.getHorizontalUpDownCell = function(tableRows, target, curRowIndex, isUp) {
      var row = tableRows[curRowIndex + (isUp ? -1 : 1)];
      var cell = row ? row.cells[target.cellIndex] : target;
      if (cell.classList.contains(OTHERMONTH_CLASS)) {
        var workCell = row.querySelector("." + WORK_CELLS_CLASS + ":not(." + OTHERMONTH_CLASS + ")");
        var date = /* @__PURE__ */ new Date(+workCell.getAttribute("data-date"));
        var query = '[data-date="' + new Date(date.getFullYear(), date.getMonth() + 1, 0).getTime() + '"]';
        cell = cell.cellIndex < workCell.cellIndex ? workCell : row.querySelector(query);
      }
      return cell;
    };
    KeyboardInteraction2.prototype.getVerticalUpDownCell = function(tableRows, target, curRowIndex, isUp) {
      var hasRow = isUp && curRowIndex > 0 || !isUp && curRowIndex < tableRows.length - 1;
      var targetCell = hasRow ? tableRows[curRowIndex + (isUp ? -1 : 1)].cells[target.cellIndex] : void 0;
      if (!targetCell || targetCell.classList.contains(OTHERMONTH_CLASS)) {
        var column = tableRows[parseInt(curRowIndex.toString(), 10)].cells[target.cellIndex - (isUp ? 1 : -1)];
        if (column) {
          var dateAttr = +target.getAttribute("data-date") - (isUp ? MS_PER_DAY : -MS_PER_DAY);
          return this.parent.getContentTable().querySelector("." + WORK_CELLS_CLASS + '[data-date="' + dateAttr + '"]');
        }
        targetCell = target;
      }
      return targetCell;
    };
    KeyboardInteraction2.prototype.processLeftRight = function(target) {
      var tableEle = this.parent.currentView === "Year" ? target.closest("tbody") : this.parent.getContentTable();
      var curRowIndex = target.parentNode.sectionRowIndex;
      var key = {
        element: tableEle,
        rowIndex: curRowIndex,
        columnIndex: target.cellIndex,
        maxIndex: tableEle.rows[parseInt(curRowIndex.toString(), 10)].cells.length
      };
      return key;
    };
    KeyboardInteraction2.prototype.getQuickPopupElement = function() {
      return (this.parent.isAdaptive ? document.body : this.parent.element).querySelector("." + POPUP_WRAPPER_CLASS);
    };
    KeyboardInteraction2.prototype.isCancelLeftRightAction = function(e, isMultiple, isTimelineYear) {
      var prevent = this.parent.currentView === "MonthAgenda" || isTimelineYear && this.initialTarget.classList.contains(OTHERMONTH_CLASS);
      if (this.parent.currentView === "Agenda" || isMultiple && prevent) {
        return true;
      }
      if (this.isPreventAction(e) && isMultiple) {
        return true;
      }
      var moreEventWrapper = this.parent.element.querySelector("." + MORE_POPUP_WRAPPER_CLASS);
      var quickPopupWrapper = this.getQuickPopupElement();
      if (moreEventWrapper.classList.contains(POPUP_OPEN) || quickPopupWrapper.classList.contains(POPUP_OPEN)) {
        return true;
      }
      return false;
    };
    KeyboardInteraction2.prototype.processRight = function(e, isMultiple) {
      var isTimelineYear = this.parent.currentView === "TimelineYear";
      if (this.isCancelLeftRightAction(e, isMultiple, isTimelineYear) || this.isCalendarTarget(e)) {
        return;
      }
      var selectedCells = this.parent.getSelectedCells();
      var targetCell;
      var selectedAppointments = this.parent.eventBase.getSelectedAppointments();
      var target = e.target;
      if (selectedCells.length > 0 && !target.classList.contains(WORK_CELLS_CLASS) && !target.classList.contains(ALLDAY_CELLS_CLASS)) {
        target = selectedCells[selectedCells.length - 1];
      }
      if (selectedAppointments.length > 0) {
        target = this.getWorkCellFromAppointmentElement(selectedAppointments[selectedAppointments.length - 1]);
        this.parent.eventBase.removeSelectedAppointmentClass();
        if (!target) {
          return;
        }
      }
      if (target.classList.contains(WORK_CELLS_CLASS) && e.target.classList.contains(WORK_CELLS_CLASS)) {
        var key = this.processLeftRight(target);
        var targetDate = /* @__PURE__ */ new Date(+target.getAttribute("data-date"));
        var isMonthEnd = this.parent.currentView === "Year" && targetDate.getTime() === lastDateOfMonth(targetDate).getTime();
        if (key.columnIndex >= 0 && key.columnIndex < key.maxIndex - 1 && !isMonthEnd) {
          targetCell = this.calculateNextPrevDate(target, key.element.rows[key.rowIndex].cells[target.cellIndex + 1], "right");
          if (isTimelineYear && isMultiple && targetCell.classList.contains(OTHERMONTH_CLASS)) {
            targetCell = this.getTimelineYearTargetCell(key, target, true);
          }
          if (!isNullOrUndefined(targetCell)) {
            this.selectCells(isMultiple, targetCell);
          }
        } else if (key.columnIndex === key.maxIndex - 1 || isMonthEnd) {
          if (!this.isInverseTableSelect() && key.rowIndex < key.element.rows.length - 1 && !isMonthEnd) {
            targetCell = this.calculateNextPrevDate(target, key.element.rows[key.rowIndex + 1].cells[0], "right");
            var changeTargetCell = isTimelineYear && isMultiple && targetCell.classList.contains(OTHERMONTH_CLASS);
            targetCell = changeTargetCell ? this.getHorizontalLeftRightCell(key, target, true) : targetCell;
            if (!isNullOrUndefined(targetCell)) {
              this.selectCells(isMultiple, targetCell);
            }
          } else if (!isMultiple) {
            if (isMonthEnd && targetDate.getTime() !== this.parent.activeView.getEndDate().getTime()) {
              this.selectCells(isMultiple, this.parent.element.querySelector(":not(." + OTHERMONTH_CLASS + ')[data-date="' + (targetDate.getTime() + MS_PER_DAY) + '"]'));
              return;
            }
            var rowIndex = this.isInverseTableSelect() ? key.rowIndex : 0;
            this.parent.changeDate(this.parent.activeView.getNextPreviousDate("next"), e);
            var tableEle = this.parent.getContentTable();
            var cell = isMonthEnd ? tableEle.rows[parseInt(rowIndex.toString(), 10)].querySelector("." + WORK_CELLS_CLASS + ":not(." + OTHERMONTH_CLASS + ")") : tableEle.rows[parseInt(rowIndex.toString(), 10)].cells[0];
            this.selectCells(false, cell);
          }
        }
      } else if (target.classList.contains(ALLDAY_CELLS_CLASS)) {
        var curColIndex = target.cellIndex;
        var allDayRow = this.parent.getAllDayRow();
        var maxColIndex = allDayRow.cells.length;
        if (curColIndex >= 0 && curColIndex < maxColIndex - 1) {
          this.selectCells(isMultiple, allDayRow.cells[curColIndex + 1]);
        } else if (curColIndex === maxColIndex - 1 && !isMultiple) {
          this.parent.changeDate(this.parent.activeView.getNextPreviousDate("next"), e);
          var allDayRow_1 = this.parent.getAllDayRow();
          this.selectCells(false, allDayRow_1.cells[0]);
        }
      }
    };
    KeyboardInteraction2.prototype.processLeft = function(e, isMultiple) {
      var isTimelineYear = this.parent.currentView === "TimelineYear";
      if (this.isCancelLeftRightAction(e, isMultiple, isTimelineYear) || this.isCalendarTarget(e)) {
        return;
      }
      var target = e.target;
      var selectedCells = this.parent.getSelectedCells();
      var targetCell;
      if (selectedCells.length > 0 && !target.classList.contains(WORK_CELLS_CLASS) && !target.classList.contains(ALLDAY_CELLS_CLASS)) {
        target = selectedCells[selectedCells.length - 1];
      }
      var selectedElements = this.parent.eventBase.getSelectedAppointments();
      if (selectedElements.length > 0) {
        target = this.getWorkCellFromAppointmentElement(selectedElements[selectedElements.length - 1]);
        this.parent.eventBase.removeSelectedAppointmentClass();
        if (!target) {
          return;
        }
      }
      if (e.target.classList.contains(WORK_CELLS_CLASS) && target.classList.contains(WORK_CELLS_CLASS)) {
        var key = this.processLeftRight(target);
        var targetDate = /* @__PURE__ */ new Date(+target.getAttribute("data-date"));
        var isMonthStart = this.parent.currentView === "Year" && targetDate.getTime() === firstDateOfMonth(targetDate).getTime();
        if (key.columnIndex > 0 && key.columnIndex < key.maxIndex && !isMonthStart) {
          targetCell = this.calculateNextPrevDate(target, key.element.rows[key.rowIndex].cells[target.cellIndex - 1], "left");
          if (isTimelineYear && isMultiple && targetCell.classList.contains(OTHERMONTH_CLASS)) {
            targetCell = this.getTimelineYearTargetCell(key, target, false);
          }
          if (!isNullOrUndefined(targetCell)) {
            this.selectCells(isMultiple, targetCell);
          }
        } else if (key.columnIndex === 0 || isMonthStart) {
          if (!this.isInverseTableSelect() && key.rowIndex > 0) {
            targetCell = this.calculateNextPrevDate(target, key.element.rows[key.rowIndex - 1].cells[key.maxIndex - 1], "left");
            var otherMonthCell = isTimelineYear && isMultiple && targetCell.classList.contains(OTHERMONTH_CLASS);
            targetCell = otherMonthCell ? this.getHorizontalLeftRightCell(key, target, false) : targetCell;
            if (!isNullOrUndefined(targetCell)) {
              this.selectCells(isMultiple, targetCell);
            }
          } else if (!isMultiple) {
            if (isMonthStart && targetDate.getTime() !== this.parent.activeView.getStartDate().getTime()) {
              this.selectCells(isMultiple, this.parent.element.querySelector('[data-date="' + (targetDate.getTime() - MS_PER_DAY) + '"]'));
              return;
            }
            this.parent.changeDate(this.parent.activeView.getNextPreviousDate("previous"), e);
            var tableEle = this.parent.getContentTable();
            var rowIndex = this.isInverseTableSelect() ? key.rowIndex : tableEle.rows.length - 1;
            var cell = tableEle.rows[parseInt(rowIndex.toString(), 10)].cells[key.maxIndex - 1];
            if (isMonthStart) {
              var tbody = this.parent.element.querySelectorAll("." + CONTENT_TABLE_CLASS + " tbody");
              cell = tbody.item(tbody.length - 1).querySelector(":not(." + OTHERMONTH_CLASS + ')[data-date="' + this.parent.activeView.getEndDate().getTime() + '"]');
            }
            this.selectCells(false, cell);
          }
        }
      } else if (target.classList.contains(ALLDAY_CELLS_CLASS)) {
        var curColIndex = target.cellIndex;
        var allDayRow = this.parent.getAllDayRow();
        var maxColIndex = allDayRow.cells.length;
        if (curColIndex > 0 && curColIndex < maxColIndex) {
          this.selectCells(isMultiple, allDayRow.cells[curColIndex - 1]);
        } else if (curColIndex === 0 && !isMultiple) {
          this.parent.changeDate(this.parent.activeView.getNextPreviousDate("previous"), e);
          var allDayRow_2 = this.parent.getAllDayRow();
          this.selectCells(false, allDayRow_2.cells[maxColIndex - 1]);
        }
      }
    };
    KeyboardInteraction2.prototype.getTimelineYearTargetCell = function(key, target, isRight) {
      return this.isInverseTableSelect() ? this.getVerticalLeftRightCell(target, isRight) : this.getHorizontalLeftRightCell(key, target, isRight);
    };
    KeyboardInteraction2.prototype.getHorizontalLeftRightCell = function(key, target, isRight) {
      var row = key.element.rows[target.parentNode.sectionRowIndex + (isRight ? 1 : -1)];
      if (row) {
        var query = isRight ? "." + WORK_CELLS_CLASS + ":not(." + OTHERMONTH_CLASS + ")" : '[data-date="' + (+target.getAttribute("data-date") - MS_PER_DAY) + '"]';
        return row.querySelector(query);
      }
      return target;
    };
    KeyboardInteraction2.prototype.getVerticalLeftRightCell = function(target, isRight) {
      var date = /* @__PURE__ */ new Date(+target.getAttribute("data-date"));
      var start = new Date(date.getFullYear(), date.getMonth() + (isRight ? 1 : -1), 1);
      var tableEle = this.parent.getContentTable();
      var targetCell = tableEle.querySelector('[data-date="' + start.getTime() + '"]');
      if (targetCell.parentNode.sectionRowIndex > target.parentNode.sectionRowIndex) {
        return targetCell;
      }
      return tableEle.querySelector('[data-date="' + new Date(start.getFullYear(), start.getMonth() + 1, 0).getTime() + '"]');
    };
    KeyboardInteraction2.prototype.calculateNextPrevDate = function(currentCell, target, type) {
      var initialId = this.initialTarget.getAttribute("data-group-index");
      if (this.parent.activeViewOptions.group.resources.length > 0 && this.parent.currentView === "Month") {
        if (currentCell && target && target.getAttribute("data-group-index") !== initialId) {
          var currentDate = this.parent.getDateFromElement(currentCell);
          var nextPrevDate = type === "right" ? new Date(currentDate.setDate(currentDate.getDate() + 1)) : new Date(currentDate.setDate(currentDate.getDate() - 1));
          target = [].slice.call(this.parent.element.querySelectorAll('td[data-date="' + nextPrevDate.getTime().toString() + '"][data-group-index="' + initialId + '"]'))[0];
        }
      }
      return target;
    };
    KeyboardInteraction2.prototype.getFocusableElements = function(container) {
      var queryString = 'a[href]:not([tabindex="-1"]),input:not([disabled]):not([tabindex="-1"]),textarea:not([disabled]):not([tabindex="-1"]),button:not([disabled]):not([tabindex="-1"]),select:not([disabled]):not([tabindex="-1"]),[tabindex]:not([tabindex="-1"]),[contentEditable=true]:not([tabindex="-1"])';
      return [].slice.call(container.querySelectorAll(queryString));
    };
    KeyboardInteraction2.prototype.processTabOnPopup = function(e, popupElement) {
      var _this = this;
      var focusableElements = this.getFocusableElements(popupElement);
      focusableElements = focusableElements.filter(function(element) {
        var footerEle = _this.parent.element.querySelector("." + POPUP_FOOTER_CLASS);
        if (footerEle && footerEle.offsetParent) {
          return !(element.classList.contains(EDIT_CLASS) || element.classList.contains(DELETE_CLASS));
        } else {
          return !(element.classList.contains(EDIT_EVENT_CLASS) || element.classList.contains(DELETE_EVENT_CLASS));
        }
      });
      var firstEle = focusableElements[0];
      var lastEle = focusableElements[focusableElements.length - 1];
      if (!isNullOrUndefined(lastEle) && document.activeElement === lastEle && !e.shiftKey) {
        e.preventDefault();
        firstEle.focus();
      }
      if (!isNullOrUndefined(firstEle) && document.activeElement === firstEle && e.shiftKey) {
        e.preventDefault();
        lastEle.focus();
      }
    };
    KeyboardInteraction2.prototype.processTab = function(e, isReverse) {
      var target = e.target;
      if (target.classList.contains(INLINE_SUBJECT_CLASS) && this.parent.inlineModule) {
        target = target.closest(".e-appointment");
        this.parent.inlineModule.inlineCrudActions(e.target);
      }
      if (this.parent.currentView === "TimelineYear" && target.classList.contains(OTHERMONTH_CLASS)) {
        if (target.classList.contains(SELECTED_CELL_CLASS)) {
          this.parent.removeSelectedClass();
        }
        return;
      }
      var popupWrapper = closest(target, "." + POPUP_WRAPPER_CLASS + ",." + MORE_POPUP_WRAPPER_CLASS);
      if (popupWrapper && popupWrapper.classList.contains(POPUP_OPEN)) {
        if (popupWrapper.classList.contains(MORE_POPUP_WRAPPER_CLASS)) {
          this.parent.eventBase.removeSelectedAppointmentClass();
        }
        this.processTabOnPopup(e, popupWrapper);
        return;
      }
      if (target.classList.contains(ROOT)) {
        this.parent.eventBase.removeSelectedAppointmentClass();
        return;
      }
      if (target.classList.contains(RESOURCE_CELLS_CLASS) && this.parent.activeView.isTimelineView() && this.parent.activeViewOptions.group.resources.length > 0) {
        var index = parseInt(target.getAttribute("data-group-index"), 10);
        var appSelector = "." + APPOINTMENT_CLASS + '[data-group-index="' + (isReverse ? index - 1 : index) + '"]';
        var appElements = [].slice.call(this.parent.element.querySelectorAll(appSelector));
        if (appElements.length > 0) {
          this.parent.eventBase.removeSelectedAppointmentClass();
          var focusAppointment = isReverse ? appElements.slice(-1)[0] : appElements[0];
          this.parent.eventBase.addSelectedAppointments([focusAppointment], true);
          focusAppointment.focus();
          e.preventDefault();
        } else if (index + 1 === this.parent.resourceBase.lastResourceLevel.length) {
          this.parent.element.focus();
          e.preventDefault();
        } else if (this.parent.virtualScrollModule) {
          var virtual = this.parent.element.querySelector("." + VIRTUAL_TRACK_CLASS);
          var averageRowHeight = Math.round(virtual.offsetHeight / this.parent.resourceBase.expandedResources.length);
          this.parent.element.querySelector(".e-content-wrap").scrollTop = (isReverse ? index - 1 : index + 1) * averageRowHeight;
          this.parent.virtualScrollModule.virtualScrolling();
        } else {
          this.setScrollPosition(index);
        }
        return;
      }
      if (target.classList.contains(APPOINTMENT_CLASS)) {
        var appElements = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_CLASS));
        var isTimelineYear = this.parent.currentView === "TimelineYear";
        var isTimeline = this.parent.activeView.isTimelineView() && !isTimelineYear;
        if ((isTimeline || isTimelineYear && this.parent.activeViewOptions.orientation === "Vertical") && this.parent.activeViewOptions.group.resources.length > 0) {
          var index = parseInt(target.getAttribute("data-group-index"), 10);
          appElements = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_CLASS + '[data-group-index="' + index + '"]'));
          var resCellSelector = "." + RESOURCE_CELLS_CLASS + '[data-group-index="' + (isReverse ? index : index + 1) + '"]';
          var resourceCell = this.parent.element.querySelector(resCellSelector);
          if (resourceCell && (isReverse && target.getAttribute("data-guid") === appElements[0].getAttribute("data-guid") || !isReverse && target.getAttribute("data-guid") === appElements.slice(-1)[0].getAttribute("data-guid"))) {
            this.parent.eventBase.removeSelectedAppointmentClass();
            if (this.parent.virtualScrollModule) {
              resourceCell.focus({ preventScroll: true });
            } else {
              resourceCell.focus();
            }
            if (this.parent.activeView.isTimelineView() && this.parent.activeViewOptions.group.resources.length > 0 && isNullOrUndefined(this.parent.virtualScrollModule)) {
              this.setScrollPosition(index);
            }
            e.preventDefault();
            return;
          }
        }
        var selectedAppointments = this.parent.eventBase.getSelectedAppointments();
        if (selectedAppointments.length > 0) {
          target = selectedAppointments[selectedAppointments.length - 1];
        }
        this.parent.eventBase.removeSelectedAppointmentClass();
        if (!isReverse && target.getAttribute("data-guid") === appElements[appElements.length - 1].getAttribute("data-guid") || isReverse && target.getAttribute("data-guid") === appElements[0].getAttribute("data-guid")) {
          return;
        }
        if (this.parent.currentView === "Agenda" || this.parent.currentView === "MonthAgenda") {
          this.selectAppointment(isReverse, target);
          e.preventDefault();
        }
        return;
      }
      var selectedCells = this.parent.getSelectedCells();
      if (selectedCells.length > 0 && !target.classList.contains(APPOINTMENT_CLASS)) {
        target = selectedCells[selectedCells.length - 1];
        this.selectAppointmentElementFromWorkCell(isReverse, target);
        e.preventDefault();
        return;
      }
      if (target && !target.classList.contains(RESOURCE_CELLS_CLASS) && this.parent.activeView.isTimelineView() && this.parent.activeViewOptions.group.resources.length > 0) {
        this.processTabOnResourceCells(target, isReverse);
      }
    };
    KeyboardInteraction2.prototype.processDelete = function(e) {
      var activeEle = document.activeElement;
      if (this.parent.currentView === "MonthAgenda") {
        var selectedEle = this.parent.eventBase.getSelectedEvents().element;
        activeEle = selectedEle && isNullOrUndefined(selectedEle.length) ? selectedEle : selectedEle[0];
      }
      if (activeEle && activeEle.classList.contains(APPOINTMENT_CLASS)) {
        addClass([activeEle], APPOINTMENT_BORDER);
        this.parent.activeEventData = this.parent.eventBase.getSelectedEvents();
        if (this.parent.activeViewOptions.readonly || activeEle.classList.contains(READ_ONLY) || !this.parent.eventSettings.allowDeleting) {
          return;
        }
        this.parent.quickPopup.deleteClick(e);
      }
    };
    KeyboardInteraction2.prototype.processCtrlShiftNavigationArrows = function(e) {
      if (this.parent.activeViewOptions.group.resources.length > 0 && document.activeElement.classList.contains(APPOINTMENT_CLASS)) {
        var groupIndex = parseInt(document.activeElement.getAttribute("data-group-index"), 10);
        var index = e.action === "ctrlShiftLeftArrow" || e.action === "ctrlShiftUpArrow" ? groupIndex - 1 : groupIndex + 1;
        index = index < 0 ? 0 : index > this.parent.resourceBase.lastResourceLevel.length ? this.parent.resourceBase.lastResourceLevel.length : index;
        var eventEle = [];
        while (eventEle.length === 0 && index >= 0 && index <= this.parent.resourceBase.lastResourceLevel.length) {
          eventEle = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_CLASS + '[data-group-index="' + index + '"]'));
          index = e.action === "ctrlShiftLeftArrow" || e.action === "ctrlShiftUpArrow" ? index - 1 : index + 1;
        }
        var nextAppEle = eventEle[0];
        if (nextAppEle) {
          this.parent.eventBase.removeSelectedAppointmentClass();
          this.parent.eventBase.addSelectedAppointments([nextAppEle], true);
          nextAppEle.focus();
        }
      } else if (this.parent.activeViewOptions.group.resources.length > 0 && !document.activeElement.classList.contains(APPOINTMENT_CLASS)) {
        var index = this.parent.resourceBase.renderedResources[0].groupIndex;
        var appSelector = "." + APPOINTMENT_CLASS + '[data-group-index="' + index + '"]';
        var appElements = [].slice.call(this.parent.element.querySelectorAll(appSelector));
        if (appElements.length > 0) {
          this.parent.eventBase.removeSelectedAppointmentClass();
          var focusAppointment = appElements[0];
          this.parent.eventBase.addSelectedAppointments([focusAppointment], true);
          focusAppointment.focus();
          e.preventDefault();
        }
      }
    };
    KeyboardInteraction2.prototype.processEscape = function(event) {
      this.parent.quickPopup.onClosePopup(event);
      this.parent.quickPopup.morePopup.hide();
      if (this.parent.headerModule) {
        this.parent.headerModule.hideHeaderPopup();
      }
      if (this.parent.inlineModule) {
        this.parent.inlineModule.removeInlineAppointmentElement();
      }
    };
    KeyboardInteraction2.prototype.isPreventAction = function(e) {
      var target = closest(e.target, "." + RESOURCE_GROUP_CELLS_CLASS);
      if (this.parent.activeView.isTimelineView() && !isNullOrUndefined(target)) {
        return true;
      }
      return false;
    };
    KeyboardInteraction2.prototype.processTabOnResourceCells = function(target, isReverse) {
      var tabElements = [].slice.call(this.parent.element.querySelectorAll('[tabIndex="0"]'));
      var currentTabIndex = tabElements.indexOf(target);
      var nextTabElement = !isReverse ? tabElements[currentTabIndex + 1] : tabElements[currentTabIndex - 1];
      if (nextTabElement && nextTabElement.classList.contains(RESOURCE_CELLS_CLASS)) {
        var groupIndex = parseInt(nextTabElement.getAttribute("data-group-index"), 10);
        if (this.parent.virtualScrollModule) {
          var resColWrap_1 = this.parent.element.querySelector("." + RESOURCE_COLUMN_WRAP_CLASS);
          var resCells = [].slice.call(this.parent.element.querySelectorAll("." + RESOURCE_CELLS_CLASS));
          resCells.forEach(function(element) {
            if (element.getBoundingClientRect().top < resColWrap_1.getBoundingClientRect().top) {
              element.setAttribute("tabindex", "-1");
            }
          });
        } else {
          this.setScrollPosition(groupIndex);
        }
      }
    };
    KeyboardInteraction2.prototype.setScrollPosition = function(index) {
      var workCell = this.parent.element.querySelector("." + WORK_CELLS_CLASS + '[data-group-index="' + index + '"]');
      if (workCell) {
        this.parent.element.querySelector("." + CONTENT_WRAP_CLASS).scrollTop = workCell.offsetTop;
      }
    };
    KeyboardInteraction2.prototype.getModuleName = function() {
      return "keyboard";
    };
    KeyboardInteraction2.prototype.destroy = function() {
      this.removeEventListener();
      this.selectedCells = [];
      this.keyboardModule.destroy();
    };
    return KeyboardInteraction2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/actions/data.js
var Data = (
  /** @class */
  function() {
    function Data2(parent, dataSource, query) {
      this.parent = parent;
      this.initDataManager(dataSource, query);
    }
    Data2.prototype.initDataManager = function(dataSource, query) {
      this.dataManager = dataSource instanceof DataManager ? dataSource : new DataManager(dataSource);
      this.query = query instanceof Query ? query : new Query();
    };
    Data2.prototype.generateQuery = function(startDate, endDate) {
      var query = this.query.clone();
      if (this.parent && startDate && endDate) {
        if (this.parent.activeViewOptions && this.parent.activeViewOptions.enableLazyLoading && !isNullOrUndefined(this.parent.activeViewOptions.group.resources) && this.parent.activeViewOptions.group.resources.length > 0 && this.parent.resourceBase && this.parent.resourceBase.resourceCollection.length > 0 && this.parent.resourceBase.renderedResources.length > 0) {
          var resIdCollection_1 = [];
          this.parent.resourceBase.resourceCollection.forEach(function() {
            return resIdCollection_1.push([]);
          });
          this.parent.resourceBase.renderedResources.forEach(function(resource) {
            resIdCollection_1.forEach(function(resId, index) {
              var groupId = resource.groupOrder[parseInt(index.toString(), 10)];
              if (groupId && resId.indexOf(groupId) < 0) {
                resId.push(groupId);
              }
            });
          });
          this.parent.resourceBase.resourceCollection.forEach(function(resource, index) {
            query.addParams(resource.field, resIdCollection_1[parseInt(index.toString(), 10)].toString());
          });
        }
        if (this.parent.timezone) {
          startDate = this.parent.tzModule.remove(/* @__PURE__ */ new Date(+startDate.getTime()), this.parent.timezone);
          endDate = this.parent.tzModule.remove(/* @__PURE__ */ new Date(+endDate.getTime()), this.parent.timezone);
        }
        if (this.parent.eventSettings.includeFiltersInQuery) {
          var dateQuery = this.getStartEndQuery(startDate, endDate);
          var recurrenceQuery = new Predicate(this.parent.eventFields.recurrenceRule, "notequal", null).and(new Predicate(this.parent.eventFields.recurrenceRule, "notequal", ""));
          return query.where(dateQuery.or(recurrenceQuery));
        }
        query.addParams("StartDate", startDate.toISOString());
        query.addParams("EndDate", endDate.toISOString());
      }
      return query;
    };
    Data2.prototype.getStartEndQuery = function(startDate, endDate) {
      var fieldMapping = this.parent.eventFields;
      var dateQuery = new Predicate(fieldMapping.startTime, "greaterthanorequal", startDate).and(new Predicate(fieldMapping.endTime, "greaterthanorequal", startDate)).and(new Predicate(fieldMapping.startTime, "lessthan", endDate)).or(new Predicate(fieldMapping.startTime, "lessthanorequal", startDate).and(new Predicate(fieldMapping.endTime, "greaterthan", startDate)));
      return dateQuery;
    };
    Data2.prototype.getData = function(query) {
      return this.dataManager.executeQuery(query);
    };
    Data2.prototype.destroy = function() {
      this.dataManager = null;
      this.query = null;
    };
    return Data2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/common/calendar-util.js
var Gregorian = (
  /** @class */
  function() {
    function Gregorian2() {
    }
    Gregorian2.prototype.firstDateOfMonth = function(date) {
      return new Date(date.getFullYear(), date.getMonth());
    };
    Gregorian2.prototype.lastDateOfMonth = function(dt) {
      return new Date(dt.getFullYear(), dt.getMonth() + 1, 0);
    };
    Gregorian2.prototype.isMonthStart = function(date) {
      return date.getDate() === 1;
    };
    Gregorian2.prototype.getLeapYearDaysCount = function() {
      return 366;
    };
    Gregorian2.prototype.getYearDaysCount = function(date, interval) {
      return (date.getFullYear() + interval) % 4 === 0 ? 366 : 365;
    };
    Gregorian2.prototype.getDate = function(date) {
      return date.getDate();
    };
    Gregorian2.prototype.getMonth = function(date) {
      return date.getMonth() + 1;
    };
    Gregorian2.prototype.getFullYear = function(date) {
      return date.getFullYear();
    };
    Gregorian2.prototype.getYearLastDate = function(date, interval) {
      return new Date(date.getFullYear() + interval, 0, 0);
    };
    Gregorian2.prototype.getMonthDaysCount = function(date) {
      return this.lastDateOfMonth(date).getDate();
    };
    Gregorian2.prototype.getMonthStartDate = function(date) {
      return new Date(date.getFullYear(), date.getMonth(), 1, date.getHours(), date.getMinutes());
    };
    Gregorian2.prototype.getMonthEndDate = function(date) {
      date.setDate(1);
      return new Date(date.setMonth(date.getMonth() + 1));
    };
    Gregorian2.prototype.getExpectedDays = function(date, days) {
      return days;
    };
    Gregorian2.prototype.setDate = function(dateObj, date) {
      dateObj.setDate(date);
    };
    Gregorian2.prototype.setValidDate = function(date, interval, startDate, monthValue, beginDate) {
      if (!isNullOrUndefined(beginDate)) {
        date.setMonth((beginDate ? monthValue : date.getMonth()) + interval);
      } else {
        date.setMonth(date.getMonth() + interval, startDate);
      }
    };
    Gregorian2.prototype.setMonth = function(date, interval, startDate) {
      date.setDate(1);
      date.setFullYear(date.getFullYear());
      date.setMonth(interval - 1);
      var maxDay = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();
      date.setDate(Math.min(startDate, maxDay));
    };
    Gregorian2.prototype.addYears = function(date, interval) {
      date.setFullYear(date.getFullYear() + interval);
    };
    Gregorian2.prototype.isSameMonth = function(date1, date2) {
      return date1.getMonth() === date2.getMonth();
    };
    Gregorian2.prototype.checkMonth = function(date, months) {
      return months.indexOf(date.getMonth() + 1) === -1;
    };
    Gregorian2.prototype.compareMonth = function(date1, date2) {
      return date1.getMonth() > date2.getMonth();
    };
    Gregorian2.prototype.isSameYear = function(date1, date2) {
      return date1.getFullYear() === date2.getFullYear();
    };
    Gregorian2.prototype.isLastMonth = function(date) {
      return date.getMonth() === 11;
    };
    Gregorian2.prototype.isLeapYear = function(year, interval) {
      return (year + interval) % 4 === 0;
    };
    return Gregorian2;
  }()
);
var Islamic = (
  /** @class */
  function() {
    function Islamic2() {
    }
    Islamic2.prototype.firstDateOfMonth = function(date) {
      var hDate = this.getHijriDate(date);
      var gDate = HijriParser.toGregorian(hDate.year, hDate.month, 1);
      return gDate;
    };
    Islamic2.prototype.lastDateOfMonth = function(date) {
      var hDate = this.getHijriDate(date);
      var daysInMonth = this.getDaysInMonth(hDate.month, hDate.year);
      var gDate = HijriParser.toGregorian(hDate.year, hDate.month, daysInMonth);
      var finalGDate = new Date(gDate.getTime());
      finalGDate = new Date(finalGDate.setDate(finalGDate.getDate() + 1));
      var finalHDate = this.getHijriDate(finalGDate);
      if (hDate.month === finalHDate.month) {
        return finalGDate;
      }
      finalHDate = this.getHijriDate(gDate);
      if (hDate.month === finalHDate.month) {
        return gDate;
      }
      return new Date(gDate.setDate(gDate.getDate() - 1));
    };
    Islamic2.prototype.isMonthStart = function(date) {
      var hijriDate = this.getHijriDate(date);
      return hijriDate.date === 1;
    };
    Islamic2.prototype.getLeapYearDaysCount = function() {
      return 355;
    };
    Islamic2.prototype.getYearDaysCount = function(date, interval) {
      var hDate = this.getHijriDate(date);
      return this.isLeapYear(hDate.year, interval) ? 355 : 354;
    };
    Islamic2.prototype.getDate = function(date) {
      var hijriDate = this.getHijriDate(date);
      return hijriDate.date;
    };
    Islamic2.prototype.getMonth = function(date) {
      var hDate = this.getHijriDate(date);
      return hDate.month;
    };
    Islamic2.prototype.getFullYear = function(date) {
      var hDate = this.getHijriDate(date);
      return hDate.year;
    };
    Islamic2.prototype.getYearLastDate = function(date, interval) {
      var hDate = this.getHijriDate(date);
      var gDate = HijriParser.toGregorian(hDate.year + interval, 1, 0);
      return gDate;
    };
    Islamic2.prototype.getMonthDaysCount = function(date) {
      var maxDate = this.lastDateOfMonth(date);
      var hijriDate = this.getHijriDate(maxDate);
      return hijriDate.date;
    };
    Islamic2.prototype.getMonthStartDate = function(date) {
      var firstDate = this.firstDateOfMonth(date);
      return new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate(), date.getHours(), date.getMinutes());
    };
    Islamic2.prototype.getMonthEndDate = function(date) {
      var lastDate = this.lastDateOfMonth(date);
      lastDate.setDate(lastDate.getDate() + 1);
      return new Date(lastDate.setMonth(lastDate.getMonth()));
    };
    Islamic2.prototype.getExpectedDays = function(date, days) {
      var hDate = this.getHijriDate(date);
      var day = [];
      for (var i = 0; i < days.length; i++) {
        var gDate = HijriParser.toGregorian(hDate.year, hDate.month, days[parseInt(i.toString(), 10)]);
        day.push(gDate.getDate());
      }
      return day;
    };
    Islamic2.prototype.setDate = function(dateObj, date) {
      var hDate = this.getHijriDate(dateObj);
      var gDate = HijriParser.toGregorian(hDate.year, hDate.month, date);
      this.updateDateObj(dateObj, gDate);
    };
    Islamic2.prototype.setValidDate = function(date, interval, startDate, monthValue, beginDate) {
      var firstDate = !isNullOrUndefined(beginDate) ? this.firstDateOfMonth(beginDate) : date;
      var hDate = this.getHijriDate(firstDate);
      var gDate = HijriParser.toGregorian(hDate.year, hDate.month + interval, startDate);
      this.updateDateObj(date, gDate);
    };
    Islamic2.prototype.setMonth = function(date, interval, startDate) {
      var hDate = this.getHijriDate(date);
      var gDate = HijriParser.toGregorian(hDate.year, interval, startDate);
      this.updateDateObj(date, gDate);
    };
    Islamic2.prototype.addYears = function(date, interval, monthValue) {
      var hDate = this.getHijriDate(date);
      var gDate = HijriParser.toGregorian(hDate.year + interval, monthValue, 1);
      this.updateDateObj(date, gDate);
    };
    Islamic2.prototype.isSameMonth = function(date1, date2) {
      var currentHijri = this.getHijriDate(date1);
      var tempHijri = this.getHijriDate(date2);
      return currentHijri.month === tempHijri.month;
    };
    Islamic2.prototype.checkMonth = function(date, months) {
      var hDate = this.getHijriDate(date);
      return months.indexOf(hDate.month) === -1;
    };
    Islamic2.prototype.compareMonth = function(date1, date2) {
      var hDate = this.getHijriDate(date1);
      var hDate1 = this.getHijriDate(date2);
      return hDate.month > hDate1.month;
    };
    Islamic2.prototype.isSameYear = function(date1, date2) {
      var hDate = this.getHijriDate(date1);
      var hDate1 = this.getHijriDate(date2);
      return hDate.year === hDate1.year;
    };
    Islamic2.prototype.isLastMonth = function(date) {
      var hDate = this.getHijriDate(date);
      return hDate.month === 12;
    };
    Islamic2.prototype.updateDateObj = function(date, gDate) {
      date.setFullYear(gDate.getFullYear(), gDate.getMonth(), gDate.getDate());
    };
    Islamic2.prototype.isLeapYear = function(year, interval) {
      return (14 + 11 * (year + interval)) % 30 < 11;
    };
    Islamic2.prototype.getDaysInMonth = function(month, year) {
      var length = 0;
      length = 29 + (month + 1) % 2;
      if (month === 11 && this.isLeapYear(year, 0)) {
        length++;
      }
      return length;
    };
    Islamic2.prototype.getHijriDate = function(date) {
      return HijriParser.getHijriDate(date);
    };
    return Islamic2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/timezone/timezone.js
var Timezone = (
  /** @class */
  function() {
    function Timezone2() {
      this.timezoneData = [];
      this.timezoneData = this.getTimezoneData();
    }
    Timezone2.prototype.offset = function(date, timezone) {
      var localOffset = date.getTimezoneOffset();
      try {
        var convertedDate = new Date(date.toLocaleString("en-US", { timeZone: timezone }));
        if (!isNaN(convertedDate.getTime())) {
          return (date.getTime() - convertedDate.getTime()) / 6e4 + localOffset;
        }
        return 0;
      } catch (error) {
        return 0;
      }
    };
    Timezone2.prototype.convert = function(date, fromOffset, toOffset) {
      if (typeof fromOffset === "string") {
        fromOffset = this.offset(date, fromOffset);
      }
      if (typeof toOffset === "string") {
        toOffset = this.offset(date, toOffset);
      }
      var fromLocalOffset = date.getTimezoneOffset();
      date = new Date(date.getTime() + (fromOffset - toOffset) * 6e4);
      var toLocalOffset = date.getTimezoneOffset();
      return new Date(date.getTime() + (toLocalOffset - fromLocalOffset) * 6e4);
    };
    Timezone2.prototype.add = function(date, timezone) {
      return this.convert(date, date.getTimezoneOffset(), timezone);
    };
    Timezone2.prototype.remove = function(date, timezone) {
      return this.convert(date, timezone, date.getTimezoneOffset());
    };
    Timezone2.prototype.removeLocalOffset = function(date) {
      return new Date(date.getTime() - date.getTimezoneOffset() * 6e4);
    };
    Timezone2.prototype.getLocalTimezoneName = function() {
      return window.Intl ? Intl.DateTimeFormat().resolvedOptions().timeZone || "UTC" : "UTC";
    };
    Timezone2.prototype.getTimezoneData = function() {
      return timezoneData;
    };
    return Timezone2;
  }()
);
var timezoneData = [
  { Value: "Pacific/Niue", Text: "(UTC-11:00) Niue" },
  { Value: "Pacific/Pago_Pago", Text: "(UTC-11:00) Pago Pago" },
  { Value: "Pacific/Honolulu", Text: "(UTC-10:00) Hawaii Time" },
  { Value: "Pacific/Rarotonga", Text: "(UTC-10:00) Rarotonga" },
  { Value: "Pacific/Tahiti", Text: "(UTC-10:00) Tahiti" },
  { Value: "Pacific/Marquesas", Text: "(UTC-09:30) Marquesas" },
  { Value: "America/Anchorage", Text: "(UTC-09:00) Alaska Time" },
  { Value: "Pacific/Gambier", Text: "(UTC-09:00) Gambier" },
  { Value: "America/Los_Angeles", Text: "(UTC-08:00) Pacific Time" },
  { Value: "America/Tijuana", Text: "(UTC-08:00) Pacific Time - Tijuana" },
  { Value: "America/Vancouver", Text: "(UTC-08:00) Pacific Time - Vancouver" },
  { Value: "America/Whitehorse", Text: "(UTC-08:00) Pacific Time - Whitehorse" },
  { Value: "Pacific/Pitcairn", Text: "(UTC-08:00) Pitcairn" },
  { Value: "America/Denver", Text: "(UTC-07:00) Mountain Time" },
  { Value: "America/Phoenix", Text: "(UTC-07:00) Mountain Time - Arizona" },
  { Value: "America/Mazatlan", Text: "(UTC-07:00) Mountain Time - Chihuahua, Mazatlan" },
  { Value: "America/Dawson_Creek", Text: "(UTC-07:00) Mountain Time - Dawson Creek" },
  { Value: "America/Edmonton", Text: "(UTC-07:00) Mountain Time - Edmonton" },
  { Value: "America/Hermosillo", Text: "(UTC-07:00) Mountain Time - Hermosillo" },
  { Value: "America/Yellowknife", Text: "(UTC-07:00) Mountain Time - Yellowknife" },
  { Value: "America/Belize", Text: "(UTC-06:00) Belize" },
  { Value: "America/Chicago", Text: "(UTC-06:00) Central Time" },
  { Value: "America/Mexico_City", Text: "(UTC-06:00) Central Time - Mexico City" },
  { Value: "America/Regina", Text: "(UTC-06:00) Central Time - Regina" },
  { Value: "America/Tegucigalpa", Text: "(UTC-06:00) Central Time - Tegucigalpa" },
  { Value: "America/Winnipeg", Text: "(UTC-06:00) Central Time - Winnipeg" },
  { Value: "America/Costa_Rica", Text: "(UTC-06:00) Costa Rica" },
  { Value: "America/El_Salvador", Text: "(UTC-06:00) El Salvador" },
  { Value: "Pacific/Galapagos", Text: "(UTC-06:00) Galapagos" },
  { Value: "America/Guatemala", Text: "(UTC-06:00) Guatemala" },
  { Value: "America/Managua", Text: "(UTC-06:00) Managua" },
  { Value: "America/Cancun", Text: "(UTC-05:00) America Cancun" },
  { Value: "America/Bogota", Text: "(UTC-05:00) Bogota" },
  { Value: "Pacific/Easter", Text: "(UTC-05:00) Easter Island" },
  { Value: "America/New_York", Text: "(UTC-05:00) Eastern Time" },
  { Value: "America/Iqaluit", Text: "(UTC-05:00) Eastern Time - Iqaluit" },
  { Value: "America/Toronto", Text: "(UTC-05:00) Eastern Time - Toronto" },
  { Value: "America/Guayaquil", Text: "(UTC-05:00) Guayaquil" },
  { Value: "America/Havana", Text: "(UTC-05:00) Havana" },
  { Value: "America/Jamaica", Text: "(UTC-05:00) Jamaica" },
  { Value: "America/Lima", Text: "(UTC-05:00) Lima" },
  { Value: "America/Nassau", Text: "(UTC-05:00) Nassau" },
  { Value: "America/Panama", Text: "(UTC-05:00) Panama" },
  { Value: "America/Port-au-Prince", Text: "(UTC-05:00) Port-au-Prince" },
  { Value: "America/Rio_Branco", Text: "(UTC-05:00) Rio Branco" },
  { Value: "America/Halifax", Text: "(UTC-04:00) Atlantic Time - Halifax" },
  { Value: "America/Barbados", Text: "(UTC-04:00) Barbados" },
  { Value: "Atlantic/Bermuda", Text: "(UTC-04:00) Bermuda" },
  { Value: "America/Boa_Vista", Text: "(UTC-04:00) Boa Vista" },
  { Value: "America/Caracas", Text: "(UTC-04:00) Caracas" },
  { Value: "America/Curacao", Text: "(UTC-04:00) Curacao" },
  { Value: "America/Grand_Turk", Text: "(UTC-04:00) Grand Turk" },
  { Value: "America/Guyana", Text: "(UTC-04:00) Guyana" },
  { Value: "America/La_Paz", Text: "(UTC-04:00) La Paz" },
  { Value: "America/Manaus", Text: "(UTC-04:00) Manaus" },
  { Value: "America/Martinique", Text: "(UTC-04:00) Martinique" },
  { Value: "America/Port_of_Spain", Text: "(UTC-04:00) Port of Spain" },
  { Value: "America/Porto_Velho", Text: "(UTC-04:00) Porto Velho" },
  { Value: "America/Puerto_Rico", Text: "(UTC-04:00) Puerto Rico" },
  { Value: "America/Santo_Domingo", Text: "(UTC-04:00) Santo Domingo" },
  { Value: "America/Thule", Text: "(UTC-04:00) Thule" },
  { Value: "America/St_Johns", Text: "(UTC-03:30) Newfoundland Time - St. Johns" },
  { Value: "America/Araguaina", Text: "(UTC-03:00) Araguaina" },
  { Value: "America/Asuncion", Text: "(UTC-03:00) Asuncion" },
  { Value: "America/Belem", Text: "(UTC-03:00) Belem" },
  { Value: "America/Argentina/Buenos_Aires", Text: "(UTC-03:00) Buenos Aires" },
  { Value: "America/Campo_Grande", Text: "(UTC-03:00) Campo Grande" },
  { Value: "America/Cayenne", Text: "(UTC-03:00) Cayenne" },
  { Value: "America/Cuiaba", Text: "(UTC-03:00) Cuiaba" },
  { Value: "America/Fortaleza", Text: "(UTC-03:00) Fortaleza" },
  { Value: "America/Godthab", Text: "(UTC-03:00) Godthab" },
  { Value: "America/Maceio", Text: "(UTC-03:00) Maceio" },
  { Value: "America/Miquelon", Text: "(UTC-03:00) Miquelon" },
  { Value: "America/Montevideo", Text: "(UTC-03:00) Montevideo" },
  { Value: "Antarctica/Palmer", Text: "(UTC-03:00) Palmer" },
  { Value: "America/Paramaribo", Text: "(UTC-03:00) Paramaribo" },
  { Value: "America/Punta_Arenas", Text: "(UTC-03:00) Punta Arenas" },
  { Value: "America/Recife", Text: "(UTC-03:00) Recife" },
  { Value: "Antarctica/Rothera", Text: "(UTC-03:00) Rothera" },
  { Value: "America/Bahia", Text: "(UTC-03:00) Salvador" },
  { Value: "America/Santiago", Text: "(UTC-03:00) Santiago" },
  { Value: "Atlantic/Stanley", Text: "(UTC-03:00) Stanley" },
  { Value: "America/Noronha", Text: "(UTC-02:00) Noronha" },
  { Value: "America/Sao_Paulo", Text: "(UTC-02:00) Sao Paulo" },
  { Value: "Atlantic/South_Georgia", Text: "(UTC-02:00) South Georgia" },
  { Value: "Atlantic/Azores", Text: "(UTC-01:00) Azores" },
  { Value: "Atlantic/Cape_Verde", Text: "(UTC-01:00) Cape Verde" },
  { Value: "America/Scoresbysund", Text: "(UTC-01:00) Scoresbysund" },
  { Value: "Africa/Abidjan", Text: "(UTC+00:00) Abidjan" },
  { Value: "Africa/Accra", Text: "(UTC+00:00) Accra" },
  { Value: "Africa/Bissau", Text: "(UTC+00:00) Bissau" },
  { Value: "Atlantic/Canary", Text: "(UTC+00:00) Canary Islands" },
  { Value: "Africa/Casablanca", Text: "(UTC+00:00) Casablanca" },
  { Value: "America/Danmarkshavn", Text: "(UTC+00:00) Danmarkshavn" },
  { Value: "Europe/Dublin", Text: "(UTC+00:00) Dublin" },
  { Value: "Africa/El_Aaiun", Text: "(UTC+00:00) El Aaiun" },
  { Value: "Atlantic/Faroe", Text: "(UTC+00:00) Faeroe" },
  { Value: "Etc/UTC", Text: "(UTC+00:00) UTC (no daylight saving)" },
  { Value: "Europe/Lisbon", Text: "(UTC+00:00) Lisbon" },
  { Value: "Europe/London", Text: "(UTC+00:00) London" },
  { Value: "Africa/Monrovia", Text: "(UTC+00:00) Monrovia" },
  { Value: "Atlantic/Reykjavik", Text: "(UTC+00:00) Reykjavik" },
  { Value: "UTC", Text: "UTC" },
  { Value: "Africa/Algiers", Text: "(UTC+01:00) Algiers" },
  { Value: "Europe/Amsterdam", Text: "(UTC+01:00) Amsterdam" },
  { Value: "Europe/Andorra", Text: "(UTC+01:00) Andorra" },
  { Value: "Europe/Berlin", Text: "(UTC+01:00) Berlin" },
  { Value: "Europe/Brussels", Text: "(UTC+01:00) Brussels" },
  { Value: "Europe/Budapest", Text: "(UTC+01:00) Budapest" },
  { Value: "Europe/Belgrade", Text: "(UTC+01:00) Central European Time - Belgrade" },
  { Value: "Europe/Prague", Text: "(UTC+01:00) Central European Time - Prague" },
  { Value: "Africa/Ceuta", Text: "(UTC+01:00) Ceuta" },
  { Value: "Europe/Copenhagen", Text: "(UTC+01:00) Copenhagen" },
  { Value: "Europe/Gibraltar", Text: "(UTC+01:00) Gibraltar" },
  { Value: "Africa/Lagos", Text: "(UTC+01:00) Lagos" },
  { Value: "Europe/Luxembourg", Text: "(UTC+01:00) Luxembourg" },
  { Value: "Europe/Madrid", Text: "(UTC+01:00) Madrid" },
  { Value: "Europe/Malta", Text: "(UTC+01:00) Malta" },
  { Value: "Europe/Monaco", Text: "(UTC+01:00) Monaco" },
  { Value: "Africa/Ndjamena", Text: "(UTC+01:00) Ndjamena" },
  { Value: "Europe/Oslo", Text: "(UTC+01:00) Oslo" },
  { Value: "Europe/Paris", Text: "(UTC+01:00) Paris" },
  { Value: "Europe/Rome", Text: "(UTC+01:00) Rome" },
  { Value: "Europe/Stockholm", Text: "(UTC+01:00) Stockholm" },
  { Value: "Europe/Tirane", Text: "(UTC+01:00) Tirane" },
  { Value: "Africa/Tunis", Text: "(UTC+01:00) Tunis" },
  { Value: "Europe/Vienna", Text: "(UTC+01:00) Vienna" },
  { Value: "Europe/Warsaw", Text: "(UTC+01:00) Warsaw" },
  { Value: "Europe/Zurich", Text: "(UTC+01:00) Zurich" },
  { Value: "Asia/Amman", Text: "(UTC+02:00) Amman" },
  { Value: "Europe/Athens", Text: "(UTC+02:00) Athens" },
  { Value: "Asia/Beirut", Text: "(UTC+02:00) Beirut" },
  { Value: "Europe/Bucharest", Text: "(UTC+02:00) Bucharest" },
  { Value: "Africa/Cairo", Text: "(UTC+02:00) Cairo" },
  { Value: "Europe/Chisinau", Text: "(UTC+02:00) Chisinau" },
  { Value: "Asia/Damascus", Text: "(UTC+02:00) Damascus" },
  { Value: "Asia/Gaza", Text: "(UTC+02:00) Gaza" },
  { Value: "Europe/Helsinki", Text: "(UTC+02:00) Helsinki" },
  { Value: "Asia/Jerusalem", Text: "(UTC+02:00) Jerusalem" },
  { Value: "Africa/Johannesburg", Text: "(UTC+02:00) Johannesburg" },
  { Value: "Africa/Khartoum", Text: "(UTC+02:00) Khartoum" },
  { Value: "Europe/Kiev", Text: "(UTC+02:00) Kiev" },
  { Value: "Africa/Maputo", Text: "(UTC+02:00) Maputo" },
  { Value: "Europe/Kaliningrad", Text: "(UTC+02:00) Moscow-01 - Kaliningrad" },
  { Value: "Asia/Nicosia", Text: "(UTC+02:00) Nicosia" },
  { Value: "Europe/Riga", Text: "(UTC+02:00) Riga" },
  { Value: "Europe/Sofia", Text: "(UTC+02:00) Sofia" },
  { Value: "Europe/Tallinn", Text: "(UTC+02:00) Tallinn" },
  { Value: "Africa/Tripoli", Text: "(UTC+02:00) Tripoli" },
  { Value: "Europe/Vilnius", Text: "(UTC+02:00) Vilnius" },
  { Value: "Africa/Windhoek", Text: "(UTC+02:00) Windhoek" },
  { Value: "Asia/Baghdad", Text: "(UTC+03:00) Baghdad" },
  { Value: "Europe/Istanbul", Text: "(UTC+03:00) Istanbul" },
  { Value: "Europe/Minsk", Text: "(UTC+03:00) Minsk" },
  { Value: "Europe/Moscow", Text: "(UTC+03:00) Moscow+00 - Moscow" },
  { Value: "Africa/Nairobi", Text: "(UTC+03:00) Nairobi" },
  { Value: "Asia/Qatar", Text: "(UTC+03:00) Qatar" },
  { Value: "Asia/Riyadh", Text: "(UTC+03:00) Riyadh" },
  { Value: "Antarctica/Syowa", Text: "(UTC+03:00) Syowa" },
  { Value: "Asia/Tehran", Text: "(UTC+03:30) Tehran" },
  { Value: "Asia/Baku", Text: "(UTC+04:00) Baku" },
  { Value: "Asia/Dubai", Text: "(UTC+04:00) Dubai" },
  { Value: "Indian/Mahe", Text: "(UTC+04:00) Mahe" },
  { Value: "Indian/Mauritius", Text: "(UTC+04:00) Mauritius" },
  { Value: "Europe/Samara", Text: "(UTC+04:00) Moscow+01 - Samara" },
  { Value: "Indian/Reunion", Text: "(UTC+04:00) Reunion" },
  { Value: "Asia/Tbilisi", Text: "(UTC+04:00) Tbilisi" },
  { Value: "Asia/Yerevan", Text: "(UTC+04:00) Yerevan" },
  { Value: "Asia/Kabul", Text: "(UTC+04:30) Kabul" },
  { Value: "Asia/Aqtau", Text: "(UTC+05:00) Aqtau" },
  { Value: "Asia/Aqtobe", Text: "(UTC+05:00) Aqtobe" },
  { Value: "Asia/Ashgabat", Text: "(UTC+05:00) Ashgabat" },
  { Value: "Asia/Dushanbe", Text: "(UTC+05:00) Dushanbe" },
  { Value: "Asia/Karachi", Text: "(UTC+05:00) Karachi" },
  { Value: "Indian/Kerguelen", Text: "(UTC+05:00) Kerguelen" },
  { Value: "Indian/Maldives", Text: "(UTC+05:00) Maldives" },
  { Value: "Antarctica/Mawson", Text: "(UTC+05:00) Mawson" },
  { Value: "Asia/Yekaterinburg", Text: "(UTC+05:00) Moscow+02 - Yekaterinburg" },
  { Value: "Asia/Tashkent", Text: "(UTC+05:00) Tashkent" },
  { Value: "Asia/Colombo", Text: "(UTC+05:30) Colombo" },
  { Value: "Asia/Kolkata", Text: "(UTC+05:30) India Standard Time" },
  { Value: "Asia/Katmandu", Text: "(UTC+05:45) Katmandu" },
  { Value: "Asia/Almaty", Text: "(UTC+06:00) Almaty" },
  { Value: "Asia/Bishkek", Text: "(UTC+06:00) Bishkek" },
  { Value: "Indian/Chagos", Text: "(UTC+06:00) Chagos" },
  { Value: "Asia/Dhaka", Text: "(UTC+06:00) Dhaka" },
  { Value: "Asia/Omsk", Text: "(UTC+06:00) Moscow+03 - Omsk" },
  { Value: "Asia/Thimphu", Text: "(UTC+06:00) Thimphu" },
  { Value: "Antarctica/Vostok", Text: "(UTC+06:00) Vostok" },
  { Value: "Indian/Cocos", Text: "(UTC+06:30) Cocos" },
  { Value: "Asia/Yangon", Text: "(UTC+06:30) Rangoon" },
  { Value: "Asia/Bangkok", Text: "(UTC+07:00) Bangkok" },
  { Value: "Indian/Christmas", Text: "(UTC+07:00) Christmas" },
  { Value: "Antarctica/Davis", Text: "(UTC+07:00) Davis" },
  { Value: "Asia/Saigon", Text: "(UTC+07:00) Hanoi" },
  { Value: "Asia/Hovd", Text: "(UTC+07:00) Hovd" },
  { Value: "Asia/Jakarta", Text: "(UTC+07:00) Jakarta" },
  { Value: "Asia/Krasnoyarsk", Text: "(UTC+07:00) Moscow+04 - Krasnoyarsk" },
  { Value: "Asia/Brunei", Text: "(UTC+08:00) Brunei" },
  { Value: "Asia/Shanghai", Text: "(UTC+08:00) China Time - Beijing" },
  { Value: "Asia/Choibalsan", Text: "(UTC+08:00) Choibalsan" },
  { Value: "Asia/Hong_Kong", Text: "(UTC+08:00) Hong Kong" },
  { Value: "Asia/Kuala_Lumpur", Text: "(UTC+08:00) Kuala Lumpur" },
  { Value: "Asia/Macau", Text: "(UTC+08:00) Macau" },
  { Value: "Asia/Makassar", Text: "(UTC+08:00) Makassar" },
  { Value: "Asia/Manila", Text: "(UTC+08:00) Manila" },
  { Value: "Asia/Irkutsk", Text: "(UTC+08:00) Moscow+05 - Irkutsk" },
  { Value: "Asia/Singapore", Text: "(UTC+08:00) Singapore" },
  { Value: "Asia/Taipei", Text: "(UTC+08:00) Taipei" },
  { Value: "Asia/Ulaanbaatar", Text: "(UTC+08:00) Ulaanbaatar" },
  { Value: "Australia/Perth", Text: "(UTC+08:00) Western Time - Perth" },
  { Value: "Asia/Pyongyang", Text: "(UTC+08:30) Pyongyang" },
  { Value: "Asia/Dili", Text: "(UTC+09:00) Dili" },
  { Value: "Asia/Jayapura", Text: "(UTC+09:00) Jayapura" },
  { Value: "Asia/Yakutsk", Text: "(UTC+09:00) Moscow+06 - Yakutsk" },
  { Value: "Pacific/Palau", Text: "(UTC+09:00) Palau" },
  { Value: "Asia/Seoul", Text: "(UTC+09:00) Seoul" },
  { Value: "Asia/Tokyo", Text: "(UTC+09:00) Tokyo" },
  { Value: "Australia/Darwin", Text: "(UTC+09:30) Central Time - Darwin" },
  { Value: "Antarctica/DumontDUrville", Text: '(UTC+10:00) Dumont D"Urville' },
  { Value: "Australia/Brisbane", Text: "(UTC+10:00) Eastern Time - Brisbane" },
  { Value: "Pacific/Guam", Text: "(UTC+10:00) Guam" },
  { Value: "Asia/Vladivostok", Text: "(UTC+10:00) Moscow+07 - Vladivostok" },
  { Value: "Pacific/Port_Moresby", Text: "(UTC+10:00) Port Moresby" },
  { Value: "Pacific / Chuuk", Text: "(UTC+10:00) Truk" },
  { Value: "Australia/Adelaide", Text: "(UTC+10:30) Central Time - Adelaide" },
  { Value: "Antarctica/Casey", Text: "(UTC+11:00) Casey" },
  { Value: "Australia/Hobart", Text: "(UTC+11:00) Eastern Time - Hobart" },
  { Value: "Australia/Sydney", Text: "(UTC+11:00) Eastern Time - Melbourne, Sydney" },
  { Value: "Pacific/Efate", Text: "(UTC+11:00) Efate" },
  { Value: "Pacific/Guadalcanal", Text: "(UTC+11:00) Guadalcanal" },
  { Value: "Pacific/Kosrae", Text: "(UTC+11:00) Kosrae" },
  { Value: "Asia/Magadan", Text: "(UTC+11:00) Moscow+08 - Magadan" },
  { Value: "Pacific / Norfolk", Text: "(UTC+11:00) Norfolk" },
  { Value: "Pacific/Noumea", Text: "(UTC+11:00) Noumea" },
  { Value: "Pacific/Pohnpei", Text: "(UTC+11:00) Ponape" },
  { Value: "Pacific/Funafuti", Text: "(UTC+12:00) Funafuti" },
  { Value: "Pacific/Kwajalein", Text: "(UTC+12:00) Kwajalein" },
  { Value: "Pacific/Majuro", Text: "(UTC+12:00) Majuro" },
  { Value: "Asia/Kamchatka", Text: "(UTC+12:00) Moscow+09 - Petropavlovsk - Kamchatskiy" },
  { Value: "Pacific / Nauru", Text: "(UTC+12:00) Nauru" },
  { Value: "Pacific/Tarawa", Text: "(UTC+12:00) Tarawa" },
  { Value: "Pacific/Wake", Text: "(UTC+12:00) Wake" },
  { Value: "Pacific/Wallis", Text: "(UTC+12:00) Wallis" },
  { Value: "Pacific/Auckland", Text: "(UTC+13:00) Auckland" },
  { Value: "Pacific/Enderbury", Text: "(UTC+13:00) Enderbury" },
  { Value: "Pacific/Fakaofo", Text: "(UTC+13:00) Fakaofo" },
  { Value: "Pacific/Fiji", Text: "(UTC+13:00) Fiji" },
  { Value: "Pacific/Tongatapu", Text: "(UTC+13:00) Tongatapu" },
  { Value: "Pacific/Apia", Text: "(UTC+14:00) Apia" },
  { Value: "Pacific/Kiritimati", Text: "(UTC+14:00) Kiritimati" }
];

// node_modules/@syncfusion/ej2-schedule/src/recurrence-editor/date-generator.js
function generateSummary(rule, localeObject, locale, calendarType) {
  if (calendarType === void 0) {
    calendarType = "Gregorian";
  }
  var ruleObject = extractObjectFromRule(rule);
  var summary = localeObject.getConstant(EVERY) + " ";
  var cldrObj;
  var cldrObj1;
  var calendarMode = calendarType.toLowerCase();
  if (locale === "en" || locale === "en-US") {
    var nameSpace1 = "months.stand-alone.abbreviated";
    var nameSpace = "days.stand-alone.abbreviated";
    cldrObj1 = getValue(nameSpace1, getDefaultDateObject(calendarMode));
    cldrObj = getValue(nameSpace, getDefaultDateObject(calendarMode));
  } else {
    var nameSpace1 = "main." + locale + ".dates.calendars." + calendarMode + ".months.stand-alone.abbreviated";
    var nameSpace = "main." + locale + ".dates.calendars." + calendarMode + ".days.stand-alone.abbreviated";
    cldrObj1 = getValue(nameSpace1, cldrData);
    cldrObj = getValue(nameSpace, cldrData);
  }
  if (ruleObject.interval > 1) {
    summary += ruleObject.interval + " ";
  }
  switch (ruleObject.freq) {
    case "DAILY":
      summary += localeObject.getConstant(DAYS);
      break;
    case "WEEKLY":
      summary += localeObject.getConstant(WEEKS) + " " + localeObject.getConstant(ON) + " ";
      ruleObject.day.forEach(function(day, index) {
        summary += capitalizeFirstWord(getValue(DAYINDEXOBJECT["" + day], cldrObj), "single");
        summary += ruleObject.day.length - 1 === index ? "" : ", ";
      });
      break;
    case "MONTHLY":
      summary += localeObject.getConstant(MONTHS) + " " + localeObject.getConstant(ON) + " ";
      summary += getMonthSummary(ruleObject, cldrObj, localeObject);
      break;
    case "YEARLY":
      summary += localeObject.getConstant(YEARS) + " " + localeObject.getConstant(ON) + " ";
      summary += capitalizeFirstWord(getValue(ruleObject.month[0].toString(), cldrObj1), "single") + " ";
      summary += getMonthSummary(ruleObject, cldrObj, localeObject);
      break;
  }
  if (ruleObject.count) {
    summary += ", " + ruleObject.count + " " + localeObject.getConstant(TIMES);
  } else if (ruleObject.until) {
    var tempDate = ruleObject.until;
    summary += ", " + localeObject.getConstant(UNTIL) + " " + tempDate.getDate() + " " + capitalizeFirstWord(getValue((tempDate.getMonth() + 1).toString(), cldrObj1), "single") + " " + tempDate.getFullYear();
  }
  return summary;
}
function getMonthSummary(ruleObject, cldrObj, localeObj) {
  var summary = "";
  if (ruleObject.monthDay.length) {
    summary += ruleObject.monthDay[0];
  } else if (ruleObject.day) {
    var pos = ruleObject.setPosition - 1;
    summary += localeObj.getConstant(WEEKPOS[pos > -1 ? pos : WEEKPOS.length - 1]) + " " + capitalizeFirstWord(getValue(DAYINDEXOBJECT[ruleObject.day[0]], cldrObj), "single");
  }
  return summary;
}
function generate(startDate, rule, excludeDate, startDayOfWeek, maximumCount, viewDate, calendarMode, newTimezone) {
  if (maximumCount === void 0) {
    maximumCount = MAXOCCURRENCE;
  }
  if (viewDate === void 0) {
    viewDate = null;
  }
  if (calendarMode === void 0) {
    calendarMode = "Gregorian";
  }
  if (newTimezone === void 0) {
    newTimezone = null;
  }
  var ruleObject = extractObjectFromRule(rule);
  var cacheDate;
  calendarUtil = getCalendarUtil(calendarMode);
  var data = [];
  var modifiedDate = new Date(startDate.getTime());
  tempExcludeDate = [];
  var tempDate = isNullOrUndefined(excludeDate) ? [] : excludeDate.split(",");
  var tz = new Timezone();
  tempDate.forEach(function(content) {
    var parsedDate = getDateFromRecurrenceDateString(content);
    if (newTimezone) {
      parsedDate = tz.add(new Date(parsedDate.getTime()), newTimezone);
    }
    tempExcludeDate.push(new Date(parsedDate.getTime()).setHours(0, 0, 0, 0));
  });
  ruleObject.recExceptionCount = !isNullOrUndefined(ruleObject.count) ? tempExcludeDate.length : 0;
  if (viewDate && viewDate > startDate && !ruleObject.count) {
    tempViewDate = new Date(new Date(viewDate.getTime()).setHours(0, 0, 0));
  } else {
    tempViewDate = null;
  }
  if (!ruleObject.until && tempViewDate) {
    cacheDate = new Date(tempViewDate.getTime());
    cacheDate.setDate(tempViewDate.getDate() + maximumCount * ruleObject.interval);
    ruleObject.until = cacheDate;
  }
  if (ruleObject.until && startDate > ruleObject.until) {
    return data;
  }
  maxOccurrence = maximumCount;
  startDayOfWeek = startDayOfWeek || 0;
  setFirstDayOfWeek(DAYINDEX[parseInt(startDayOfWeek.toString(), 10)]);
  if (ruleObject.until) {
    var end = resetTime(ruleObject.until);
    ruleObject.until = new Date(end.getFullYear(), end.getMonth(), end.getDate(), 23, 59, 59);
  }
  switch (ruleObject.freq) {
    case "DAILY":
      dailyType(modifiedDate, ruleObject.until, data, ruleObject);
      break;
    case "WEEKLY":
      weeklyType(modifiedDate, ruleObject.until, data, ruleObject);
      break;
    case "MONTHLY":
      monthlyType(modifiedDate, ruleObject.until, data, ruleObject);
      break;
    case "YEARLY":
      yearlyType(modifiedDate, ruleObject.until, data, ruleObject);
  }
  return data;
}
function getDateFromRecurrenceDateString(recDateString) {
  return /* @__PURE__ */ new Date(recDateString.substr(0, 4) + "-" + recDateString.substr(4, 2) + "-" + recDateString.substr(6, 5) + ":" + recDateString.substr(11, 2) + ":" + recDateString.substr(13));
}
function excludeDateHandler(data, date) {
  var zeroIndex = new Date(date).setHours(0, 0, 0, 0);
  if (tempExcludeDate.indexOf(zeroIndex) === -1 && (!tempViewDate || zeroIndex >= tempViewDate.getTime())) {
    data.push(date);
  }
}
function getDateCount2(startDate, ruleObject) {
  var count = maxOccurrence;
  if (ruleObject.count) {
    count = ruleObject.count;
  } else if (ruleObject.until) {
    if (ruleObject.freq === "DAILY" || ruleObject.freq === "WEEKLY") {
      count = Math.floor((ruleObject.until.getTime() - startDate.getTime()) / MS_PER_DAY) + 1;
    } else if (ruleObject.freq === "MONTHLY" || ruleObject.freq === "YEARLY") {
      count = Math.floor((ruleObject.until.getMonth() + 12 * ruleObject.until.getFullYear() - (startDate.getMonth() + 12 * startDate.getFullYear())) / ruleObject.interval) + (ruleObject.day.length > 1 ? Math.floor((ruleObject.until.getTime() - startDate.getTime()) / MS_PER_DAY) + 1 : 1);
      if (ruleObject.freq === "YEARLY") {
        count = ruleObject.month.length > 1 ? count * ruleObject.month.length : count;
      }
    }
  }
  return count;
}
function dailyType(startDate, endDate, data, ruleObject) {
  var tempDate = new Date(startDate.getTime());
  var interval = ruleObject.interval;
  var expectedCount = getDateCount2(startDate, ruleObject);
  var state;
  var expectedDays = ruleObject.day;
  while (compareDates(tempDate, endDate)) {
    state = true;
    state = validateRules(tempDate, ruleObject);
    if (state && (expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1 || expectedDays.length === 0)) {
      excludeDateHandler(data, tempDate.getTime());
      if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {
        break;
      }
    }
    tempDate.setDate(tempDate.getDate() + interval);
    if (tempDate.getHours() !== startDate.getHours()) {
      tempDate.setHours(startDate.getHours());
    }
  }
}
function weeklyType(startDate, endDate, data, ruleObject) {
  var tempDate = new Date(startDate.getTime());
  if (!ruleObject.day.length) {
    ruleObject.day.push(DAYINDEX[startDate.getDay()]);
  }
  var interval = ruleObject.interval;
  var expectedDays = ruleObject.day;
  var expectedCount = getDateCount2(startDate, ruleObject);
  var weekState = true;
  var wkstIndex;
  var weekCollection = [];
  if (expectedDays.length > 1) {
    if (isNullOrUndefined(ruleObject.wkst) || ruleObject.wkst === "") {
      ruleObject.wkst = dayIndex[0];
    }
    wkstIndex = DAYINDEX.indexOf(ruleObject.wkst);
    while (compareDates(tempDate, endDate)) {
      var startDateDiff = DAYINDEX.indexOf(DAYINDEX[tempDate.getDay()]) - wkstIndex;
      startDateDiff = startDateDiff === -1 ? 6 : startDateDiff;
      var weekstartDate = addDays(tempDate, -startDateDiff);
      var weekendDate = addDays(weekstartDate, 6);
      var compareTempDate = new Date(tempDate.getTime());
      weekendDate = resetTime(weekendDate);
      compareTempDate = resetTime(compareTempDate);
      while (weekendDate >= compareTempDate) {
        if (expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {
          weekCollection.push([tempDate.getTime()]);
        }
        if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {
          break;
        }
        tempDate.setDate(tempDate.getDate() + 1);
        if (tempDate.getHours() !== startDate.getHours()) {
          tempDate.setHours(startDate.getHours());
        }
        compareTempDate = new Date(tempDate.getTime());
        compareTempDate = resetTime(compareTempDate);
      }
      tempDate.setDate(tempDate.getDate() - 1);
      if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {
        break;
      }
      tempDate.setDate(tempDate.getDate() + 1 + (interval - 1) * 7);
      insertDataCollection(weekCollection, weekState, startDate, endDate, data, ruleObject);
      weekCollection = [];
    }
  } else {
    tempDate = getStartDateForWeek(startDate, ruleObject.day);
    if (interval > 1 && dayIndex.indexOf(ruleObject.day[0]) < startDate.getDay()) {
      tempDate.setDate(tempDate.getDate() + (interval - 1) * 7);
    }
    while (compareDates(tempDate, endDate)) {
      weekState = validateRules(tempDate, ruleObject);
      if (weekState && expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {
        excludeDateHandler(data, tempDate.getTime());
      }
      if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {
        break;
      }
      tempDate.setDate(tempDate.getDate() + interval * 7);
    }
    insertDataCollection(weekCollection, weekState, startDate, endDate, data, ruleObject);
    weekCollection = [];
  }
}
function monthlyType(startDate, endDate, data, ruleObject) {
  if (!ruleObject.month.length && !ruleObject.day.length && !ruleObject.monthDay.length) {
    ruleObject.monthDay.push(startDate.getDate());
    if (ruleObject.freq === "YEARLY") {
      ruleObject.month.push(startDate.getMonth() + 1);
    }
  } else if (ruleObject.month.length > 0 && !ruleObject.day.length && !ruleObject.monthDay.length) {
    ruleObject.monthDay.push(startDate.getDate());
  }
  var ruleType = validateMonthlyRuleType(ruleObject);
  switch (ruleType) {
    case "day":
      switch (ruleObject.freq) {
        case "MONTHLY":
          monthlyDayTypeProcessforMonthFreq(startDate, endDate, data, ruleObject);
          break;
        case "YEARLY":
          monthlyDayTypeProcess(startDate, endDate, data, ruleObject);
          break;
      }
      break;
    case "both":
    case "date":
      switch (ruleObject.freq) {
        case "MONTHLY":
          monthlyDateTypeProcessforMonthFreq(startDate, endDate, data, ruleObject);
          break;
        case "YEARLY":
          monthlyDateTypeProcess(startDate, endDate, data, ruleObject);
          break;
      }
      break;
  }
}
function yearlyType(startDate, endDate, data, ruleObject) {
  var typeValue = checkYearlyType(ruleObject);
  switch (typeValue) {
    case "MONTH":
      monthlyType(startDate, endDate, data, ruleObject);
      break;
    case "WEEKNO":
      processWeekNo(startDate, endDate, data, ruleObject);
      break;
    case "YEARDAY":
      processYearDay(startDate, endDate, data, ruleObject);
      break;
  }
}
function processWeekNo(startDate, endDate, data, ruleObject) {
  var stDate = calendarUtil.getYearLastDate(startDate, 0);
  var tempDate;
  var expectedCount = getDateCount2(startDate, ruleObject);
  var state;
  var startDay;
  var firstWeekSpan;
  var weekNos = ruleObject.weekNo;
  var weekNo;
  var maxDate;
  var minDate;
  var weekCollection = [];
  var expectedDays = ruleObject.day;
  while (compareDates(stDate, endDate)) {
    startDay = dayIndex.indexOf(DAYINDEX[stDate.getDay()]);
    firstWeekSpan = 6 - startDay + 1;
    for (var index = 0; index < weekNos.length; index++) {
      weekNo = weekNos[parseInt(index.toString(), 10)];
      weekNo = weekNo > 0 ? weekNo : 53 + weekNo + 1;
      maxDate = weekNo === 1 ? firstWeekSpan : firstWeekSpan + (weekNo - 1) * 7;
      minDate = weekNo === 1 ? firstWeekSpan - 7 : firstWeekSpan + (weekNo - 2) * 7;
      while (minDate < maxDate) {
        tempDate = new Date(stDate.getTime() + MS_PER_DAY * minDate);
        if (expectedDays.length === 0 || expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {
          if (isNullOrUndefined(ruleObject.setPosition)) {
            insertDateCollection(state, startDate, endDate, data, ruleObject, tempDate.getTime());
          } else {
            weekCollection.push([tempDate.getTime()]);
          }
        }
        minDate++;
      }
    }
    if (!isNullOrUndefined(ruleObject.setPosition)) {
      insertDatasIntoExistingCollection(weekCollection, state, startDate, endDate, data, ruleObject);
    }
    if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {
      return;
    }
    stDate = calendarUtil.getYearLastDate(tempDate, ruleObject.interval);
    weekCollection = [];
  }
}
function processYearDay(startDate, endDate, data, ruleObject) {
  var stDate = calendarUtil.getYearLastDate(startDate, 0);
  var tempDate;
  var expectedCount = getDateCount2(startDate, ruleObject);
  var state;
  var dateCollection = [];
  var date;
  var expectedDays = ruleObject.day;
  while (compareDates(stDate, endDate)) {
    for (var index = 0; index < ruleObject.yearDay.length; index++) {
      date = ruleObject.yearDay[parseInt(index.toString(), 10)];
      tempDate = new Date(stDate.getTime());
      if ((date === calendarUtil.getLeapYearDaysCount() || date === -calendarUtil.getLeapYearDaysCount()) && !calendarUtil.isLeapYear(calendarUtil.getFullYear(tempDate), 1)) {
        tempDate.setDate(tempDate.getDate() + 1);
        continue;
      }
      tempDate.setDate(tempDate.getDate() + (date < 0 ? calendarUtil.getYearDaysCount(tempDate, 1) + 1 + date : date));
      if (expectedDays.length === 0 || expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {
        if (ruleObject.setPosition == null) {
          insertDateCollection(state, startDate, endDate, data, ruleObject, tempDate.getTime());
        } else {
          dateCollection.push([tempDate.getTime()]);
        }
      }
    }
    if (!isNullOrUndefined(ruleObject.setPosition)) {
      insertDatasIntoExistingCollection(dateCollection, state, startDate, endDate, data, ruleObject);
    }
    if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {
      return;
    }
    stDate = calendarUtil.getYearLastDate(tempDate, ruleObject.interval);
    dateCollection = [];
  }
}
function checkYearlyType(ruleObject) {
  if (ruleObject.yearDay.length) {
    return "YEARDAY";
  } else if (ruleObject.weekNo.length) {
    return "WEEKNO";
  }
  return "MONTH";
}
function initializeRecRuleVariables(startDate, ruleObject) {
  var ruleData = {
    monthCollection: [],
    index: 0,
    tempDate: new Date(startDate.getTime()),
    mainDate: new Date(startDate.getTime()),
    expectedCount: getDateCount2(startDate, ruleObject),
    monthInit: 0,
    dateCollection: []
  };
  if (ruleObject.month.length) {
    calendarUtil.setMonth(ruleData.tempDate, ruleObject.month[0], ruleData.tempDate.getDate());
  }
  return ruleData;
}
function monthlyDateTypeProcess(startDate, endDate, data, ruleObject) {
  if (ruleObject.month.length) {
    monthlyDateTypeProcessforMonthFreq(startDate, endDate, data, ruleObject);
    return;
  }
  var ruleData = initializeRecRuleVariables(startDate, ruleObject);
  var currentMonthDate;
  ruleData.tempDate = ruleData.mainDate = calendarUtil.getMonthStartDate(ruleData.tempDate);
  while (compareDates(ruleData.tempDate, endDate)) {
    currentMonthDate = new Date(ruleData.tempDate.getTime());
    while (calendarUtil.isSameYear(currentMonthDate, ruleData.tempDate) && (ruleData.expectedCount && data.length + ruleObject.recExceptionCount <= ruleData.expectedCount)) {
      if (ruleObject.month.length === 0 || ruleObject.month.length > 0 && !calendarUtil.checkMonth(ruleData.tempDate, ruleObject.month)) {
        processDateCollectionForByMonthDay(ruleObject, ruleData, endDate, false);
        ruleData.beginDate = new Date(ruleData.tempDate.getTime());
        ruleData.monthInit = setNextValidDate(ruleData.tempDate, ruleObject, ruleData.monthInit, ruleData.beginDate);
      } else {
        calendarUtil.setValidDate(ruleData.tempDate, 1, 1);
        ruleData.tempDate = getStartDateForWeek(ruleData.tempDate, ruleObject.day);
        break;
      }
    }
    ruleData.tempDate.setFullYear(currentMonthDate.getFullYear(), currentMonthDate.getMonth(), currentMonthDate.getDate());
    insertDataCollection(ruleData.dateCollection, ruleData.state, startDate, endDate, data, ruleObject);
    if (calendarUtil.isLastMonth(ruleData.tempDate)) {
      calendarUtil.setValidDate(ruleData.tempDate, 1, 1);
      ruleData.tempDate = getStartDateForWeek(ruleData.tempDate, ruleObject.day);
    }
    if (ruleData.expectedCount && data.length + ruleObject.recExceptionCount >= ruleData.expectedCount) {
      return;
    }
    ruleData.tempDate.setFullYear(ruleData.tempDate.getFullYear() + ruleObject.interval - 1);
    ruleData.tempDate = getStartDateForWeek(ruleData.tempDate, ruleObject.day);
    ruleData.monthInit = setNextValidDate(ruleData.tempDate, ruleObject, ruleData.monthInit, ruleData.beginDate);
    ruleData.dateCollection = [];
  }
}
function monthlyDateTypeProcessforMonthFreq(startDate, endDate, data, ruleObject) {
  var ruleData = initializeRecRuleVariables(startDate, ruleObject);
  ruleData.tempDate = ruleData.mainDate = calendarUtil.getMonthStartDate(ruleData.tempDate);
  if ((ruleObject.freq === "MONTHLY" && ruleObject.interval === 12 || ruleObject.freq === "YEARLY") && calendarUtil.getMonthDaysCount(startDate) < ruleObject.monthDay[0]) {
    return;
  }
  while (compareDates(ruleData.tempDate, endDate)) {
    ruleData.beginDate = new Date(ruleData.tempDate.getTime());
    processDateCollectionForByMonthDay(ruleObject, ruleData, endDate, true, startDate, data);
    if (!isNullOrUndefined(ruleObject.setPosition)) {
      insertDatasIntoExistingCollection(ruleData.dateCollection, ruleData.state, startDate, endDate, data, ruleObject);
    }
    if (ruleData.expectedCount && data.length + ruleObject.recExceptionCount >= ruleData.expectedCount) {
      return;
    }
    ruleData.monthInit = setNextValidDate(ruleData.tempDate, ruleObject, ruleData.monthInit, ruleData.beginDate);
    ruleData.dateCollection = [];
  }
}
function processDateCollectionForByMonthDay(ruleObject, recRuleVariables, endDate, isByMonth, startDate, data) {
  for (var index = 0; index < ruleObject.monthDay.length; index++) {
    recRuleVariables.date = ruleObject.monthDay[parseInt(index.toString(), 10)];
    recRuleVariables.tempDate = calendarUtil.getMonthStartDate(recRuleVariables.tempDate);
    var maxDate = calendarUtil.getMonthDaysCount(recRuleVariables.tempDate);
    recRuleVariables.date = recRuleVariables.date > 0 ? recRuleVariables.date : maxDate + recRuleVariables.date + 1;
    if (validateProperDate(recRuleVariables.tempDate, recRuleVariables.date, recRuleVariables.mainDate) && recRuleVariables.date > 0) {
      calendarUtil.setDate(recRuleVariables.tempDate, recRuleVariables.date);
      if (endDate && recRuleVariables.tempDate > endDate) {
        return;
      }
      if (ruleObject.day.length === 0 || ruleObject.day.indexOf(DAYINDEX[recRuleVariables.tempDate.getDay()]) > -1) {
        if (isByMonth && isNullOrUndefined(ruleObject.setPosition) && (recRuleVariables.expectedCount && data.length + ruleObject.recExceptionCount < recRuleVariables.expectedCount)) {
          insertDateCollection(recRuleVariables.state, startDate, endDate, data, ruleObject, recRuleVariables.tempDate.getTime());
        } else {
          recRuleVariables.dateCollection.push([recRuleVariables.tempDate.getTime()]);
        }
      }
    }
  }
}
function setNextValidDate(tempDate, ruleObject, monthInit, beginDate, interval) {
  if (beginDate === void 0) {
    beginDate = null;
  }
  var monthData = beginDate ? beginDate.getMonth() : 0;
  var startDate = calendarUtil.getMonthStartDate(tempDate);
  interval = isNullOrUndefined(interval) ? ruleObject.interval : interval;
  tempDate.setFullYear(startDate.getFullYear());
  tempDate.setMonth(startDate.getMonth());
  tempDate.setDate(startDate.getDate());
  if (ruleObject.month.length) {
    monthInit++;
    monthInit = monthInit % ruleObject.month.length;
    calendarUtil.setMonth(tempDate, ruleObject.month[parseInt(monthInit.toString(), 10)], 1);
    if (monthInit === 0) {
      calendarUtil.addYears(tempDate, interval, ruleObject.month[0]);
    }
  } else {
    if (beginDate && beginDate.getFullYear() < tempDate.getFullYear()) {
      monthData = tempDate.getMonth() - 1;
    }
    calendarUtil.setValidDate(tempDate, interval, 1, monthData, beginDate);
  }
  return monthInit;
}
function getMonthCollection(startDate, endDate, data, ruleObject) {
  var expectedDays = ruleObject.day;
  var tempDate = new Date(startDate.getTime());
  tempDate = calendarUtil.getMonthStartDate(tempDate);
  var monthCollection = [];
  var dateCollection = [];
  var dates = [];
  var index;
  var state;
  var expectedCount = getDateCount2(startDate, ruleObject);
  var monthInit = 0;
  var beginDate;
  if (ruleObject.month.length) {
    calendarUtil.setMonth(tempDate, ruleObject.month[0], 1);
  }
  tempDate = getStartDateForWeek(tempDate, ruleObject.day);
  while (compareDates(tempDate, endDate) && (expectedCount && data.length + ruleObject.recExceptionCount < expectedCount)) {
    var currentMonthDate = new Date(tempDate.getTime());
    var isHavingNumber = expectedDays.map(function(item) {
      return HASNUMBER.test(item);
    });
    if (isHavingNumber.indexOf(true) > -1) {
      for (var j = 0; j <= expectedDays.length - 1; j++) {
        var expectedDaysArray = expectedDays[parseInt(j.toString(), 10)].match(SPLITNUMBERANDSTRING);
        var position = parseInt(expectedDaysArray[0], 10);
        tempDate = new Date(tempDate.getTime());
        tempDate = calendarUtil.getMonthStartDate(tempDate);
        tempDate = getStartDateForWeek(tempDate, expectedDays);
        currentMonthDate.setFullYear(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate());
        while (calendarUtil.isSameYear(currentMonthDate, tempDate) && calendarUtil.isSameMonth(currentMonthDate, tempDate)) {
          if (expectedDaysArray[expectedDaysArray.length - 1] === DAYINDEX[currentMonthDate.getDay()]) {
            monthCollection.push([currentMonthDate.getTime()]);
          }
          currentMonthDate.setDate(currentMonthDate.getDate() + 1);
        }
        currentMonthDate.setDate(currentMonthDate.getDate() - 1);
        if (expectedDaysArray[0].indexOf("-") > -1) {
          index = monthCollection.length - -1 * position;
        } else {
          index = position - 1;
        }
        index = isNaN(index) ? 0 : index;
        if (monthCollection.length > 0) {
          if (isNullOrUndefined(ruleObject.setPosition)) {
            insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index);
          } else {
            dateCollection = [filterDateCollectionByIndex(monthCollection, index, dates)];
          }
        }
        if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {
          return;
        }
        monthCollection = [];
      }
      if (!isNullOrUndefined(ruleObject.setPosition)) {
        insertDateCollectionBasedonBySetPos(dateCollection, state, startDate, endDate, data, ruleObject);
        dates = [];
      }
      monthInit = setNextValidDate(tempDate, ruleObject, monthInit, beginDate);
      tempDate = getStartDateForWeek(tempDate, ruleObject.day);
      monthCollection = [];
    } else {
      var weekCollection = [];
      var dayCycleData = processWeekDays(expectedDays);
      currentMonthDate.setFullYear(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate());
      var initialDate = new Date(tempDate.getTime());
      beginDate = new Date(tempDate.getTime());
      while (calendarUtil.isSameMonth(initialDate, tempDate)) {
        weekCollection.push(tempDate.getTime());
        if (expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {
          monthCollection.push(weekCollection);
          weekCollection = [];
        }
        tempDate.setDate(tempDate.getDate() + dayCycleData[DAYINDEX[tempDate.getDay()]]);
      }
      index = ruleObject.setPosition < 1 ? monthCollection.length + ruleObject.setPosition : ruleObject.setPosition - 1;
      if (isNullOrUndefined(ruleObject.setPosition)) {
        index = 0;
        var datas = [];
        for (var week = 0; week < monthCollection.length; week++) {
          for (var row = 0; row < monthCollection[parseInt(week.toString(), 10)].length; row++) {
            datas.push(monthCollection[parseInt(week.toString(), 10)][parseInt(row.toString(), 10)]);
          }
        }
        monthCollection = [datas];
      }
      if (monthCollection.length > 0) {
        insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index);
      }
      if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {
        return;
      }
      monthInit = setNextValidDate(tempDate, ruleObject, monthInit, beginDate);
      tempDate = getStartDateForWeek(tempDate, ruleObject.day);
      monthCollection = [];
    }
  }
}
function monthlyDayTypeProcessforMonthFreq(startDate, endDate, data, ruleObject) {
  var expectedDays = ruleObject.day;
  if (expectedDays.length > 1) {
    getMonthCollection(startDate, endDate, data, ruleObject);
    return;
  }
  var tempDate = new Date(startDate.getTime());
  var expectedCount = getDateCount2(startDate, ruleObject);
  var monthCollection = [];
  var beginDate;
  var monthInit = 0;
  tempDate = calendarUtil.getMonthStartDate(tempDate);
  if (ruleObject.month.length) {
    calendarUtil.setMonth(tempDate, ruleObject.month[0], 1);
  }
  tempDate = getStartDateForWeek(tempDate, ruleObject.day);
  while (compareDates(tempDate, endDate) && (expectedCount && data.length + ruleObject.recExceptionCount < expectedCount)) {
    beginDate = new Date(tempDate.getTime());
    var currentMonthDate = new Date(tempDate.getTime());
    while (calendarUtil.isSameMonth(tempDate, currentMonthDate)) {
      monthCollection.push([currentMonthDate.getTime()]);
      currentMonthDate.setDate(currentMonthDate.getDate() + 7);
    }
    insertDateCollectionBasedonIndex(monthCollection, startDate, endDate, data, ruleObject);
    monthInit = setNextValidDate(tempDate, ruleObject, monthInit, beginDate);
    tempDate = getStartDateForWeek(tempDate, ruleObject.day);
    monthCollection = [];
  }
}
function monthlyDayTypeProcess(startDate, endDate, data, ruleObject) {
  var expectedDays = ruleObject.day;
  var isHavingNumber = expectedDays.map(function(item) {
    return HASNUMBER.test(item);
  });
  if (expectedDays.length > 1 && isHavingNumber.indexOf(true) > -1) {
    processDateCollectionforByDayWithInteger(startDate, endDate, data, ruleObject);
    return;
  } else if (ruleObject.month.length && expectedDays.length === 1 && isHavingNumber.indexOf(true) > -1) {
    monthlyDayTypeProcessforMonthFreq(startDate, endDate, data, ruleObject);
    return;
  }
  var tempDate = new Date(startDate.getTime());
  var currentMonthDate;
  var expectedCount = getDateCount2(startDate, ruleObject);
  var interval = ruleObject.interval;
  var monthCollection = [];
  if (ruleObject.month.length) {
    calendarUtil.setMonth(tempDate, ruleObject.month[0], tempDate.getDate());
  }
  if (isNullOrUndefined(ruleObject.setPosition) && ruleObject.month.length === 0 && ruleObject.weekNo.length === 0) {
    tempDate.setFullYear(startDate.getFullYear(), 0, 1);
  }
  tempDate = calendarUtil.getMonthStartDate(tempDate);
  tempDate = getStartDateForWeek(tempDate, ruleObject.day);
  while (compareDates(tempDate, endDate)) {
    currentMonthDate = new Date(tempDate.getTime());
    while (calendarUtil.isSameYear(currentMonthDate, tempDate) && (expectedCount && data.length + ruleObject.recExceptionCount <= expectedCount)) {
      currentMonthDate = new Date(tempDate.getTime());
      while (calendarUtil.isSameYear(currentMonthDate, tempDate)) {
        if (ruleObject.month.length === 0 || ruleObject.month.length > 0 && !calendarUtil.checkMonth(tempDate, ruleObject.month)) {
          if (expectedDays.length > 1) {
            if (calendarUtil.compareMonth(currentMonthDate, tempDate)) {
              calendarUtil.setValidDate(tempDate, 1, 1);
              tempDate = getStartDateForWeek(tempDate, ruleObject.day);
              break;
            }
            if (expectedDays.indexOf(DAYINDEX[currentMonthDate.getDay()]) > -1) {
              monthCollection.push([currentMonthDate.getTime()]);
            }
            currentMonthDate.setDate(currentMonthDate.getDate() + 1);
          } else {
            if (currentMonthDate.getFullYear() > tempDate.getFullYear()) {
              calendarUtil.setValidDate(tempDate, 1, 1);
              tempDate = getStartDateForWeek(tempDate, ruleObject.day);
              break;
            }
            var newstr = getDayString(expectedDays[0]);
            if (DAYINDEX[currentMonthDate.getDay()] === newstr && new Date(currentMonthDate.getFullYear(), currentMonthDate.getMonth(), 0) > new Date(startDate.getFullYear())) {
              monthCollection.push([currentMonthDate.getTime()]);
            }
            currentMonthDate.setDate(currentMonthDate.getDate() + 7);
          }
        } else {
          calendarUtil.setValidDate(tempDate, 1, 1);
          tempDate = getStartDateForWeek(tempDate, ruleObject.day);
          break;
        }
      }
    }
    tempDate.setFullYear(currentMonthDate.getFullYear(), currentMonthDate.getMonth(), currentMonthDate.getDate());
    insertDateCollectionBasedonIndex(monthCollection, startDate, endDate, data, ruleObject);
    if (calendarUtil.isLastMonth(tempDate)) {
      calendarUtil.setValidDate(tempDate, 1, 1);
      tempDate = getStartDateForWeek(tempDate, ruleObject.day);
    }
    tempDate.setFullYear(tempDate.getFullYear() + interval - 1);
    if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {
      return;
    }
    tempDate = getStartDateForWeek(tempDate, ruleObject.day);
    monthCollection = [];
  }
}
function processDateCollectionforByDayWithInteger(startDate, endDate, data, ruleObject) {
  var expectedDays = ruleObject.day;
  var expectedCount = getDateCount2(startDate, ruleObject);
  var tempDate = new Date(startDate.getTime());
  var interval = ruleObject.interval;
  var monthCollection = [];
  var dateCollection = [];
  var index;
  var state;
  var monthInit = 0;
  var currentMonthDate;
  var currentDate;
  var beginDate;
  tempDate = calendarUtil.getMonthStartDate(tempDate);
  var datas = [];
  if (ruleObject.month.length) {
    calendarUtil.setMonth(tempDate, ruleObject.month[0], 1);
  }
  tempDate = getStartDateForWeek(tempDate, ruleObject.day);
  while (compareDates(tempDate, endDate)) {
    currentMonthDate = new Date(tempDate.getTime());
    for (var i = 0; i <= ruleObject.month.length; i++) {
      for (var j = 0; j <= expectedDays.length - 1; j++) {
        tempDate = calendarUtil.getMonthStartDate(tempDate);
        tempDate = getStartDateForWeek(tempDate, ruleObject.day);
        monthCollection = [];
        while (calendarUtil.isSameYear(currentMonthDate, tempDate) && (expectedCount && data.length + ruleObject.recExceptionCount <= expectedCount)) {
          while (calendarUtil.isSameYear(currentMonthDate, tempDate)) {
            currentMonthDate = new Date(tempDate.getTime());
            if (ruleObject.month.length === 0 || ruleObject.month.length > 0 && ruleObject.month[parseInt(i.toString(), 10)] === calendarUtil.getMonth(currentMonthDate)) {
              var expectedDaysArray = expectedDays[parseInt(j.toString(), 10)].match(SPLITNUMBERANDSTRING);
              var position = parseInt(expectedDaysArray[0], 10);
              currentDate = new Date(tempDate.getTime());
              while (calendarUtil.isSameYear(currentDate, tempDate) && calendarUtil.isSameMonth(currentDate, tempDate)) {
                if (expectedDaysArray[expectedDaysArray.length - 1] === DAYINDEX[currentDate.getDay()]) {
                  monthCollection.push([currentDate.getTime()]);
                }
                currentDate.setDate(currentDate.getDate() + 1);
              }
              currentDate.setDate(currentDate.getDate() - 1);
              if (expectedDaysArray[0].indexOf("-") > -1) {
                index = monthCollection.length - -1 * position;
              } else {
                index = position - 1;
              }
              index = isNaN(index) ? 0 : index;
            }
            monthInit = setNextValidDate(tempDate, ruleObject, monthInit, beginDate, 1);
            tempDate = getStartDateForWeek(tempDate, ruleObject.day);
          }
        }
        tempDate = j === 0 && currentDate ? new Date(currentDate.getTime()) : new Date(currentMonthDate.getTime());
        if (monthCollection.length > 0) {
          if (isNullOrUndefined(ruleObject.setPosition)) {
            insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index);
          } else {
            dateCollection = [filterDateCollectionByIndex(monthCollection, index, datas)];
          }
        }
        if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {
          return;
        }
      }
    }
    if (!isNullOrUndefined(ruleObject.setPosition)) {
      insertDateCollectionBasedonBySetPos(dateCollection, state, startDate, endDate, data, ruleObject);
      datas = [];
    }
    if (calendarUtil.isLastMonth(tempDate)) {
      calendarUtil.setValidDate(tempDate, 1, 1);
      tempDate.setFullYear(tempDate.getFullYear() + interval - 1);
    } else {
      tempDate.setFullYear(tempDate.getFullYear() + interval);
    }
    tempDate = getStartDateForWeek(tempDate, ruleObject.day);
    if (ruleObject.month.length) {
      calendarUtil.setMonth(tempDate, ruleObject.month[0], tempDate.getDate());
    }
  }
}
function getRecurrenceCollection(monthCollection, expectedDays) {
  var index;
  var recurrenceCollectionObject = { monthCollection: [], index: 0 };
  if (expectedDays.length === 1) {
    var expectedDaysArrays = expectedDays[0].match(SPLITNUMBERANDSTRING);
    var arrPosition = void 0;
    if (expectedDaysArrays.length > 1) {
      arrPosition = parseInt(expectedDaysArrays[0], 10);
      index = arrPosition < 1 ? monthCollection.length + arrPosition : arrPosition - 1;
    } else {
      index = 0;
      monthCollection = getDateCollectionforBySetPosNull(monthCollection);
    }
  } else {
    index = 0;
    monthCollection = getDateCollectionforBySetPosNull(monthCollection);
  }
  recurrenceCollectionObject.monthCollection = monthCollection;
  recurrenceCollectionObject.index = index;
  return recurrenceCollectionObject;
}
function insertDataCollection(dateCollection, state, startDate, endDate, data, ruleObject) {
  var index = ruleObject.setPosition < 1 ? dateCollection.length + ruleObject.setPosition : ruleObject.setPosition - 1;
  if (isNullOrUndefined(ruleObject.setPosition)) {
    index = 0;
    dateCollection = getDateCollectionforBySetPosNull(dateCollection);
  }
  if (dateCollection.length > 0) {
    insertDatasIntoExistingCollection(dateCollection, state, startDate, endDate, data, ruleObject, index);
  }
}
function getDateCollectionforBySetPosNull(monthCollection) {
  var datas = [];
  for (var week = 0; week < monthCollection.length; week++) {
    for (var row = 0; row < monthCollection[parseInt(week.toString(), 10)].length; row++) {
      datas.push(new Date(monthCollection[parseInt(week.toString(), 10)][parseInt(row.toString(), 10)]).getTime());
    }
  }
  monthCollection = datas.length > 0 ? [datas] : [];
  return monthCollection;
}
function insertDateCollectionBasedonIndex(monthCollection, startDate, endDate, data, ruleObject) {
  var expectedDays = ruleObject.day;
  var state;
  var datas = [];
  var dateCollection = [];
  var recurrenceCollections = getRecurrenceCollection(monthCollection, expectedDays);
  monthCollection = recurrenceCollections.monthCollection;
  var index = recurrenceCollections.index;
  if (ruleObject.setPosition != null) {
    dateCollection = [filterDateCollectionByIndex(monthCollection, index, datas)];
    insertDateCollectionBasedonBySetPos(dateCollection, state, startDate, endDate, data, ruleObject);
  } else {
    if (monthCollection.length > 0) {
      insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index);
    }
  }
  datas = [];
}
function filterDateCollectionByIndex(monthCollection, index, datas) {
  for (var week = 0; week < monthCollection[parseInt(index.toString(), 10)].length; week++) {
    datas.push(monthCollection[parseInt(index.toString(), 10)][parseInt(week.toString(), 10)]);
  }
  return datas;
}
function insertDateCollection(state, startDate, endDate, data, ruleObject, dayData) {
  var expectedCount = getDateCount2(startDate, ruleObject);
  var chDate = new Date(dayData);
  state = validateRules(chDate, ruleObject);
  if (chDate >= startDate && compareDates(chDate, endDate) && state && expectedCount && data.length + ruleObject.recExceptionCount < expectedCount) {
    excludeDateHandler(data, dayData);
  }
}
function weekCount(year, startDayOfWeek, monthCollection, week, ruleObject) {
  var firstDayOfWeek = startDayOfWeek || 0;
  var firstOfMonth = new Date(year, ruleObject.month[0] - 1, 1);
  var lastOfMonth = new Date(year, ruleObject.month[0], 0);
  var numberOfDaysInMonth = lastOfMonth.getDate();
  var firstWeekDay = (firstOfMonth.getDay() - firstDayOfWeek + 7) % 7;
  var used = firstWeekDay + numberOfDaysInMonth;
  var count = Math.ceil(used / 7) - 1;
  var dayData = monthCollection[parseInt(week.toString(), 10)][parseInt(count.toString(), 10)];
  var chDate = new Date(dayData);
  var state = validateRules(chDate, ruleObject);
  return state ? count : count - 1;
}
function insertDateCollectionBasedonBySetPos(monthCollection, state, startDate, endDate, data, ruleObject) {
  if (monthCollection.length > 0) {
    for (var week = 0; week < monthCollection.length; week++) {
      monthCollection[parseInt(week.toString(), 10)].sort();
      var expectedDays = ruleObject.day;
      var isHavingNumber = expectedDays.map(function(item) {
        return HASNUMBER.test(item);
      });
      var weekIndex = ruleObject.freq === "YEARLY" && ruleObject.validRules.indexOf("BYMONTH") > -1 && !(isHavingNumber.indexOf(true) > -1) ? weekCount(new Date(monthCollection[0][0]).getFullYear(), 0, monthCollection, week, ruleObject) : monthCollection[parseInt(week.toString(), 10)].length + ruleObject.setPosition;
      var index = ruleObject.setPosition < 1 ? weekIndex : ruleObject.setPosition - 1;
      var dayData = monthCollection[parseInt(week.toString(), 10)][parseInt(index.toString(), 10)];
      insertDateCollection(state, startDate, endDate, data, ruleObject, dayData);
    }
  }
}
function insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index) {
  if (monthCollection.length > 0) {
    index = !isNullOrUndefined(index) ? index : ruleObject.setPosition < 1 ? monthCollection.length + ruleObject.setPosition : ruleObject.setPosition - 1;
    monthCollection[parseInt(index.toString(), 10)].sort();
    for (var week = 0; week < monthCollection[parseInt(index.toString(), 10)].length; week++) {
      var dayData = monthCollection[parseInt(index.toString(), 10)][parseInt(week.toString(), 10)];
      insertDateCollection(state, startDate, endDate, data, ruleObject, dayData);
    }
  }
}
function compareDates(startDate, endDate) {
  return endDate ? startDate <= endDate : true;
}
function getDayString(expectedDays) {
  var newstr = expectedDays.replace(REMOVENUMBERINSTRING, "");
  return newstr;
}
function checkDayIndex(day, expectedDays) {
  var sortedExpectedDays = [];
  expectedDays.forEach(function(element) {
    var expectedDaysNumberSplit = element.match(SPLITNUMBERANDSTRING);
    if (expectedDaysNumberSplit.length === 2) {
      sortedExpectedDays.push(expectedDaysNumberSplit[1]);
    } else {
      sortedExpectedDays.push(expectedDaysNumberSplit[0]);
    }
  });
  return sortedExpectedDays.indexOf(DAYINDEX[parseInt(day.toString(), 10)]) === -1;
}
function getStartDateForWeek(startDate, expectedDays) {
  var tempDate = new Date(startDate.getTime());
  var newstr;
  if (expectedDays.length > 0) {
    var expectedDaysArr = [];
    for (var i = 0; i <= expectedDays.length - 1; i++) {
      newstr = getDayString(expectedDays[parseInt(i.toString(), 10)]);
      expectedDaysArr.push(newstr);
    }
    if (expectedDaysArr.indexOf(DAYINDEX[tempDate.getDay()]) === -1) {
      do {
        tempDate.setDate(tempDate.getDate() + 1);
      } while (expectedDaysArr.indexOf(DAYINDEX[tempDate.getDay()]) === -1);
    }
  }
  return tempDate;
}
function extractObjectFromRule(rules) {
  var ruleObject = {
    freq: null,
    interval: 1,
    count: null,
    until: null,
    day: [],
    wkst: null,
    month: [],
    weekNo: [],
    monthDay: [],
    yearDay: [],
    setPosition: null,
    validRules: []
  };
  var rulesList = rules.split(";");
  var splitData = [];
  var temp;
  rulesList.forEach(function(data) {
    splitData = data.split("=");
    switch (splitData[0]) {
      case "UNTIL":
        temp = splitData[1];
        ruleObject.until = getDateFromRecurrenceDateString(temp);
        break;
      case "BYDAY":
        ruleObject.day = splitData[1].split(",");
        ruleObject.validRules.push(splitData[0]);
        break;
      case "BYMONTHDAY":
        ruleObject.monthDay = splitData[1].split(",").map(Number);
        ruleObject.validRules.push(splitData[0]);
        break;
      case "BYMONTH":
        ruleObject.month = splitData[1].split(",").map(Number);
        ruleObject.validRules.push(splitData[0]);
        break;
      case "BYYEARDAY":
        ruleObject.yearDay = splitData[1].split(",").map(Number);
        ruleObject.validRules.push(splitData[0]);
        break;
      case "BYWEEKNO":
        ruleObject.weekNo = splitData[1].split(",").map(Number);
        ruleObject.validRules.push(splitData[0]);
        break;
      case "INTERVAL":
        ruleObject.interval = parseInt(splitData[1], 10);
        break;
      case "COUNT":
        ruleObject.count = parseInt(splitData[1], 10);
        break;
      case "BYSETPOS":
        ruleObject.setPosition = parseInt(splitData[1], 10) > 4 ? -1 : parseInt(splitData[1], 10);
        break;
      case "FREQ":
        ruleObject.freq = splitData[1];
        break;
      case "WKST":
        ruleObject.wkst = splitData[1];
        break;
    }
  });
  if (ruleObject.freq === "MONTHLY" && ruleObject.monthDay.length === 0) {
    var index = ruleObject.validRules.indexOf("BYDAY");
    ruleObject.validRules.splice(index, 1);
  }
  return ruleObject;
}
function validateProperDate(tempDate, data, startDate) {
  var maxDate = calendarUtil.getMonthDaysCount(tempDate);
  return data <= maxDate && tempDate >= startDate;
}
function processWeekDays(expectedDays) {
  var dayCycle = {};
  expectedDays.forEach(function(element, index) {
    if (index === expectedDays.length - 1) {
      var startIndex = dayIndex.indexOf(element);
      var temp = startIndex;
      while (temp % 7 !== dayIndex.indexOf(expectedDays[0])) {
        temp++;
      }
      dayCycle["" + element] = temp - startIndex;
    } else {
      dayCycle["" + element] = dayIndex.indexOf(expectedDays[index + 1]) - dayIndex.indexOf(element);
    }
  });
  return dayCycle;
}
function checkDate(tempDate, expectedDate) {
  var temp = expectedDate.slice(0);
  var data;
  var maxDate = calendarUtil.getMonthDaysCount(tempDate);
  data = temp.shift();
  while (data) {
    if (data < 0) {
      data = data + maxDate + 1;
    }
    if (data === tempDate.getDate()) {
      return false;
    }
    data = temp.shift();
  }
  return true;
}
function checkYear(tempDate, expectedyearDay) {
  var temp = expectedyearDay.slice(0);
  var data;
  var yearDay = getYearDay(tempDate);
  data = temp.shift();
  while (data) {
    if (data < 0) {
      data = data + calendarUtil.getYearDaysCount(tempDate, 0) + 1;
    }
    if (data === yearDay) {
      return false;
    }
    data = temp.shift();
  }
  return true;
}
function getYearDay(currentDate) {
  if (!startDateCollection[calendarUtil.getFullYear(currentDate)]) {
    startDateCollection[calendarUtil.getFullYear(currentDate)] = calendarUtil.getYearLastDate(currentDate, 0);
  }
  var tempDate = startDateCollection[calendarUtil.getFullYear(currentDate)];
  var diff = currentDate.getTime() - tempDate.getTime();
  return Math.ceil(diff / MS_PER_DAY);
}
function validateMonthlyRuleType(ruleObject) {
  if (ruleObject.monthDay.length && !ruleObject.day.length) {
    return "date";
  } else if (!ruleObject.monthDay.length && ruleObject.day.length) {
    return "day";
  }
  return "both";
}
function rotate(days) {
  var data = days.shift();
  days.push(data);
}
function setFirstDayOfWeek(day) {
  while (dayIndex[0] !== day) {
    rotate(dayIndex);
  }
}
function validateRules(tempDate, ruleObject) {
  var state = true;
  var expectedDays = ruleObject.day;
  var expectedMonth = ruleObject.month;
  var expectedDate = calendarUtil.getExpectedDays(tempDate, ruleObject.monthDay);
  var expectedyearDay = ruleObject.yearDay;
  ruleObject.validRules.forEach(function(rule) {
    switch (rule) {
      case "BYDAY":
        if (checkDayIndex(tempDate.getDay(), expectedDays)) {
          state = false;
        }
        break;
      case "BYMONTH":
        if (calendarUtil.checkMonth(tempDate, expectedMonth)) {
          state = false;
        }
        break;
      case "BYMONTHDAY":
        if (checkDate(tempDate, expectedDate)) {
          state = false;
        }
        break;
      case "BYYEARDAY":
        if (checkYear(tempDate, expectedyearDay)) {
          state = false;
        }
        break;
    }
  });
  return state;
}
function getCalendarUtil(calendarMode) {
  if (calendarMode === "Islamic") {
    return new Islamic();
  }
  return new Gregorian();
}
var startDateCollection = {};
var tempExcludeDate;
var dayIndex = ["SU", "MO", "TU", "WE", "TH", "FR", "SA"];
var maxOccurrence;
var tempViewDate;
var calendarUtil;
var DAYINDEX = ["SU", "MO", "TU", "WE", "TH", "FR", "SA"];
var MAXOCCURRENCE = 43;
var WEEKPOS = ["first", "second", "third", "fourth", "last"];
var TIMES = "summaryTimes";
var ON = "summaryOn";
var EVERY = "every";
var UNTIL = "summaryUntil";
var DAYS = "summaryDay";
var WEEKS = "summaryWeek";
var MONTHS = "summaryMonth";
var YEARS = "summaryYear";
var DAYINDEXOBJECT = {
  SU: "sun",
  MO: "mon",
  TU: "tue",
  WE: "wed",
  TH: "thu",
  FR: "fri",
  SA: "sat"
};
var HASNUMBER = /\d/;
var REMOVENUMBERINSTRING = /[^A-Z]+/;
var SPLITNUMBERANDSTRING = /[a-z]+|[^a-z]+/gi;
function getRecurrenceStringFromDate(date) {
  return [
    date.getUTCFullYear(),
    roundDateValues(date.getUTCMonth() + 1),
    roundDateValues(date.getUTCDate()),
    "T",
    roundDateValues(date.getUTCHours()),
    roundDateValues(date.getUTCMinutes()),
    roundDateValues(date.getUTCSeconds()),
    "Z"
  ].join("");
}
function roundDateValues(date) {
  return ("0" + date).slice(-2);
}

// node_modules/@syncfusion/ej2-schedule/src/schedule/event-renderer/event-base.js
var EventBase = (
  /** @class */
  function() {
    function EventBase2(parent) {
      this.slots = [];
      this.isDoubleTapped = false;
      this.parent = parent;
    }
    EventBase2.prototype.processData = function(events, timeZonePropChanged, oldTimezone) {
      var _this = this;
      var start = this.parent.activeView.startDate();
      var end = this.parent.activeView.endDate();
      var fields = this.parent.eventFields;
      var processed = [];
      var temp = 1;
      var generateID = false;
      var resourceCollection = this.parent.resourceBase ? this.parent.resourceBase.resourceCollection : [];
      if (events.length > 0 && isNullOrUndefined(events[0][fields.id])) {
        generateID = true;
      }
      var _loop_1 = function(event_12) {
        if (generateID) {
          event_12[fields.id] = temp++;
        }
        event_12 = this_1.updateEventDateTime(event_12);
        if (timeZonePropChanged) {
          this_1.processTimezoneChange(event_12, oldTimezone);
        } else if (!this_1.parent.isPrinting && !this_1.parent.uiStateValues.isPreventTimezone) {
          event_12 = this_1.processTimezone(event_12);
        }
        for (var level = 0; level < resourceCollection.length; level++) {
          if (event_12[resourceCollection[parseInt(level.toString(), 10)].field] === null || event_12[resourceCollection[parseInt(level.toString(), 10)].field] === 0) {
            event_12[resourceCollection[parseInt(level.toString(), 10)].field] = void 0;
          }
        }
        if (!isNullOrUndefined(event_12[fields.recurrenceRule]) && event_12[fields.recurrenceRule] === "") {
          event_12[fields.recurrenceRule] = null;
        }
        if (!isNullOrUndefined(event_12[fields.recurrenceRule]) && isNullOrUndefined(event_12[fields.recurrenceID]) && !(this_1.parent.crudModule && this_1.parent.crudModule.crudObj.isCrudAction)) {
          processed = processed.concat(this_1.generateOccurrence(event_12, null, true));
        } else {
          if (this_1.parent.crudModule && this_1.parent.crudModule.crudObj.isCrudAction) {
            if (!isNullOrUndefined(event_12[fields.recurrenceRule]) && isNullOrUndefined(event_12[fields.recurrenceID])) {
              var recurrenceEvent = this_1.generateOccurrence(event_12, null, true);
              var _loop_2 = function(occurrence2) {
                var app2 = this_1.parent.eventsProcessed.filter(function(data) {
                  return data[fields.startTime].getTime() - occurrence2[fields.startTime].getTime() === 0 && data[fields.id] === occurrence2[fields.id];
                });
                occurrence2.Guid = app2.length > 0 ? app2[0].Guid : this_1.generateGuid();
                processed.push(occurrence2);
              };
              for (var _i2 = 0, recurrenceEvent_1 = recurrenceEvent; _i2 < recurrenceEvent_1.length; _i2++) {
                var occurrence = recurrenceEvent_1[_i2];
                _loop_2(occurrence);
              }
            } else {
              var app = this_1.parent.eventsProcessed.filter(function(data) {
                return data[_this.parent.eventFields.id] === event_12[_this.parent.eventFields.id];
              });
              event_12.Guid = app.length > 0 ? app[0].Guid : this_1.generateGuid();
              processed.push(event_12);
            }
          } else {
            event_12.Guid = this_1.generateGuid();
            processed.push(event_12);
          }
        }
      };
      var this_1 = this;
      for (var _i = 0, events_1 = events; _i < events_1.length; _i++) {
        var event_1 = events_1[_i];
        _loop_1(event_1);
      }
      this.parent.eventsProcessed = [];
      var eventData = processed.filter(function(data) {
        return !data[_this.parent.eventFields.isBlock];
      });
      this.parent.eventsProcessed = this.filterEvents(start, end, eventData);
      var blockData = processed.filter(function(data) {
        return data[_this.parent.eventFields.isBlock];
      });
      for (var _a = 0, blockData_1 = blockData; _a < blockData_1.length; _a++) {
        var eventObj = blockData_1[_a];
        if (eventObj[fields.isAllDay]) {
          var isDifferentDate = resetTime(new Date(eventObj[fields.startTime].getTime())) < resetTime(new Date(eventObj[fields.endTime].getTime()));
          if (!isDifferentDate) {
            eventObj[fields.startTime] = resetTime(eventObj[fields.startTime]);
            eventObj[fields.endTime] = addDays(resetTime(eventObj[fields.endTime]), 1);
          }
        }
      }
      this.parent.blockProcessed = blockData;
      return eventData;
    };
    EventBase2.prototype.updateEventDateTime = function(eventData) {
      if (typeof eventData[this.parent.eventFields.startTime] === "string") {
        eventData[this.parent.eventFields.startTime] = getDateFromString(eventData[this.parent.eventFields.startTime]);
      }
      if (typeof eventData[this.parent.eventFields.endTime] === "string") {
        eventData[this.parent.eventFields.endTime] = getDateFromString(eventData[this.parent.eventFields.endTime]);
      }
      return eventData;
    };
    EventBase2.prototype.getProcessedEvents = function(eventCollection) {
      if (eventCollection === void 0) {
        eventCollection = this.parent.eventsData;
      }
      var processed = [];
      for (var _i = 0, eventCollection_1 = eventCollection; _i < eventCollection_1.length; _i++) {
        var event_2 = eventCollection_1[_i];
        if (!isNullOrUndefined(event_2[this.parent.eventFields.recurrenceRule]) && isNullOrUndefined(event_2[this.parent.eventFields.recurrenceID])) {
          processed = processed.concat(this.generateOccurrence(event_2));
        } else {
          processed.push(event_2);
        }
      }
      return processed;
    };
    EventBase2.prototype.timezonePropertyChange = function(oldTimezone) {
      var data = this.parent.eventsData.concat(this.parent.blockData);
      var processed = this.processData(data, true, oldTimezone);
      this.parent.notify(dataReady, { processedData: processed });
    };
    EventBase2.prototype.timezoneConvert = function(eventData) {
      var fields = this.parent.eventFields;
      eventData[fields.startTimezone] = eventData[fields.startTimezone] || eventData[fields.endTimezone];
      eventData[fields.endTimezone] = eventData[fields.endTimezone] || eventData[fields.startTimezone];
      if (this.parent.timezone) {
        var startTz = eventData[fields.startTimezone];
        var endTz = eventData[fields.endTimezone];
        eventData[fields.startTime] = this.parent.tzModule.convert(eventData[fields.startTime], this.parent.timezone, startTz);
        eventData[fields.endTime] = this.parent.tzModule.convert(eventData[fields.endTime], this.parent.timezone, endTz);
      }
    };
    EventBase2.prototype.processTimezoneChange = function(event, oldTimezone) {
      var fields = this.parent.eventFields;
      if (event[fields.isAllDay]) {
        return;
      }
      if (oldTimezone && this.parent.timezone) {
        event[fields.startTime] = this.parent.tzModule.convert(event[fields.startTime], oldTimezone, this.parent.timezone);
        event[fields.endTime] = this.parent.tzModule.convert(event[fields.endTime], oldTimezone, this.parent.timezone);
      } else if (!oldTimezone && this.parent.timezone) {
        event[fields.startTime] = this.parent.tzModule.add(event[fields.startTime], this.parent.timezone);
        event[fields.endTime] = this.parent.tzModule.add(event[fields.endTime], this.parent.timezone);
      } else if (oldTimezone && !this.parent.timezone) {
        event[fields.startTime] = this.parent.tzModule.remove(event[fields.startTime], oldTimezone);
        event[fields.endTime] = this.parent.tzModule.remove(event[fields.endTime], oldTimezone);
      }
    };
    EventBase2.prototype.processTimezone = function(event, isReverse) {
      if (isReverse === void 0) {
        isReverse = false;
      }
      var fields = this.parent.eventFields;
      if (event[fields.isAllDay]) {
        return event;
      }
      if (event[fields.startTimezone] || event[fields.endTimezone]) {
        var startTimezone = event[fields.startTimezone] || event[fields.endTimezone];
        var endTimezone = event[fields.endTimezone] || event[fields.startTimezone];
        if (isReverse) {
          if (this.parent.timezone) {
            event[fields.startTime] = this.parent.tzModule.convert(event[fields.startTime], startTimezone, this.parent.timezone);
            event[fields.endTime] = this.parent.tzModule.convert(event[fields.endTime], endTimezone, this.parent.timezone);
            event[fields.startTime] = this.parent.tzModule.remove(event[fields.startTime], this.parent.timezone);
            event[fields.endTime] = this.parent.tzModule.remove(event[fields.endTime], this.parent.timezone);
          } else {
            event[fields.startTime] = this.parent.tzModule.remove(event[fields.startTime], startTimezone);
            event[fields.endTime] = this.parent.tzModule.remove(event[fields.endTime], endTimezone);
          }
        } else {
          event[fields.startTime] = this.parent.tzModule.add(event[fields.startTime], startTimezone);
          event[fields.endTime] = this.parent.tzModule.add(event[fields.endTime], endTimezone);
          if (this.parent.timezone) {
            event[fields.startTime] = this.parent.tzModule.convert(event[fields.startTime], startTimezone, this.parent.timezone);
            event[fields.endTime] = this.parent.tzModule.convert(event[fields.endTime], endTimezone, this.parent.timezone);
          }
        }
      } else if (this.parent.timezone) {
        if (isReverse) {
          event[fields.startTime] = this.parent.tzModule.remove(event[fields.startTime], this.parent.timezone);
          event[fields.endTime] = this.parent.tzModule.remove(event[fields.endTime], this.parent.timezone);
        } else {
          event[fields.startTime] = this.parent.tzModule.add(event[fields.startTime], this.parent.timezone);
          event[fields.endTime] = this.parent.tzModule.add(event[fields.endTime], this.parent.timezone);
        }
      }
      return event;
    };
    EventBase2.prototype.filterBlockEvents = function(eventObj) {
      var fields = this.parent.eventFields;
      var eStart = eventObj[fields.startTime];
      var eEnd = eventObj[fields.endTime];
      var resourceData;
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        var data = this.getGroupIndexFromEvent(eventObj);
        resourceData = this.parent.resourceBase.lastResourceLevel[parseInt(data.toString(), 10)];
      }
      var blockEvents = extend([], this.parent.blockProcessed, null, true);
      for (var _i = 0, blockEvents_1 = blockEvents; _i < blockEvents_1.length; _i++) {
        var eventObj_1 = blockEvents_1[_i];
        if (eventObj_1[fields.isAllDay]) {
          var isDifferentTime = eventObj_1[fields.endTime].getTime() > resetTime(new Date(eventObj_1[fields.endTime].getTime())).getTime();
          if (isDifferentTime) {
            eventObj_1[fields.startTime] = resetTime(eventObj_1[fields.startTime]);
            eventObj_1[fields.endTime] = addDays(resetTime(eventObj_1[fields.endTime]), 1);
          }
        }
      }
      return this.filterEvents(eStart, eEnd, blockEvents, resourceData);
    };
    EventBase2.prototype.filterEvents = function(startDate, endDate, appointments, resourceTdData) {
      if (appointments === void 0) {
        appointments = this.parent.eventsProcessed;
      }
      var predicate = this.parent.dataModule.getStartEndQuery(startDate, endDate);
      var filter = new DataManager({ json: appointments }).executeLocal(new Query().where(predicate));
      if (resourceTdData) {
        filter = this.filterEventsByResource(resourceTdData, filter);
      }
      return this.sortByTime(filter);
    };
    EventBase2.prototype.filterEventsByRange = function(eventCollection, startDate, endDate) {
      var _this = this;
      var filteredEvents = [];
      if (startDate && endDate) {
        filteredEvents = this.filterEvents(startDate, endDate, eventCollection);
      } else if (startDate && !endDate) {
        filteredEvents = eventCollection.filter(function(e) {
          return e[_this.parent.eventFields.startTime] >= startDate;
        });
      } else if (!startDate && endDate) {
        filteredEvents = eventCollection.filter(function(e) {
          return e[_this.parent.eventFields.endTime] <= endDate;
        });
      } else {
        filteredEvents = eventCollection;
      }
      return this.sortByTime(filteredEvents);
    };
    EventBase2.prototype.filterEventsByResource = function(resourceTdData, appointments) {
      if (appointments === void 0) {
        appointments = this.parent.eventsProcessed;
      }
      var predicate = {};
      var resourceCollection = this.parent.resourceBase.resourceCollection;
      for (var level = 0; level < resourceCollection.length; level++) {
        predicate[resourceCollection[parseInt(level.toString(), 10)].field] = resourceTdData.groupOrder[parseInt(level.toString(), 10)];
      }
      var keys = Object.keys(predicate);
      var filteredCollection = appointments.filter(function(eventObj) {
        return keys.every(function(key) {
          if (eventObj["" + key] instanceof Array) {
            return eventObj["" + key].indexOf(predicate["" + key]) > -1;
          } else {
            return eventObj["" + key] === predicate["" + key];
          }
        });
      });
      return filteredCollection;
    };
    EventBase2.prototype.sortByTime = function(appointmentsCollection) {
      if (this.parent.eventSettings.sortComparer && (typeof this.parent.eventSettings.sortComparer === "function" || typeof this.parent.eventSettings.sortComparer === "string")) {
        appointmentsCollection = this.customSorting(appointmentsCollection);
      } else {
        var fieldMappings_1 = this.parent.eventFields;
        appointmentsCollection.sort(function(a, b) {
          var d1 = a[fieldMappings_1.startTime];
          var d2 = b[fieldMappings_1.startTime];
          return d1.getTime() - d2.getTime();
        });
      }
      return appointmentsCollection;
    };
    EventBase2.prototype.sortByDateTime = function(appointments) {
      if (this.parent.eventSettings.sortComparer && (typeof this.parent.eventSettings.sortComparer === "function" || typeof this.parent.eventSettings.sortComparer === "string")) {
        appointments = this.customSorting(appointments);
      } else {
        var fieldMapping_1 = this.parent.eventFields;
        appointments.sort(function(object1, object2) {
          var d3 = object1[fieldMapping_1.startTime];
          var d4 = object2[fieldMapping_1.startTime];
          var d5 = object1[fieldMapping_1.endTime];
          var d6 = object2[fieldMapping_1.endTime];
          var d1 = d5.getTime() - d3.getTime();
          var d2 = d6.getTime() - d4.getTime();
          return d3.getTime() - d4.getTime() || d2 - d1;
        });
      }
      return appointments;
    };
    EventBase2.prototype.customSorting = function(appointments) {
      if (typeof this.parent.eventSettings.sortComparer === "function") {
        return this.parent.eventSettings.sortComparer.call(this.parent, appointments);
      } else if (typeof this.parent.eventSettings.sortComparer === "string") {
        var splits = this.parent.eventSettings.sortComparer.split(".");
        var sortFn = void 0;
        if (!isNullOrUndefined(window)) {
          sortFn = window[splits[splits.length - 1]];
        }
        if (sortFn) {
          return sortFn(appointments);
        }
      }
      return appointments;
    };
    EventBase2.prototype.getSmallestMissingNumber = function(array) {
      var large = Math.max.apply(Math, array);
      for (var i = 0; i < large; i++) {
        if (array.indexOf(i) === -1) {
          return i;
        }
      }
      return large + 1;
    };
    EventBase2.prototype.splitEventByDay = function(event) {
      var eventFields = this.parent.eventFields;
      var data = [];
      var eventStartTime = event[eventFields.startTime];
      var eventEndTime = event[eventFields.endTime];
      var isDifferentDate = resetTime(new Date(eventStartTime.getTime())) < resetTime(new Date(eventEndTime.getTime()));
      if (isDifferentDate) {
        var start = new Date(eventStartTime.getTime());
        var end = addDays(resetTime(new Date(eventStartTime.getTime())), 1);
        var endDate = eventEndTime.getHours() === 0 && eventEndTime.getMinutes() === 0 ? eventEndTime : addDays(eventEndTime, 1);
        var index = 1;
        var eventLength = getDaysCount(eventStartTime.getTime(), endDate.getTime());
        while (end <= eventEndTime && start.getTime() !== end.getTime()) {
          var app = extend({}, event);
          app[eventFields.startTime] = start;
          app[eventFields.endTime] = end;
          app.data = { index, count: eventLength };
          app.Guid = this.generateGuid();
          app.isSpanned = true;
          data.push(app);
          start = end;
          if (resetTime(new Date(start.getTime())).getTime() === resetTime(new Date(eventEndTime.getTime())).getTime() && !(end.getTime() === eventEndTime.getTime())) {
            end = new Date(start.getTime());
            end = new Date(end.setHours(eventEndTime.getHours(), eventEndTime.getMinutes(), eventEndTime.getSeconds()));
          } else {
            end = addDays(resetTime(new Date(start.getTime())), 1);
          }
          index++;
        }
      } else {
        data.push(event);
      }
      return data;
    };
    EventBase2.prototype.splitEvent = function(event, dateRender) {
      var fields = this.parent.eventFields;
      var start = resetTime(event[fields.startTime]).getTime();
      var end = resetTime(event[fields.endTime]).getTime();
      if (getDateInMs(event[fields.endTime]) <= 0) {
        var temp = addDays(resetTime(event[fields.endTime]), -1).getTime();
        end = start > temp ? start : temp;
      }
      var orgStart = start;
      var orgEnd = end;
      var ranges = [];
      if (start !== end) {
        if (start < dateRender[0].getTime()) {
          start = dateRender[0].getTime();
        }
        if (end > dateRender[dateRender.length - 1].getTime()) {
          end = dateRender[dateRender.length - 1].getTime();
        }
        var cStart = start;
        for (var level = 0; level < this.slots.length; level++) {
          var slot = this.slots[parseInt(level.toString(), 10)];
          if (this.parent.currentView === "WorkWeek" || this.parent.currentView === "TimelineWorkWeek" || this.parent.activeViewOptions.group.byDate || this.parent.activeViewOptions.showWeekend) {
            var slotDates = [];
            for (var _i = 0, slot_1 = slot; _i < slot_1.length; _i++) {
              var s = slot_1[_i];
              slotDates.push(new Date(s));
            }
            var renderedDates = this.getRenderedDates(slotDates);
            if (!isNullOrUndefined(renderedDates) && renderedDates.length > 0) {
              slot = [];
              for (var _a = 0, renderedDates_1 = renderedDates; _a < renderedDates_1.length; _a++) {
                var date = renderedDates_1[_a];
                slot.push(date.getTime());
              }
            }
          }
          if (typeof slot === "number") {
            var temp = slot;
            slot = [];
            slot.push(temp);
          }
          var firstSlot = slot[0];
          cStart = cStart <= firstSlot && end >= firstSlot ? firstSlot : cStart;
          if (cStart > end || firstSlot > end) {
            break;
          }
          if (!this.parent.activeViewOptions.group.byDate && this.parent.activeViewOptions.showWeekend && this.parent.currentView !== "WorkWeek" && this.parent.currentView !== "TimelineWorkWeek") {
            var startIndex = slot.indexOf(cStart);
            if (startIndex !== -1) {
              var endIndex = slot.indexOf(end);
              var hasBreak = endIndex !== -1;
              endIndex = hasBreak ? endIndex : slot.length - 1;
              var count = endIndex - startIndex + 1;
              var isLeft = slot[parseInt(startIndex.toString(), 10)] !== orgStart;
              var isRight = slot[parseInt(endIndex.toString(), 10)] !== orgEnd;
              ranges.push(this.cloneEventObject(event, slot[parseInt(startIndex.toString(), 10)], slot[parseInt(endIndex.toString(), 10)], count, isLeft, isRight));
              if (hasBreak) {
                break;
              }
            }
          } else {
            if (this.dateInRange(cStart, slot[0], slot[slot.length - 1])) {
              var availSlot = [];
              for (var i = 0; i < slot.length; i++) {
                if (this.dateInRange(slot[parseInt(i.toString(), 10)], orgStart, orgEnd)) {
                  availSlot.push(slot[parseInt(i.toString(), 10)]);
                }
              }
              if (availSlot.length > 0) {
                if (!this.parent.activeViewOptions.group.byDate) {
                  var isLeft = availSlot[0] !== orgStart;
                  var isRight = availSlot[availSlot.length - 1] !== orgEnd;
                  ranges.push(this.cloneEventObject(event, availSlot[0], availSlot[availSlot.length - 1], availSlot.length, isLeft, isRight));
                } else {
                  for (var _b = 0, availSlot_1 = availSlot; _b < availSlot_1.length; _b++) {
                    var slot_2 = availSlot_1[_b];
                    ranges.push(this.cloneEventObject(event, slot_2, slot_2, 1, slot_2 !== orgStart, slot_2 !== orgEnd));
                  }
                }
              }
            }
          }
        }
      } else {
        ranges.push(this.cloneEventObject(event, start, end, 1, false, false));
      }
      return ranges;
    };
    EventBase2.prototype.cloneEventObject = function(event, start, end, count, isLeft, isRight) {
      var fields = this.parent.eventFields;
      var e = extend({}, event, null, true);
      var data = { count, isLeft, isRight };
      data[fields.startTime] = event[fields.startTime];
      data[fields.endTime] = event[fields.endTime];
      e.data = data;
      e[fields.startTime] = new Date(start);
      e[fields.endTime] = new Date(end);
      return e;
    };
    EventBase2.prototype.dateInRange = function(date, start, end) {
      return start <= date && date <= end;
    };
    EventBase2.prototype.getSelectedEventElements = function(target) {
      this.removeSelectedAppointmentClass();
      if (this.parent.selectedElements.length <= 0) {
        this.parent.selectedElements.push(target);
      } else {
        var isAlreadySelected = this.parent.selectedElements.filter(function(element2) {
          return element2.getAttribute("data-guid") === target.getAttribute("data-guid");
        });
        if (isAlreadySelected.length <= 0) {
          var elementSelector = 'div[data-guid="' + target.getAttribute("data-guid") + '"]';
          var focusElements = [].slice.call(this.parent.element.querySelectorAll(elementSelector));
          for (var _i = 0, focusElements_1 = focusElements; _i < focusElements_1.length; _i++) {
            var element = focusElements_1[_i];
            this.parent.selectedElements.push(element);
          }
        } else {
          var selectedElements = this.parent.selectedElements.filter(function(element2) {
            return element2.getAttribute("data-guid") !== target.getAttribute("data-guid");
          });
          this.parent.selectedElements = selectedElements;
        }
      }
      if (target && this.parent.selectedElements.length > 0) {
        this.addSelectedAppointments(this.parent.selectedElements, false);
      }
      return this.parent.selectedElements;
    };
    EventBase2.prototype.getSelectedEvents = function() {
      var _this = this;
      var eventSelect = [];
      var elementSelect = [];
      var selectAppointments = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_BORDER));
      selectAppointments.filter(function(element) {
        var isAlreadyAdded = eventSelect.filter(function(event) {
          return event.Guid === element.getAttribute("data-guid");
        });
        if (isAlreadyAdded.length === 0) {
          eventSelect.push(_this.getEventByGuid(element.getAttribute("data-guid")));
        }
        elementSelect.push(element);
      });
      return {
        event: eventSelect.length > 1 ? eventSelect : eventSelect[0],
        element: elementSelect.length > 1 ? elementSelect : elementSelect[0]
      };
    };
    EventBase2.prototype.removeSelectedAppointmentClass = function() {
      var selectedAppointments = this.getSelectedAppointments();
      removeClass(selectedAppointments, APPOINTMENT_BORDER);
      if (this.parent.currentView === "Agenda" || this.parent.currentView === "MonthAgenda") {
        removeClass(selectedAppointments, AGENDA_SELECTED_CELL);
      }
    };
    EventBase2.prototype.addSelectedAppointments = function(cells, preventFocus) {
      if (this.parent.currentView !== "MonthAgenda") {
        this.parent.removeSelectedClass();
      }
      addClass(cells, APPOINTMENT_BORDER);
      if (cells.length > 0 && !preventFocus) {
        cells[cells.length - 1].focus();
      }
    };
    EventBase2.prototype.getSelectedAppointments = function() {
      return [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_BORDER + ",." + APPOINTMENT_CLASS + ":focus"));
    };
    EventBase2.prototype.focusElement = function(isFocused) {
      if (this.parent.eventWindow.dialogObject && this.parent.eventWindow.dialogObject.visible) {
        return;
      }
      var activeEle = document.activeElement;
      var selectedCell = this.parent.getSelectedCells();
      if (selectedCell.length > 0 && (activeEle && (this.parent.element.contains(activeEle) || selectedCell.indexOf(activeEle) !== -1) || isFocused)) {
        if (this.parent.keyboardInteractionModule) {
          var target = !isNullOrUndefined(this.parent.activeCellsData) && this.parent.activeCellsData.element || selectedCell[selectedCell.length - 1];
          this.parent.keyboardInteractionModule.selectCells(target instanceof Array, target);
        }
        return;
      }
      var selectedAppointments = this.getSelectedAppointments();
      if (selectedAppointments.length > 0) {
        if (this.parent.activeEventData && this.parent.activeEventData.element && selectedAppointments.indexOf(this.parent.activeEventData.element) > -1) {
          this.parent.activeEventData.element.focus();
          return;
        }
        selectedAppointments[selectedAppointments.length - 1].focus();
        return;
      }
    };
    EventBase2.prototype.selectWorkCellByTime = function(eventsData) {
      var target;
      if (this.parent.currentView === "Agenda" || this.parent.currentView === "MonthAgenda") {
        return target;
      }
      if (eventsData.length > 0) {
        var selectedObject = eventsData[eventsData.length - 1];
        var eventStartTime = selectedObject[this.parent.eventFields.startTime];
        var nearestTime = (/* @__PURE__ */ new Date(+eventStartTime)).setMinutes(0, 0, 0);
        var isAllDay = this.isAllDayAppointment(selectedObject);
        if (this.parent.currentView === "Month" || isAllDay) {
          nearestTime = (/* @__PURE__ */ new Date(+eventStartTime)).setHours(0, 0, 0, 0);
        }
        var targetArea = void 0;
        if (isAllDay && ["Day", "Week", "WorkWeek"].indexOf(this.parent.currentView) !== -1) {
          targetArea = this.parent.getAllDayRow();
        } else {
          targetArea = this.parent.getContentTable();
        }
        var queryString = '[data-date="' + new Date(nearestTime).getTime() + '"]';
        if (this.parent.activeViewOptions.group.resources.length > 0) {
          queryString += '[data-group-index="' + this.getGroupIndexFromEvent(selectedObject) + '"]';
        }
        target = targetArea.querySelector(queryString);
        if (target) {
          this.parent.activeCellsData = this.parent.getCellDetails(target);
          if (this.parent.keyboardInteractionModule) {
            this.parent.keyboardInteractionModule.selectCells(false, target);
          }
          return target;
        }
      }
      return target;
    };
    EventBase2.prototype.getGroupIndexFromEvent = function(eventData) {
      var levelIndex;
      var resource;
      var levelName;
      var idField;
      for (var i = this.parent.resourceBase.resourceCollection.length - 1; i >= 0; i--) {
        var resourceData = eventData[this.parent.resourceBase.resourceCollection[parseInt(i.toString(), 10)].field];
        if (!isNullOrUndefined(resourceData)) {
          resource = this.parent.resourceBase.resourceCollection[parseInt(i.toString(), 10)];
          levelIndex = i;
          levelName = resource.name;
          idField = resource.field;
          break;
        }
      }
      if (isNullOrUndefined(levelName) && isNullOrUndefined(levelIndex)) {
        levelName = this.parent.resourceCollection.slice(-1)[0].name;
        levelIndex = this.parent.resourceCollection.length - 1;
        idField = this.parent.resourceCollection.slice(-1)[0].field;
        resource = this.parent.resourceCollection.filter(function(e, index) {
          if (e.name === levelName) {
            levelIndex = index;
            return e;
          }
          return null;
        })[0];
      }
      var id = eventData["" + idField] instanceof Array ? eventData["" + idField][0] : eventData["" + idField];
      if (levelIndex > 0) {
        var parentField = this.parent.resourceCollection[levelIndex - 1].field;
        return this.parent.resourceBase.getIndexFromResourceId(id, levelName, resource, eventData, parentField);
      } else {
        return this.parent.resourceBase.getIndexFromResourceId(id, levelName, resource);
      }
    };
    EventBase2.prototype.isAllDayAppointment = function(event) {
      var fieldMapping = this.parent.eventFields;
      var isAllDay = event[fieldMapping.isAllDay];
      var isFullDay = (getUniversalTime(event[fieldMapping.endTime]) - getUniversalTime(event[fieldMapping.startTime])) / MS_PER_DAY >= 1;
      return isAllDay || this.parent.eventSettings.spannedEventPlacement !== "TimeSlot" && isFullDay ? true : false;
    };
    EventBase2.prototype.addEventListener = function() {
      this.parent.on(documentClick, this.appointmentBorderRemove, this);
    };
    EventBase2.prototype.removeEventListener = function() {
      this.parent.off(documentClick, this.appointmentBorderRemove);
    };
    EventBase2.prototype.appointmentBorderRemove = function(event) {
      var element = event.event.target;
      if (closest(element, "." + APPOINTMENT_CLASS)) {
        if (this.parent.currentView !== "MonthAgenda") {
          this.parent.removeSelectedClass();
        }
      } else if (!closest(element, "." + POPUP_OPEN)) {
        if (this.parent.uiStateValues.isTapHold && closest(element, "." + WORK_CELLS_CLASS + ",." + ALLDAY_CELLS_CLASS)) {
          return;
        }
        this.parent.uiStateValues.isTapHold = false;
        this.removeSelectedAppointmentClass();
        this.parent.selectedElements = [];
      }
    };
    EventBase2.prototype.wireAppointmentEvents = function(element, event, isPreventCrud) {
      if (isPreventCrud === void 0) {
        isPreventCrud = false;
      }
      var isReadOnly = !isNullOrUndefined(event) ? event[this.parent.eventFields.isReadonly] : false;
      EventHandler.add(element, "click", this.eventClick, this);
      if (!this.parent.isAdaptive && !this.parent.activeViewOptions.readonly && !isReadOnly) {
        EventHandler.add(element, "touchend", this.eventTouchClick, this);
        EventHandler.add(element, "dblclick", this.eventDoubleClick, this);
      }
      if (!this.parent.activeViewOptions.readonly && !isReadOnly && !isPreventCrud) {
        if (this.parent.resizeModule) {
          this.parent.resizeModule.wireResizeEvent(element);
        }
        if (this.parent.dragAndDropModule) {
          this.parent.dragAndDropModule.wireDragEvent(element);
        }
      }
    };
    EventBase2.prototype.eventTouchClick = function(e) {
      var _this = this;
      if (this.parent.uiStateValues.isTouchScroll || this.parent.uiStateValues.isTapHold || this.parent.uiStateValues.action) {
        this.parent.uiStateValues.isTouchScroll = this.parent.uiStateValues.isTapHold = false;
        return;
      }
      setTimeout(function() {
        return _this.isDoubleTapped = false;
      }, 250);
      e.preventDefault();
      if (this.isDoubleTapped) {
        this.eventDoubleClick(e);
      } else if (!this.isDoubleTapped) {
        this.isDoubleTapped = true;
        this.eventClick(e);
      }
    };
    EventBase2.prototype.renderResizeHandler = function(element, spanEvent, isReadOnly) {
      if (!this.parent.resizeModule || !this.parent.allowResizing || this.parent.activeViewOptions.readonly || isReadOnly) {
        return;
      }
      for (var _i = 0, _a = Object.keys(spanEvent); _i < _a.length; _i++) {
        var resizeEdge = _a[_i];
        var resizeHandler = createElement("div", { className: EVENT_RESIZE_CLASS });
        switch (resizeEdge) {
          case "isLeft":
            if (!spanEvent.isLeft) {
              resizeHandler.appendChild(createElement("div", { className: "e-left-right-resize" }));
              addClass([resizeHandler], this.parent.enableRtl ? RIGHT_RESIZE_HANDLER : LEFT_RESIZE_HANDLER);
              prepend([resizeHandler], element);
            }
            break;
          case "isRight":
            if (!spanEvent.isRight) {
              resizeHandler.appendChild(createElement("div", { className: "e-left-right-resize" }));
              addClass([resizeHandler], this.parent.enableRtl ? LEFT_RESIZE_HANDLER : RIGHT_RESIZE_HANDLER);
              append([resizeHandler], element);
            }
            break;
          case "isTop":
            if (!spanEvent.isTop) {
              resizeHandler.appendChild(createElement("div", { className: "e-top-bottom-resize" }));
              addClass([resizeHandler], TOP_RESIZE_HANDLER);
              prepend([resizeHandler], element);
            }
            break;
          case "isBottom":
            if (!spanEvent.isBottom) {
              resizeHandler.appendChild(createElement("div", { className: "e-top-bottom-resize" }));
              addClass([resizeHandler], BOTTOM_RESIZE_HANDLER);
              append([resizeHandler], element);
            }
            break;
        }
      }
    };
    EventBase2.prototype.eventClick = function(eventData) {
      var _this = this;
      var target = eventData.target;
      if (target.classList.contains(DRAG_CLONE_CLASS) || target.classList.contains(RESIZE_CLONE_CLASS) || target.classList.contains(INLINE_SUBJECT_CLASS)) {
        return;
      }
      if ((eventData.ctrlKey || eventData.metaKey) && eventData.which === 1 && this.parent.keyboardInteractionModule) {
        this.parent.quickPopup.quickPopup.hide();
        this.parent.selectedElements = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_BORDER));
        var target_1 = closest(eventData.target, "." + APPOINTMENT_CLASS);
        this.getSelectedEventElements(target_1);
        this.activeEventData(eventData, false);
        var selectArgs = {
          data: this.parent.activeEventData.event,
          element: this.parent.activeEventData.element,
          event: eventData,
          requestType: "eventSelect"
        };
        this.parent.trigger(select, selectArgs);
        var args = extend(this.parent.activeEventData, { cancel: false, originalEvent: eventData });
        this.parent.trigger(eventClick, args);
      } else {
        this.removeSelectedAppointmentClass();
        this.activeEventData(eventData, true);
        var selectEventArgs = {
          data: this.parent.activeEventData.event,
          element: this.parent.activeEventData.element,
          event: eventData,
          requestType: "eventSelect"
        };
        this.parent.trigger(select, selectEventArgs);
        var args = extend(this.parent.activeEventData, { cancel: false, originalEvent: eventData });
        this.parent.trigger(eventClick, args, function(eventClickArgs) {
          if (eventClickArgs.cancel) {
            _this.removeSelectedAppointmentClass();
            _this.parent.selectedElements = [];
            if (_this.parent.quickPopup) {
              _this.parent.quickPopup.quickPopupHide();
            }
          } else {
            if (_this.parent.currentView === "Agenda" || _this.parent.currentView === "MonthAgenda") {
              addClass([_this.parent.activeEventData.element], AGENDA_SELECTED_CELL);
            }
            if (_this.parent.allowInline) {
              var inlineArgs = {
                data: eventClickArgs.event,
                element: eventClickArgs.element,
                type: "Event"
              };
              _this.parent.notify(inlineClick, inlineArgs);
            } else {
              _this.parent.notify(eventClick, eventClickArgs);
            }
          }
        });
      }
    };
    EventBase2.prototype.eventDoubleClick = function(eventData) {
      var _this = this;
      if (this.parent.quickPopup) {
        this.parent.quickPopup.quickPopupHide(true);
      }
      if (eventData.type === "touchend") {
        this.activeEventData(eventData, true);
      }
      this.removeSelectedAppointmentClass();
      this.parent.selectedElements = [];
      if (this.parent.activeEventData.element.classList.contains(INLINE_APPOINTMENT_CLASS) || this.parent.activeEventData.element.querySelector("." + INLINE_SUBJECT_CLASS)) {
        return;
      }
      var args = extend(this.parent.activeEventData, { cancel: false, originalEvent: eventData });
      this.parent.trigger(eventDoubleClick, args, function(eventDoubleClickArgs) {
        if (!eventDoubleClickArgs.cancel) {
          if (!isNullOrUndefined(_this.parent.activeEventData.event) && isNullOrUndefined(_this.parent.activeEventData.event[_this.parent.eventFields.recurrenceID])) {
            _this.parent.eventWindow.openEditor(_this.parent.activeEventData.event, "Save");
          } else {
            _this.parent.currentAction = "EditOccurrence";
            _this.parent.quickPopup.openRecurrenceAlert();
          }
        }
      });
    };
    EventBase2.prototype.getEventByGuid = function(guid) {
      return this.parent.eventsProcessed.filter(function(data) {
        return data.Guid === guid;
      })[0];
    };
    EventBase2.prototype.getEventById = function(id) {
      var _this = this;
      return this.parent.eventsData.filter(function(data) {
        return data[_this.parent.eventFields.id] === id;
      })[0];
    };
    EventBase2.prototype.generateGuid = function() {
      return "xyxxxxyx-xxxy-yxxx-xyxx-xxyxxxxyyxxx".replace(/[xy]/g, function(c) {
        var r = Math.random() * 16 | 0;
        var v = c === "x" ? r : r & 3 | 8;
        return v.toString(16);
      });
    };
    EventBase2.prototype.getEventIDType = function() {
      if (this.parent.eventsData.length !== 0) {
        return typeof this.parent.eventsData[0][this.parent.eventFields.id];
      }
      if (this.parent.blockData.length !== 0) {
        return typeof this.parent.blockData[0][this.parent.eventFields.id];
      }
      return "string";
    };
    EventBase2.prototype.getEventMaxID = function(resourceId) {
      var _this = this;
      if (this.parent.eventsData.length < 1 && this.parent.blockData.length < 1) {
        return 1;
      }
      var eventId;
      var idType = this.getEventIDType();
      if (idType === "string") {
        eventId = this.generateGuid();
      }
      if (idType === "number") {
        var datas = this.parent.eventsData.concat(this.parent.blockData);
        var appIds = datas.map(function(event) {
          return event[_this.parent.eventFields.id];
        });
        var maxId = appIds.reduce(function(a, b) {
          return Math.max(a, b);
        });
        maxId = isNullOrUndefined(resourceId) ? maxId : maxId + resourceId;
        eventId = maxId + 1;
      }
      return eventId;
    };
    EventBase2.prototype.activeEventData = function(eventData, isMultiple) {
      var _this = this;
      var target = closest(eventData.target, "." + APPOINTMENT_CLASS);
      var guid = target.getAttribute("data-guid");
      if (isMultiple) {
        this.addSelectedAppointments([].slice.call(this.parent.element.querySelectorAll('div[data-guid="' + guid + '"]')), true);
        target.focus();
      }
      var eventObject = this.getEventByGuid(guid);
      if (eventObject && eventObject.isSpanned) {
        eventObject = this.parent.eventsData.filter(function(obj) {
          return obj[_this.parent.eventFields.id] === eventObject[_this.parent.eventFields.id];
        })[0];
      }
      this.parent.activeEventData = { event: eventObject, element: target };
    };
    EventBase2.prototype.generateOccurrence = function(event, viewDate, isMaxCount) {
      var startDate = event[this.parent.eventFields.startTime];
      var endDate = event[this.parent.eventFields.endTime];
      var eventRule = event[this.parent.eventFields.recurrenceRule];
      var timeZoneDiff = endDate.getTimezoneOffset() - startDate.getTimezoneOffset();
      var duration = endDate.getTime() - startDate.getTime() - timeZoneDiff * 6e4;
      viewDate = new Date((viewDate || this.parent.activeView.startDate()).getTime() - duration);
      var exception = event[this.parent.eventFields.recurrenceException];
      var maxCount;
      if (this.parent.currentView !== "Agenda" && isMaxCount) {
        maxCount = getDateCount(viewDate, this.parent.activeView.endDate()) + 1;
      }
      var newTimezone = this.parent.timezone || this.parent.tzModule.getLocalTimezoneName();
      var firstDay = this.parent.activeViewOptions.firstDayOfWeek;
      var calendarMode = this.parent.calendarMode;
      var dates = generate(startDate, eventRule, exception, firstDay, maxCount, viewDate, calendarMode, newTimezone);
      if (this.parent.currentView === "Agenda" && eventRule.indexOf("COUNT") === -1 && eventRule.indexOf("UNTIL") === -1) {
        if (isNullOrUndefined(event.generatedDates)) {
          event.generatedDates = { start: new Date(dates[0]), end: new Date(dates[dates.length - 1]) };
        } else {
          if (dates[0] < event.generatedDates.start.getTime()) {
            event.generatedDates.start = new Date(dates[0]);
          }
          if (dates[dates.length - 1] > event.generatedDates.end.getTime()) {
            event.generatedDates.end = new Date(dates[dates.length - 1]);
          }
        }
      }
      var occurrenceCollection = [];
      for (var _i = 0, dates_1 = dates; _i < dates_1.length; _i++) {
        var date = dates_1[_i];
        var clonedObject = extend({}, event, null, true);
        date = this.getDSTAdjustedTime(date, clonedObject);
        clonedObject[this.parent.eventFields.startTime] = new Date(date);
        clonedObject[this.parent.eventFields.endTime] = new Date(new Date(date).setMilliseconds(duration));
        clonedObject[this.parent.eventFields.recurrenceID] = clonedObject[this.parent.eventFields.id];
        delete clonedObject[this.parent.eventFields.recurrenceException];
        delete clonedObject[this.parent.eventFields.followingID];
        clonedObject.Guid = this.generateGuid();
        occurrenceCollection.push(clonedObject);
      }
      return occurrenceCollection;
    };
    EventBase2.prototype.getDSTAdjustedTime = function(date, event) {
      var occurDate = date;
      if (this.parent.timezone && (event[this.parent.eventFields.startTimezone] || event[this.parent.eventFields.endTimezone])) {
        var eventOffset = this.getDSTDiff(event[this.parent.eventFields.startTime], new Date(date), event[this.parent.eventFields.startTimezone]);
        var schOffset = this.getDSTDiff(event[this.parent.eventFields.startTime], new Date(date), this.parent.timezone);
        occurDate = new Date(date).getTime() - (eventOffset - schOffset) * 6e4;
      }
      return occurDate;
    };
    EventBase2.prototype.getDSTDiff = function(startDate, occurDate, timezone) {
      var startOffset = this.parent.tzModule.offset(new Date(startDate), timezone);
      var occurOffset = this.parent.tzModule.offset(new Date(occurDate), timezone);
      return startOffset - occurOffset;
    };
    EventBase2.prototype.getParentEvent = function(eventObj, isParent) {
      if (isParent === void 0) {
        isParent = false;
      }
      var parentEvent;
      do {
        eventObj = this.getFollowingEvent(eventObj);
        if (eventObj) {
          parentEvent = extend({}, eventObj, null, true);
        }
      } while (eventObj && isParent);
      if (isParent && parentEvent) {
        var collection = this.getEventCollections(parentEvent);
        var followObj = collection.follow.slice(-1)[0];
        if (collection.occurrence.length > 0 && !parentEvent[this.parent.eventFields.recurrenceException]) {
          followObj = collection.occurrence.slice(-1)[0];
        }
        if (followObj) {
          parentEvent[this.parent.eventFields.recurrenceRule] = followObj[this.parent.eventFields.recurrenceRule];
        }
      }
      return parentEvent;
    };
    EventBase2.prototype.getEventCollections = function(parentObj, childObj) {
      var followingCollection = [];
      var occurrenceCollection = [];
      var followingEvent = parentObj;
      do {
        followingEvent = this.getFollowingEvent(followingEvent, true);
        if (followingEvent) {
          followingCollection.push(followingEvent);
        }
        occurrenceCollection = occurrenceCollection.concat(this.getOccurrenceEvent(followingEvent || parentObj));
      } while (followingEvent);
      var collections = {};
      if (childObj) {
        var fields_1 = this.parent.eventFields;
        collections = {
          follow: followingCollection.filter(function(eventData) {
            return eventData[fields_1.startTime] >= childObj[fields_1.startTime];
          }),
          occurrence: occurrenceCollection.filter(function(eventData) {
            return eventData[fields_1.startTime] >= childObj[fields_1.startTime];
          })
        };
      } else {
        collections = { follow: followingCollection, occurrence: occurrenceCollection };
      }
      return collections;
    };
    EventBase2.prototype.getFollowingEvent = function(parentObj, isReverse) {
      var fields = this.parent.eventFields;
      var fieldValue;
      if (isReverse) {
        fieldValue = parentObj[fields.id];
      } else {
        fieldValue = parentObj[fields.recurrenceID] || parentObj[fields.followingID];
      }
      var parentApp = this.parent.eventsData.filter(function(data) {
        return data[isReverse ? fields.followingID : fields.id] === fieldValue;
      });
      return parentApp.shift();
    };
    EventBase2.prototype.isFollowingEvent = function(parentObj, childObj) {
      var parentStart = parentObj[this.parent.eventFields.startTime];
      var childStart = childObj[this.parent.eventFields.startTime];
      return parentStart.getHours() === childStart.getHours() && parentStart.getMinutes() === childStart.getMinutes() && parentStart.getSeconds() === childStart.getSeconds();
    };
    EventBase2.prototype.getOccurrenceEvent = function(eventObj, isGuid, isFollowing) {
      if (isGuid === void 0) {
        isGuid = false;
      }
      if (isFollowing === void 0) {
        isFollowing = false;
      }
      var idField = isGuid ? "Guid" : isFollowing ? this.parent.eventFields.followingID : this.parent.eventFields.recurrenceID;
      var fieldKey = isGuid ? "Guid" : this.parent.eventFields.id;
      var dataSource = isGuid ? this.parent.eventsProcessed : this.parent.eventsData;
      return dataSource.filter(function(data) {
        return data["" + idField] === eventObj["" + fieldKey];
      });
    };
    EventBase2.prototype.getOccurrencesByID = function(id) {
      var fields = this.parent.eventFields;
      var occurrenceCollection = [];
      var parentObject = this.parent.eventsData.filter(function(obj) {
        return obj[fields.id] === id;
      });
      for (var _i = 0, parentObject_1 = parentObject; _i < parentObject_1.length; _i++) {
        var event_3 = parentObject_1[_i];
        if (!isNullOrUndefined(event_3[fields.recurrenceRule])) {
          occurrenceCollection = occurrenceCollection.concat(this.generateOccurrence(event_3));
        }
      }
      return occurrenceCollection;
    };
    EventBase2.prototype.getOccurrencesByRange = function(startTime, endTime) {
      var fields = this.parent.eventFields;
      var occurrenceCollection = [];
      for (var _i = 0, _a = this.parent.eventsData; _i < _a.length; _i++) {
        var event_4 = _a[_i];
        if (!isNullOrUndefined(event_4[fields.recurrenceRule])) {
          occurrenceCollection = occurrenceCollection.concat(this.generateOccurrence(event_4));
        }
      }
      var filter = occurrenceCollection.filter(function(obj) {
        return obj[fields.startTime] >= startTime && obj[fields.endTime] <= endTime && !isNullOrUndefined(obj[fields.recurrenceID]);
      });
      return filter;
    };
    EventBase2.prototype.getDeletedOccurrences = function(recurrenceData) {
      var fields = this.parent.eventFields;
      var parentObject;
      var deletedOccurrences = [];
      if (typeof recurrenceData === "string" || typeof recurrenceData === "number") {
        parentObject = this.parent.eventsData.filter(function(obj) {
          return obj[fields.id] === recurrenceData;
        })[0];
      } else {
        parentObject = extend({}, recurrenceData, null, true);
      }
      if (parentObject[fields.recurrenceException]) {
        var exDateString_1 = parentObject[fields.recurrenceException].split(",");
        var _loop_3 = function(i2, len2) {
          var edited = this_2.parent.eventsData.filter(function(eventObj) {
            return eventObj[fields.recurrenceID] === parentObject[fields.id] && eventObj[fields.recurrenceException] === exDateString_1[parseInt(i2.toString(), 10)];
          });
          if (edited.length === 0) {
            var exDate = getDateFromRecurrenceDateString(exDateString_1[parseInt(i2.toString(), 10)]);
            var childObject = extend({}, recurrenceData, null, true);
            childObject[fields.recurrenceID] = parentObject[fields.id];
            delete childObject[fields.followingID];
            childObject[fields.recurrenceException] = exDateString_1[parseInt(i2.toString(), 10)];
            var startDate = new Date(exDate.getTime());
            var time = parentObject[fields.endTime].getTime() - parentObject[fields.startTime].getTime();
            var endDate = new Date(startDate.getTime());
            endDate.setMilliseconds(time);
            childObject[fields.startTime] = new Date(startDate.getTime());
            childObject[fields.endTime] = new Date(endDate.getTime());
            deletedOccurrences.push(childObject);
          }
        };
        var this_2 = this;
        for (var i = 0, len = exDateString_1.length; i < len; i++) {
          _loop_3(i, len);
        }
      }
      return deletedOccurrences;
    };
    EventBase2.prototype.applyResourceColor = function(element, data, type, index, alpha) {
      if (!this.parent.resourceBase) {
        return;
      }
      var alphaColor = function(color2, alpha2) {
        color2 = color2.replace("#", "");
        var r = parseInt(color2.substring(0, color2.length / 3), 16);
        var g = parseInt(color2.substring(color2.length / 3, 2 * color2.length / 3), 16);
        var b = parseInt(color2.substring(2 * color2.length / 3, 3 * color2.length / 3), 16);
        return "rgba(" + r + ", " + g + ", " + b + ", " + alpha2 + ")";
      };
      var color = this.parent.resourceBase.getResourceColor(data, index);
      if (color) {
        element.style[type] = !isNullOrUndefined(alpha) ? alphaColor(color, alpha) : color;
      }
    };
    EventBase2.prototype.createBlockAppointmentElement = function(record, resIndex, isResourceEventTemplate) {
      var eventSubject = record[this.parent.eventFields.subject] || this.parent.eventSettings.fields.subject.default;
      var appointmentWrapper = createElement("div", {
        className: BLOCK_APPOINTMENT_CLASS,
        attrs: {
          "data-id": "Appointment_" + record[this.parent.eventFields.id],
          "aria-disabled": "true"
        }
      });
      var templateElement;
      if (!isNullOrUndefined(this.parent.activeViewOptions.eventTemplate)) {
        var scheduleId = this.parent.element.id + "_";
        var viewName = this.parent.activeViewOptions.eventTemplateName;
        var templateId = scheduleId + viewName + "eventTemplate";
        var templateName = isResourceEventTemplate && this.parent.currentView.indexOf("Year") === -1 ? this.parent.getEventTemplateName(resIndex) : "eventTemplate";
        templateElement = this.parent.getAppointmentTemplate()(record, this.parent, templateName, templateId, false, void 0, void 0, this.parent.root);
      } else {
        var appointmentSubject = createElement("div", { className: SUBJECT_CLASS });
        this.parent.sanitize(eventSubject, appointmentSubject);
        templateElement = [appointmentSubject];
      }
      append(templateElement, appointmentWrapper);
      this.setWrapperAttributes(appointmentWrapper, resIndex);
      return appointmentWrapper;
    };
    EventBase2.prototype.setWrapperAttributes = function(appointmentWrapper, resIndex) {
      if (!isNullOrUndefined(this.cssClass)) {
        addClass([appointmentWrapper], this.cssClass);
      }
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        appointmentWrapper.setAttribute("data-group-index", resIndex.toString());
      }
    };
    EventBase2.prototype.getReadonlyAttribute = function(event) {
      return (event[this.parent.eventFields.isReadonly] || this.parent.readonly).toString();
    };
    EventBase2.prototype.isBlockRange = function(eventData) {
      var eventCollection = eventData instanceof Array ? eventData : [eventData];
      var isBlockAlert = false;
      var fields = this.parent.eventFields;
      for (var _i = 0, _a = eventCollection; _i < _a.length; _i++) {
        var event_5 = _a[_i];
        var dataCol = [];
        if (!isNullOrUndefined(event_5[fields.recurrenceRule]) && (isNullOrUndefined(event_5[fields.recurrenceID]) || event_5[fields.id] === event_5[fields.recurrenceID])) {
          dataCol = this.generateOccurrence(event_5);
        } else {
          dataCol.push(event_5);
        }
        for (var _b = 0, dataCol_1 = dataCol; _b < dataCol_1.length; _b++) {
          var data = dataCol_1[_b];
          var filterBlockEvents = this.filterBlockEvents(data);
          if (filterBlockEvents.length > 0) {
            isBlockAlert = true;
            break;
          }
        }
      }
      this.parent.uiStateValues.isBlock = isBlockAlert;
      return isBlockAlert;
    };
    EventBase2.prototype.getFilterEventsList = function(dataSource, query) {
      return new DataManager(dataSource).executeLocal(new Query().where(query));
    };
    EventBase2.prototype.getSeriesEvents = function(parentEvent, startTime) {
      var fields = this.parent.eventFields;
      startTime = isNullOrUndefined(startTime) ? parentEvent[fields.startTime] : startTime;
      var deleteFutureEditEvents;
      var futureEvents;
      var deleteFutureEditEventList = [];
      var delId = parentEvent[fields.id];
      var followingId = parentEvent[fields.followingID];
      var deleteFutureEvent;
      var startTimeQuery = this.parent.currentAction === "EditSeries" ? "greaterthan" : "greaterthanorequal";
      do {
        deleteFutureEvent = new Predicate(fields.followingID, "equal", delId).and(new Predicate(fields.startTime, startTimeQuery, startTime));
        futureEvents = this.getFilterEventsList(this.parent.eventsData, deleteFutureEvent);
        deleteFutureEditEvents = futureEvents.slice(-1)[0];
        if (!isNullOrUndefined(deleteFutureEditEvents) && deleteFutureEditEvents[fields.id] !== followingId) {
          deleteFutureEditEventList.push(deleteFutureEditEvents);
          delId = deleteFutureEditEvents[fields.id];
          followingId = deleteFutureEditEvents[fields.followingID];
        } else {
          followingId = null;
        }
      } while (futureEvents.length === 1 && !isNullOrUndefined(deleteFutureEditEvents[fields.followingID]));
      return deleteFutureEditEventList;
    };
    EventBase2.prototype.getEditedOccurrences = function(deleteFutureEditEventList, startTime) {
      var fields = this.parent.eventFields;
      var deleteRecurrenceEventList = [];
      var delEditedEvents;
      for (var _i = 0, deleteFutureEditEventList_1 = deleteFutureEditEventList; _i < deleteFutureEditEventList_1.length; _i++) {
        var event_6 = deleteFutureEditEventList_1[_i];
        var delEventQuery = new Predicate(fields.recurrenceID, "equal", event_6[fields.id]).or(new Predicate(fields.recurrenceID, "equal", event_6[fields.followingID]).and(new Predicate(fields.recurrenceID, "notequal", void 0)).and(new Predicate(fields.recurrenceID, "notequal", null)));
        if (this.parent.currentAction === "EditFollowingEvents" || this.parent.currentAction === "DeleteFollowingEvents") {
          delEventQuery = delEventQuery.and(new Predicate(fields.startTime, "greaterthanorequal", startTime));
        }
        delEditedEvents = this.getFilterEventsList(this.parent.eventsData, delEventQuery);
        deleteRecurrenceEventList = deleteRecurrenceEventList.concat(delEditedEvents);
      }
      return deleteRecurrenceEventList;
    };
    EventBase2.prototype.getRenderedDates = function(dateRender) {
      var firstDate = 0;
      var lastDate = dateRender.length;
      var filteredDates;
      var maxDate = isNullOrUndefined(this.parent.maxDate) ? new Date(2099, 11, 31) : this.parent.maxDate;
      var minDate = isNullOrUndefined(this.parent.minDate) ? new Date(1900, 0, 1) : this.parent.minDate;
      if (dateRender[0] < minDate && dateRender[dateRender.length - 1] > maxDate) {
        for (var i = 0; i < dateRender.length; i++) {
          if (resetTime(dateRender[parseInt(i.toString(), 10)]).getTime() === resetTime(new Date(minDate)).getTime()) {
            firstDate = i;
          }
          if (resetTime(dateRender[parseInt(i.toString(), 10)]).getTime() === resetTime(new Date(maxDate)).getTime()) {
            lastDate = i;
          }
        }
        filteredDates = dateRender.filter(function(date) {
          return date >= dateRender[parseInt(firstDate.toString(), 10)] && date <= dateRender[parseInt(lastDate.toString(), 10)];
        });
      }
      return filteredDates;
    };
    EventBase2.prototype.isValidEvent = function(eventObj, start, end, schedule) {
      var isHourRange = end.getTime() > schedule.startHour.getTime() && start.getTime() < schedule.endHour.getTime();
      var isSameRange = schedule.startHour.getTime() <= start.getTime() && eventObj[this.parent.eventFields.startTime].getTime() >= schedule.startHour.getTime() && eventObj[this.parent.eventFields.endTime].getTime() < schedule.endHour.getTime() && start.getTime() === end.getTime();
      return isHourRange || isSameRange;
    };
    EventBase2.prototype.allDayExpandScroll = function(dateHeader) {
      var indentHeight = 0;
      var headerRows = [].slice.call(this.parent.element.querySelectorAll("." + HEADER_ROW_CLASS));
      headerRows.forEach(function(element) {
        var tdEle = [].slice.call(element.children);
        tdEle.forEach(function(ele) {
          ele.style.top = indentHeight + "px";
        });
        indentHeight += element.offsetHeight;
      });
      indentHeight = dateHeader.offsetHeight - indentHeight;
      this.parent.element.querySelector("." + ALLDAY_CELLS_CLASS).style.height = indentHeight / 12 + "em";
      if (this.parent.uiStateValues.expand) {
        addClass([dateHeader], ALLDAY_APPOINTMENT_SCROLL);
      } else {
        removeClass([dateHeader], ALLDAY_APPOINTMENT_SCROLL);
      }
    };
    EventBase2.prototype.updateEventMinimumDuration = function(startEndHours, startTime, endTime) {
      if (startTime.getTime() < endTime.getTime() || startTime.getTime() === endTime.getTime() && (startEndHours.startHour.getTime() < endTime.getTime() && startEndHours.endHour.getTime() > startTime.getTime()) && this.parent.currentView.indexOf("Timeline") === -1) {
        var eventDuration = (getUniversalTime(endTime) - getUniversalTime(startTime)) / MS_PER_MINUTE;
        if (eventDuration < this.parent.eventSettings.minimumEventDuration) {
          var tempEnd = new Date(startTime);
          tempEnd.setMinutes(tempEnd.getMinutes() + this.parent.eventSettings.minimumEventDuration);
          endTime = tempEnd;
          if (endTime.getTime() > startEndHours.endHour.getTime()) {
            var tempStart = new Date(startEndHours.endHour.getTime());
            tempStart.setMinutes(tempStart.getMinutes() - this.parent.eventSettings.minimumEventDuration);
            startTime = tempStart;
            endTime = startEndHours.endHour;
          }
        }
      }
      return { startDate: startTime, endDate: endTime };
    };
    EventBase2.prototype.createEventWrapper = function(type, index) {
      if (type === void 0) {
        type = "";
      }
      if (index === void 0) {
        index = 0;
      }
      var tr = createElement("tr");
      var levels = this.parent.activeView.colLevels.slice(-1)[0];
      var className = this.parent.isReact && this.parent.activeViewOptions.eventTemplate ? " " + APPOINTMENT_WRAPPER_HIDDEN_CLASS : "";
      for (var i = 0, len = levels.length; i < len; i++) {
        var col = levels[parseInt(i.toString(), 10)];
        var appointmentWrap = createElement("td", {
          className: type === "allDay" ? ALLDAY_APPOINTMENT_WRAPPER_CLASS + className : type === "timeIndicator" ? TIMELINE_WRAPPER_CLASS : DAY_WRAPPER_CLASS + className,
          attrs: { "data-date": col.date.getTime().toString() }
        });
        if (!isNullOrUndefined(col.groupIndex)) {
          appointmentWrap.setAttribute("data-group-index", col.groupIndex.toString());
        }
        if (type === "") {
          var innerWrapper = createElement("div", {
            id: APPOINTMENT_WRAPPER_CLASS + "-" + index.toString(),
            className: APPOINTMENT_WRAPPER_CLASS
          });
          appointmentWrap.appendChild(innerWrapper);
        }
        tr.appendChild(appointmentWrap);
        index = index + 1;
      }
      return tr;
    };
    EventBase2.prototype.getPageCoordinates = function(e) {
      if (isNullOrUndefined(e)) {
        return e;
      }
      var eventArgs = e.event;
      return eventArgs && eventArgs.changedTouches ? eventArgs.changedTouches[0] : e.changedTouches ? e.changedTouches[0] : eventArgs || e;
    };
    EventBase2.prototype.renderSpannedIcon = function(element, spanEvent) {
      var iconElement = createElement("div", { className: EVENT_INDICATOR_CLASS + " " + ICON });
      if (spanEvent.isLeft) {
        var iconLeft = iconElement.cloneNode();
        addClass([iconLeft], EVENT_ICON_LEFT_CLASS);
        prepend([iconLeft], element);
      }
      if (spanEvent.isRight) {
        var iconRight = iconElement.cloneNode();
        addClass([iconRight], EVENT_ICON_RIGHT_CLASS);
        append([iconRight], element);
      }
      if (spanEvent.isTop) {
        var iconTop = iconElement.cloneNode();
        addClass([iconTop], EVENT_ICON_UP_CLASS);
        prepend([iconTop], element);
      }
      if (spanEvent.isBottom) {
        var iconBottom = iconElement.cloneNode();
        addClass([iconBottom], EVENT_ICON_DOWN_CLASS);
        append([iconBottom], element);
      }
    };
    EventBase2.prototype.addCellHeight = function(selector, eventHeight, eventGap, headerHeight, indHeight, isScrollUpdate) {
      if (isScrollUpdate === void 0) {
        isScrollUpdate = true;
      }
      if (this.parent.activeViewOptions.maxEventsPerRow && !this.parent.rowAutoHeight) {
        var rows = [].slice.call(this.parent.element.querySelectorAll(selector));
        var weekNumberRows = this.parent.showWeekNumber ? [].slice.call(this.parent.element.querySelectorAll("." + WEEK_NUMBER_WRAPPER_CLASS + " tbody tr")) : [];
        for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
          var row = rows_1[_i];
          var height = this.parent.activeViewOptions.maxEventsPerRow * (eventHeight + (this.parent.currentView === "Month" ? eventGap : 2)) + headerHeight + indHeight;
          if (weekNumberRows.length > 0) {
            setStyleAttribute(weekNumberRows[rows.indexOf(row)].firstElementChild, { "height": height + "px" });
          }
          setStyleAttribute(row.firstElementChild, { "height": height + "px" });
        }
        if (!this.parent.enablePersistence && !this.parent.activeViewOptions.allowVirtualScrolling && isScrollUpdate) {
          this.parent.notify(contentReady, {});
        }
      }
    };
    EventBase2.prototype.unWireEvents = function() {
      var appElements = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_CLASS));
      for (var _i = 0, appElements_1 = appElements; _i < appElements_1.length; _i++) {
        var element = appElements_1[_i];
        EventHandler.clearEvents(element);
      }
    };
    EventBase2.prototype.destroy = function() {
      this.unWireEvents();
      this.parent = null;
    };
    return EventBase2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/event-renderer/vertical-view.js
var __extends = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var VerticalEvent = (
  /** @class */
  function(_super) {
    __extends(VerticalEvent2, _super);
    function VerticalEvent2(parent) {
      var _this = _super.call(this, parent) || this;
      _this.dateRender = [];
      _this.renderedEvents = [];
      _this.renderedAllDayEvents = [];
      _this.overlapEvents = [];
      _this.moreEvents = [];
      _this.overlapList = [];
      _this.allDayEvents = [];
      _this.slotCount = _this.parent.activeViewOptions.timeScale.slotCount;
      _this.interval = _this.parent.activeViewOptions.timeScale.interval;
      _this.allDayLevel = 0;
      _this.startHour = _this.parent.activeView.getStartHour();
      _this.endHour = _this.parent.activeView.getEndHour();
      _this.element = _this.parent.activeView.getPanel();
      _this.fields = _this.parent.eventFields;
      _this.animation = new Animation({ progress: _this.animationUiUpdate.bind(_this) });
      _this.addEventListener();
      return _this;
    }
    VerticalEvent2.prototype.renderAppointments = function() {
      var _this = this;
      if (isNullOrUndefined(this.parent)) {
        return;
      }
      if (this.parent.dragAndDropModule) {
        this.parent.dragAndDropModule.setDragArea();
      }
      this.isResourceEventTemplate = this.parent.isSpecificResourceEvents();
      var wrapperElements = [].slice.call(this.parent.element.querySelectorAll("." + BLOCK_APPOINTMENT_CLASS + ",." + APPOINTMENT_CLASS + ",." + ROW_COUNT_WRAPPER_CLASS));
      var isDragging = this.parent.crudModule && this.parent.crudModule.crudObj.isCrudAction ? true : false;
      var hideWrapper = function(wrapper2) {
        if (_this.parent.isReact && !isNullOrUndefined(_this.parent.activeViewOptions.eventTemplate)) {
          var appWrapper = closest(wrapper2, "." + DAY_WRAPPER_CLASS + ",." + ALLDAY_APPOINTMENT_WRAPPER_CLASS);
          if (appWrapper && !appWrapper.classList.contains(APPOINTMENT_WRAPPER_HIDDEN_CLASS)) {
            addClass([appWrapper], APPOINTMENT_WRAPPER_HIDDEN_CLASS);
          }
        }
      };
      for (var _i = 0, wrapperElements_1 = wrapperElements; _i < wrapperElements_1.length; _i++) {
        var wrapper = wrapperElements_1[_i];
        if (isDragging && !(wrapper.classList.contains(ALLDAY_APPOINTMENT_CLASS) || wrapper.classList.contains(ROW_COUNT_WRAPPER_CLASS))) {
          var groupIndex = parseInt(wrapper.getAttribute("data-group-index"), 10);
          for (var j = 0, len = this.parent.crudModule.crudObj.sourceEvent.length; j < len; j++) {
            if (groupIndex === this.parent.crudModule.crudObj.sourceEvent[parseInt(j.toString(), 10)].groupIndex || groupIndex === this.parent.crudModule.crudObj.targetEvent[parseInt(j.toString(), 10)].groupIndex) {
              hideWrapper(wrapper);
              remove(wrapper);
            }
          }
        } else {
          hideWrapper(wrapper);
          remove(wrapper);
        }
      }
      if (!this.element.querySelector("." + WORK_CELLS_CLASS)) {
        return;
      }
      if (this.parent.virtualScrollModule) {
        this.parent.virtualScrollModule.updateFocusedWorkCell();
      }
      this.allDayElement = [].slice.call(this.element.querySelectorAll("." + ALLDAY_CELLS_CLASS));
      this.setAllDayRowHeight(0);
      if (this.parent.eventsProcessed.length === 0 && this.parent.blockProcessed.length === 0) {
        return;
      }
      var expandCollapse = this.element.querySelector("." + ALLDAY_APPOINTMENT_SECTION_CLASS);
      EventHandler.remove(expandCollapse, "click", this.rowExpandCollapse);
      EventHandler.add(expandCollapse, "click", this.rowExpandCollapse, this);
      this.renderedEvents = [];
      this.renderedAllDayEvents = [];
      this.initializeValues();
      this.processBlockEvents();
      this.renderEvents("normalEvents");
      if (this.allDayEvents.length > 0) {
        this.allDayEvents = this.allDayEvents.filter(function(item, index, arr) {
          return index === arr.map(function(item2) {
            return item2.Guid;
          }).indexOf(item.Guid);
        });
        removeClass(this.allDayElement, ALLDAY_ROW_ANIMATE_CLASS);
        this.slots.push(this.parent.activeView.renderDates.map(function(date) {
          return +date;
        }));
        this.renderEvents("allDayEvents");
        this.animation.animate(this.allDayElement[0]);
      }
      this.parent.notify(contentReady, {});
      addClass(this.allDayElement, ALLDAY_ROW_ANIMATE_CLASS);
      if (isDragging) {
        this.parent.crudModule.crudObj.isCrudAction = false;
      }
      this.parent.renderTemplates(function() {
        if (_this.parent && _this.parent.isReact && _this.parent.activeViewOptions.eventTemplate) {
          var wraps = [].slice.call(_this.parent.element.querySelectorAll("." + APPOINTMENT_WRAPPER_HIDDEN_CLASS));
          removeClass(wraps, APPOINTMENT_WRAPPER_HIDDEN_CLASS);
        }
      });
    };
    VerticalEvent2.prototype.initializeValues = function() {
      this.resources = this.parent.activeViewOptions.group.resources.length > 0 ? this.parent.uiStateValues.isGroupAdaptive ? [this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex]] : this.parent.resourceBase.lastResourceLevel : [];
      if (this.resources.length > 0 && this.parent.activeViewOptions.allowVirtualScrolling && this.parent.virtualScrollModule) {
        this.resources = this.parent.resourceBase.renderedResources;
      }
      this.cellHeight = parseFloat(this.parent.getElementHeight(this.parent.element.querySelector(".e-content-wrap tbody tr")).toFixed(2));
      this.dateRender[0] = this.parent.activeView.renderDates;
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        for (var i = 0, len = this.resources.length; i < len; i++) {
          this.dateRender[parseInt(i.toString(), 10)] = this.resources[parseInt(i.toString(), 10)].renderDates;
        }
      }
    };
    VerticalEvent2.prototype.getHeight = function(start, end) {
      var appHeight = (getUniversalTime(end) - getUniversalTime(start)) / MS_PER_MINUTE * (this.cellHeight * this.slotCount) / this.interval;
      appHeight = appHeight <= 0 ? this.cellHeight : appHeight;
      return appHeight;
    };
    VerticalEvent2.prototype.appendEvent = function(eventObj, appointmentElement, index, appLeft) {
      var appointmentWrap = this.element.querySelector("." + APPOINTMENT_WRAPPER_CLASS + '[id="' + APPOINTMENT_WRAPPER_CLASS + "-" + index + '"]');
      if (this.parent.enableRtl) {
        setStyleAttribute(appointmentElement, { "right": appLeft });
      } else {
        setStyleAttribute(appointmentElement, { "left": appLeft });
      }
      var eventType = appointmentElement.classList.contains(BLOCK_APPOINTMENT_CLASS) ? "blockEvent" : "event";
      var args = {
        data: extend({}, eventObj, null, true),
        element: appointmentElement,
        cancel: false,
        type: eventType
      };
      this.parent.trigger(eventRendered, args, function(eventArgs) {
        if (!eventArgs.cancel) {
          appointmentWrap.appendChild(appointmentElement);
        }
      });
    };
    VerticalEvent2.prototype.processBlockEvents = function() {
      var resources = this.getResourceList();
      var dateCount = this.getStartCount();
      for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {
        var resource = resources_1[_i];
        var renderDates = this.dateRender[parseInt(resource.toString(), 10)];
        for (var day = 0, length_1 = renderDates.length; day < length_1; day++) {
          var startDate = new Date(renderDates[parseInt(day.toString(), 10)].getTime());
          var endDate = addDays(renderDates[parseInt(day.toString(), 10)], 1);
          var filterEvents = this.filterEvents(startDate, endDate, this.parent.blockProcessed, this.resources[parseInt(resource.toString(), 10)]);
          for (var _a = 0, filterEvents_1 = filterEvents; _a < filterEvents_1.length; _a++) {
            var event_1 = filterEvents_1[_a];
            if (this.parent.resourceBase) {
              this.setValues(event_1, resource);
            }
            this.renderBlockEvents(event_1, day, resource, dateCount);
            this.cssClass = null;
            this.groupOrder = null;
          }
          dateCount += 1;
        }
      }
    };
    VerticalEvent2.prototype.renderBlockEvents = function(eventObj, dayIndex2, resource, dayCount) {
      var spannedData = this.isSpannedEvent(eventObj, dayIndex2, resource);
      var eStart = spannedData[this.fields.startTime];
      var eEnd = spannedData[this.fields.endTime];
      var currentDate = resetTime(new Date(this.dateRender[parseInt(resource.toString(), 10)][parseInt(dayIndex2.toString(), 10)].getTime()));
      var schedule = getStartEndHours(currentDate, this.startHour, this.endHour);
      if (eStart <= eEnd && this.isValidEvent(eventObj, eStart, eEnd, schedule) && this.isWorkDayAvailable(resource, eStart)) {
        var blockTop = void 0;
        var blockHeight = void 0;
        if (spannedData[this.fields.isAllDay]) {
          var contentWrap = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS + " table");
          blockHeight = formatUnit(contentWrap.offsetHeight);
          blockTop = formatUnit(0);
        } else {
          blockHeight = formatUnit(this.getHeight(eStart, eEnd));
          blockTop = formatUnit(this.getTopValue(eStart, dayIndex2, resource));
        }
        var appointmentElement = this.createBlockAppointmentElement(eventObj, resource, this.isResourceEventTemplate);
        setStyleAttribute(appointmentElement, { "width": "100%", "height": blockHeight, "top": blockTop });
        var index = this.getDayIndex(dayIndex2, resource, dayCount);
        this.appendEvent(eventObj, appointmentElement, index, "0px");
      }
    };
    VerticalEvent2.prototype.renderEvents = function(eventType) {
      removeClass(this.allDayElement, ALLDAY_ROW_ANIMATE_CLASS);
      var eventCollection = eventType === "allDayEvents" ? this.sortByDateTime(this.allDayEvents) : void 0;
      var resources = this.getResourceList();
      var dateCount = this.getStartCount();
      var isRender;
      var appHeight = eventType === "allDayEvents" ? this.parent.getElementHeightFromClass(this.element.querySelector("." + ALLDAY_APPOINTMENT_WRAPPER_CLASS), APPOINTMENT_CLASS) : 0;
      var allDayRowTop = eventType === "allDayEvents" && this.allDayElement.length > 0 ? this.allDayElement[0].offsetTop : 0;
      var _loop_1 = function(resource2) {
        isRender = true;
        if (this_1.parent.crudModule && this_1.parent.crudModule.crudObj.isCrudAction && eventType !== "allDayEvents" && !this_1.parent.uiStateValues.isGroupAdaptive) {
          if (this_1.parent.crudModule.crudObj.sourceEvent.filter(function(data) {
            return data.groupIndex === resource2;
          }).length === 0 && this_1.parent.crudModule.crudObj.targetEvent.filter(function(data) {
            return data.groupIndex === resource2;
          }).length === 0) {
            isRender = false;
          }
        }
        this_1.slots = [];
        var renderDates = this_1.dateRender[parseInt(resource2.toString(), 10)];
        var renderedDate = this_1.getRenderedDates(renderDates) || renderDates;
        this_1.slots.push(renderDates.map(function(date) {
          return +date;
        }));
        for (var day = 0, length_2 = renderDates.length; day < length_2 && renderDates[parseInt(day.toString(), 10)] <= renderedDate[renderedDate.length - 1]; day++) {
          this_1.renderedEvents = [];
          var startDate = new Date(renderDates[parseInt(day.toString(), 10)].getTime());
          var endDate = addDays(renderDates[parseInt(day.toString(), 10)], 1);
          var filterEvents = this_1.filterEvents(startDate, endDate, eventCollection, this_1.resources[parseInt(resource2.toString(), 10)]);
          if (isRender) {
            for (var _i2 = 0, filterEvents_2 = filterEvents; _i2 < filterEvents_2.length; _i2++) {
              var event_2 = filterEvents_2[_i2];
              if (this_1.parent.resourceBase) {
                this_1.setValues(event_2, resource2);
              }
              if (eventType === "allDayEvents") {
                this_1.renderAllDayEvents(event_2, day, resource2, dateCount, false, allDayRowTop, appHeight);
              } else {
                if (this_1.isAllDayAppointment(event_2)) {
                  this_1.allDayEvents.push(extend({}, event_2, null, true));
                } else {
                  if (this_1.parent.eventSettings.enableMaxHeight) {
                    if (this_1.getOverlapIndex(event_2, day, false, resource2) > 0) {
                      continue;
                    }
                  }
                  this_1.renderNormalEvents(event_2, day, resource2, dateCount);
                }
              }
              this_1.cssClass = null;
              this_1.groupOrder = null;
            }
          } else {
            for (var _a = 0, filterEvents_3 = filterEvents; _a < filterEvents_3.length; _a++) {
              var event_3 = filterEvents_3[_a];
              if (this_1.isAllDayAppointment(event_3)) {
                this_1.allDayEvents.push(extend({}, event_3, null, true));
              }
            }
          }
          dateCount += 1;
        }
      };
      var this_1 = this;
      for (var _i = 0, resources_2 = resources; _i < resources_2.length; _i++) {
        var resource = resources_2[_i];
        _loop_1(resource);
      }
    };
    VerticalEvent2.prototype.getStartCount = function() {
      return this.parent.virtualScrollModule && this.parent.activeViewOptions.allowVirtualScrolling && this.parent.timeScale.enable ? parseInt(this.element.querySelector("." + APPOINTMENT_WRAPPER_CLASS).getAttribute("id").split("-").slice(-1)[0], 10) : 0;
    };
    VerticalEvent2.prototype.getDayIndex = function(dayIndex2, resource, dayCount) {
      var _this = this;
      if (!this.parent.activeViewOptions.group.byDate) {
        return dayCount;
      }
      if (this.parent.activeViewOptions.group.byDate && !this.parent.activeViewOptions.group.hideNonWorkingDays) {
        var renderedIndex = this.parent.resourceBase.lastResourceLevel[0].renderDates.indexOf(this.dateRender[parseInt(resource.toString(), 10)][parseInt(dayIndex2.toString(), 10)]);
        return this.resources.length * renderedIndex + resource;
      }
      var dateIndex = 0;
      var firstColumn = this.parent.activeView.colLevels[0];
      var currentDate = this.dateRender[parseInt(resource.toString(), 10)][parseInt(dayIndex2.toString(), 10)].getTime();
      var currentResources = [];
      for (var i = 0; i < firstColumn.length; i++) {
        currentResources = this.parent.resourceBase.resourceDateTree[parseInt(i.toString(), 10)];
        if (currentDate === firstColumn[parseInt(i.toString(), 10)].date.getTime()) {
          break;
        }
        dateIndex = dateIndex + firstColumn[parseInt(i.toString(), 10)].colSpan;
      }
      var resIndex = currentResources.findIndex(function(x) {
        return x.groupOrder.toString() === _this.resources[parseInt(resource.toString(), 10)].groupOrder.toString();
      });
      if (resIndex < 0) {
        return dateIndex;
      }
      return dateIndex + resIndex;
    };
    VerticalEvent2.prototype.setValues = function(event, resourceIndex) {
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        this.cssClass = this.resources[parseInt(resourceIndex.toString(), 10)].cssClass;
        this.groupOrder = this.resources[parseInt(resourceIndex.toString(), 10)].groupOrder;
      } else {
        this.cssClass = this.parent.resourceBase.getCssClass(event);
      }
    };
    VerticalEvent2.prototype.getResourceList = function() {
      var resources = Array.apply(null, {
        length: this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive ? this.resources.length : 1
      }).map(function(value, index) {
        return index;
      });
      return resources;
    };
    VerticalEvent2.prototype.createAppointmentElement = function(record, isAllDay, data, resource) {
      var fieldMapping = this.parent.eventFields;
      var recordSubject = record[fieldMapping.subject] || this.parent.eventSettings.fields.subject.default || this.parent.localeObj.getConstant("addTitle");
      var appointmentWrapper = createElement("div", {
        className: APPOINTMENT_CLASS,
        attrs: {
          "data-id": "Appointment_" + record[fieldMapping.id],
          "data-guid": record.Guid,
          "role": "button",
          "tabindex": "0",
          "aria-disabled": this.parent.eventBase.getReadonlyAttribute(record),
          "aria-label": this.parent.getAnnouncementString(record)
        }
      });
      if (record[this.fields.isReadonly]) {
        addClass([appointmentWrapper], "e-read-only");
      }
      var appointmentDetails = createElement("div", { className: APPOINTMENT_DETAILS });
      appointmentWrapper.appendChild(appointmentDetails);
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        var resourceIndex = this.parent.uiStateValues.isGroupAdaptive ? this.parent.uiStateValues.groupIndex : resource;
        appointmentWrapper.setAttribute("data-group-index", resourceIndex.toString());
      }
      var templateElement;
      var eventData = data;
      if (!isNullOrUndefined(this.parent.activeViewOptions.eventTemplate)) {
        var elementId = this.parent.element.id + "_";
        var viewName = this.parent.activeViewOptions.eventTemplateName;
        var templateId = elementId + viewName + "eventTemplate";
        var resIndex = this.parent.uiStateValues.isGroupAdaptive ? this.parent.uiStateValues.groupIndex : resource;
        var templateName = this.isResourceEventTemplate ? this.parent.getEventTemplateName(resIndex) : "eventTemplate";
        templateElement = this.parent.getAppointmentTemplate()(record, this.parent, templateName, templateId, false, void 0, void 0, this.parent.root);
      } else {
        var appointmentSubject = createElement("div", { className: SUBJECT_CLASS });
        this.parent.sanitize(recordSubject, appointmentSubject);
        if (isAllDay) {
          if (record[fieldMapping.isAllDay]) {
            templateElement = [appointmentSubject];
          } else {
            templateElement = [];
            var appointmentStartTime = createElement("div", {
              className: APPOINTMENT_TIME + (this.parent.isAdaptive ? " " + DISABLE_CLASS : ""),
              innerHTML: this.parent.getTimeString(record[fieldMapping.startTime])
            });
            var appointmentEndTime = createElement("div", {
              className: APPOINTMENT_TIME + (this.parent.isAdaptive ? " " + DISABLE_CLASS : ""),
              innerHTML: this.parent.getTimeString(record[fieldMapping.endTime])
            });
            addClass([appointmentSubject], "e-text-center");
            if (!eventData.isLeft) {
              templateElement.push(appointmentStartTime);
            }
            templateElement.push(appointmentSubject);
            if (!eventData.isRight) {
              templateElement.push(appointmentEndTime);
            }
          }
        } else {
          var timeStr = this.parent.getTimeString(record[fieldMapping.startTime]) + " - " + this.parent.getTimeString(record[fieldMapping.endTime]);
          var appointmentTime = createElement("div", {
            className: APPOINTMENT_TIME + (this.parent.isAdaptive ? " " + DISABLE_CLASS : ""),
            innerHTML: timeStr
          });
          var appointmentLocation = createElement("div", { className: LOCATION_CLASS });
          this.parent.sanitize(record[fieldMapping.location] || this.parent.eventSettings.fields.location.default || "", appointmentLocation);
          templateElement = [appointmentSubject, appointmentTime, appointmentLocation];
        }
      }
      append(templateElement, appointmentDetails);
      if (!this.parent.isAdaptive && (!isNullOrUndefined(record[fieldMapping.recurrenceRule]) || !isNullOrUndefined(record[fieldMapping.recurrenceID]))) {
        var iconClass = record[fieldMapping.id] === record[fieldMapping.recurrenceID] ? EVENT_RECURRENCE_ICON_CLASS : EVENT_RECURRENCE_EDIT_ICON_CLASS;
        var recurrenceIcon = createElement("div", { className: ICON + " " + iconClass });
        if (isAllDay) {
          appointmentDetails.appendChild(recurrenceIcon);
        } else {
          appointmentWrapper.appendChild(recurrenceIcon);
        }
      }
      this.parent.eventBase.renderSpannedIcon(isAllDay ? appointmentDetails : appointmentWrapper, eventData);
      if (!isNullOrUndefined(this.cssClass)) {
        addClass([appointmentWrapper], this.cssClass);
      }
      this.applyResourceColor(appointmentWrapper, record, "backgroundColor", this.groupOrder);
      this.renderResizeHandler(appointmentWrapper, eventData, record[this.fields.isReadonly]);
      return appointmentWrapper;
    };
    VerticalEvent2.prototype.createMoreIndicator = function(allDayRow, count, currentDay) {
      var index = currentDay + count;
      var countWrapper = allDayRow[parseInt(index.toString(), 10)];
      if (countWrapper.childElementCount <= 0) {
        var innerCountWrap = createElement("div", {
          className: ROW_COUNT_WRAPPER_CLASS,
          id: ROW_COUNT_WRAPPER_CLASS + "-" + index.toString()
        });
        var moreIndicatorElement = createElement("div", {
          className: MORE_INDICATOR_CLASS,
          attrs: { "tabindex": "0", "data-index": index.toString(), "data-count": "1" },
          innerHTML: "+1&nbsp;" + (this.parent.isAdaptive ? "" : this.parent.localeObj.getConstant("more"))
        });
        innerCountWrap.appendChild(moreIndicatorElement);
        countWrapper.appendChild(innerCountWrap);
        EventHandler.add(moreIndicatorElement, "click", this.rowExpandCollapse, this);
      } else {
        var countCell = countWrapper.querySelector("." + MORE_INDICATOR_CLASS);
        var moreCount = parseInt(countCell.getAttribute("data-count"), 10) + 1;
        countCell.setAttribute("data-count", moreCount.toString());
        countCell.innerHTML = "+" + this.parent.globalize.formatNumber(moreCount) + "&nbsp;" + (this.parent.isAdaptive ? "" : this.parent.localeObj.getConstant("more"));
      }
    };
    VerticalEvent2.prototype.isSpannedEvent = function(record, day, resource) {
      var currentDate = resetTime(this.dateRender[parseInt(resource.toString(), 10)][parseInt(day.toString(), 10)]);
      var renderedDate = this.getRenderedDates(this.dateRender[parseInt(resource.toString(), 10)]) || [currentDate];
      var currentDay = renderedDate.filter(function(date) {
        return date.getDay() === day;
      });
      if (currentDay.length === 0) {
        currentDate = resetTime(renderedDate[0]);
      }
      var field = this.parent.eventFields;
      var schedule = getStartEndHours(currentDate, this.startHour, this.endHour);
      var event = extend({}, record, null, true);
      event.isSpanned = {
        isBottom: false,
        isTop: false,
        isSameDuration: event[field.startTime].getTime() === event[field.endTime].getTime()
      };
      if (record[field.startTime].getTime() < schedule.startHour.getTime()) {
        event[field.startTime] = schedule.startHour;
        event.isSpanned.isTop = true;
      }
      if (record[field.endTime].getTime() > schedule.endHour.getTime()) {
        event[field.endTime] = schedule.endHour;
        event.isSpanned.isBottom = true;
      }
      var eventDates = this.updateEventMinimumDuration(schedule, event[field.startTime], event[field.endTime]);
      event[field.startTime] = eventDates.startDate;
      event[field.endTime] = eventDates.endDate;
      return event;
    };
    VerticalEvent2.prototype.isWorkDayAvailable = function(resource, start) {
      if (this.parent.activeViewOptions.group.hideNonWorkingDays && this.resources.length > 0) {
        var workDays = this.resources[parseInt(resource.toString(), 10)].resourceData[this.resources[parseInt(resource.toString(), 10)].resource.workDaysField] || this.parent.activeViewOptions.workDays;
        return workDays && workDays.indexOf(start.getDay()) >= 0;
      }
      return true;
    };
    VerticalEvent2.prototype.renderAllDayEvents = function(eventObj, dayIndex2, resource, dayCount, inline, cellTop, eventHeight) {
      var _this = this;
      var currentDates = this.getRenderedDates(this.dateRender[parseInt(resource.toString(), 10)]) || this.dateRender[parseInt(resource.toString(), 10)];
      if (this.parent.activeViewOptions.group.byDate) {
        this.slots[0] = [this.dateRender[parseInt(resource.toString(), 10)][parseInt(dayIndex2.toString(), 10)].getTime()];
        currentDates = [this.dateRender[parseInt(resource.toString(), 10)][parseInt(dayIndex2.toString(), 10)]];
      }
      var record = this.splitEvent(eventObj, currentDates)[0];
      var eStart = new Date(record[this.parent.eventFields.startTime].getTime());
      var eEnd = new Date(record[this.parent.eventFields.endTime].getTime());
      var appWidth = 0;
      var topValue = 1;
      var isDateRange = currentDates[0].getTime() <= eStart.getTime() && addDays(currentDates.slice(-1)[0], 1).getTime() >= eStart.getTime();
      if (eStart <= eEnd && isDateRange && this.isWorkDayAvailable(resource, eStart)) {
        var isAlreadyRendered = [];
        if (this.renderedAllDayEvents[parseInt(resource.toString(), 10)]) {
          isAlreadyRendered = this.renderedAllDayEvents[parseInt(resource.toString(), 10)].filter(function(event) {
            return event.Guid === eventObj.Guid;
          });
          if (this.parent.activeViewOptions.group.byDate) {
            isAlreadyRendered = isAlreadyRendered.filter(function(event) {
              return event[_this.parent.eventFields.startTime] >= currentDates[parseInt(dayIndex2.toString(), 10)] && event[_this.parent.eventFields.endTime] <= addDays(/* @__PURE__ */ new Date(+currentDates[parseInt(dayIndex2.toString(), 10)]), 1);
            });
          }
        }
        if (isAlreadyRendered.length === 0) {
          var allDayDifference_1 = record.data.count;
          var allDayIndex_1 = this.getOverlapIndex(record, dayIndex2, true, resource);
          record.Index = allDayIndex_1;
          this.allDayLevel = this.allDayLevel < allDayIndex_1 ? allDayIndex_1 : this.allDayLevel;
          var widthAdjustment = record.data.isRight ? 0 : this.parent.currentView === "Day" ? 4 : 7;
          if (allDayDifference_1 >= 0) {
            appWidth = allDayDifference_1 * 100 - widthAdjustment;
          }
          if (isNullOrUndefined(this.renderedAllDayEvents[parseInt(resource.toString(), 10)])) {
            this.renderedAllDayEvents[parseInt(resource.toString(), 10)] = [];
          }
          this.renderedAllDayEvents[parseInt(resource.toString(), 10)].push(extend({}, record, null, true));
          var allDayRow_1 = [].slice.call(this.element.querySelector("." + ALLDAY_ROW_CLASS).children);
          var wIndex_1 = this.getDayIndex(dayIndex2, resource, dayCount);
          var eventWrapper_1 = this.element.querySelector("." + ALLDAY_APPOINTMENT_WRAPPER_CLASS + ":nth-child(" + (wIndex_1 + 1) + ")");
          var appointmentElement_1;
          if (inline) {
            appointmentElement_1 = this.parent.inlineModule.createInlineAppointmentElement(eventObj);
          } else {
            appointmentElement_1 = this.createAppointmentElement(eventObj, true, record.data, resource);
          }
          addClass([appointmentElement_1], ALLDAY_APPOINTMENT_CLASS);
          var eventData = extend({}, record.data, null, true);
          eventObj.data = eventData;
          var args = { data: eventObj, element: appointmentElement_1, cancel: false };
          this.parent.trigger(eventRendered, args, function(eventArgs) {
            if (!eventArgs.cancel) {
              eventWrapper_1.appendChild(appointmentElement_1);
              topValue += (allDayIndex_1 === 0 ? cellTop : cellTop + allDayIndex_1 * eventHeight) + 1;
              setStyleAttribute(appointmentElement_1, { "width": appWidth + "%", "top": formatUnit(topValue) });
              if (allDayIndex_1 > 1) {
                _this.moreEvents.push(appointmentElement_1);
                for (var count = 0, length_3 = allDayDifference_1; count < length_3; count++) {
                  _this.createMoreIndicator(allDayRow_1, count, wIndex_1);
                }
              }
              _this.allDayElement[0].setAttribute("data-count", _this.allDayLevel.toString());
              var allDayRowHeight = (!_this.parent.uiStateValues.expand && _this.allDayLevel > 2 ? 3 * eventHeight : (_this.allDayLevel + 1) * eventHeight) + 4;
              _this.setAllDayRowHeight(allDayRowHeight);
              _this.addOrRemoveClass();
              _this.wireAppointmentEvents(appointmentElement_1, eventObj);
            }
          });
        }
      }
    };
    VerticalEvent2.prototype.renderNormalEvents = function(eventObj, dayIndex2, resource, dayCount, inline) {
      var record = this.isSpannedEvent(eventObj, dayIndex2, resource);
      var eStart = record[this.fields.startTime];
      var eEnd = record[this.fields.endTime];
      var appWidth = "0%";
      var appLeft = "0%";
      var topValue = 0;
      var currentDate = resetTime(new Date(this.dateRender[parseInt(resource.toString(), 10)][parseInt(dayIndex2.toString(), 10)].getTime()));
      var schedule = getStartEndHours(currentDate, this.startHour, this.endHour);
      var isValidEvent = this.isValidEvent(eventObj, eStart, eEnd, schedule);
      if (eStart.getTime() < this.parent.minDate.getTime() || eEnd.getTime() > this.parent.maxDate.getTime()) {
        return;
      }
      if (eStart <= eEnd && isValidEvent && this.isWorkDayAvailable(resource, eStart)) {
        var appHeight = record.isSpanned.isSameDuration ? this.cellHeight : this.getHeight(eStart, eEnd);
        if (eStart.getTime() >= schedule.startHour.getTime()) {
          topValue = this.getTopValue(eStart, dayIndex2, resource);
        }
        var appIndex = this.getOverlapIndex(record, dayIndex2, false, resource);
        record.Index = appIndex;
        this.overlapList.push(record);
        if (this.overlapList.length > 1) {
          if (isNullOrUndefined(this.overlapEvents[parseInt(appIndex.toString(), 10)])) {
            this.overlapEvents[parseInt(appIndex.toString(), 10)] = [];
          }
          this.overlapEvents[parseInt(appIndex.toString(), 10)].push(record);
        } else {
          this.overlapEvents = [];
          this.overlapEvents.push([record]);
        }
        appWidth = this.getEventWidth();
        var argsData = {
          index: appIndex,
          left: appLeft,
          width: appWidth,
          day: dayCount,
          dayIndex: dayIndex2,
          record,
          resource
        };
        var tempData = this.adjustOverlapElements(argsData);
        appWidth = tempData.appWidth;
        if (isNullOrUndefined(this.renderedEvents[parseInt(resource.toString(), 10)])) {
          this.renderedEvents[parseInt(resource.toString(), 10)] = [];
        }
        this.renderedEvents[parseInt(resource.toString(), 10)].push(extend({}, record, null, true));
        var appointmentElement = void 0;
        if (inline) {
          appointmentElement = this.parent.inlineModule.createInlineAppointmentElement(eventObj);
        } else {
          appointmentElement = this.createAppointmentElement(eventObj, false, record.isSpanned, resource);
        }
        setStyleAttribute(appointmentElement, {
          "width": this.parent.eventSettings.enableMaxHeight ? "100%" : tempData.appWidth,
          "height": appHeight + "px",
          "top": topValue + "px"
        });
        var iconHeight = appointmentElement.querySelectorAll("." + EVENT_INDICATOR_CLASS).length * 15;
        var maxHeight = appHeight - 40 - iconHeight;
        var subjectElement = appointmentElement.querySelector("." + SUBJECT_CLASS);
        if (!this.parent.isAdaptive && subjectElement) {
          subjectElement.style.maxHeight = formatUnit(maxHeight);
        }
        var index = this.getDayIndex(dayIndex2, resource, dayCount);
        var eventData = {};
        eventData[this.fields.startTime] = eventObj[this.fields.startTime];
        eventData[this.fields.endTime] = eventObj[this.fields.endTime];
        record.data = eventData;
        this.appendEvent(record, appointmentElement, index, tempData.appLeft);
        this.wireAppointmentEvents(appointmentElement, eventObj);
      }
    };
    VerticalEvent2.prototype.getEventWidth = function() {
      var width = this.parent.currentView === "Day" ? 97 : 94;
      var tempWidth = (width - this.overlapEvents.length) / this.overlapEvents.length;
      return (tempWidth < 0 ? 0 : tempWidth) + "%";
    };
    VerticalEvent2.prototype.getEventLeft = function(appWidth, index) {
      var tempLeft = (parseFloat(appWidth) + 1) * index;
      return (tempLeft > 99 ? 99 : tempLeft) + "%";
    };
    VerticalEvent2.prototype.getTopValue = function(date, day, resource) {
      var viewDate = resetTime(this.dateRender[parseInt(resource.toString(), 10)][parseInt(day.toString(), 10)]);
      var startEndHours = getStartEndHours(viewDate, this.startHour, this.endHour);
      var startHour = startEndHours.startHour;
      var adjustedStartHour = isDaylightSavingTime(viewDate) && startHour.getHours() !== this.startHour.getHours() ? this.startHour.getHours() : startHour.getHours();
      var diffInMinutes = (date.getHours() - adjustedStartHour) * 60 + (date.getMinutes() - startHour.getMinutes());
      return this.parent.activeViewOptions.timeScale.enable ? diffInMinutes * this.cellHeight * this.slotCount / this.interval : 0;
    };
    VerticalEvent2.prototype.getOverlapIndex = function(record, day, isAllDay, resource) {
      var _this = this;
      var fieldMapping = this.parent.eventFields;
      var eventsList = [];
      var appIndex = -1;
      this.overlapEvents = [];
      if (isAllDay) {
        if (!isNullOrUndefined(this.renderedAllDayEvents[parseInt(resource.toString(), 10)])) {
          var date_1 = resetTime(new Date(this.dateRender[parseInt(resource.toString(), 10)][parseInt(day.toString(), 10)].getTime()));
          eventsList = this.renderedAllDayEvents[parseInt(resource.toString(), 10)].filter(function(app) {
            return resetTime(app[fieldMapping.startTime]).getTime() <= date_1.getTime() && resetTime(app[fieldMapping.endTime]).getTime() >= date_1.getTime();
          });
          if (this.parent.activeViewOptions.group.resources.length > 0) {
            eventsList = this.filterEventsByResource(this.resources[parseInt(resource.toString(), 10)], eventsList);
          }
        }
      } else {
        var appointmentList_1 = !isNullOrUndefined(this.renderedEvents[parseInt(resource.toString(), 10)]) ? this.renderedEvents[parseInt(resource.toString(), 10)] : [];
        var appointment_1 = [];
        var recordStart_1 = record[fieldMapping.startTime];
        var recordEnd_1 = record[fieldMapping.endTime];
        this.overlapList = appointmentList_1.filter(function(data) {
          return data[fieldMapping.endTime] > recordStart_1 && data[fieldMapping.startTime] <= recordEnd_1 || data[fieldMapping.startTime] >= recordEnd_1 && data[fieldMapping.endTime] <= recordStart_1 || data[fieldMapping.endTime].getTime() === data[fieldMapping.startTime].getTime() && data[fieldMapping.startTime].getTime() === recordStart_1.getTime() && data[fieldMapping.endTime] < recordEnd_1;
        });
        if (this.parent.activeViewOptions.group.resources.length > 0) {
          this.overlapList = this.filterEventsByResource(this.resources[parseInt(resource.toString(), 10)], this.overlapList);
        }
        this.overlapList.forEach(function(obj) {
          var filterList = appointmentList_1.filter(function(data) {
            return data[fieldMapping.endTime] > obj[fieldMapping.startTime] && data[fieldMapping.startTime] <= obj[fieldMapping.endTime];
          });
          if (_this.parent.activeViewOptions.group.resources.length > 0) {
            filterList = _this.filterEventsByResource(_this.resources[parseInt(resource.toString(), 10)], filterList);
          }
          var collection = filterList.filter(function(val) {
            return _this.overlapList.indexOf(val) === -1;
          });
          if (collection.length > 0) {
            appointment_1 = appointment_1.concat(collection);
          }
        });
        for (var i = 0; i < appointment_1.length - 1; i++) {
          for (var j = i + 1; j < appointment_1.length; j++) {
            if (appointment_1[parseInt(i.toString(), 10)][fieldMapping.id] === appointment_1[parseInt(j.toString(), 10)][fieldMapping.id]) {
              appointment_1.splice(j, 1);
              j--;
            }
          }
        }
        this.overlapList = this.overlapList.concat(appointment_1);
        eventsList = this.overlapList;
        for (var _i = 0, eventsList_1 = eventsList; _i < eventsList_1.length; _i++) {
          var event_4 = eventsList_1[_i];
          var record_1 = event_4;
          var index = record_1.Index;
          if (isNullOrUndefined(this.overlapEvents[parseInt(index.toString(), 10)])) {
            this.overlapEvents[parseInt(index.toString(), 10)] = [event_4];
          } else {
            this.overlapEvents[parseInt(index.toString(), 10)].push(event_4);
          }
        }
      }
      if (!isAllDay) {
        eventsList = eventsList.filter(function(obj) {
          return obj[fieldMapping.startTime] === record[fieldMapping.startTime] && obj[fieldMapping.endTime] > record[fieldMapping.endTime] || obj[fieldMapping.endTime] > record[fieldMapping.startTime] && obj[fieldMapping.startTime] < record[fieldMapping.endTime] || obj[fieldMapping.endTime] === record[fieldMapping.startTime] && obj[fieldMapping.startTime] === record[fieldMapping.endTime] || (obj[fieldMapping.startTime].getTime() === record[fieldMapping.startTime].getTime() && obj[fieldMapping.endTime].getTime() === record[fieldMapping.endTime].getTime() || (obj[fieldMapping.startTime].getTime() === record[fieldMapping.startTime].getTime() && obj[fieldMapping.endTime].getTime() < record[fieldMapping.endTime].getTime() || obj[fieldMapping.endTime].getTime() > record[fieldMapping.endTime].getTime()));
        });
      }
      if (eventsList.length > 0) {
        var appLevel = eventsList.map(function(obj) {
          return obj.Index;
        });
        appIndex = appLevel.length > 0 ? this.getSmallestMissingNumber(appLevel) : 0;
      }
      return appIndex === -1 ? 0 : appIndex;
    };
    VerticalEvent2.prototype.adjustOverlapElements = function(args) {
      var data = { appWidth: args.width, appLeft: args.left };
      for (var i = 0, length1 = this.overlapEvents.length; i < length1; i++) {
        if (!isNullOrUndefined(this.overlapEvents[parseInt(i.toString(), 10)])) {
          for (var j = 0, length2 = this.overlapEvents[parseInt(i.toString(), 10)].length; j < length2; j++) {
            var dayCount = this.getDayIndex(args.dayIndex, args.resource, args.day);
            var element = this.element.querySelector("#e-appointment-wrapper-" + dayCount);
            if (element && element.childElementCount > 0) {
              var eleGuid = this.overlapEvents[parseInt(i.toString(), 10)][parseInt(j.toString(), 10)].Guid;
              if (element.querySelectorAll('div[data-guid="' + eleGuid + '"]').length > 0 && eleGuid !== args.record.Guid) {
                var apps = element.querySelector('div[data-guid="' + eleGuid + '"]');
                if (parseFloat(args.width) <= parseFloat(apps.style.width)) {
                  if (this.parent.enableRtl) {
                    apps.style.right = this.getEventLeft(args.width, i);
                  } else {
                    apps.style.left = this.getEventLeft(args.width, i);
                  }
                  apps.style.width = parseFloat(args.width) + "%";
                  data.appWidth = apps.style.width;
                } else {
                  data.appWidth = apps.style.width;
                }
              } else {
                var appWidth = args.width;
                if (isNullOrUndefined(this.overlapEvents[i - 1])) {
                  appWidth = this.getEventWidth();
                }
                data.appWidth = appWidth;
                data.appLeft = this.getEventLeft(appWidth, args.index);
              }
            }
          }
        }
      }
      return data;
    };
    VerticalEvent2.prototype.setAllDayRowHeight = function(height) {
      var dateHeader = this.parent.element.querySelector("." + DATE_HEADER_WRAP_CLASS);
      if (this.parent.height === "auto" || !this.parent.enableAllDayScroll) {
        addClass([dateHeader], ALLDAY_APPOINTMENT_AUTO);
      }
      var allDayRow = this.parent.element.querySelector("." + ALLDAY_ROW_CLASS);
      allDayRow.style.height = "";
      if (this.parent.uiStateValues.expand && this.parent.height !== "auto" && this.parent.enableAllDayScroll) {
        allDayRow.style.height = height / 12 + "em";
        this.parent.eventBase.allDayExpandScroll(dateHeader);
      } else {
        for (var _i = 0, _a = this.allDayElement; _i < _a.length; _i++) {
          var element = _a[_i];
          element.style.height = height / 12 + "em";
        }
        removeClass([dateHeader], ALLDAY_APPOINTMENT_SCROLL);
      }
    };
    VerticalEvent2.prototype.addOrRemoveClass = function() {
      var _this = this;
      this.moreEvents.filter(function(element) {
        if (!_this.parent.uiStateValues.expand && _this.allDayLevel > 2) {
          addClass([element], EVENT_COUNT_CLASS);
          element.setAttribute("tabindex", "-1");
        } else {
          removeClass([element], EVENT_COUNT_CLASS);
          element.setAttribute("tabindex", "0");
        }
      });
      var moreEventCount = this.element.querySelector("." + ALLDAY_APPOINTMENT_SECTION_CLASS);
      if (this.parent.uiStateValues.expand) {
        removeClass([moreEventCount], APPOINTMENT_ROW_EXPAND_CLASS);
        addClass([moreEventCount], APPOINTMENT_ROW_COLLAPSE_CLASS);
      } else {
        removeClass([moreEventCount], APPOINTMENT_ROW_COLLAPSE_CLASS);
        addClass([moreEventCount], APPOINTMENT_ROW_EXPAND_CLASS);
      }
      if (this.allDayLevel > 2) {
        removeClass([moreEventCount], DISABLE_CLASS);
      } else {
        addClass([moreEventCount], DISABLE_CLASS);
      }
      var countCell = [].slice.call(this.element.querySelectorAll("." + ROW_COUNT_WRAPPER_CLASS));
      countCell.forEach(function(element) {
        if (!_this.parent.uiStateValues.expand && _this.allDayLevel > 2) {
          removeClass([element], DISABLE_CLASS);
        } else {
          addClass([element], DISABLE_CLASS);
        }
      });
    };
    VerticalEvent2.prototype.getEventHeight = function() {
      var eventElement = createElement("div", { className: APPOINTMENT_CLASS, styles: "visibility:hidden" });
      var eventWrapper = this.element.querySelector("." + ALLDAY_APPOINTMENT_WRAPPER_CLASS + ":first-child");
      eventWrapper.appendChild(eventElement);
      var height = eventElement.offsetHeight;
      remove(eventElement);
      return height;
    };
    VerticalEvent2.prototype.rowExpandCollapse = function() {
      var target = this.element.querySelector("." + ALLDAY_APPOINTMENT_SECTION_CLASS);
      this.parent.uiStateValues.expand = target.classList.contains(APPOINTMENT_ROW_EXPAND_CLASS);
      var rowHeight;
      if (this.parent.uiStateValues.expand) {
        target.setAttribute("title", this.parent.localeObj.getConstant("collapseAllDaySection"));
        target.setAttribute("aria-label", this.parent.localeObj.getConstant("collapseAllDaySection"));
        rowHeight = (this.allDayLevel + 1) * this.getEventHeight() + 4;
      } else {
        target.setAttribute("title", this.parent.localeObj.getConstant("expandAllDaySection"));
        target.setAttribute("aria-label", this.parent.localeObj.getConstant("expandAllDaySection"));
        rowHeight = 3 * this.getEventHeight() + 4;
        this.parent.element.querySelector("." + DATE_HEADER_WRAP_CLASS).scrollTop = 0;
      }
      this.setAllDayRowHeight(rowHeight);
      this.animation.animate(this.allDayElement[0]);
      this.addOrRemoveClass();
      this.animation.animate(target);
    };
    VerticalEvent2.prototype.animationUiUpdate = function() {
      this.parent.notify(contentReady, {});
    };
    VerticalEvent2.prototype.destroy = function() {
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
      this.removeEventListener();
      this.allDayElement = null;
      this.renderedAllDayEvents = null;
      this.renderedEvents = null;
      this.slotCount = null;
      this.interval = null;
      this.startHour = null;
      this.endHour = null;
      this.element = null;
      this.fields = null;
      this.animation = null;
      _super.prototype.destroy.call(this);
    };
    return VerticalEvent2;
  }(EventBase)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/event-renderer/month.js
var __extends2 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var EVENT_GAP = 0;
var MonthEvent = (
  /** @class */
  function(_super) {
    __extends2(MonthEvent2, _super);
    function MonthEvent2(parent) {
      var _this = _super.call(this, parent) || this;
      _this.renderedEvents = [];
      _this.monthHeaderHeight = 0;
      _this.moreIndicatorHeight = 19;
      _this.renderType = "day";
      _this.element = _this.parent.activeView.getPanel();
      _this.fields = _this.parent.eventFields;
      _this.maxHeight = _this.parent.eventSettings.enableMaxHeight && !_this.parent.eventSettings.enableIndicator && !_this.parent.rowAutoHeight;
      _this.withIndicator = _this.parent.eventSettings.enableMaxHeight && _this.parent.eventSettings.enableIndicator && !_this.parent.rowAutoHeight;
      _this.maxOrIndicator = _this.maxHeight || _this.withIndicator;
      _this.moreIndicatorHeight = _this.parent.rowAutoHeight && _this.parent.eventSettings.ignoreWhitespace ? 0 : _this.moreIndicatorHeight;
      _this.addEventListener();
      return _this;
    }
    MonthEvent2.prototype.removeEventWrapper = function(appElement) {
      if (appElement.length > 0) {
        appElement = this.parent.currentView === "Month" || !this.parent.activeView.isTimelineView() && !this.parent.activeViewOptions.timeScale.enable ? appElement : [appElement[0]];
        for (var _i = 0, appElement_1 = appElement; _i < appElement_1.length; _i++) {
          var wrap = appElement_1[_i];
          if (wrap.parentElement && wrap.parentElement.parentNode) {
            remove(wrap.parentElement);
          }
        }
      }
    };
    MonthEvent2.prototype.renderAppointments = function() {
      if (this.parent.dragAndDropModule) {
        this.parent.dragAndDropModule.setDragArea();
      }
      this.isResourceEventTemplate = this.parent.isSpecificResourceEvents();
      var conWrap = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
      if (this.parent.rowAutoHeight) {
        this.parent.uiStateValues.top = conWrap.scrollTop;
        this.parent.uiStateValues.left = conWrap.scrollLeft;
      }
      var appointmentWrapper = [].slice.call(this.element.querySelectorAll("." + APPOINTMENT_WRAPPER_CLASS));
      if (this.parent.crudModule && this.parent.crudModule.crudObj.isCrudAction) {
        for (var i = 0, len = this.parent.crudModule.crudObj.sourceEvent.length; i < len; i++) {
          var appElement = [].slice.call(this.element.querySelectorAll('.e-appointment-wrapper [data-group-index="' + this.parent.crudModule.crudObj.sourceEvent[parseInt(i.toString(), 10)].groupIndex + '"]'));
          this.removeEventWrapper(appElement);
          if (this.parent.crudModule.crudObj.targetEvent[parseInt(i.toString(), 10)] && this.parent.crudModule.crudObj.sourceEvent[parseInt(i.toString(), 10)].groupIndex !== this.parent.crudModule.crudObj.targetEvent[parseInt(i.toString(), 10)].groupIndex) {
            var ele = [].slice.call(this.element.querySelectorAll('.e-appointment-wrapper [data-group-index="' + this.parent.crudModule.crudObj.targetEvent[parseInt(i.toString(), 10)].groupIndex + '"]'));
            this.removeEventWrapper(ele);
          }
        }
      } else {
        for (var _i = 0, appointmentWrapper_1 = appointmentWrapper; _i < appointmentWrapper_1.length; _i++) {
          var wrap = appointmentWrapper_1[_i];
          remove(wrap);
        }
      }
      this.removeHeightProperty(CONTENT_TABLE_CLASS);
      if (!this.element.querySelector("." + WORK_CELLS_CLASS)) {
        return;
      }
      if (this.parent.currentView === "Month") {
        var wrapper = createElement("div", { className: APPOINTMENT_WRAPPER_CLASS });
        var cellTd = this.parent.element.querySelector("." + WORK_CELLS_CLASS);
        cellTd.appendChild(wrapper);
        this.monthHeaderHeight = wrapper.offsetTop - cellTd.offsetTop;
        cellTd.removeChild(wrapper);
      }
      this.eventHeight = this.parent.getElementHeightFromClass(this.element, APPOINTMENT_CLASS);
      var selector = "." + CONTENT_TABLE_CLASS + " tbody tr";
      this.addCellHeight(selector, this.eventHeight, this.parent.currentView === "Month" ? EVENT_GAP : 2, this.monthHeaderHeight, this.moreIndicatorHeight);
      var scrollTop = conWrap.scrollTop;
      if (this.parent.rowAutoHeight && this.parent.virtualScrollModule && !this.parent.virtualScrollModule.isHorizontalScroll && !isNullOrUndefined(this.parent.currentAction)) {
        conWrap.scrollTop = conWrap.scrollTop - 1;
      }
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        this.renderResourceEvents();
        if (this.parent.virtualScrollModule) {
          this.parent.virtualScrollModule.updateFocusedWorkCell();
        }
      } else {
        this.renderEventsHandler(this.parent.activeView.renderDates, this.parent.activeViewOptions.workDays);
      }
      if (this.parent.rowAutoHeight) {
        this.updateBlockElements();
        var data = {
          cssProperties: this.parent.getCssProperties(),
          module: this.parent.getModuleName(),
          isPreventScrollUpdate: true,
          scrollPosition: { left: this.parent.uiStateValues.left, top: this.parent.uiStateValues.top }
        };
        if (this.parent.virtualScrollModule && !this.parent.virtualScrollModule.isHorizontalScroll) {
          if (this.parent.currentAction) {
            conWrap.scrollTop = scrollTop;
            this.parent.currentAction = null;
          } else {
            this.parent.virtualScrollModule.updateVirtualScrollHeight();
          }
        }
        if (!this.parent.enablePersistence) {
          this.parent.notify(contentReady, {});
        }
        this.parent.notify(scrollUiUpdate, data);
        if (this.parent.currentView === "Month" && this.parent.showWeekNumber) {
          var totalCells_1 = [].slice.call(this.parent.element.querySelectorAll(".e-content-wrap table tr td:first-child"));
          var weekNumberCells = [].slice.call(this.parent.element.querySelectorAll("." + WEEK_NUMBER_CLASS));
          weekNumberCells.forEach(function(cell, i2) {
            var height = totalCells_1[parseInt(i2.toString(), 10)].offsetHeight;
            setStyleAttribute(cell, { "height": height + "px" });
          });
          this.parent.element.querySelector("." + WEEK_NUMBER_WRAPPER_CLASS).scrollTop = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS).scrollTop;
        }
      }
      this.parent.renderTemplates();
    };
    MonthEvent2.prototype.renderEventsHandler = function(dateRender, workDays, resData) {
      this.renderedEvents = [];
      var eventsList;
      var blockList;
      var resIndex = 0;
      if (resData) {
        resIndex = resData.groupIndex;
        this.cssClass = resData.cssClass;
        this.groupOrder = resData.groupOrder;
        eventsList = this.parent.eventBase.filterEventsByResource(resData, this.parent.eventsProcessed);
        blockList = this.parent.eventBase.filterEventsByResource(resData, this.parent.blockProcessed);
        this.workCells = [].slice.call(this.element.querySelectorAll("." + WORK_CELLS_CLASS + '[data-group-index="' + resIndex + '"]'));
      } else {
        eventsList = this.parent.eventsProcessed;
        blockList = this.parent.blockProcessed;
        this.workCells = [].slice.call(this.element.querySelectorAll("." + WORK_CELLS_CLASS));
      }
      this.sortByDateTime(eventsList);
      this.sortByDateTime(blockList);
      if (this.parent.currentView === "Month" && this.parent.rowAutoHeight && this.parent.activeViewOptions.group.resources.length === 0) {
        var totalCells = [].slice.call(this.parent.element.querySelectorAll(".e-content-wrap table tr td:first-child"));
        var height_1 = this.parent.element.querySelector("." + CONTENT_TABLE_CLASS).clientHeight / totalCells.length;
        totalCells.forEach(function(cell) {
          setStyleAttribute(cell, { "height": height_1 + "px" });
        });
      }
      var cellDetail = this.workCells[this.parent.activeView.isTimelineView() ? 0 : this.workCells.length - 1];
      this.cellWidth = this.parent.getElementWidth(cellDetail);
      this.cellHeight = this.parent.getElementHeight(cellDetail);
      this.dateRender = dateRender;
      var filteredDates = this.getRenderedDates(dateRender);
      this.getSlotDates(workDays || this.parent.activeViewOptions.workDays);
      this.processBlockEvents(blockList, resIndex, resData);
      var events = [];
      for (var _i = 0, eventsList_1 = eventsList; _i < eventsList_1.length; _i++) {
        var event_1 = eventsList_1[_i];
        if (this.parent.resourceBase && !resData) {
          this.cssClass = this.parent.resourceBase.getCssClass(event_1);
        }
        events = events.concat(this.splitEvent(event_1, filteredDates || this.dateRender));
      }
      for (var level = 0; level < this.slots.length; level++) {
        this.renderedEvents = [];
        var slot = this.slots[parseInt(level.toString(), 10)];
        var endDate = addDays(new Date(slot[slot.length - 1]), 1);
        var spannedEvents = this.filterEvents(new Date(slot[0]), endDate, events);
        for (var _a = 0, spannedEvents_1 = spannedEvents; _a < spannedEvents_1.length; _a++) {
          var event_2 = spannedEvents_1[_a];
          if (this.maxHeight) {
            var sDate = this.parent.currentView === "Month" ? event_2[this.fields.startTime] : this.getStartTime(event_2, event_2.data);
            if (this.getIndex(sDate) > 0) {
              continue;
            }
          }
          this.updateIndicatorIcon(event_2);
          this.renderEvents(event_2, resIndex, eventsList);
        }
      }
      this.cssClass = null;
      this.groupOrder = null;
    };
    MonthEvent2.prototype.processBlockEvents = function(blockEvents, resIndex, resData) {
      for (var _i = 0, blockEvents_1 = blockEvents; _i < blockEvents_1.length; _i++) {
        var event_3 = blockEvents_1[_i];
        if (this.parent.resourceBase && !resData) {
          this.cssClass = this.parent.resourceBase.getCssClass(event_3);
        }
        var blockSpannedList = [];
        if (this.renderType === "day" && !event_3[this.fields.isAllDay]) {
          var temp = extend({}, event_3, null, true);
          var isSameDate = this.isSameDate(temp[this.fields.startTime], temp[this.fields.endTime]);
          temp.isBlockIcon = isSameDate;
          if (!isSameDate && getDateInMs(temp[this.fields.startTime]) > 0) {
            var e = extend({}, event_3, null, true);
            e[this.fields.endTime] = addDays(resetTime(/* @__PURE__ */ new Date(event_3[this.fields.startTime] + "")), 1);
            e.isBlockIcon = true;
            temp[this.fields.startTime] = e[this.fields.endTime];
            blockSpannedList.push(e);
          }
          isSameDate = this.isSameDate(temp[this.fields.startTime], temp[this.fields.endTime]);
          if (!isSameDate && getDateInMs(temp[this.fields.endTime]) > 0) {
            var e = extend({}, event_3, null, true);
            e[this.fields.startTime] = resetTime(/* @__PURE__ */ new Date(event_3[this.fields.endTime] + ""));
            e.isBlockIcon = true;
            blockSpannedList.push(e);
            temp[this.fields.endTime] = e[this.fields.startTime];
          }
          blockSpannedList.push(temp);
        } else {
          blockSpannedList.push(event_3);
        }
        for (var _a = 0, blockSpannedList_1 = blockSpannedList; _a < blockSpannedList_1.length; _a++) {
          var blockEvent = blockSpannedList_1[_a];
          var spannedEvents = this.splitEvent(blockEvent, this.dateRender);
          for (var _b = 0, spannedEvents_2 = spannedEvents; _b < spannedEvents_2.length; _b++) {
            var event_4 = spannedEvents_2[_b];
            this.renderBlockEvents(event_4, resIndex, !!blockEvent.isBlockIcon);
          }
        }
      }
    };
    MonthEvent2.prototype.isSameDate = function(start, end) {
      return (/* @__PURE__ */ new Date(+start)).setHours(0, 0, 0, 0) === (/* @__PURE__ */ new Date(+end)).setHours(0, 0, 0, 0);
    };
    MonthEvent2.prototype.renderBlockEvents = function(event, resIndex, isIcon) {
      var eventData = event.data;
      var startTime = this.getStartTime(event, eventData);
      var endTime = this.getEndTime(event, eventData);
      var day = this.parent.getIndexOfDate(this.dateRender, resetTime(new Date(startTime.getTime())));
      if (day < 0 || startTime > endTime) {
        return;
      }
      var cellTd = this.getCellTd(day);
      var position = this.getPosition(startTime, endTime, event[this.fields.isAllDay], day);
      if (!isIcon) {
        var diffInDays = eventData.count;
        var appWidth = this.getEventWidth(startTime, endTime, event[this.fields.isAllDay], diffInDays);
        appWidth = appWidth <= 0 ? this.cellWidth : appWidth;
        var appLeft = this.parent.enableRtl ? 0 : position;
        var appRight = this.parent.enableRtl ? position : 0;
        var appHeight = this.cellHeight - this.monthHeaderHeight;
        var appTop = this.getRowTop(resIndex);
        var blockElement = this.createBlockAppointmentElement(event, resIndex, this.isResourceEventTemplate);
        setStyleAttribute(blockElement, {
          "width": appWidth + "px",
          "height": appHeight + "px",
          "left": appLeft + "px",
          "right": appRight + "px",
          "top": appTop + "px"
        });
        this.renderEventElement(event, blockElement, cellTd);
      } else {
        this.renderBlockIndicator(cellTd, position, resIndex);
      }
    };
    MonthEvent2.prototype.renderBlockIndicator = function(cellTd, position, resIndex) {
      var blockIndicator = createElement("div", { className: "e-icons " + BLOCK_INDICATOR_CLASS });
      if (isNullOrUndefined(cellTd.querySelector("." + BLOCK_INDICATOR_CLASS))) {
        cellTd.appendChild(blockIndicator);
      }
    };
    MonthEvent2.prototype.getStartTime = function(event, eventData) {
      return event[this.fields.startTime];
    };
    MonthEvent2.prototype.getEndTime = function(event, eventData) {
      return event[this.fields.endTime];
    };
    MonthEvent2.prototype.getCellTd = function(day) {
      return this.workCells[parseInt(day.toString(), 10)];
    };
    MonthEvent2.prototype.getEventWidth = function(startDate, endDate, isAllDay, count) {
      return count * this.cellWidth - 1;
    };
    MonthEvent2.prototype.getPosition = function(startTime, endTime, isAllDay, day) {
      return 0;
    };
    MonthEvent2.prototype.getRowTop = function(resIndex) {
      return 0;
    };
    MonthEvent2.prototype.updateIndicatorIcon = function(event) {
      if (this.parent.currentView.indexOf("Timeline") === -1 || this.parent.currentView === "TimelineMonth" || event[this.fields.isAllDay]) {
        return;
      }
      var cloneData = event.data;
      var start = this.parent.activeView.getStartHour();
      var end = this.parent.activeView.getEndHour();
      var startHour = getStartEndHours(event[this.fields.startTime], start, end);
      var endHour = getStartEndHours(event[this.fields.endTime], start, end);
      var actualStartTime = cloneData[this.fields.startTime];
      var actualEndTime = cloneData[this.fields.endTime];
      cloneData.isLeft = cloneData.isLeft || actualStartTime.getTime() < startHour.startHour.getTime();
      cloneData.isRight = cloneData.isRight || actualEndTime.getTime() > endHour.endHour.getTime();
      if (resetTime(actualStartTime).getTime() !== resetTime(actualEndTime).getTime()) {
        var actualStartHour = startHour.startHour;
        var actualEndHour = endHour.endHour;
        var startTime = new Date(resetTime(actualStartTime));
        startTime.setHours(actualEndHour.getHours(), actualEndHour.getMinutes(), actualEndHour.getSeconds());
        cloneData.isLeft = cloneData.isLeft || actualStartTime.getTime() >= (actualStartHour.getDate() === startHour.endHour.getDate() ? startTime.getTime() : addDays(startTime, 1).getTime());
        if (actualEndTime.getTime() !== resetTime(actualEndTime).getTime()) {
          var endTime = new Date(resetTime(actualEndTime));
          cloneData.isRight = cloneData.isRight || actualEndTime.getTime() <= endTime.setHours(actualStartHour.getHours(), actualStartHour.getMinutes(), actualStartHour.getSeconds());
        }
      }
    };
    MonthEvent2.prototype.renderResourceEvents = function() {
      var resources = this.parent.uiStateValues.isGroupAdaptive ? [this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex]] : this.parent.resourceBase.renderedResources;
      if (this.parent.crudModule && this.parent.crudModule.crudObj.isCrudAction) {
        for (var i = 0, len = this.parent.crudModule.crudObj.sourceEvent.length; i < len; i++) {
          var sourceRes = this.parent.crudModule.crudObj.sourceEvent[parseInt(i.toString(), 10)];
          this.renderEventsHandler(sourceRes.renderDates, sourceRes.workDays, sourceRes);
          if (this.parent.crudModule.crudObj.sourceEvent[parseInt(i.toString(), 10)].groupIndex !== this.parent.crudModule.crudObj.targetEvent[parseInt(i.toString(), 10)].groupIndex) {
            var target = this.parent.crudModule.crudObj.targetEvent[parseInt(i.toString(), 10)];
            this.renderEventsHandler(target.renderDates, target.workDays, target);
          }
        }
        this.parent.crudModule.crudObj.isCrudAction = false;
      } else {
        for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {
          var slotData = resources_1[_i];
          this.renderEventsHandler(slotData.renderDates, slotData.workDays, slotData);
        }
      }
    };
    MonthEvent2.prototype.getSlotDates = function(workDays) {
      this.slots = [];
      var dates = this.dateRender.map(function(date) {
        return +date;
      });
      var noOfDays = !this.parent.activeViewOptions.showWeekend || this.parent.activeViewOptions.group.byDate && this.parent.activeViewOptions.group.hideNonWorkingDays ? workDays.length : WEEK_LENGTH;
      while (dates.length > 0) {
        this.slots.push(dates.splice(0, noOfDays));
      }
    };
    MonthEvent2.prototype.createAppointmentElement = function(record, resIndex, isCloneElement) {
      if (isCloneElement === void 0) {
        isCloneElement = false;
      }
      var eventSubject = record[this.fields.subject] || this.parent.eventSettings.fields.subject.default || this.parent.localeObj.getConstant("addTitle");
      var newRecord = extend({}, record, record.data, true);
      var attrs = {
        "data-id": "Appointment_" + record[this.fields.id],
        "role": "button",
        "tabindex": "0",
        "aria-disabled": this.parent.eventBase.getReadonlyAttribute(record),
        "aria-label": this.parent.getAnnouncementString(newRecord, eventSubject)
      };
      if (!isCloneElement) {
        attrs["data-guid"] = record.Guid;
      }
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        attrs["data-group-index"] = resIndex.toString();
      }
      var appointmentWrapper = createElement("div", { className: APPOINTMENT_CLASS, attrs });
      if (!isNullOrUndefined(this.cssClass)) {
        addClass([appointmentWrapper], this.cssClass);
      }
      if (record[this.fields.isReadonly]) {
        addClass([appointmentWrapper], "e-read-only");
      }
      var appointmentDetails = createElement("div", { className: APPOINTMENT_DETAILS });
      appointmentWrapper.appendChild(appointmentDetails);
      var templateElement;
      var eventData = record.data;
      var eventObj = this.getEventData(record);
      if (!isNullOrUndefined(this.parent.activeViewOptions.eventTemplate)) {
        var scheduleId = this.parent.element.id + "_";
        var viewName = this.parent.activeViewOptions.eventTemplateName;
        var templateId = scheduleId + viewName + "eventTemplate";
        var eventTemplate = this.isResourceEventTemplate ? this.parent.getEventTemplateName(resIndex) : "eventTemplate";
        templateElement = this.parent.getAppointmentTemplate()(eventObj, this.parent, eventTemplate, templateId, false, void 0, void 0, this.parent.root);
      } else {
        var eventLocation = record[this.fields.location] || this.parent.eventSettings.fields.location.default || "";
        var appointmentSubject = createElement("div", { className: SUBJECT_CLASS });
        this.parent.sanitize(eventSubject + (eventLocation ? "; " + eventLocation : ""), appointmentSubject);
        var appointmentStartTime = createElement("div", {
          className: APPOINTMENT_TIME + (this.parent.isAdaptive ? " " + DISABLE_CLASS : ""),
          innerHTML: this.parent.getTimeString(eventData[this.fields.startTime])
        });
        var appointmentEndTime = createElement("div", {
          className: APPOINTMENT_TIME + (this.parent.isAdaptive ? " " + DISABLE_CLASS : ""),
          innerHTML: this.parent.getTimeString(eventData[this.fields.endTime])
        });
        if (this.parent.currentView === "Month") {
          if (record[this.fields.isAllDay]) {
            templateElement = [appointmentSubject];
            addClass([appointmentSubject], "e-text-center");
          } else if (eventData.count <= 1 && !eventData.isLeft && !eventData.isRight) {
            templateElement = [appointmentStartTime, appointmentSubject];
          } else {
            templateElement = [];
            addClass([appointmentSubject], "e-text-center");
            if (!eventData.isLeft) {
              templateElement.push(appointmentStartTime);
            }
            templateElement.push(appointmentSubject);
            if (!eventData.isRight) {
              templateElement.push(appointmentEndTime);
            }
          }
        } else {
          var innerElement = void 0;
          if (record[this.fields.isAllDay]) {
            var allDayString = createElement("div", {
              className: APPOINTMENT_TIME,
              innerHTML: this.parent.localeObj.getConstant("allDay")
            });
            innerElement = [appointmentSubject, allDayString];
          } else {
            var timeString = this.parent.getTimeString(eventData[this.fields.startTime]) + " - " + this.parent.getTimeString(eventData[this.fields.endTime]);
            var appTime = createElement("div", {
              className: APPOINTMENT_TIME + (this.parent.isAdaptive ? " " + DISABLE_CLASS : ""),
              innerHTML: timeString
            });
            var appLocation = createElement("div", { className: LOCATION_CLASS });
            this.parent.sanitize(eventLocation, appLocation);
            innerElement = [appointmentSubject, appTime, appLocation];
          }
          var wrap = createElement("div", { className: "e-inner-wrap" });
          append(innerElement, wrap);
          templateElement = [wrap];
        }
      }
      append(templateElement, appointmentDetails);
      this.appendEventIcons(record, appointmentDetails);
      this.renderResizeHandler(appointmentWrapper, record.data, record[this.fields.isReadonly]);
      return appointmentWrapper;
    };
    MonthEvent2.prototype.appendEventIcons = function(record, appointmentDetails) {
      var eventData = record.data;
      if (!isNullOrUndefined(record[this.fields.recurrenceRule]) || !isNullOrUndefined(record[this.fields.recurrenceID])) {
        var iconClass = record[this.fields.id] === record[this.fields.recurrenceID] ? EVENT_RECURRENCE_ICON_CLASS : EVENT_RECURRENCE_EDIT_ICON_CLASS;
        appointmentDetails.appendChild(createElement("div", {
          className: ICON + " " + iconClass + (this.parent.isAdaptive ? " " + DISABLE_CLASS : "")
        }));
      }
      if (eventData.isLeft) {
        var iconLeft = createElement("div", {
          className: EVENT_INDICATOR_CLASS + " " + ICON + " " + EVENT_ICON_LEFT_CLASS
        });
        prepend([iconLeft], appointmentDetails);
      }
      if (eventData.isRight) {
        var iconRight = createElement("div", {
          className: EVENT_INDICATOR_CLASS + " " + ICON + " " + EVENT_ICON_RIGHT_CLASS
        });
        append([iconRight], appointmentDetails);
      }
    };
    MonthEvent2.prototype.renderEvents = function(event, resIndex, eventsList) {
      var startTime = event[this.fields.startTime];
      var endTime = event[this.fields.endTime];
      var day = this.parent.getIndexOfDate(this.dateRender, resetTime(startTime));
      if (day < 0 || startTime.getTime() < this.parent.minDate.getTime() || endTime.getTime() > this.parent.maxDate.getTime()) {
        return;
      }
      var eventsPerRow = this.parent.rowAutoHeight ? 1 : this.parent.activeViewOptions.maxEventsPerRow;
      var overlapCount = this.getIndex(startTime);
      event.Index = overlapCount;
      var diffInDays = event.data.count;
      if (startTime.getTime() <= endTime.getTime()) {
        var appWidth = diffInDays * this.cellWidth - 5;
        var cellTd = this.workCells[parseInt(day.toString(), 10)];
        var appTop = overlapCount * (this.eventHeight + EVENT_GAP);
        var height = this.monthHeaderHeight + (overlapCount + 1) * (this.eventHeight + EVENT_GAP) + this.moreIndicatorHeight;
        var enableAppRender = this.parent.activeViewOptions.maxEventsPerRow && !this.parent.rowAutoHeight && !this.parent.eventSettings.enableIndicator ? overlapCount < eventsPerRow : this.maxOrIndicator ? overlapCount < 1 ? true : false : this.cellHeight > height;
        if (this.parent.rowAutoHeight || enableAppRender) {
          this.renderedEvents.push(extend({}, event, null, true));
          var appointmentElement = void 0;
          if (this.inlineValue) {
            appointmentElement = this.parent.inlineModule.createInlineAppointmentElement();
          } else {
            appointmentElement = this.createAppointmentElement(event, resIndex);
          }
          this.applyResourceColor(appointmentElement, event, "backgroundColor", this.groupOrder);
          this.wireAppointmentEvents(appointmentElement, event);
          setStyleAttribute(appointmentElement, { "width": appWidth + "px", "top": appTop + "px" });
          this.renderEventElement(event, appointmentElement, cellTd);
          if (this.parent.rowAutoHeight) {
            var firstChild = cellTd.parentElement.firstElementChild;
            this.updateCellHeight(firstChild, height);
          }
        } else {
          for (var i = 0; i < diffInDays; i++) {
            if (this.workCells[day + i]) {
              var indicator = this.workCells[day + i].querySelector("." + MORE_INDICATOR_CLASS);
              if (indicator) {
                var count = parseInt(indicator.getAttribute("data-count"), 10) + 1;
                indicator.setAttribute("data-count", count.toString());
                indicator.setAttribute("aria-label", count + " " + this.parent.localeObj.getConstant("moreEvents"));
                indicator.innerHTML = this.getMoreIndicatorText(count);
              } else {
                var startDate = new Date(this.dateRender[day + i].getTime());
                var endDate = addDays(this.dateRender[day + i], 1);
                var groupIndex = this.workCells[day + i].getAttribute("data-group-index");
                var moreIndicatorElement = this.getMoreIndicatorElement(1, startDate, endDate);
                if (!isNullOrUndefined(groupIndex)) {
                  moreIndicatorElement.setAttribute("data-group-index", groupIndex);
                }
                moreIndicatorElement.style.top = this.cellHeight - this.monthHeaderHeight - this.moreIndicatorHeight + "px";
                moreIndicatorElement.style.width = this.cellWidth - 2 + "px";
                this.renderElement(this.workCells[day + i], moreIndicatorElement);
                EventHandler.add(moreIndicatorElement, "click", this.moreIndicatorClick, this);
              }
            }
          }
        }
      }
    };
    MonthEvent2.prototype.updateCellHeight = function(cell, height) {
      if (height > cell.offsetHeight) {
        setStyleAttribute(cell, { "height": height + "px" });
      }
    };
    MonthEvent2.prototype.updateBlockElements = function() {
      var blockElement = [].slice.call(this.element.querySelectorAll("." + BLOCK_APPOINTMENT_CLASS));
      for (var _i = 0, blockElement_1 = blockElement; _i < blockElement_1.length; _i++) {
        var element = blockElement_1[_i];
        var target = closest(element, "tr");
        this.monthHeaderHeight = element.offsetParent.offsetTop - target.offsetTop;
        element.style.height = target.offsetHeight - 1 - this.monthHeaderHeight + "px";
        var firstChild = target.firstElementChild;
        var width = Math.round(element.offsetWidth / firstChild.offsetWidth);
        element.style.width = firstChild.offsetWidth * width + "px";
      }
    };
    MonthEvent2.prototype.getFilteredEvents = function(startDate, endDate, groupIndex, eventsList) {
      var filteredEvents;
      if (isNullOrUndefined(groupIndex)) {
        filteredEvents = this.filterEvents(startDate, endDate);
      } else {
        var data = this.parent.resourceBase.lastResourceLevel[parseInt(groupIndex, 10)];
        filteredEvents = this.filterEvents(startDate, endDate, isNullOrUndefined(eventsList) ? void 0 : eventsList, data);
      }
      return filteredEvents;
    };
    MonthEvent2.prototype.getOverlapEvents = function(date, appointments) {
      var appointmentsList = [];
      var dateTime = resetTime(date).getTime();
      for (var _i = 0, appointments_1 = appointments; _i < appointments_1.length; _i++) {
        var app = appointments_1[_i];
        if (resetTime(app[this.fields.startTime]).getTime() <= dateTime && resetTime(app[this.fields.endTime]).getTime() >= dateTime) {
          appointmentsList.push(app);
        }
      }
      return appointmentsList;
    };
    MonthEvent2.prototype.getIndex = function(date) {
      var appIndex = -1;
      var appointments = this.renderedEvents;
      if (appointments.length > 0) {
        var appointmentsList = this.getOverlapEvents(date, appointments);
        var appLevel = appointmentsList.map(function(obj) {
          return obj.Index;
        });
        appIndex = appLevel.length > 0 ? this.getSmallestMissingNumber(appLevel) : 0;
      }
      return appIndex === -1 ? 0 : appIndex;
    };
    MonthEvent2.prototype.moreIndicatorClick = function(event) {
      var _this = this;
      var target = closest(event.target, "." + MORE_INDICATOR_CLASS);
      var startDate = new Date(parseInt(target.getAttribute("data-start-date"), 10));
      var endDate = new Date(parseInt(target.getAttribute("data-end-date"), 10));
      var groupIndex = target.getAttribute("data-group-index");
      var moreArgs = {
        cancel: false,
        event,
        element: target,
        isPopupOpen: true,
        startTime: startDate,
        endTime: endDate,
        viewName: this.parent.getNavigateView()
      };
      if (groupIndex) {
        moreArgs.groupIndex = parseInt(groupIndex, 10);
      }
      this.parent.trigger(moreEventsClick, moreArgs, function(clickArgs) {
        if (!clickArgs.cancel) {
          if (clickArgs.isPopupOpen) {
            var filteredEvents = _this.getFilteredEvents(startDate, endDate, groupIndex);
            var moreArgs_1 = { date: startDate, event: filteredEvents, element: event.target };
            _this.parent.quickPopup.moreEventClick(moreArgs_1, endDate, groupIndex);
          } else {
            _this.parent.setProperties({ selectedDate: startDate }, true);
            _this.parent.changeView(clickArgs.viewName, event);
          }
        }
      });
    };
    MonthEvent2.prototype.renderEventElement = function(event, appointmentElement, cellTd) {
      var _this = this;
      var eventType = appointmentElement.classList.contains(BLOCK_APPOINTMENT_CLASS) ? "blockEvent" : "event";
      var isAppointment = appointmentElement.classList.contains(APPOINTMENT_CLASS);
      var eventObj = this.getEventData(event);
      var args = { data: eventObj, element: appointmentElement, cancel: false, type: eventType };
      this.parent.trigger(eventRendered, args, function(eventArgs) {
        if (eventArgs.cancel) {
          _this.renderedEvents.pop();
        } else {
          _this.renderElement(cellTd, appointmentElement, isAppointment);
        }
      });
    };
    MonthEvent2.prototype.getEventData = function(event) {
      var eventObj = extend({}, event, null, true);
      eventObj[this.fields.startTime] = event.data[this.fields.startTime];
      eventObj[this.fields.endTime] = event.data[this.fields.endTime];
      return eventObj;
    };
    MonthEvent2.prototype.renderElement = function(cellTd, element, isAppointment) {
      if (isAppointment === void 0) {
        isAppointment = false;
      }
      if (this.maxOrIndicator && isAppointment) {
        this.setMaxEventHeight(element, cellTd);
      }
      var wrapperEle = cellTd.querySelector("." + APPOINTMENT_WRAPPER_CLASS);
      if (wrapperEle) {
        wrapperEle.appendChild(element);
      } else {
        var wrapper = createElement("div", { className: APPOINTMENT_WRAPPER_CLASS });
        wrapper.appendChild(element);
        cellTd.appendChild(wrapper);
      }
    };
    MonthEvent2.prototype.getMoreIndicatorElement = function(count, startDate, endDate) {
      var moreIndicatorElement = createElement("div", {
        className: MORE_INDICATOR_CLASS,
        innerHTML: this.getMoreIndicatorText(count),
        attrs: {
          "role": "button",
          "tabindex": "0",
          "aria-label": this.parent.globalize.formatNumber(count) + " " + this.parent.localeObj.getConstant("moreEvents"),
          "data-count": count.toString(),
          "data-start-date": startDate.getTime().toString(),
          "data-end-date": endDate.getTime().toString()
        }
      });
      return moreIndicatorElement;
    };
    MonthEvent2.prototype.getMoreIndicatorText = function(count) {
      return "+" + this.parent.globalize.formatNumber(count) + "&nbsp;" + (this.parent.isAdaptive ? "" : this.parent.localeObj.getConstant("more"));
    };
    MonthEvent2.prototype.removeHeightProperty = function(selector) {
      var rows = [].slice.call(this.element.querySelectorAll("." + selector + " tbody tr"));
      for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
        var row = rows_1[_i];
        row.firstElementChild.style.height = "";
      }
    };
    MonthEvent2.prototype.setMaxEventHeight = function(event, cell) {
      var headerHeight = getOuterHeight(cell.querySelector("." + DATE_HEADER_CLASS));
      var height = cell.offsetHeight - headerHeight - (this.maxHeight ? 0 : this.moreIndicatorHeight);
      setStyleAttribute(event, { "height": height + "px", "align-items": "center" });
    };
    MonthEvent2.prototype.destroy = function() {
      this.element = null;
      this.fields = null;
      this.maxHeight = null;
      this.withIndicator = null;
      this.maxOrIndicator = null;
      this.moreIndicatorHeight = null;
      this.removeEventListener();
      _super.prototype.destroy.call(this);
    };
    return MonthEvent2;
  }(EventBase)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/event-renderer/timeline-view.js
var __extends3 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var EVENT_GAP2 = 2;
var BLOCK_INDICATOR_WIDTH = 22;
var BLOCK_INDICATOR_HEIGHT = 18;
var TimelineEvent = (
  /** @class */
  function(_super) {
    __extends3(TimelineEvent2, _super);
    function TimelineEvent2(parent, type) {
      var _this = _super.call(this, parent) || this;
      _this.startHour = _this.parent.activeView.getStartHour();
      _this.endHour = _this.parent.activeView.getEndHour();
      _this.slotCount = _this.parent.activeViewOptions.timeScale.slotCount;
      _this.interval = _this.parent.activeViewOptions.timeScale.interval;
      _this.day = 0;
      _this.rowIndex = 0;
      _this.cellTops = [];
      _this.renderType = type;
      _this.eventContainers = [].slice.call(_this.element.querySelectorAll("." + APPOINTMENT_CONTAINER_CLASS));
      var tr = [].slice.call(_this.element.querySelectorAll("." + CONTENT_TABLE_CLASS + " tbody tr"));
      _this.dayLength = tr.length === 0 ? 0 : tr[0].children.length;
      _this.content = _this.parent.element.querySelector("." + SCHEDULE_TABLE_CLASS + "." + CONTENT_TABLE_CLASS);
      return _this;
    }
    TimelineEvent2.prototype.getSlotDates = function() {
      this.slots = [];
      this.slots.push(this.parent.activeView.renderDates.map(function(date) {
        return +date;
      }));
      if (this.parent.activeViewOptions.headerRows.length > 0 && this.parent.activeViewOptions.headerRows.slice(-1)[0].option !== "Hour") {
        this.renderType = "day";
        var workCell = this.content.querySelector("." + WORK_CELLS_CLASS);
        this.cellWidth = this.parent.getElementWidth(workCell) / +(workCell.getAttribute("colspan") || 1);
        this.slotsPerDay = 1;
      } else {
        this.slotsPerDay = this.dayLength / this.dateRender.length;
      }
    };
    TimelineEvent2.prototype.getOverlapEvents = function(date, appointments) {
      var appointmentsList = [];
      if (this.renderType === "day") {
        for (var _i = 0, appointments_1 = appointments; _i < appointments_1.length; _i++) {
          var app = appointments_1[_i];
          if (resetTime(app[this.fields.startTime]).getTime() <= resetTime(new Date(date.getTime())).getTime() && resetTime(app[this.fields.endTime]).getTime() >= resetTime(new Date(date.getTime())).getTime()) {
            appointmentsList.push(app);
          }
        }
      } else {
        for (var _a = 0, appointments_2 = appointments; _a < appointments_2.length; _a++) {
          var app = appointments_2[_a];
          var eventData = app.data;
          if (eventData.trimStartTime.getTime() <= date.getTime() && eventData.trimEndTime.getTime() > date.getTime() || eventData.trimStartTime.getTime() === date.getTime() && eventData.trimEndTime.getTime() === date.getTime()) {
            appointmentsList.push(app);
          }
        }
      }
      return appointmentsList;
    };
    TimelineEvent2.prototype.getSortComparerIndex = function(startDate, endDate) {
      var appIndex = -1;
      var appointments = this.renderedEvents;
      if (appointments.length > 0) {
        var appointmentsList = this.getOverlapSortComparerEvents(startDate, endDate, appointments);
        var appLevel = appointmentsList.map(function(obj) {
          return obj.Index;
        });
        appIndex = appLevel.length > 0 ? this.getSmallestMissingNumber(appLevel) : 0;
      }
      return appIndex === -1 ? 0 : appIndex;
    };
    TimelineEvent2.prototype.getOverlapSortComparerEvents = function(startDate, endDate, appointmentsCollection) {
      var appointments = [];
      var _loop_1 = function(app2) {
        if (this_1.renderType === "day") {
          var start_1 = resetTime(startDate).getTime();
          var end_1 = resetTime(endDate).getTime();
          var appStart_1 = resetTime(app2[this_1.fields.startTime]).getTime();
          var appEnd_1 = resetTime(app2[this_1.fields.endTime]).getTime();
          var isEndOverlap = function() {
            var endTime = end_1 - (getDateInMs(endDate) <= 0 ? MS_PER_DAY : 0);
            endTime = start_1 > endTime ? start_1 : endTime;
            return appEnd_1 >= endTime && appStart_1 <= endTime;
          };
          if (appStart_1 <= start_1 && appEnd_1 >= start_1 || isEndOverlap() || appStart_1 > start_1 && appEnd_1 < end_1) {
            appointments.push(app2);
          }
        } else {
          var eventData = app2.data;
          if (eventData.trimStartTime.getTime() <= startDate.getTime() && startDate.getTime() < eventData.trimEndTime.getTime() || startDate.getTime() <= eventData.trimStartTime.getTime() && eventData.trimStartTime.getTime() < endDate.getTime()) {
            appointments.push(app2);
          }
        }
      };
      var this_1 = this;
      for (var _i = 0, appointmentsCollection_1 = appointmentsCollection; _i < appointmentsCollection_1.length; _i++) {
        var app = appointmentsCollection_1[_i];
        _loop_1(app);
      }
      return appointments;
    };
    TimelineEvent2.prototype.renderResourceEvents = function() {
      this.removeHeightProperty(RESOURCE_COLUMN_TABLE_CLASS);
      var selector = "." + RESOURCE_COLUMN_TABLE_CLASS + " tbody tr";
      this.addCellHeight(selector, this.eventHeight, EVENT_GAP2, this.moreIndicatorHeight, 0, false);
      var resources = this.parent.uiStateValues.isGroupAdaptive ? [this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex]] : this.parent.resourceBase.renderedResources;
      if (this.parent.crudModule && this.parent.crudModule.crudObj.isCrudAction) {
        for (var i = 0, len = this.parent.crudModule.crudObj.sourceEvent.length; i < len; i++) {
          var source = this.parent.crudModule.crudObj.sourceEvent[parseInt(i.toString(), 10)];
          this.rowIndex = source.groupIndex;
          this.renderEventsHandler(this.parent.activeView.renderDates, this.parent.activeViewOptions.workDays, source);
          if (this.parent.crudModule.crudObj.targetEvent[parseInt(i.toString(), 10)] && this.parent.crudModule.crudObj.sourceEvent[parseInt(i.toString(), 10)].groupIndex !== this.parent.crudModule.crudObj.targetEvent[parseInt(i.toString(), 10)].groupIndex) {
            var target = this.parent.crudModule.crudObj.targetEvent[parseInt(i.toString(), 10)];
            this.rowIndex = target.groupIndex;
            this.renderEventsHandler(this.parent.activeView.renderDates, this.parent.activeViewOptions.workDays, target);
          }
        }
        this.parent.crudModule.crudObj.isCrudAction = false;
      } else {
        for (var i = 0; i < resources.length; i++) {
          this.rowIndex = i;
          this.renderEventsHandler(this.parent.activeView.renderDates, this.parent.activeViewOptions.workDays, resources[parseInt(i.toString(), 10)]);
        }
      }
    };
    TimelineEvent2.prototype.renderEvents = function(event, resIndex, appointmentsList) {
      var startTime = event[this.fields.startTime];
      var endTime = event[this.fields.endTime];
      if (startTime.getTime() < this.parent.minDate.getTime() || endTime.getTime() > this.parent.maxDate.getTime()) {
        return;
      }
      var eventData = event.data;
      startTime = this.getStartTime(event, eventData);
      endTime = this.getEndTime(event, eventData);
      var startEndHours = getStartEndHours(event[this.fields.startTime], this.startHour, this.endHour);
      var eventDates = this.updateEventMinimumDuration(startEndHours, startTime, endTime);
      startTime = eventDates.startDate;
      endTime = eventDates.endDate;
      this.day = this.parent.getIndexOfDate(this.dateRender, resetTime(new Date(startTime.getTime())));
      if (this.day < 0) {
        return;
      }
      var cellTd = this.getCellTd();
      var eventsPerRow = this.parent.rowAutoHeight ? 1 : this.parent.activeViewOptions.maxEventsPerRow;
      var overlapCount = isNullOrUndefined(this.parent.eventSettings.sortComparer) ? this.getIndex(startTime) : this.getSortComparerIndex(startTime, endTime);
      event.Index = overlapCount;
      var appHeight = this.eventHeight;
      var diffInDays = eventData.count;
      var eventObj = extend({}, event, null, true);
      eventObj[this.fields.startTime] = eventData[this.fields.startTime];
      eventObj[this.fields.endTime] = eventData[this.fields.endTime];
      var currentDate = resetTime(new Date(this.dateRender[this.day].getTime()));
      var schedule = getStartEndHours(currentDate, this.startHour, this.endHour);
      var isValidEvent = true;
      if (this.isDayProcess() || eventObj[this.fields.isAllDay]) {
        isValidEvent = true;
      } else {
        isValidEvent = this.isValidEvent(eventObj, startTime, endTime, schedule);
      }
      if (startTime <= endTime && isValidEvent) {
        var appWidth = this.getEventWidth(startTime, endTime, event[this.fields.isAllDay], diffInDays);
        appWidth = this.renderType === "day" ? appWidth - 2 : appWidth;
        var appLeft = 0;
        var appRight = 0;
        var position = this.getPosition(startTime, endTime, event[this.fields.isAllDay], this.day);
        appWidth = appWidth <= 0 ? this.cellWidth : appWidth;
        this.renderedEvents.push(extend({}, event, null, true));
        if (isNullOrUndefined(this.cellTops[parseInt(resIndex.toString(), 10)])) {
          this.cellTops[parseInt(resIndex.toString(), 10)] = this.getRowTop(resIndex);
        }
        var top_1 = this.cellTops[parseInt(resIndex.toString(), 10)];
        var appTop = top_1 + (this.maxHeight ? 0 : EVENT_GAP2) + overlapCount * (appHeight + EVENT_GAP2);
        appLeft = this.parent.enableRtl ? 0 : position;
        appRight = this.parent.enableRtl ? position : 0;
        var height = (overlapCount + 1) * (appHeight + EVENT_GAP2) + this.moreIndicatorHeight;
        var renderApp = this.parent.activeViewOptions.maxEventsPerRow && !this.parent.rowAutoHeight && !this.parent.eventSettings.enableIndicator ? overlapCount < eventsPerRow : this.maxOrIndicator ? overlapCount < 1 ? true : false : this.cellHeight > height;
        if (this.parent.rowAutoHeight || renderApp) {
          var appointmentElement = void 0;
          if (isNullOrUndefined(this.inlineValue)) {
            appointmentElement = this.createAppointmentElement(event, resIndex);
          } else {
            appointmentElement = this.parent.inlineModule.createInlineAppointmentElement();
          }
          this.applyResourceColor(appointmentElement, event, "backgroundColor", this.groupOrder);
          setStyleAttribute(appointmentElement, {
            "width": appWidth + "px",
            "left": appLeft + "px",
            "right": appRight + "px",
            "top": appTop + "px"
          });
          this.wireAppointmentEvents(appointmentElement, event);
          if (this.parent.rowAutoHeight) {
            var conWrap = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
            var conWidth = this.parent.getElementWidth(conWrap);
            var isWithoutScroll = conWrap.offsetHeight === conWrap.clientHeight && conWrap.offsetWidth === conWrap.clientWidth;
            this.renderEventElement(event, appointmentElement, cellTd);
            var firstChild = this.getFirstChild(resIndex);
            this.updateCellHeight(firstChild, height);
            if (isWithoutScroll && (conWrap.offsetWidth > conWrap.clientWidth || conWidth !== this.parent.getElementWidth(conWrap))) {
              this.adjustAppointments(conWidth);
            }
          } else {
            this.renderEventElement(event, appointmentElement, cellTd);
          }
        } else {
          for (var i = 0; i < diffInDays; i++) {
            var moreIndicator = cellTd.querySelector("." + MORE_INDICATOR_CLASS);
            var appPos = this.parent.enableRtl ? appRight : appLeft;
            appPos = Math.floor(appPos / this.cellWidth) * this.cellWidth;
            var interval = this.interval / this.slotCount;
            var startDate = this.parent.activeViewOptions.option === "TimelineMonth" || this.renderType === "day" || i !== 0 ? new Date(this.dateRender[this.day + i].getTime()) : new Date(startTime);
            var endDate = addDays(this.dateRender[this.day + i], 1);
            if (this.parent.activeViewOptions.option === "TimelineMonth" || this.renderType === "day") {
              var position_1 = this.getPosition(startDate, endDate, event[this.fields.isAllDay], this.day + i);
              this.renderTimelineMoreIndicator(startTime, startDate, endDate, appHeight, interval, resIndex, appointmentsList, top_1, appLeft, appRight, cellTd, moreIndicator, appPos, position_1);
            } else {
              var slotCount = (getUniversalTime(endTime) - getUniversalTime(startTime)) / MS_PER_MINUTE * this.slotCount / this.interval;
              for (var k = 0; k < slotCount; k++) {
                startDate = k === 0 ? new Date(startDate.getTime()) : new Date(startDate.getTime() + 6e4 * interval);
                if (slotCount < 1) {
                  startDate = this.adjustToNearestTimeSlot(startDate, interval);
                }
                endDate = new Date(startDate.getTime() + 6e4 * interval);
                if (slotCount >= 1 && endDate.getTime() > endTime.getTime()) {
                  break;
                }
                var position_2 = this.getPosition(startDate, endDate, false, this.day + i);
                if (appPos > position_2) {
                  break;
                }
                appPos = position_2;
                this.renderTimelineMoreIndicator(startTime, startDate, endDate, appHeight, interval, resIndex, appointmentsList, top_1, appLeft, appRight, cellTd, moreIndicator, appPos, position_2);
              }
            }
          }
        }
      }
      this.parent.renderTemplates();
    };
    TimelineEvent2.prototype.adjustToNearestTimeSlot = function(inputTime, interval) {
      var parsedTime = new Date(inputTime);
      var minutesInMilliseconds = parsedTime.getHours() * 60 * 60 * 1e3 + parsedTime.getMinutes() * 60 * 1e3;
      var adjustedMinutesInMilliseconds = Math.floor(minutesInMilliseconds / (interval * 60 * 1e3)) * (interval * 60 * 1e3);
      var adjustedTime = new Date(parsedTime.getTime());
      adjustedTime.setHours(adjustedMinutesInMilliseconds / (60 * 60 * 1e3) % 24);
      adjustedTime.setMinutes(adjustedMinutesInMilliseconds % (60 * 60 * 1e3) / (60 * 1e3));
      return adjustedTime;
    };
    TimelineEvent2.prototype.renderTimelineMoreIndicator = function(startTime, startDate, endDate, appHeight, interval, resIndex, appointmentsList, top, appLeft, appRight, cellTd, moreIndicator, appPos, position) {
      appLeft = this.parent.enableRtl ? appRight = position : position;
      appPos = this.parent.enableRtl ? appRight : appLeft;
      appPos = Math.floor(appPos / this.cellWidth) * this.cellWidth;
      if (cellTd && isNullOrUndefined(moreIndicator) || !this.isAlreadyAvail(appPos, cellTd)) {
        var startDateTime = this.parent.activeViewOptions.option === "TimelineMonth" || this.renderType === "day" ? /* @__PURE__ */ new Date(+startTime) : startDate;
        var slotStartTime = new Date(startDateTime.setMinutes(Math.floor(startDateTime.getMinutes() / interval) * interval));
        var slotEndTime = new Date(slotStartTime.getTime() + 6e4 * interval);
        var groupIndex = void 0;
        if (this.parent.activeViewOptions.group.resources.length > 0 && !isNullOrUndefined(resIndex)) {
          groupIndex = resIndex.toString();
        }
        var filterEvents = this.getFilterEvents(startDate, endDate, slotStartTime, slotEndTime, groupIndex, appointmentsList);
        var appArea = this.cellHeight - this.moreIndicatorHeight;
        appHeight = this.withIndicator ? appArea - EVENT_GAP2 : appHeight;
        var renderedAppCount = Math.floor(appArea / (appHeight + EVENT_GAP2));
        var count = this.parent.activeViewOptions.maxEventsPerRow && !this.parent.eventSettings.enableIndicator ? filterEvents.length - this.parent.activeViewOptions.maxEventsPerRow : filterEvents.length - renderedAppCount <= 0 ? 1 : filterEvents.length - renderedAppCount;
        var moreIndicatorElement = void 0;
        if (this.renderType === "day") {
          moreIndicatorElement = this.getMoreIndicatorElement(count, startDate, endDate);
        } else {
          moreIndicatorElement = this.getMoreIndicatorElement(count, slotStartTime, slotEndTime);
        }
        if (!isNullOrUndefined(groupIndex)) {
          moreIndicatorElement.setAttribute("data-group-index", groupIndex);
        }
        moreIndicatorElement.style.top = top + appArea + "px";
        moreIndicatorElement.style.width = this.cellWidth + "px";
        moreIndicatorElement.style.left = Math.floor(appLeft / this.cellWidth) * this.cellWidth + "px";
        moreIndicatorElement.style.right = Math.floor(appRight / this.cellWidth) * this.cellWidth + "px";
        this.renderElement(cellTd, moreIndicatorElement);
        EventHandler.add(moreIndicatorElement, "click", this.moreIndicatorClick, this);
      }
    };
    TimelineEvent2.prototype.updateCellHeight = function(cell, height) {
      var cellHeight = cell.style.height === "" ? this.cellHeight : parseInt(cell.style.height, 10);
      if (height > cellHeight) {
        setStyleAttribute(cell, { "height": height + "px" });
        if (this.parent.activeViewOptions.group.resources.length > 0) {
          var resourceCell = this.parent.element.querySelector("." + RESOURCE_COLUMN_TABLE_CLASS + ' tbody td[data-group-index="' + cell.getAttribute("data-group-index") + '"]');
          if (resourceCell) {
            setStyleAttribute(resourceCell, { "height": height + "px" });
          }
        }
        var monthHeader = this.parent.element.querySelector(".e-month-header-wrapper table tr:nth-child(" + (cell.parentElement.rowIndex + 1) + ") td");
        if (monthHeader) {
          setStyleAttribute(monthHeader, { "height": height + "px" });
        }
      }
    };
    TimelineEvent2.prototype.adjustAppointments = function(conWidth) {
      var _this = this;
      var tr = this.parent.element.querySelector("." + CONTENT_TABLE_CLASS + " tbody tr");
      var actualCellWidth = this.parent.getElementWidth(this.workCells[0]);
      this.cellWidth = actualCellWidth / +(this.workCells[0].getAttribute("colspan") || 1);
      var currentPercentage = actualCellWidth * tr.children.length / (conWidth / 100);
      var apps = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_CLASS));
      apps.forEach(function(app) {
        if (_this.parent.enableRtl && app.style.right !== "0px") {
          app.style.right = parseFloat(app.style.right) / 100 * currentPercentage + "px";
        } else if (app.style.left !== "0px") {
          app.style.left = parseFloat(app.style.left) / 100 * currentPercentage + "px";
        }
        app.style.width = parseFloat(app.style.width) / 100 * currentPercentage + "px";
      });
    };
    TimelineEvent2.prototype.getFirstChild = function(index) {
      var query = "." + CONTENT_TABLE_CLASS + " tbody td";
      var groupIndex = "";
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        groupIndex = '[data-group-index="' + index.toString() + '"]';
      }
      var td = this.parent.element.querySelector(query + groupIndex);
      return td;
    };
    TimelineEvent2.prototype.updateBlockElements = function() {
      var blockElement = [].slice.call(this.element.querySelectorAll("." + BLOCK_APPOINTMENT_CLASS));
      for (var _i = 0, blockElement_1 = blockElement; _i < blockElement_1.length; _i++) {
        var element = blockElement_1[_i];
        var resIndex = parseInt(element.getAttribute("data-group-index"), 10);
        var firstChild = this.getFirstChild(resIndex);
        element.style.height = firstChild.offsetHeight + "px";
        var width = element.offsetWidth / firstChild.offsetWidth;
        element.style.width = firstChild.offsetWidth * width + "px";
      }
      var blockIndicator = [].slice.call(this.element.querySelectorAll("." + BLOCK_INDICATOR_CLASS));
      for (var _a = 0, blockIndicator_1 = blockIndicator; _a < blockIndicator_1.length; _a++) {
        var element = blockIndicator_1[_a];
        var resIndex = parseInt(element.getAttribute("data-group-index"), 10);
        element.style.top = this.getRowTop(resIndex) + this.getFirstChild(resIndex).offsetHeight - BLOCK_INDICATOR_HEIGHT + "px";
      }
    };
    TimelineEvent2.prototype.getStartTime = function(event, eventData) {
      var startTime = event[this.fields.startTime];
      var schedule = getStartEndHours(startTime, this.startHour, this.endHour);
      if (this.isDayProcess()) {
        startTime = event[this.fields.startTime];
      } else {
        if (schedule.startHour.getTime() >= eventData[this.fields.startTime]) {
          startTime = schedule.startHour;
        } else if (schedule.endHour.getTime() <= eventData[this.fields.startTime]) {
          startTime = this.getNextDay(schedule.startHour, eventData);
        } else {
          startTime = eventData[this.fields.startTime];
        }
      }
      eventData.trimStartTime = event[this.fields.isAllDay] ? schedule.startHour : eventData[this.fields.startTime];
      return startTime;
    };
    TimelineEvent2.prototype.getNextDay = function(startTime, eventData) {
      var startDate;
      for (var i = 1; i <= this.dateRender.length; i++) {
        startDate = addDays(startTime, i);
        if (this.parent.getIndexOfDate(this.dateRender, resetTime(new Date(startTime.getTime()))) !== -1) {
          eventData.count = eventData.count - 1;
          return startDate;
        }
      }
      return startDate;
    };
    TimelineEvent2.prototype.getEndTime = function(event, eventData) {
      var endTime = event[this.fields.endTime];
      var schedule = getStartEndHours(endTime, this.startHour, this.endHour);
      if (this.isDayProcess()) {
        endTime = eventData[this.fields.endTime];
      } else {
        endTime = eventData[this.fields.endTime];
        if (schedule.endHour.getTime() <= eventData[this.fields.endTime] || event[this.fields.isAllDay]) {
          endTime = schedule.endHour;
        }
        if (schedule.startHour.getTime() >= eventData[this.fields.endTime].getTime() && !event[this.fields.isAllDay]) {
          endTime = this.getPreviousDay(schedule.startHour, schedule.endHour, eventData);
        }
      }
      eventData.trimEndTime = event[this.fields.isAllDay] ? schedule.endHour : eventData[this.fields.endTime];
      return endTime;
    };
    TimelineEvent2.prototype.getPreviousDay = function(startTime, endTime, eventData) {
      for (var i = 1; i <= this.dateRender.length; i++) {
        var endDate = addDays(endTime, -i);
        if (this.parent.getIndexOfDate(this.dateRender, resetTime(new Date(startTime.getTime()))) !== -1) {
          endDate = resetTime(new Date(endDate.getTime()));
          endDate.setHours(endTime.getHours(), endTime.getMinutes(), endTime.getSeconds());
          var count = eventData.count;
          var actualEndTime = eventData[this.fields.endTime];
          eventData.count = actualEndTime.getHours() !== 0 || actualEndTime.getMinutes() !== 0 ? count - 1 : count;
          return endDate;
        }
      }
      return eventData[this.fields.endTime];
    };
    TimelineEvent2.prototype.getEventWidth = function(startDate, endDate, isAllDay, count) {
      if (this.renderType === "day" || isAllDay) {
        return count * this.slotsPerDay * this.cellWidth;
      }
      if (this.isSameDay(startDate, endDate)) {
        return this.getSameDayEventsWidth(startDate, endDate);
      } else {
        return this.getSpannedEventsWidth(startDate, endDate, count);
      }
    };
    TimelineEvent2.prototype.getSameDayEventsWidth = function(startDate, endDate) {
      var intervalMins = this.interval;
      if (this.slotsPerDay === 1) {
        var hoursRange = getStartEndHours(resetTime(new Date(startDate.getTime())), this.startHour, this.endHour);
        intervalMins = (hoursRange.endHour.getTime() - hoursRange.startHour.getTime()) / MS_PER_MINUTE;
      }
      return (getUniversalTime(endDate) - getUniversalTime(startDate)) / MS_PER_MINUTE * (this.cellWidth * this.slotCount) / intervalMins;
    };
    TimelineEvent2.prototype.getSpannedEventsWidth = function(startDate, endDate, diffInDays) {
      var width = diffInDays * this.slotsPerDay * this.cellWidth;
      var endWidth;
      var start = getStartEndHours(resetTime(new Date(startDate.getTime())), this.startHour, this.endHour);
      var startWidth = this.getSameDayEventsWidth(start.startHour, startDate);
      if (this.parent.getIndexOfDate(this.dateRender, resetTime(new Date(endDate.getTime()))) === -1) {
        endWidth = 0;
      } else {
        var end = getStartEndHours(resetTime(new Date(endDate.getTime())), this.startHour, this.endHour);
        endWidth = this.getSameDayEventsWidth(endDate, end.endHour);
        endWidth = this.slotsPerDay * this.cellWidth === endWidth ? 0 : endWidth;
      }
      var spannedWidth = startWidth + endWidth;
      return width > spannedWidth ? width - spannedWidth : width - startWidth;
    };
    TimelineEvent2.prototype.isSameDay = function(startTime, endTime) {
      var startDay = this.parent.getIndexOfDate(this.dateRender, resetTime(new Date(startTime.getTime())));
      var endDay = this.parent.getIndexOfDate(this.dateRender, resetTime(new Date(endTime.getTime())));
      return startDay === endDay;
    };
    TimelineEvent2.prototype.getAppointmentLeft = function(schedule, startTime, day) {
      var slotTd = this.isSameDay(startTime, schedule.startHour) ? (getUniversalTime(startTime) - getUniversalTime(schedule.startHour)) / (MS_PER_MINUTE * this.interval) * this.slotCount : 0;
      if (day === 0) {
        return slotTd;
      } else {
        var daySlot = Math.round((getUniversalTime(schedule.endHour) - getUniversalTime(schedule.startHour)) / MS_PER_MINUTE / this.interval * this.slotCount);
        return daySlot * day + slotTd;
      }
    };
    TimelineEvent2.prototype.getPosition = function(startTime, endTime, isAllDay, day) {
      if (this.renderType === "day" || isAllDay) {
        return day * this.slotsPerDay * this.cellWidth;
      }
      var currentDate = resetTime(new Date(this.dateRender[parseInt(day.toString(), 10)].getTime()));
      var schedule = getStartEndHours(currentDate, this.startHour, this.endHour);
      var cellIndex;
      if (schedule.endHour.getTime() <= endTime.getTime() && schedule.startHour.getTime() >= startTime.getTime()) {
        cellIndex = this.getAppointmentLeft(schedule, schedule.startHour, day);
      } else if (schedule.endHour.getTime() <= endTime.getTime()) {
        cellIndex = this.getAppointmentLeft(schedule, startTime, day);
      } else if (schedule.startHour.getTime() >= startTime.getTime()) {
        cellIndex = this.getAppointmentLeft(schedule, schedule.startHour, day);
      } else {
        cellIndex = this.getAppointmentLeft(schedule, startTime, day);
      }
      return cellIndex * this.cellWidth;
    };
    TimelineEvent2.prototype.getFilterEvents = function(startDate, endDate, startTime, endTime, gIndex, eventsList) {
      if (this.renderType === "day") {
        return this.getFilteredEvents(startDate, endDate, gIndex, eventsList);
      } else {
        return this.getFilteredEvents(startTime, endTime, gIndex, eventsList);
      }
    };
    TimelineEvent2.prototype.isAlreadyAvail = function(appPos, cellTd) {
      var moreIndicator = [].slice.call(cellTd.querySelectorAll("." + MORE_INDICATOR_CLASS));
      for (var i = 0; i < moreIndicator.length; i++) {
        var indicatorPos = void 0;
        if (moreIndicator) {
          indicatorPos = this.parent.enableRtl ? moreIndicator[parseInt(i.toString(), 10)].style.right : moreIndicator[parseInt(i.toString(), 10)].style.left;
        }
        if (parseInt(indicatorPos, 10) === Math.floor(appPos)) {
          return true;
        }
      }
      return false;
    };
    TimelineEvent2.prototype.getRowTop = function(resIndex) {
      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        return this.parent.element.querySelector("." + CONTENT_WRAP_CLASS + ' tbody td[data-group-index="' + resIndex.toString() + '"]').offsetTop;
      }
      return 0;
    };
    TimelineEvent2.prototype.getCellTd = function() {
      var wrapIndex = this.parent.uiStateValues.isGroupAdaptive ? 0 : this.rowIndex;
      return this.eventContainers[parseInt(wrapIndex.toString(), 10)];
    };
    TimelineEvent2.prototype.renderBlockIndicator = function(cellTd, position, resIndex) {
      if (this.parent.headerRows.length > 0 && (this.parent.headerRows[this.parent.headerRows.length - 1].option !== "Hour" || this.parent.headerRows[this.parent.headerRows.length - 1].option !== "Date")) {
        return;
      }
      position = Math.floor(position / this.cellWidth) * this.cellWidth + this.cellWidth - BLOCK_INDICATOR_WIDTH;
      if (!this.isAlreadyAvail(position, cellTd)) {
        var blockIndicator = createElement("div", { className: "e-icons " + BLOCK_INDICATOR_CLASS });
        if (this.parent.activeViewOptions.group.resources.length > 0) {
          blockIndicator.setAttribute("data-group-index", resIndex.toString());
        }
        if (this.parent.enableRtl) {
          blockIndicator.style.right = position + "px";
        } else {
          blockIndicator.style.left = position + "px";
        }
        blockIndicator.style.top = this.getRowTop(resIndex) + this.cellHeight - BLOCK_INDICATOR_HEIGHT + "px";
        this.renderElement(cellTd, blockIndicator);
      }
    };
    TimelineEvent2.prototype.setMaxEventHeight = function(event, cell) {
      setStyleAttribute(event, {
        "height": this.cellHeight - (this.maxHeight ? 0 : EVENT_GAP2) - (this.maxHeight ? 0 : this.moreIndicatorHeight) + "px"
      });
    };
    TimelineEvent2.prototype.isDayProcess = function() {
      if (this.parent.currentView === "TimelineMonth" || !this.parent.activeViewOptions.timeScale.enable || this.parent.activeViewOptions.headerRows.length > 0 && this.parent.activeViewOptions.headerRows.slice(-1)[0].option !== "Hour") {
        return true;
      }
      return false;
    };
    TimelineEvent2.prototype.destroy = function() {
      this.renderType = null;
      this.eventContainers = null;
      this.dayLength = null;
      this.content = null;
      _super.prototype.destroy.call(this);
      this.parent = null;
    };
    return TimelineEvent2;
  }(MonthEvent)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/event-renderer/inline-edit.js
var InlineEdit = (
  /** @class */
  function() {
    function InlineEdit2(parent) {
      this.parent = parent;
      this.parent.on(inlineClick, this.inlineEdit, this);
    }
    InlineEdit2.prototype.inlineEdit = function(args) {
      if (this.parent.quickPopup) {
        this.parent.quickPopup.quickPopupHide();
      }
      if (args.type === "Cell") {
        var moreWrapper = this.parent.element.querySelector("." + MORE_POPUP_WRAPPER_CLASS);
        if (moreWrapper && moreWrapper.classList.contains(POPUP_OPEN)) {
          this.parent.quickPopup.morePopup.hide();
        }
        this.removeInlineAppointmentElement();
        this.cellEdit(args);
      } else {
        if (this.parent.element.querySelector("." + INLINE_SUBJECT_CLASS) !== args.element.querySelector("." + INLINE_SUBJECT_CLASS)) {
          this.removeInlineAppointmentElement();
        }
        this.eventEdit(args);
      }
    };
    InlineEdit2.prototype.cellEdit = function(args) {
      var saveObj = this.generateEventData();
      var cellIndex = args.element.cellIndex;
      var count = this.getEventDaysCount(saveObj);
      if (count > 1) {
        count = Math.round(count);
        count--;
        cellIndex = cellIndex - count;
      }
      var start = resetTime(/* @__PURE__ */ new Date("" + saveObj[this.parent.eventFields.startTime])).getTime();
      var end = resetTime(/* @__PURE__ */ new Date("" + saveObj[this.parent.eventFields.endTime])).getTime();
      var resIndex = args.groupIndex || 0;
      var isVertical = this.parent.currentView === "Day" || this.parent.currentView === "Week" || this.parent.currentView === "WorkWeek";
      if (this.parent.activeViewOptions.timeScale.enable && isVertical) {
        var dayIndex2 = saveObj[this.parent.eventFields.startTime].getDay();
        this.createVerticalViewInline(saveObj, dayIndex2, resIndex, cellIndex);
      } else if (this.parent.currentView === "Month" || !this.parent.activeViewOptions.timeScale.enable && isVertical) {
        this.createMonthViewInline(saveObj, resIndex, start, end);
      } else {
        this.createTimelineViewInline(saveObj, start, end, resIndex);
      }
      var inlineSubject = this.parent.element.querySelector("." + INLINE_SUBJECT_CLASS);
      if (inlineSubject) {
        inlineSubject.focus();
      }
    };
    InlineEdit2.prototype.eventEdit = function(args) {
      var inlineSubject = args.element.querySelector("." + INLINE_SUBJECT_CLASS);
      var subject;
      if (inlineSubject) {
        subject = inlineSubject.value;
      } else {
        var subEle = args.element.querySelector("." + SUBJECT_CLASS);
        if (!isNullOrUndefined(subEle)) {
          addClass([subEle], DISABLE_CLASS);
          subject = subEle.innerText;
        } else {
          subject = args.data[this.parent.eventFields.subject];
        }
        inlineSubject = createElement("input", { className: INLINE_SUBJECT_CLASS, attrs: { value: subject } });
        if (closest(args.element, "." + MORE_POPUP_WRAPPER_CLASS)) {
          args.element.insertBefore(inlineSubject, subEle);
        } else if (["Agenda", "MonthAgenda"].indexOf(this.parent.currentView) > -1) {
          var subjectWrap = args.element.querySelector("." + SUBJECT_WRAP);
          if (isNullOrUndefined(subjectWrap)) {
            subjectWrap = createElement("div", { className: SUBJECT_WRAP });
            args.element.prepend(subjectWrap);
          }
          subjectWrap.insertBefore(inlineSubject, subjectWrap.firstChild);
        } else {
          args.element.querySelector(".e-appointment-details").prepend(inlineSubject);
        }
        inlineSubject.focus();
      }
      inlineSubject.setSelectionRange(subject.length, subject.length);
    };
    InlineEdit2.prototype.createVerticalViewInline = function(saveObj, dayIndex2, resIndex, daysCount) {
      var _a;
      var count = this.getEventDaysCount(saveObj);
      var verticalEvent = new VerticalEvent(this.parent);
      verticalEvent.initializeValues();
      var index = verticalEvent.dateRender[parseInt(resIndex.toString(), 10)].map(function(date) {
        return date.getDay();
      }).indexOf(dayIndex2);
      if (count >= 1) {
        verticalEvent.allDayElement = [].slice.call(this.parent.element.querySelectorAll("." + ALLDAY_CELLS_CLASS));
        (_a = verticalEvent.slots).push.apply(_a, this.parent.activeView.renderDates.map(function(date) {
          return +date;
        }));
        var allDayElements = [].slice.call(this.parent.element.querySelectorAll("." + ALLDAY_APPOINTMENT_CLASS));
        var allDayLevel = 0;
        if (allDayElements.length > 0) {
          allDayLevel = Math.floor(this.parent.getElementHeight(this.parent.element.querySelector("." + ALLDAY_ROW_CLASS)) / allDayElements[0].offsetHeight) - 1;
        }
        verticalEvent.allDayLevel = allDayLevel;
        var appHeight = this.parent.getElementHeightFromClass(this.parent.element.querySelector("." + ALLDAY_APPOINTMENT_WRAPPER_CLASS), APPOINTMENT_CLASS);
        var cellTop = verticalEvent.allDayElement.length > 0 ? verticalEvent.allDayElement[0].offsetTop : 0;
        verticalEvent.renderAllDayEvents(saveObj, index, resIndex, daysCount, this.parent.allowInline, cellTop, appHeight);
      } else {
        verticalEvent.renderNormalEvents(saveObj, index, resIndex, daysCount, this.parent.allowInline);
      }
    };
    InlineEdit2.prototype.createMonthViewInline = function(saveObj, index, start, end) {
      var count = this.getEventDaysCount(saveObj);
      var saveObject = this.parent.eventBase.cloneEventObject(saveObj, start, end, count, false, false);
      var monthEvent = new MonthEvent(this.parent);
      monthEvent.dateRender = this.parent.activeView.renderDates;
      monthEvent.inlineValue = this.parent.allowInline;
      var renderDates = this.parent.activeView.renderDates;
      var workDays = this.parent.activeViewOptions.workDays;
      var monthCellSelector = "." + WORK_CELLS_CLASS;
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        monthCellSelector += '[data-group-index="' + index + '"]';
        var resourceData = this.parent.resourceBase.lastResourceLevel[parseInt(index.toString(), 10)];
        renderDates = resourceData.renderDates;
        workDays = resourceData.workDays;
      }
      monthEvent.dateRender = renderDates;
      monthEvent.workCells = [].slice.call(this.parent.element.querySelectorAll(monthCellSelector));
      monthEvent.cellWidth = monthEvent.workCells[0].offsetWidth;
      monthEvent.cellHeight = monthEvent.workCells[0].offsetHeight;
      monthEvent.eventHeight = this.parent.getElementHeightFromClass(this.parent.monthModule.element || monthEvent.element, APPOINTMENT_CLASS);
      monthEvent.getSlotDates(workDays);
      var filteredDates = monthEvent.getRenderedDates(renderDates);
      var spannedEvents = monthEvent.splitEvent(saveObject, filteredDates || renderDates);
      for (var _i = 0, spannedEvents_1 = spannedEvents; _i < spannedEvents_1.length; _i++) {
        var eventData = spannedEvents_1[_i];
        monthEvent.renderEvents(eventData, index);
      }
      var inlineSubject = this.parent.element.querySelector("." + INLINE_SUBJECT_CLASS);
      inlineSubject.focus();
    };
    InlineEdit2.prototype.createTimelineViewInline = function(saveObj, start, end, resIndex) {
      var count = this.getEventDaysCount(saveObj);
      var saveObject = this.parent.eventBase.cloneEventObject(saveObj, start, end, count, false, false);
      var timelineView = new TimelineEvent(this.parent, this.parent.activeViewOptions.timeScale.enable ? "hour" : "day");
      timelineView.dateRender = this.parent.activeView.renderDates;
      timelineView.eventContainers = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_CONTAINER_CLASS));
      var workCell = this.parent.element.querySelector("." + WORK_CELLS_CLASS);
      timelineView.inlineValue = this.parent.allowInline;
      timelineView.cellWidth = workCell.offsetWidth;
      timelineView.cellHeight = workCell.offsetHeight;
      var dayLength = this.parent.element.querySelectorAll("." + CONTENT_TABLE_CLASS + " tbody tr").length === 0 ? 0 : this.parent.element.querySelectorAll("." + CONTENT_TABLE_CLASS + " tbody tr")[0].children.length;
      timelineView.slotsPerDay = dayLength / timelineView.dateRender.length;
      timelineView.eventHeight = this.parent.getElementHeightFromClass(timelineView.element, APPOINTMENT_CLASS);
      timelineView.renderEvents(saveObject, resIndex);
    };
    InlineEdit2.prototype.getEventDaysCount = function(saveObj) {
      var startDate = saveObj[this.parent.eventFields.startTime];
      var endDate = saveObj[this.parent.eventFields.endTime];
      var daysCount = Math.abs(endDate.getTime() - startDate.getTime()) / MS_PER_DAY;
      return daysCount;
    };
    InlineEdit2.prototype.generateEventData = function(target) {
      var inlineElement = this.parent.element.querySelector("." + INLINE_SUBJECT_CLASS);
      var subject = inlineElement ? inlineElement.value : target ? target.innerHTML : "";
      var saveObj = {};
      saveObj[this.parent.eventFields.id] = this.parent.eventBase.getEventMaxID();
      saveObj[this.parent.eventFields.subject] = subject;
      saveObj[this.parent.eventFields.startTime] = this.parent.activeCellsData.startTime;
      saveObj[this.parent.eventFields.endTime] = this.parent.activeCellsData.endTime;
      saveObj[this.parent.eventFields.isAllDay] = this.parent.activeCellsData.isAllDay;
      this.parent.eventWindow.setDefaultValueToObject(saveObj);
      if (this.parent.resourceBase) {
        this.parent.resourceBase.setResourceValues(saveObj, this.parent.activeCellsData.groupIndex);
      }
      return saveObj;
    };
    InlineEdit2.prototype.documentClick = function() {
      var target = this.parent.element.querySelector("." + INLINE_SUBJECT_CLASS);
      if (target && target.value !== "") {
        this.inlineCrudActions(target);
      } else {
        this.removeInlineAppointmentElement();
      }
    };
    InlineEdit2.prototype.inlineCrudActions = function(target) {
      if (closest(target, "." + INLINE_APPOINTMENT_CLASS)) {
        var saveObj = this.generateEventData(target);
        this.parent.addEvent(saveObj);
      } else {
        var eventTarget = closest(target, "." + APPOINTMENT_CLASS);
        var eventDetails = this.parent.getEventDetails(eventTarget);
        eventDetails[this.parent.eventFields.subject] = target.value;
        var currentAction = void 0;
        if (eventDetails[this.parent.eventFields.id] === eventDetails[this.parent.eventFields.recurrenceID]) {
          currentAction = "EditOccurrence";
          eventDetails[this.parent.eventFields.id] = this.parent.eventBase.getEventMaxID();
        }
        this.parent.saveEvent(eventDetails, currentAction);
      }
      this.removeInlineAppointmentElement();
    };
    InlineEdit2.prototype.createInlineAppointmentElement = function(inlineData) {
      var inlineAppointmentElement = createElement("div", {
        className: APPOINTMENT_CLASS + " " + INLINE_APPOINTMENT_CLASS
      });
      var inlineDetails = createElement("div", { className: APPOINTMENT_DETAILS });
      inlineAppointmentElement.appendChild(inlineDetails);
      var inline = createElement("input", { className: INLINE_SUBJECT_CLASS });
      inlineDetails.appendChild(inline);
      if (inlineData) {
        this.parent.eventBase.applyResourceColor(inlineAppointmentElement, inlineData, "backgroundColor");
      }
      return inlineAppointmentElement;
    };
    InlineEdit2.prototype.removeInlineAppointmentElement = function() {
      var inlineAppointment = [].slice.call(this.parent.element.querySelectorAll("." + INLINE_APPOINTMENT_CLASS));
      if (inlineAppointment.length > 0) {
        inlineAppointment.forEach(function(node) {
          return remove(node);
        });
      }
      var inlineSubject = this.parent.element.querySelector("." + INLINE_SUBJECT_CLASS);
      if (inlineSubject) {
        var appointmentSubject = closest(inlineSubject, "." + APPOINTMENT_CLASS);
        var subject = appointmentSubject.querySelector("." + SUBJECT_CLASS);
        if (!isNullOrUndefined(subject)) {
          removeClass([subject], DISABLE_CLASS);
        }
        remove(inlineSubject);
      }
    };
    InlineEdit2.prototype.destroy = function() {
      this.parent.off(inlineClick, this.inlineEdit);
    };
    return InlineEdit2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/popups/form-validator.js
var FieldValidator = (
  /** @class */
  function() {
    function FieldValidator2() {
    }
    FieldValidator2.prototype.renderFormValidator = function(form, rules, element, locale) {
      var _this = this;
      this.element = element;
      this.formObj = new FormValidator(form, {
        locale,
        customPlacement: function(inputElement, error) {
          _this.errorPlacement(inputElement, error);
        },
        rules,
        validationComplete: function(args) {
          _this.validationComplete(args);
        },
        focusout: function(args) {
          _this.focusOut(args);
        }
      });
    };
    FieldValidator2.prototype.focusOut = function(args) {
      var target = args.relatedTarget;
      if (target && (target.classList.contains("e-dlg-closeicon-btn") || target.classList.contains("e-close") || target.classList.contains(ALLDAY_CELLS_CLASS) || target.classList.contains(HEADER_CELLS_CLASS) || target.classList.contains(QUICK_POPUP_EVENT_DETAILS_CLASS) || target.classList.contains(WORK_CELLS_CLASS) || target.classList.contains(EVENT_WINDOW_CANCEL_BUTTON_CLASS))) {
        this.ignoreError = true;
      } else {
        this.ignoreError = false;
      }
    };
    FieldValidator2.prototype.validationComplete = function(args) {
      var elem = this.element.querySelector("#" + args.inputName + "_Error");
      if (elem) {
        elem.style.display = args.status === "failure" ? "" : "none";
      }
    };
    FieldValidator2.prototype.errorPlacement = function(inputElement, error) {
      var id = error.getAttribute("for");
      var elem = this.element.querySelector("#" + id + "_Error");
      if (!elem && !this.ignoreError) {
        this.createTooltip(inputElement, error, id, "");
      }
      if (!isNullOrUndefined(elem)) {
        elem.querySelector(".e-error").innerHTML = error.innerHTML;
      }
    };
    FieldValidator2.prototype.createTooltip = function(element, error, name, display) {
      var dlgContent;
      var client;
      var inputClient = element.getBoundingClientRect();
      if (this.element.classList.contains(POPUP_WRAPPER_CLASS)) {
        dlgContent = this.element;
        client = this.element.getBoundingClientRect();
      } else {
        dlgContent = this.element.querySelector(".e-schedule-dialog .e-dlg-content");
        client = dlgContent.getBoundingClientRect();
      }
      var div = createElement("div", {
        className: "e-tooltip-wrap e-popup " + ERROR_VALIDATION_CLASS,
        id: name + "_Error",
        styles: "display:" + display + ";top:" + (inputClient.bottom - client.top + dlgContent.scrollTop + 9) + "px;left:" + (inputClient.left - client.left + dlgContent.scrollLeft + inputClient.width / 2) + "px;"
      });
      var content = createElement("div", { className: "e-tip-content" });
      content.appendChild(error);
      var arrow = createElement("div", { className: "e-arrow-tip e-tip-top" });
      arrow.appendChild(createElement("div", { className: "e-arrow-tip-outer e-tip-top" }));
      arrow.appendChild(createElement("div", { className: "e-arrow-tip-inner e-tip-top" }));
      div.appendChild(content);
      div.appendChild(arrow);
      dlgContent.appendChild(div);
      div.style.left = parseInt(div.style.left, 10) - div.offsetWidth / 2 + "px";
    };
    FieldValidator2.prototype.destroyToolTip = function() {
      if (this.element) {
        var elements = [].slice.call(this.element.querySelectorAll("." + ERROR_VALIDATION_CLASS));
        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
          var elem = elements_1[_i];
          remove(elem);
        }
      }
      if (this.formObj && this.formObj.element) {
        this.formObj.reset();
      }
    };
    FieldValidator2.prototype.destroy = function() {
      if (this.formObj && this.formObj.element && !this.formObj.isDestroyed) {
        this.formObj.destroy();
      }
      this.formObj = null;
      this.element = null;
    };
    return FieldValidator2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/popups/quick-popups.js
var EVENT_FIELD = "e-field";
var QuickPopups = (
  /** @class */
  function() {
    function QuickPopups2(parent) {
      this.isMultipleEventSelect = false;
      this.isCrudAction = false;
      this.parent = parent;
      this.l10n = this.parent.localeObj;
      this.fieldValidator = new FieldValidator();
      this.render();
      this.addEventListener();
    }
    QuickPopups2.prototype.render = function() {
      this.renderQuickPopup();
      this.renderMorePopup();
      this.renderQuickDialog();
    };
    QuickPopups2.prototype.renderQuickPopup = function() {
      var quickPopupWrapper = createElement("div", { className: POPUP_WRAPPER_CLASS + " e-popup-close", attrs: { role: "dialog" } });
      if (this.parent.isAdaptive) {
        document.body.appendChild(quickPopupWrapper);
        addClass([quickPopupWrapper], DEVICE_CLASS);
      } else {
        this.parent.element.appendChild(quickPopupWrapper);
      }
      this.quickPopup = new Popup(quickPopupWrapper, {
        targetType: this.parent.isAdaptive ? "container" : "relative",
        enableRtl: this.parent.enableRtl,
        open: this.quickPopupOpen.bind(this),
        close: this.quickPopupClose.bind(this),
        hideAnimation: this.parent.isAdaptive ? { name: "ZoomOut" } : { name: "FadeOut", duration: 150 },
        showAnimation: this.parent.isAdaptive ? { name: "ZoomIn" } : { name: "FadeIn", duration: 150 },
        collision: this.parent.isAdaptive ? { X: "fit", Y: "fit" } : this.parent.enableRtl ? { X: "flip", Y: "fit" } : { X: "none", Y: "fit" },
        position: this.parent.isAdaptive || this.parent.enableRtl ? { X: "left", Y: "top" } : { X: "right", Y: "top" },
        viewPortElement: this.parent.isAdaptive ? document.body : this.parent.element,
        zIndex: this.parent.isAdaptive ? 1004 : 3
      });
    };
    QuickPopups2.prototype.renderMorePopup = function() {
      var moreEventPopup = '<div class="' + MORE_EVENT_POPUP_CLASS + '"><div class="' + MORE_EVENT_HEADER_CLASS + '">' + ('<div class="' + MORE_EVENT_CLOSE_CLASS + '" title="' + this.l10n.getConstant("close") + '" tabindex="0" role="button"></div>') + ('<div class="' + MORE_EVENT_DATE_HEADER_CLASS + '"><div class="' + MORE_EVENT_HEADER_DAY_CLASS + '" id="' + this.parent.element.id + '_more_popup"></div>') + ('<div class="' + MORE_EVENT_HEADER_DATE_CLASS + " " + NAVIGATE_CLASS + '" tabindex="0" role="link"></div></div></div></div>');
      var moreEventWrapper = createElement("div", {
        className: MORE_POPUP_WRAPPER_CLASS + " e-popup-close",
        innerHTML: moreEventPopup
      });
      if (this.parent.isAdaptive) {
        document.body.appendChild(moreEventWrapper);
        addClass([moreEventWrapper], DEVICE_CLASS);
      } else {
        this.parent.element.appendChild(moreEventWrapper);
      }
      this.morePopup = new Popup(moreEventWrapper, {
        targetType: this.parent.isAdaptive ? "container" : "relative",
        enableRtl: this.parent.enableRtl,
        hideAnimation: { name: "ZoomOut", duration: 300 },
        showAnimation: { name: "ZoomIn", duration: 300 },
        open: this.morePopupOpen.bind(this),
        close: this.morePopupClose.bind(this),
        collision: this.parent.isAdaptive ? { X: "fit", Y: "fit" } : this.parent.enableRtl ? { X: "flip", Y: "fit" } : { X: "flip", Y: "flip" },
        viewPortElement: this.parent.isAdaptive ? document.body : this.parent.element,
        zIndex: this.parent.isAdaptive ? 1002 : 2
      });
      this.morePopup.element.setAttribute("role", "dialog");
      this.morePopup.element.setAttribute("aria-labelledby", this.parent.element.id + "_more_popup");
      var closeButton = this.morePopup.element.querySelector("." + MORE_EVENT_CLOSE_CLASS);
      this.renderButton("e-round", ICON + " " + CLOSE_ICON_CLASS, false, closeButton, this.closeClick);
      EventHandler.add(this.morePopup.element.querySelector("." + MORE_EVENT_HEADER_DATE_CLASS), "click", this.navigationClick, this);
    };
    QuickPopups2.prototype.renderQuickDialog = function() {
      var buttonModel = [
        { buttonModel: { cssClass: "e-quick-alertok e-flat", isPrimary: true }, click: this.dialogButtonClick.bind(this) },
        { buttonModel: { cssClass: "e-quick-alertcancel e-flat", isPrimary: false }, click: this.dialogButtonClick.bind(this) },
        {
          buttonModel: { cssClass: "e-quick-dialog-cancel e-disable e-flat", isPrimary: false },
          click: this.dialogButtonClick.bind(this)
        }
      ];
      if (this.parent.eventSettings.editFollowingEvents) {
        var followingSeriesButton = {
          buttonModel: { cssClass: "e-quick-alertfollowing e-flat", isPrimary: false },
          click: this.dialogButtonClick.bind(this)
        };
        buttonModel.splice(1, 0, followingSeriesButton);
      }
      this.quickDialog = new Dialog({
        animationSettings: { effect: "Zoom" },
        buttons: buttonModel,
        cssClass: QUICK_DIALOG_CLASS,
        closeOnEscape: true,
        enableRtl: this.parent.enableRtl,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        beforeClose: this.beforeQuickDialogClose.bind(this),
        isModal: true,
        position: { X: "center", Y: "center" },
        showCloseIcon: true,
        target: document.body,
        visible: false,
        width: "auto"
      });
      var dialogElement = createElement("div", { id: this.parent.element.id + "QuickDialog" });
      this.parent.element.appendChild(dialogElement);
      this.quickDialog.appendTo(dialogElement);
      var okButton = this.quickDialog.element.querySelector("." + QUICK_DIALOG_ALERT_OK);
      if (okButton) {
        okButton.setAttribute("aria-label", this.l10n.getConstant("occurrence"));
        okButton.setAttribute("aria-label", okButton.innerHTML);
      }
      var cancelButton = this.quickDialog.element.querySelector("." + QUICK_DIALOG_ALERT_CANCEL);
      if (cancelButton) {
        cancelButton.setAttribute("aria-label", this.l10n.getConstant("series"));
        cancelButton.setAttribute("aria-label", cancelButton.innerHTML);
      }
      if (this.quickDialog.element.querySelector(".e-dlg-closeicon-btn")) {
        this.quickDialog.element.querySelector(".e-dlg-closeicon-btn").setAttribute("title", this.l10n.getConstant("close"));
      }
    };
    QuickPopups2.prototype.renderButton = function(className, iconName, isDisabled, element, clickEvent) {
      var buttonObj = new Button({
        cssClass: className,
        disabled: isDisabled,
        enableRtl: this.parent.enableRtl,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        iconCss: iconName
      });
      buttonObj.appendTo(element);
      EventHandler.add(element, "click", clickEvent, this);
      removeClass([element], ICON);
    };
    QuickPopups2.prototype.quickDialogClass = function(action) {
      var classList2 = [
        QUICK_DIALOG_OCCURRENCE_CLASS,
        QUICK_DIALOG_SERIES_CLASS,
        QUICK_DIALOG_DELETE_CLASS,
        QUICK_DIALOG_CANCEL_CLASS,
        QUICK_DIALOG_ALERT_BTN_CLASS,
        DISABLE_CLASS
      ];
      var okButton = this.quickDialog.element.querySelector("." + QUICK_DIALOG_ALERT_OK);
      var cancelButton = this.quickDialog.element.querySelector("." + QUICK_DIALOG_ALERT_CANCEL);
      var followingEventButton = this.quickDialog.element.querySelector("." + QUICK_DIALOG_ALERT_FOLLOWING);
      removeClass([okButton, cancelButton], classList2);
      addClass([this.quickDialog.element.querySelector("." + QUICK_DIALOG_CANCEL_CLASS)], DISABLE_CLASS);
      if (this.parent.eventSettings.editFollowingEvents) {
        addClass([followingEventButton], DISABLE_CLASS);
        removeClass([this.quickDialog.element], FOLLOWING_EVENTS_DIALOG);
      }
      switch (action) {
        case "Recurrence":
          addClass([okButton], QUICK_DIALOG_OCCURRENCE_CLASS);
          addClass([cancelButton], QUICK_DIALOG_SERIES_CLASS);
          if (this.parent.eventSettings.editFollowingEvents) {
            removeClass([followingEventButton], DISABLE_CLASS);
            addClass([this.quickDialog.element], FOLLOWING_EVENTS_DIALOG);
            addClass([followingEventButton], QUICK_DIALOG_FOLLOWING_EVENTS_CLASS);
          }
          break;
        case "Delete":
          addClass([okButton], QUICK_DIALOG_DELETE_CLASS);
          addClass([cancelButton], QUICK_DIALOG_CANCEL_CLASS);
          break;
        case "Alert":
          addClass([okButton], [QUICK_DIALOG_ALERT_OK, QUICK_DIALOG_ALERT_BTN_CLASS]);
          addClass([cancelButton], [QUICK_DIALOG_ALERT_CANCEL, DISABLE_CLASS]);
          break;
      }
    };
    QuickPopups2.prototype.applyFormValidation = function() {
      var form = this.quickPopup.element.querySelector("." + FORM_CLASS);
      var rules = {};
      rules[this.parent.eventSettings.fields.subject.name] = this.parent.eventSettings.fields.subject.validation;
      this.fieldValidator.renderFormValidator(form, rules, this.quickPopup.element, this.parent.locale);
    };
    QuickPopups2.prototype.openRecurrenceAlert = function() {
      var editDeleteOnly = this.quickDialog.element.querySelector("." + QUICK_DIALOG_ALERT_OK);
      if (editDeleteOnly) {
        editDeleteOnly.innerHTML = this.l10n.getConstant(this.parent.currentAction === "Delete" ? "deleteEvent" : "editEvent");
        editDeleteOnly.setAttribute("aria-label", editDeleteOnly.innerHTML);
      }
      var editFollowingEventsOnly = this.quickDialog.element.querySelector("." + QUICK_DIALOG_ALERT_FOLLOWING);
      if (editFollowingEventsOnly) {
        editFollowingEventsOnly.innerHTML = this.l10n.getConstant("editFollowingEvent");
        editFollowingEventsOnly.setAttribute("aria-label", editFollowingEventsOnly.innerHTML);
      }
      var editDeleteSeries = this.quickDialog.element.querySelector("." + QUICK_DIALOG_ALERT_CANCEL);
      if (editDeleteSeries) {
        editDeleteSeries.innerHTML = this.l10n.getConstant(this.parent.currentAction === "Delete" ? "deleteSeries" : "editSeries");
        editDeleteSeries.setAttribute("aria-label", editDeleteSeries.innerHTML);
      }
      this.quickDialog.content = this.l10n.getConstant("editContent");
      this.quickDialog.header = this.l10n.getConstant(this.parent.currentAction === "Delete" ? "deleteTitle" : "editTitle");
      this.quickDialogClass("Recurrence");
      this.showQuickDialog("RecurrenceAlert");
    };
    QuickPopups2.prototype.openRecurrenceValidationAlert = function(type) {
      this.quickDialogClass("Alert");
      var okButton = this.quickDialog.element.querySelector("." + QUICK_DIALOG_ALERT_OK);
      okButton.innerHTML = this.l10n.getConstant("ok");
      okButton.setAttribute("aria-label", okButton.innerHTML);
      var cancelButton = this.quickDialog.element.querySelector("." + QUICK_DIALOG_ALERT_CANCEL);
      cancelButton.innerHTML = this.l10n.getConstant("cancel");
      cancelButton.setAttribute("aria-label", cancelButton.innerHTML);
      this.quickDialog.header = this.l10n.getConstant("alert");
      var dialogCancel;
      switch (type) {
        case "wrongPattern":
          addClass([cancelButton], DISABLE_CLASS);
          this.quickDialog.content = this.l10n.getConstant("wrongPattern");
          break;
        case "createError":
          addClass([cancelButton], DISABLE_CLASS);
          this.quickDialog.content = this.l10n.getConstant("createError");
          break;
        case "sameDayAlert":
          addClass([cancelButton], DISABLE_CLASS);
          this.quickDialog.content = this.l10n.getConstant("sameDayAlert");
          break;
        case "seriesChangeAlert":
          dialogCancel = this.quickDialog.element.querySelector("." + QUICK_DIALOG_CANCEL_CLASS);
          removeClass([cancelButton, dialogCancel], DISABLE_CLASS);
          this.quickDialog.content = this.l10n.getConstant("seriesChangeAlert");
          okButton.innerHTML = this.l10n.getConstant("yes");
          cancelButton.innerHTML = this.l10n.getConstant("no");
          dialogCancel.innerHTML = this.l10n.getConstant("cancel");
          break;
        case "occurrenceAlert":
          addClass([cancelButton], DISABLE_CLASS);
          this.quickDialog.content = this.l10n.getConstant("occurenceAlert");
          break;
      }
      if (!this.parent.enableRecurrenceValidation && type === "wrongPattern" || this.parent.enableRecurrenceValidation) {
        this.showQuickDialog("RecurrenceValidationAlert");
      }
    };
    QuickPopups2.prototype.openDeleteAlert = function() {
      if (this.parent.activeViewOptions.readonly) {
        return;
      }
      var okButton = this.quickDialog.element.querySelector("." + QUICK_DIALOG_ALERT_OK);
      if (okButton) {
        okButton.innerHTML = this.l10n.getConstant("delete");
        okButton.setAttribute("aria-label", okButton.innerHTML);
      }
      var cancelButton = this.quickDialog.element.querySelector("." + QUICK_DIALOG_ALERT_CANCEL);
      if (cancelButton) {
        cancelButton.innerHTML = this.l10n.getConstant("cancel");
        cancelButton.setAttribute("aria-label", cancelButton.innerHTML);
      }
      this.quickDialog.content = this.parent.activeEventData.event.length > 1 ? this.l10n.getConstant("deleteMultipleContent") : this.l10n.getConstant("deleteContent");
      this.quickDialog.header = this.parent.activeEventData.event.length > 1 ? this.l10n.getConstant("deleteMultipleEvent") : this.l10n.getConstant("deleteEvent");
      this.quickDialogClass("Delete");
      this.showQuickDialog("DeleteAlert");
    };
    QuickPopups2.prototype.openValidationError = function(type, eventData) {
      this.quickDialog.header = this.l10n.getConstant("alert");
      this.quickDialog.content = this.l10n.getConstant(type);
      var okButton = this.quickDialog.element.querySelector("." + QUICK_DIALOG_ALERT_OK);
      if (okButton) {
        okButton.innerHTML = this.l10n.getConstant("ok");
        okButton.setAttribute("aria-label", okButton.innerHTML);
      }
      var cancelButton = this.quickDialog.element.querySelector("." + QUICK_DIALOG_ALERT_CANCEL);
      if (cancelButton) {
        cancelButton.innerHTML = this.l10n.getConstant("cancel");
        okButton.setAttribute("aria-label", cancelButton.innerHTML);
      }
      this.quickDialogClass("Alert");
      this.showQuickDialog("ValidationAlert", eventData);
    };
    QuickPopups2.prototype.showQuickDialog = function(popupType, eventData) {
      var _this = this;
      this.quickDialog.dataBind();
      var eventProp = {
        type: popupType,
        cancel: false,
        element: this.quickDialog.element,
        data: extend({}, eventData || this.parent.activeEventData.event, null, true)
      };
      this.parent.trigger(popupOpen, eventProp, function(popupArgs) {
        if (!popupArgs.cancel) {
          _this.quickDialog.show();
        }
      });
    };
    QuickPopups2.prototype.createMoreEventList = function(eventCollection, groupOrder, groupIndex) {
      var _this = this;
      var fields = this.parent.eventFields;
      var moreEventContentEle = createElement("div", { className: MORE_EVENT_CONTENT_CLASS });
      var moreEventWrapperEle = createElement("div", { className: MORE_EVENT_WRAPPER_CLASS });
      if (eventCollection.length === 0) {
        moreEventWrapperEle = createElement("div", {
          className: MORE_EVENT_CONTENT_CLASS,
          innerHTML: this.l10n.getConstant("emptyContainer")
        });
      } else {
        var _loop_1 = function(eventData2) {
          var eventText = eventData2[fields.subject] || this_1.parent.eventSettings.fields.subject.default || this_1.parent.localeObj.getConstant("addTitle");
          var appointmentElement = createElement("div", {
            className: APPOINTMENT_CLASS,
            attrs: {
              "data-id": "" + eventData2[fields.id],
              "data-guid": eventData2.Guid,
              "role": "button",
              "tabindex": "0",
              "aria-disabled": this_1.parent.eventBase.getReadonlyAttribute(eventData2),
              "aria-label": this_1.parent.getAnnouncementString(eventData2)
            }
          });
          if (eventData2[fields.isReadonly]) {
            addClass([appointmentElement], "e-read-only");
          }
          var templateElement = void 0;
          if (!isNullOrUndefined(this_1.parent.activeViewOptions.eventTemplate)) {
            var tempId = this_1.parent.element.id + "_" + this_1.parent.activeViewOptions.eventTemplateName + "eventTemplate";
            templateElement = this_1.parent.getAppointmentTemplate()(eventData2, this_1.parent, "eventTemplate", tempId, false, void 0, void 0, this_1.parent.root);
            append(templateElement, appointmentElement);
          } else {
            appointmentElement.appendChild(createElement("div", { className: SUBJECT_CLASS }));
            this_1.parent.sanitize(eventText, appointmentElement.firstElementChild);
          }
          if (!isNullOrUndefined(groupIndex)) {
            appointmentElement.setAttribute("data-group-index", groupIndex);
          }
          if (!isNullOrUndefined(eventData2[fields.recurrenceRule])) {
            var iconClass = eventData2[fields.id] === eventData2[fields.recurrenceID] ? EVENT_RECURRENCE_ICON_CLASS : EVENT_RECURRENCE_EDIT_ICON_CLASS;
            appointmentElement.appendChild(createElement("div", { className: ICON + " " + iconClass }));
          }
          var args = {
            data: extend({}, eventData2, null, true),
            element: appointmentElement,
            cancel: false
          };
          this_1.parent.trigger(eventRendered, args, function(eventArgs) {
            if (!eventArgs.cancel) {
              moreEventWrapperEle.appendChild(appointmentElement);
              var isPreventCrud = _this.parent.isAdaptive || _this.parent.currentView === "Year";
              _this.parent.eventBase.wireAppointmentEvents(appointmentElement, eventData2, isPreventCrud);
              _this.parent.eventBase.applyResourceColor(appointmentElement, eventData2, "backgroundColor", groupOrder);
            }
          });
        };
        var this_1 = this;
        for (var _i = 0, eventCollection_1 = eventCollection; _i < eventCollection_1.length; _i++) {
          var eventData = eventCollection_1[_i];
          _loop_1(eventData);
        }
      }
      moreEventContentEle.appendChild(moreEventWrapperEle);
      return moreEventContentEle;
    };
    QuickPopups2.prototype.tapHoldEventPopup = function(e) {
      var target = closest(e.target, "." + APPOINTMENT_CLASS);
      this.parent.selectedElements = [];
      this.isMultipleEventSelect = true;
      this.parent.eventBase.getSelectedEventElements(target);
      this.parent.activeEventData = this.parent.eventBase.getSelectedEvents();
      var guid = target.getAttribute("data-guid");
      var eventObj = this.parent.eventBase.getEventByGuid(guid);
      if (isNullOrUndefined(eventObj)) {
        return;
      }
      var eventTitle = eventObj[this.parent.eventFields.subject] || this.l10n.getConstant("noTitle");
      var eventTemplate = '<div class="' + MULTIPLE_EVENT_POPUP_CLASS + '"><div class="' + POPUP_HEADER_CLASS + '">' + ('<button class="' + CLOSE_CLASS + '" title="' + this.l10n.getConstant("close") + '"></button>') + ('<div class="' + SUBJECT_CLASS + '">' + eventTitle + "</div>") + ('<button class="' + EDIT_CLASS + '" title="' + this.l10n.getConstant("edit") + '"></button>') + ('<button class="' + DELETE_CLASS + '" title="' + this.l10n.getConstant("delete") + '"></button></div></div>');
      this.quickPopup.element.innerHTML = eventTemplate;
      var closeIcon = this.quickPopup.element.querySelector("." + CLOSE_CLASS);
      this.renderButton("e-flat e-round e-small", ICON + " " + CLOSE_ICON_CLASS, false, closeIcon, this.closeClick);
      var readonly = this.parent.activeViewOptions.readonly || eventObj[this.parent.eventFields.isReadonly];
      var editAction = !this.parent.eventSettings.allowEditing || readonly;
      var deleteAction = !this.parent.eventSettings.allowDeleting || readonly;
      var editIcon = this.quickPopup.element.querySelector("." + EDIT_CLASS);
      if (editIcon) {
        this.renderButton("e-flat e-round e-small", ICON + " " + EDIT_ICON_CLASS, editAction, editIcon, this.editClick);
      }
      var deleteIcon = this.quickPopup.element.querySelector("." + DELETE_CLASS);
      if (deleteIcon) {
        this.renderButton("e-flat e-round e-small", ICON + " " + DELETE_ICON_CLASS, deleteAction, deleteIcon, this.deleteClick);
      }
      this.beforeQuickPopupOpen(target, this.parent.eventBase.getPageCoordinates(e));
    };
    QuickPopups2.prototype.isCellBlocked = function(args) {
      var tempObj = {};
      tempObj[this.parent.eventFields.startTime] = this.parent.activeCellsData.startTime;
      tempObj[this.parent.eventFields.endTime] = this.parent.activeCellsData.endTime;
      tempObj[this.parent.eventFields.isAllDay] = this.parent.activeCellsData.isAllDay;
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        var targetCell = args.element instanceof Array ? args.element[0] : args.element;
        var groupIndex = parseInt(targetCell.getAttribute("data-group-index"), 10);
        this.parent.resourceBase.setResourceValues(tempObj, isNaN(groupIndex) ? null : groupIndex);
      }
      return this.parent.eventBase.isBlockRange(tempObj);
    };
    QuickPopups2.prototype.cellClick = function(args) {
      var date = new Date(args.startTime.getTime());
      if (!this.parent.showQuickInfo || !this.parent.eventSettings.allowAdding || this.parent.currentView === "MonthAgenda" || this.isCellBlocked(args) || !this.parent.isMinMaxDate(new Date(date.setHours(0, 0, 0, 0)))) {
        this.quickPopupHide();
        return;
      }
      var targetEle = !isNullOrUndefined(args.event) ? args.event.target : args.element;
      if (this.parent.isAdaptive) {
        this.quickPopupHide();
        var newEventClone = this.parent.element.querySelector("." + NEW_EVENT_CLASS);
        if (isNullOrUndefined(newEventClone)) {
          newEventClone = createElement("div", {
            className: NEW_EVENT_CLASS,
            innerHTML: '<div class="e-title">+ ' + this.l10n.getConstant("newEvent") + "</div>"
          });
        }
        var targetCell = closest(targetEle, "." + WORK_CELLS_CLASS + ",." + ALLDAY_CELLS_CLASS);
        if (targetCell) {
          targetCell.appendChild(newEventClone);
        }
        return;
      }
      var target = closest(targetEle, "." + WORK_CELLS_CLASS + ",." + ALLDAY_CELLS_CLASS + ",." + HEADER_CELLS_CLASS);
      if (isNullOrUndefined(target) || targetEle.classList.contains(MORE_INDICATOR_CLASS)) {
        return;
      }
      var isSameTarget = this.quickPopup.relateTo === target;
      if (isSameTarget && this.quickPopup.element.classList.contains(POPUP_OPEN)) {
        var subjectElement_1 = this.quickPopup.element.querySelector("." + SUBJECT_CLASS);
        if (subjectElement_1) {
          subjectElement_1.focus();
        }
        return;
      } else if (this.quickPopup.element) {
        this.destroyPopupButtons("quickPopup");
      }
      var temp = {};
      temp[this.parent.eventFields.startTime] = this.parent.activeCellsData.startTime;
      temp[this.parent.eventFields.endTime] = this.parent.activeCellsData.endTime;
      temp[this.parent.eventFields.isAllDay] = this.parent.activeCellsData.isAllDay;
      var quickCellPopup = createElement("div", { className: CELL_POPUP_CLASS });
      quickCellPopup.appendChild(this.getPopupHeader("Cell", temp));
      quickCellPopup.appendChild(this.getPopupContent("Cell", args, temp));
      quickCellPopup.appendChild(this.getPopupFooter("Cell", temp));
      this.quickPopup.element.setAttribute("aria-label", this.l10n.getConstant("newEvent"));
      var subjectElement = quickCellPopup.querySelector("." + SUBJECT_CLASS);
      if (subjectElement) {
        Input.createInput({ element: subjectElement, properties: { placeholder: this.l10n.getConstant("addTitle") } });
      }
      if (!isNullOrUndefined(this.parent.eventSettings.fields.subject.default)) {
        subjectElement.value = this.parent.eventSettings.fields.subject.default;
      }
      var closeIcon = quickCellPopup.querySelector("." + CLOSE_CLASS);
      if (closeIcon) {
        this.renderButton("e-flat e-round e-small", ICON + " " + CLOSE_ICON_CLASS, false, closeIcon, this.popupClose);
      }
      var moreButton = quickCellPopup.querySelector("." + QUICK_POPUP_EVENT_DETAILS_CLASS);
      if (moreButton) {
        this.renderButton("e-flat", "", false, moreButton, this.detailsClick);
      }
      var saveButton = quickCellPopup.querySelector("." + EVENT_CREATE_CLASS);
      if (saveButton) {
        this.renderButton("e-flat e-primary", "", this.parent.activeViewOptions.readonly, saveButton, this.saveClick);
      }
      if (this.morePopup) {
        this.morePopup.hide();
      }
      this.quickPopup.content = quickCellPopup;
      this.quickPopup.relateTo = target;
      this.quickPopup.dataBind();
      this.beforeQuickPopupOpen(target, this.parent.eventBase.getPageCoordinates(args.event));
    };
    QuickPopups2.prototype.isSameEventClick = function(events) {
      var isSameTarget = this.quickPopup.relateTo === closest(events.element, "." + APPOINTMENT_CLASS);
      if (isSameTarget && this.quickPopup.element.classList.contains(POPUP_OPEN)) {
        var editIcon = this.quickPopup.element.querySelector("." + EDIT_CLASS);
        if (editIcon) {
          editIcon.focus();
        }
        if (!this.parent.isAdaptive) {
          var editButton = this.quickPopup.element.querySelector("." + EDIT_EVENT_CLASS);
          if (editButton) {
            editButton.focus();
          }
        }
        return true;
      }
      return false;
    };
    QuickPopups2.prototype.isQuickTemplate = function(type) {
      return this.parent.quickInfoTemplates.templateType === "Both" || this.parent.quickInfoTemplates.templateType === type;
    };
    QuickPopups2.prototype.eventClick = function(events) {
      if (this.parent.eventTooltip) {
        this.parent.eventTooltip.close();
      }
      if (!this.parent.showQuickInfo) {
        return;
      }
      if (this.parent.isAdaptive && this.isMultipleEventSelect) {
        this.updateTapHoldEventPopup(closest(events.element, "." + APPOINTMENT_CLASS));
      } else {
        var isSameTarget = this.isSameEventClick(events);
        this.parent.selectedElements = [];
        if (isSameTarget) {
          return;
        } else if (this.quickPopup.element) {
          this.destroyPopupButtons("quickPopup");
        }
        var eventData = events.event;
        var quickEventPopup = createElement("div", { className: EVENT_POPUP_CLASS });
        quickEventPopup.appendChild(this.getPopupHeader("Event", eventData));
        quickEventPopup.appendChild(this.getPopupContent("Event", events, eventData));
        quickEventPopup.appendChild(this.getPopupFooter("Event", eventData));
        this.quickPopup.element.setAttribute("aria-label", this.l10n.getConstant("editEvent"));
        var readonly = this.parent.activeViewOptions.readonly || eventData[this.parent.eventFields.isReadonly];
        var editAction = !this.parent.eventSettings.allowEditing || readonly;
        var deleteAction = !this.parent.eventSettings.allowDeleting || readonly;
        var editIcon = quickEventPopup.querySelector("." + EDIT_CLASS);
        var buttonClass = "e-flat e-round e-small";
        if (editIcon) {
          this.renderButton(buttonClass, ICON + " " + EDIT_ICON_CLASS, editAction, editIcon, this.editClick);
        }
        var deleteIcon = quickEventPopup.querySelector("." + DELETE_CLASS);
        if (deleteIcon) {
          this.renderButton(buttonClass, ICON + " " + DELETE_ICON_CLASS, deleteAction, deleteIcon, this.deleteClick);
        }
        var closeIcon = quickEventPopup.querySelector("." + CLOSE_CLASS);
        if (closeIcon) {
          this.renderButton(buttonClass, ICON + " " + CLOSE_ICON_CLASS, false, closeIcon, this.popupClose);
        }
        var editButton = quickEventPopup.querySelector("." + EDIT_EVENT_CLASS);
        if (editButton) {
          this.renderButton("e-flat e-primary", "", editAction, editButton, this.editClick);
        }
        var deleteButton = quickEventPopup.querySelector("." + DELETE_EVENT_CLASS);
        if (deleteButton) {
          this.renderButton("e-flat", "", deleteAction, deleteButton, this.deleteClick);
        }
        if (this.morePopup && !closest(events.element, "." + MORE_EVENT_WRAPPER_CLASS)) {
          this.morePopup.hide();
        }
        this.quickPopup.content = quickEventPopup;
        this.quickPopup.relateTo = this.parent.isAdaptive ? document.body : closest(events.element, "." + APPOINTMENT_CLASS);
        this.quickPopup.dataBind();
        this.beforeQuickPopupOpen(events.element, this.parent.eventBase.getPageCoordinates(events.originalEvent));
      }
    };
    QuickPopups2.prototype.getPopupHeader = function(headerType, headerData) {
      var headerTemplate = createElement("div", { className: POPUP_HEADER_CLASS });
      if (this.isQuickTemplate(headerType) && this.parent.quickInfoTemplates.header) {
        var headerArgs = extend({}, headerData, { elementType: headerType.toLowerCase() }, true);
        var templateId = this.parent.element.id;
        var headerTemp = [].slice.call(this.parent.getQuickInfoTemplatesHeader()(headerArgs, this.parent, "header", templateId + "_headerTemplate", false));
        append([].slice.call(headerTemp), headerTemplate);
      } else {
        var header = void 0;
        var args = void 0;
        switch (headerType) {
          case "Cell":
            header = '<div class="' + POPUP_HEADER_ICON_WRAPPER + '"><button class="' + CLOSE_CLASS + '" title=' + ('"' + this.l10n.getConstant("close") + '"></button></div>');
            break;
          case "Event":
            args = this.getFormattedString(headerData);
            header = '<div class="' + POPUP_HEADER_ICON_WRAPPER + '">' + ('<button class="' + (EDIT_CLASS + " " + ICON) + '" title="' + this.l10n.getConstant("edit") + '"></button>') + ('<button class="' + (DELETE_CLASS + " " + ICON) + '" title="' + this.l10n.getConstant("delete") + '"></button>') + ('<button class="' + CLOSE_CLASS + '" title="' + this.l10n.getConstant("close") + '"></button></div>') + ('<div class="' + SUBJECT_WRAP + '"><div class="' + SUBJECT_CLASS + " " + TEXT_ELLIPSIS + '" ') + ('title="' + (args.eventSubject ? args.eventSubject.replaceAll('"', "'") : args.eventSubject) + '"></div></div >');
            break;
        }
        var templateWrapper = createElement("div", { innerHTML: header });
        if (headerType === "Event") {
          var subjectText = templateWrapper.querySelector("." + SUBJECT_CLASS);
          this.parent.sanitize(args.eventSubject, subjectText);
        }
        append([].slice.call(templateWrapper.childNodes), headerTemplate);
      }
      return headerTemplate;
    };
    QuickPopups2.prototype.getPopupContent = function(type, args, data) {
      var contentTemplate = createElement("div", { className: POPUP_CONTENT_CLASS });
      if (this.isQuickTemplate(type) && this.parent.quickInfoTemplates.content) {
        var contentArgs = extend({}, data, { elementType: type.toLowerCase() }, true);
        var templateId = this.parent.element.id;
        var contentTemp = [].slice.call(this.parent.getQuickInfoTemplatesContent()(contentArgs, this.parent, "content", templateId + "_contentTemplate", false));
        append([].slice.call(contentTemp), contentTemplate);
      } else {
        var content = void 0;
        var cellDetails = void 0;
        var argsData = void 0;
        var resourceText = this.getResourceText(args, type.toLowerCase());
        switch (type) {
          case "Cell":
            cellDetails = this.getFormattedString(data);
            content = '<table class="' + POPUP_TABLE_CLASS + '"><tbody><tr><td><form class="' + FORM_CLASS + '" onsubmit=' + ('"return false;"><input class="' + SUBJECT_CLASS + " " + EVENT_FIELD + '" type="text" name=') + ('"' + this.parent.eventFields.subject + '" /></form></td></tr><tr><td><div class="' + DATE_TIME_CLASS + '">') + ('<div class="' + DATE_TIME_ICON_CLASS + " " + ICON + '"></div><div class="' + DATE_TIME_DETAILS_CLASS + " ") + (TEXT_ELLIPSIS + '">' + cellDetails.details + "</div></div>") + ((this.parent.activeViewOptions.group.resources.length > 0 ? '<div class="' + RESOURCE_CLASS + '">' + ('<div class="' + RESOURCE_ICON_CLASS + " " + ICON + ' "></div><div class="' + RESOURCE_DETAILS_CLASS + " ") + (TEXT_ELLIPSIS + '"></div></div>') : "") + "</td></tr></tbody></table>");
            break;
          case "Event":
            argsData = this.getFormattedString(data);
            content = '<div class="' + DATE_TIME_CLASS + '"><div class="' + DATE_TIME_ICON_CLASS + " " + ICON + '"></div><div class="' + DATE_TIME_WRAPPER_CLASS + " " + TEXT_ELLIPSIS + '"><div class="' + DATE_TIME_DETAILS_CLASS + " " + TEXT_ELLIPSIS + '">' + argsData.details + "</div>";
            if (data[this.parent.eventFields.recurrenceRule]) {
              content += '<div class="' + RECURRENCE_SUMMARY_CLASS + " " + TEXT_ELLIPSIS + '">' + this.getRecurrenceSummary(data) + "</div>";
            }
            content += "</div></div>";
            if (data[this.parent.eventFields.location]) {
              content += '<div class="' + LOCATION_CLASS + '"><div class="' + LOCATION_ICON_CLASS + " " + ICON + '"></div><div class="' + LOCATION_DETAILS_CLASS + " " + TEXT_ELLIPSIS + '"></div></div>';
            }
            if (data[this.parent.eventFields.startTimezone] || data[this.parent.eventFields.endTimezone]) {
              content += '<div class="' + TIME_ZONE_CLASS + '"><div class="' + TIME_ZONE_ICON_CLASS + " " + ICON + '"></div><div class="' + TIME_ZONE_DETAILS_CLASS + " " + TEXT_ELLIPSIS + '">' + this.getTimezone(data) + "</div></div>";
            }
            if (data[this.parent.eventFields.description]) {
              content += '<div class="' + DESCRIPTION_CLASS + '"><div class="' + DESCRIPTION_ICON_CLASS + " " + ICON + '"></div><div class="' + DESCRIPTION_DETAILS_CLASS + " " + TEXT_ELLIPSIS + '"></div></div>';
            }
            if (this.parent.resourceCollection.length > 0) {
              content += '<div class="' + RESOURCE_CLASS + '"><div class="' + RESOURCE_ICON_CLASS + " " + ICON + '"></div><div class="' + RESOURCE_DETAILS_CLASS + " " + TEXT_ELLIPSIS + '"></div></div>';
            }
            break;
        }
        var templateWrapper = createElement("div", { innerHTML: content });
        if (data[this.parent.eventFields.location]) {
          var locationDetails = templateWrapper.querySelector("." + LOCATION_DETAILS_CLASS);
          if (!isNullOrUndefined(locationDetails)) {
            this.parent.sanitize(data[this.parent.eventFields.location], locationDetails);
          }
        }
        if (data[this.parent.eventFields.description]) {
          var descriptionDetails = templateWrapper.querySelector("." + DESCRIPTION_DETAILS_CLASS);
          if (!isNullOrUndefined(descriptionDetails)) {
            this.parent.sanitize(data[this.parent.eventFields.description], descriptionDetails);
          }
        }
        if (resourceText) {
          var resourceDetails = templateWrapper.querySelector("." + RESOURCE_DETAILS_CLASS);
          if (!isNullOrUndefined(resourceDetails)) {
            this.parent.sanitize(resourceText, resourceDetails);
          }
        }
        append([].slice.call(templateWrapper.childNodes), contentTemplate);
      }
      return contentTemplate;
    };
    QuickPopups2.prototype.getPopupFooter = function(footerType, footerData) {
      var footerTemplate = createElement("div", { className: POPUP_FOOTER_CLASS });
      if (this.isQuickTemplate(footerType) && this.parent.quickInfoTemplates.footer) {
        var footerArgs = extend({}, footerData, { elementType: footerType.toLowerCase() }, true);
        var templateId = this.parent.element.id;
        var footerTemp = [].slice.call(this.parent.getQuickInfoTemplatesFooter()(footerArgs, this.parent, "footer", templateId + "_footerTemplate", false));
        append([].slice.call(footerTemp), footerTemplate);
      } else {
        var footer = void 0;
        switch (footerType) {
          case "Cell":
            footer = '<button class="' + (QUICK_POPUP_EVENT_DETAILS_CLASS + " " + TEXT_ELLIPSIS) + '" title=' + ('"' + this.l10n.getConstant("moreDetails") + '">' + this.l10n.getConstant("moreDetails") + "</button>") + ('<button class="' + EVENT_CREATE_CLASS + " " + TEXT_ELLIPSIS + '" title="' + this.l10n.getConstant("save") + '">') + (this.l10n.getConstant("save") + "</button>");
            break;
          case "Event":
            footer = this.parent.isAdaptive ? "" : '<button class="' + EDIT_EVENT_CLASS + " " + (TEXT_ELLIPSIS + '" title="' + this.l10n.getConstant("edit") + '">' + this.l10n.getConstant("edit") + "</button>") + ('<button class="' + DELETE_EVENT_CLASS + " " + TEXT_ELLIPSIS + '" title="' + this.l10n.getConstant("delete") + '">') + (this.l10n.getConstant("delete") + "</button>");
            break;
        }
        var templateWrapper = createElement("div", { innerHTML: footer });
        append([].slice.call(templateWrapper.childNodes), footerTemplate);
      }
      return footerTemplate;
    };
    QuickPopups2.prototype.getResourceText = function(args, type) {
      if (this.parent.resourceCollection.length === 0) {
        return null;
      }
      var resourceValue = "";
      if (this.parent.activeViewOptions.group.resources.length === 0) {
        var resourceCollection_1 = this.parent.resourceBase.resourceCollection.slice(-1)[0];
        var resourceData = resourceCollection_1.dataSource;
        if (type === "event") {
          var eventData = args.event;
          var _loop_2 = function(data2) {
            var resourceId = eventData[resourceCollection_1.field];
            if (resourceId instanceof Array) {
              if (resourceId.indexOf(data2[resourceCollection_1.idField]) > -1) {
                var id_1 = resourceId[resourceId.indexOf(data2[resourceCollection_1.idField])];
                var resource = resourceData.filter(function(e) {
                  return e[resourceCollection_1.idField] === id_1;
                })[0];
                resourceValue += resourceValue === "" ? resource[resourceCollection_1.textField] : ", " + resource[resourceCollection_1.textField];
              }
            } else if (data2[resourceCollection_1.idField] === resourceId) {
              resourceValue = data2[resourceCollection_1.textField].toString();
            }
          };
          for (var _i = 0, resourceData_1 = resourceData; _i < resourceData_1.length; _i++) {
            var data = resourceData_1[_i];
            _loop_2(data);
          }
        } else {
          resourceValue = resourceData[0][resourceCollection_1.textField].toString();
        }
      } else {
        if (type === "event") {
          var eventData = args.event;
          var resourceData = void 0;
          var lastResource_1;
          for (var i = this.parent.resourceBase.resourceCollection.length - 1; i >= 0; i--) {
            resourceData = eventData[this.parent.resourceBase.resourceCollection[parseInt(i.toString(), 10)].field];
            if (!isNullOrUndefined(resourceData)) {
              lastResource_1 = this.parent.resourceBase.resourceCollection[parseInt(i.toString(), 10)];
              break;
            }
          }
          if (!Array.isArray(resourceData)) {
            resourceData = [resourceData];
          }
          var resNames_1 = [];
          var lastResourceData_1 = lastResource_1.dataSource;
          resourceData.forEach(function(value) {
            var text;
            var i2 = findIndexInData(lastResourceData_1, lastResource_1.idField, value);
            if (i2 > -1) {
              text = lastResourceData_1[parseInt(i2.toString(), 10)][lastResource_1.textField];
            }
            if (text) {
              resNames_1.push(text);
            }
          });
          resourceValue = resNames_1.join(", ");
        } else {
          var argsData = args;
          var groupIndex = !isNullOrUndefined(argsData.groupIndex) ? argsData.groupIndex : 0;
          var resourceDetails = this.parent.resourceBase.lastResourceLevel[parseInt(groupIndex.toString(), 10)];
          resourceValue = resourceDetails.resourceData[resourceDetails.resource.textField];
        }
      }
      return resourceValue;
    };
    QuickPopups2.prototype.getFormattedString = function(eventData) {
      var fields = this.parent.eventFields;
      var eventSubject = eventData[fields.subject] || this.l10n.getConstant("noTitle");
      var startDate = eventData[fields.startTime];
      var endDate = eventData[fields.endTime];
      var startDateDetails = this.getDateFormat(startDate, "long");
      var endDateDetails = eventData[fields.isAllDay] && endDate.getHours() === 0 && endDate.getMinutes() === 0 ? this.getDateFormat(addDays(new Date(endDate.getTime()), -1), "long") : this.getDateFormat(endDate, "long");
      var startTimeDetail = this.parent.getTimeString(startDate);
      var endTimeDetail = this.parent.getTimeString(endDate);
      var details = "";
      var spanLength = endDate.getDate() !== startDate.getDate() && (endDate.getTime() - startDate.getTime()) / (60 * 60 * 1e3) < 24 ? 1 : 0;
      if (eventData[fields.isAllDay]) {
        details = startDateDetails + " (" + this.l10n.getConstant("allDay") + ")";
        if ((getUniversalTime(endDate) - getUniversalTime(startDate)) / MS_PER_DAY > 1) {
          details += "&nbsp;-&nbsp;" + endDateDetails + " (" + this.l10n.getConstant("allDay") + ")";
        }
      } else if ((getUniversalTime(endDate) - getUniversalTime(startDate)) / MS_PER_DAY >= 1 || spanLength > 0) {
        details = startDateDetails + " (" + startTimeDetail + ")&nbsp;-&nbsp;" + endDateDetails + " (" + endTimeDetail + ")";
      } else {
        details = startDateDetails + " (" + (startTimeDetail + "&nbsp;-&nbsp;" + endTimeDetail) + ")";
      }
      return { eventSubject, details };
    };
    QuickPopups2.prototype.moreEventClick = function(data, endDate, groupIndex) {
      var _this = this;
      this.quickPopupHide(true);
      var moreEventContentEle = this.morePopup.element.querySelector("." + MORE_EVENT_CONTENT_CLASS);
      if (moreEventContentEle) {
        remove(moreEventContentEle);
      }
      var selectedDate = data.date.getTime().toString();
      var target = closest(data.element, "." + MORE_INDICATOR_CLASS + ",." + WORK_CELLS_CLASS);
      var day = this.parent.globalize.formatDate(data.date, { format: "E", calendar: this.parent.getCalendarMode() });
      this.morePopup.element.querySelector("." + MORE_EVENT_HEADER_DAY_CLASS).innerHTML = capitalizeFirstWord(day, "single");
      var dateElement = this.morePopup.element.querySelector("." + MORE_EVENT_HEADER_DATE_CLASS);
      dateElement.innerHTML = this.getDateFormat(data.date, "d");
      dateElement.setAttribute("data-date", selectedDate);
      dateElement.setAttribute("data-end-date", endDate.getTime().toString());
      var groupOrder;
      if (!isNullOrUndefined(groupIndex)) {
        dateElement.setAttribute("data-group-index", groupIndex);
        groupOrder = this.parent.resourceBase.lastResourceLevel[parseInt(groupIndex, 10)].groupOrder;
      }
      var moreEventElements = this.createMoreEventList(data.event, groupOrder, groupIndex);
      this.morePopup.element.querySelector("." + MORE_EVENT_POPUP_CLASS).appendChild(moreEventElements);
      removeClass(this.morePopup.element.querySelector("." + MORE_EVENT_DATE_HEADER_CLASS).childNodes, CURRENTDATE_CLASS);
      if (resetTime(data.date).getTime() === resetTime(this.parent.getCurrentTime()).getTime()) {
        addClass(this.morePopup.element.querySelector("." + MORE_EVENT_DATE_HEADER_CLASS).childNodes, CURRENTDATE_CLASS);
      }
      if (!this.parent.isAdaptive) {
        if (this.parent.currentView.indexOf("Timeline") !== -1) {
          var gIndex = target.getAttribute("data-group-index");
          var startDate = new Date(parseInt(target.getAttribute("data-start-date"), 10));
          startDate.setHours(startDate.getHours(), startDate.getMinutes(), 0);
          var tdDate = startDate.getTime().toString();
          if (isNullOrUndefined(gIndex)) {
            this.morePopup.relateTo = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS + ' tbody tr td[data-date="' + tdDate + '"]');
          } else {
            this.morePopup.relateTo = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS + ' tbody tr td[data-group-index="' + gIndex + '"][data-date="' + tdDate + '"]');
            if (isNullOrUndefined(this.morePopup.relateTo)) {
              var workCells = [].slice.call(this.parent.element.querySelectorAll("." + CONTENT_WRAP_CLASS + ' tbody tr td[data-group-index="' + gIndex + '"]'));
              for (var i = 0; i < workCells.length; i++) {
                var date = workCells[parseInt(i.toString(), 10)].getAttribute("data-date");
                if (date < tdDate) {
                  this.morePopup.relateTo = workCells[parseInt(i.toString(), 10)];
                }
              }
            }
          }
        } else {
          this.morePopup.relateTo = closest(target, "." + WORK_CELLS_CLASS);
        }
      }
      this.parent.renderTemplates(function() {
        var eventProp = {
          type: "EventContainer",
          cancel: false,
          element: _this.morePopup.element,
          data
        };
        _this.parent.trigger(popupOpen, eventProp, function(popupArgs) {
          if (!popupArgs.cancel) {
            _this.morePopup.show();
          }
        });
      });
    };
    QuickPopups2.prototype.saveClick = function(event) {
      this.applyFormValidation();
      this.dialogEvent = event;
      this.isCrudAction = true;
      this.quickPopupHide();
    };
    QuickPopups2.prototype.detailsClick = function(event) {
      var subjectEle = this.quickPopup.element.querySelector("." + SUBJECT_CLASS);
      if (subjectEle && subjectEle.value !== "") {
        extend(this.parent.activeCellsData, { subject: subjectEle.value });
      }
      this.dialogEvent = event;
      this.isCrudAction = false;
      this.fieldValidator.destroyToolTip();
      this.quickPopupHide();
      this.parent.eventWindow.openEditor(this.parent.activeCellsData, "Add");
    };
    QuickPopups2.prototype.editClick = function(event) {
      this.dialogEvent = event;
      this.quickPopupHide(true);
      var data = this.parent.activeEventData.event;
      this.parent.currentAction = "EditSeries";
      if (!isNullOrUndefined(data[this.parent.eventFields.recurrenceRule])) {
        this.parent.currentAction = "EditOccurrence";
        this.openRecurrenceAlert();
      } else {
        this.parent.eventWindow.openEditor(data, this.parent.currentAction);
      }
    };
    QuickPopups2.prototype.deleteClick = function(event) {
      this.dialogEvent = event;
      this.quickPopupHide(true);
      this.parent.currentAction = "Delete";
      if (this.parent.activeEventData.event[this.parent.eventFields.recurrenceRule]) {
        this.openRecurrenceAlert();
      } else {
        this.openDeleteAlert();
      }
    };
    QuickPopups2.prototype.updateMoreEventContent = function() {
      if (this.morePopup.element.classList.contains("e-popup-close")) {
        return;
      }
      var moreEventContentEle = this.morePopup.element.querySelector("." + MORE_EVENT_CONTENT_CLASS);
      if (moreEventContentEle) {
        remove(moreEventContentEle);
      }
      var dateElement = this.morePopup.element.querySelector("." + MORE_EVENT_HEADER_DATE_CLASS);
      var startDate = new Date(parseInt(dateElement.getAttribute("data-date"), 10));
      var endDate = new Date(parseInt(dateElement.getAttribute("data-end-date"), 10));
      var groupIndex = dateElement.getAttribute("data-group-index");
      var data;
      var groupOrder;
      if (!isNullOrUndefined(groupIndex)) {
        data = this.parent.resourceBase.lastResourceLevel[parseInt(groupIndex, 10)];
        groupOrder = data.groupOrder;
      }
      var events = this.parent.eventBase.filterEvents(startDate, endDate, this.parent.eventsProcessed, data);
      var moreElement = this.createMoreEventList(events, groupOrder, groupIndex);
      this.morePopup.element.querySelector("." + MORE_EVENT_POPUP_CLASS).appendChild(moreElement);
    };
    QuickPopups2.prototype.closeClick = function(event) {
      this.dialogEvent = event;
      if (this.parent.currentView === "Year" && this.parent.activeCellsData && this.parent.activeCellsData.element) {
        this.parent.selectCell(this.parent.activeCellsData.element);
      }
      this.quickPopupHide();
      this.morePopup.hide();
    };
    QuickPopups2.prototype.dialogButtonClick = function(event) {
      this.dialogEvent = event;
      this.quickDialog.hide();
      var target = event.target;
      var cancelBtn = this.quickDialog.element.querySelector("." + QUICK_DIALOG_ALERT_CANCEL);
      var eventData = this.parent.activeEventData.event;
      if (target.classList.contains(QUICK_DIALOG_OCCURRENCE_CLASS)) {
        this.parent.currentAction = this.parent.currentAction === "Delete" ? "DeleteOccurrence" : "EditOccurrence";
        switch (this.parent.currentAction) {
          case "EditOccurrence":
            this.parent.eventWindow.openEditor(eventData, this.parent.currentAction);
            break;
          case "DeleteOccurrence":
            this.parent.crudModule.deleteEvent(eventData, this.parent.currentAction);
            break;
        }
      } else if (target.classList.contains(QUICK_DIALOG_FOLLOWING_EVENTS_CLASS)) {
        this.parent.currentAction = this.parent.currentAction === "Delete" ? "DeleteFollowingEvents" : "EditFollowingEvents";
        switch (this.parent.currentAction) {
          case "EditFollowingEvents":
            this.parent.eventWindow.openEditor(eventData, this.parent.currentAction);
            break;
          case "DeleteFollowingEvents":
            this.parent.crudModule.deleteEvent(eventData, this.parent.currentAction);
            break;
        }
      } else if (target.classList.contains(QUICK_DIALOG_SERIES_CLASS)) {
        this.parent.currentAction = this.parent.currentAction === "Delete" ? "DeleteSeries" : "EditSeries";
        switch (this.parent.currentAction) {
          case "EditSeries":
            this.parent.eventWindow.openEditor(this.parent.eventBase.getParentEvent(eventData, true), this.parent.currentAction);
            break;
          case "DeleteSeries":
            this.parent.crudModule.deleteEvent(eventData, this.parent.currentAction);
            break;
        }
      } else if (target.classList.contains(QUICK_DIALOG_DELETE_CLASS)) {
        this.parent.crudModule.deleteEvent(eventData, this.parent.currentAction);
      } else if (!cancelBtn.classList.contains(DISABLE_CLASS) && (target.classList.contains(QUICK_DIALOG_ALERT_OK) || target.classList.contains(QUICK_DIALOG_ALERT_CANCEL) && !cancelBtn.classList.contains(QUICK_DIALOG_CANCEL_CLASS))) {
        this.parent.uiStateValues.isIgnoreOccurrence = target.classList.contains(QUICK_DIALOG_ALERT_CANCEL);
        this.parent.eventWindow.eventSave(event, this.l10n.getConstant("ok"));
      }
    };
    QuickPopups2.prototype.updateTapHoldEventPopup = function(target) {
      var selectedElements = this.parent.eventBase.getSelectedEventElements(target);
      this.parent.activeEventData = this.parent.eventBase.getSelectedEvents();
      if (selectedElements.length > 0) {
        var eventObj = this.parent.eventBase.getEventByGuid(selectedElements[0].getAttribute("data-guid"));
        var titleContent = selectedElements.length === 1 ? eventObj[this.parent.eventFields.subject] || this.l10n.getConstant("noTitle") : "(" + selectedElements.length + ")&nbsp;" + this.l10n.getConstant("selectedItems");
        this.quickPopup.element.querySelector("." + SUBJECT_CLASS).innerHTML = titleContent;
        if (selectedElements.length > 1) {
          addClass([this.quickPopup.element.querySelector("." + EDIT_ICON_CLASS)], HIDDEN_CLASS);
        } else {
          removeClass([this.quickPopup.element.querySelector("." + EDIT_ICON_CLASS)], HIDDEN_CLASS);
        }
      } else {
        this.parent.selectedElements = [];
        this.quickPopupHide();
      }
    };
    QuickPopups2.prototype.getTimezone = function(event) {
      var zoneDetails = "";
      zoneDetails += event[this.parent.eventFields.startTimezone] || "";
      zoneDetails += zoneDetails === "" ? "" : " - ";
      zoneDetails += event[this.parent.eventFields.endTimezone] || "";
      return zoneDetails;
    };
    QuickPopups2.prototype.getRecurrenceSummary = function(event) {
      var recurrenceEditor = this.parent.eventWindow.getRecurrenceEditorInstance();
      if (recurrenceEditor) {
        var ruleSummary = recurrenceEditor.getRuleSummary(event[this.parent.eventFields.recurrenceRule]);
        return ruleSummary.charAt(0).toUpperCase() + ruleSummary.slice(1);
      }
      return "";
    };
    QuickPopups2.prototype.getDateFormat = function(date, skeletonString) {
      return capitalizeFirstWord(this.parent.globalize.formatDate(date, { skeleton: skeletonString, calendar: this.parent.getCalendarMode() }), "single");
    };
    QuickPopups2.prototype.getDataFromTarget = function(target) {
      if (target.classList.contains(APPOINTMENT_CLASS)) {
        return this.parent.activeEventData.event;
      }
      var eventObj = {
        startTime: this.parent.activeCellsData.startTime,
        endTime: this.parent.activeCellsData.endTime,
        isAllDay: this.parent.activeCellsData.isAllDay,
        groupIndex: this.parent.activeCellsData.groupIndex
      };
      var cellsData = this.parent.activeCellsData;
      this.parent.eventWindow.convertToEventData(cellsData, eventObj);
      return eventObj;
    };
    QuickPopups2.prototype.beforeQuickDialogClose = function(e) {
      var _this = this;
      var args = {
        event: e.event || this.dialogEvent,
        type: isNullOrUndefined(this.parent.activeEventData.event) ? "ValidationAlert" : !isNullOrUndefined(this.parent.activeEventData.event[this.parent.eventFields.recurrenceRule]) ? "RecurrenceAlert" : "DeleteAlert",
        cancel: false,
        data: this.parent.activeEventData.event,
        element: this.quickDialog.element
      };
      this.parent.trigger(popupClose, args, function(popupCloseArgs) {
        if (!popupCloseArgs.cancel) {
          _this.parent.eventBase.focusElement(true);
        }
      });
    };
    QuickPopups2.prototype.beforeQuickPopupOpen = function(target, originalEvent) {
      var _this = this;
      this.parent.renderTemplates(function() {
        var isEventPopup = _this.quickPopup.element.querySelector("." + EVENT_POPUP_CLASS);
        var popupType = _this.parent.isAdaptive ? isEventPopup ? "ViewEventInfo" : "EditEventInfo" : "QuickInfo";
        var eventProp = {
          type: popupType,
          cancel: false,
          data: extend({}, _this.getDataFromTarget(target), null, true),
          target,
          element: _this.quickPopup.element
        };
        _this.parent.trigger(popupOpen, eventProp, function(popupArgs) {
          if (popupArgs.cancel) {
            _this.quickPopupHide();
            _this.destroyPopupButtons("quickPopup");
            if (popupArgs.element.classList.contains(POPUP_OPEN)) {
              _this.quickPopupClose();
            }
            removeChildren(_this.quickPopup.element);
            _this.isMultipleEventSelect = false;
          } else {
            var display = _this.quickPopup.element.style.display;
            _this.quickPopup.element.style.display = "block";
            if (_this.parent.isAdaptive) {
              _this.quickPopup.element.removeAttribute("style");
              _this.quickPopup.element.style.display = "block";
              _this.quickPopup.element.style.height = formatUnit(popupType === "EditEventInfo" ? 65 : window.innerHeight);
            } else {
              var isVirtualScroll = _this.parent.virtualScrollModule && _this.parent.virtualScrollModule.isHorizontalScroll && !isNullOrUndefined(closest(target, "." + CONTENT_TABLE_CLASS));
              var conTable = _this.parent.element.querySelector("." + CONTENT_WRAP_CLASS + " table");
              _this.quickPopup.offsetX = isVirtualScroll && !_this.parent.enableRtl ? getTranslateX(conTable) + 10 : 10;
              _this.quickPopup.offsetY = _this.parent.virtualScrollModule && !_this.parent.virtualScrollModule.isHorizontalScroll ? _this.quickPopup.offsetY : 0;
              _this.quickPopup.collision = { X: _this.parent.enableRtl ? "flip" : "none", Y: "fit" };
              _this.quickPopup.position = { X: _this.parent.enableRtl ? "left" : "right", Y: _this.parent.enableRtl ? "bottom" : "top" };
              _this.quickPopup.dataBind();
              _this.quickPopup.refreshPosition(null, true);
              var collide = isCollide(_this.quickPopup.element, _this.parent.element);
              if (collide.indexOf(_this.parent.enableRtl ? "left" : "right") > -1) {
                _this.quickPopup.offsetX = -target.offsetWidth - 10 - _this.quickPopup.element.offsetWidth;
                if (isVirtualScroll && !_this.parent.enableRtl) {
                  _this.quickPopup.offsetX = getTranslateX(conTable) + _this.quickPopup.offsetX;
                }
                _this.quickPopup.dataBind();
                _this.quickPopup.refreshPosition(null, true);
                var leftCollide = isCollide(_this.quickPopup.element, _this.parent.element);
                if (leftCollide.indexOf("left") > -1) {
                  _this.quickPopup.position = { X: "center", Y: "center" };
                  _this.quickPopup.collision = { X: "fit", Y: "fit" };
                  _this.quickPopup.offsetX = -(_this.quickPopup.element.offsetWidth / 2);
                  _this.quickPopup.dataBind();
                }
              }
              if (_this.parent.virtualScrollModule && !_this.parent.virtualScrollModule.isHorizontalScroll && (collide.indexOf("top") > -1 || collide.indexOf("bottom") > -1)) {
                var translateY = getTranslateY(conTable);
                _this.quickPopup.offsetY = translateY;
                _this.quickPopup.dataBind();
                _this.quickPopup.refreshPosition(null, true);
              }
              if (_this.quickPopup.position.X === "center" && _this.quickPopup.position.Y === "center" && !isNullOrUndefined(originalEvent) && originalEvent.clientX && originalEvent.clientY) {
                var clientX = originalEvent.clientX;
                var clientY = originalEvent.clientY;
                var targetRect = target.getBoundingClientRect();
                var offsetY = originalEvent.offsetY || Math.ceil(clientY - targetRect.y);
                var previousOffset = _this.quickPopup.offsetY;
                var collision = isCollide(_this.quickPopup.element, target);
                var popupRect = _this.quickPopup.element.getBoundingClientRect();
                var targetEle = document.elementFromPoint(clientX, clientY);
                if (collision.indexOf("top") > -1 || collision.indexOf("bottom") > -1 || closest(targetEle, "." + POPUP_WRAPPER_CLASS)) {
                  if (popupRect.top <= clientY && clientY <= popupRect.top + popupRect.height) {
                    _this.quickPopup.offsetY = previousOffset - popupRect.height - 10;
                    _this.quickPopup.dataBind();
                    collision = isCollide(_this.quickPopup.element, _this.parent.element);
                    if (collision.indexOf("top") > -1) {
                      _this.quickPopup.offsetY = previousOffset + offsetY + 10;
                      _this.quickPopup.dataBind();
                    }
                  } else if (isCollide(_this.quickPopup.element, _this.parent.element).indexOf("bottom") > -1) {
                    _this.quickPopup.offsetY = previousOffset - offsetY - Math.ceil(popupRect.height) - 10;
                    _this.quickPopup.dataBind();
                  }
                }
              }
            }
            if (isEventPopup) {
              _this.applyEventColor();
            }
            _this.quickPopup.element.style.display = display;
            _this.quickPopup.dataBind();
            _this.quickPopup.show();
          }
        });
      });
    };
    QuickPopups2.prototype.applyEventColor = function() {
      var colorField = "";
      if (this.parent.currentView === "Agenda" || this.parent.currentView === "MonthAgenda") {
        colorField = this.parent.enableRtl ? "border-right-color" : "border-left-color";
      } else {
        colorField = "background-color";
      }
      var color = this.parent.activeEventData.element.style[colorField];
      if (color === "") {
        return;
      }
      var colorEle = this.quickPopup.element.querySelector("." + POPUP_HEADER_CLASS);
      var footerEle = this.quickPopup.element.querySelector("." + POPUP_FOOTER_CLASS);
      if (footerEle && footerEle.offsetParent) {
        colorEle = this.quickPopup.element.querySelector("." + SUBJECT_CLASS);
        if (colorEle) {
          colorEle.style.borderLeftColor = color;
          color = "rgba(" + color.match(/\d+/g).join() + ",0.3)";
        }
      }
      if (colorEle) {
        colorEle.style.backgroundColor = color;
      }
    };
    QuickPopups2.prototype.quickPopupOpen = function() {
      if (this.parent.isAdaptive) {
        this.quickPopup.element.style.top = "0px";
        return;
      }
      if (this.quickPopup.element.querySelector("." + CELL_POPUP_CLASS)) {
        var subjectElement = this.quickPopup.element.querySelector("." + SUBJECT_CLASS);
        if (subjectElement) {
          subjectElement.focus();
        }
      } else {
        var editElement = this.quickPopup.element.querySelector("." + EDIT_EVENT_CLASS);
        if (editElement) {
          editElement.focus();
        }
        var editIcon = this.quickPopup.element.querySelector("." + EDIT_CLASS);
        if (editIcon) {
          editIcon.focus();
        }
      }
    };
    QuickPopups2.prototype.quickPopupClose = function() {
      this.parent.eventBase.focusElement();
      this.quickPopup.relateTo = "." + WORK_CELLS_CLASS;
      this.fieldValidator.destroyToolTip();
      if (this.quickPopup.element.querySelectorAll(".e-formvalidator").length) {
        this.fieldValidator.destroy();
      }
      this.destroyPopupButtons("quickPopup");
      removeChildren(this.quickPopup.element);
    };
    QuickPopups2.prototype.morePopupOpen = function() {
      if (this.parent.isAdaptive) {
        this.morePopup.element.style.top = "0px";
        this.morePopup.element.style.left = "0px";
        this.morePopup.element.style.height = formatUnit(window.innerHeight);
        return;
      }
      this.morePopup.element.querySelector("." + MORE_EVENT_HEADER_DATE_CLASS).focus();
      this.morePopup.refreshPosition();
    };
    QuickPopups2.prototype.morePopupClose = function() {
      var moreWrapper = this.parent.element.querySelector("." + MORE_EVENT_WRAPPER_CLASS);
      if (moreWrapper) {
        remove(moreWrapper);
      }
    };
    QuickPopups2.prototype.popupClose = function(event) {
      this.dialogEvent = event;
      this.isCrudAction = false;
      this.quickPopupHide(true);
    };
    QuickPopups2.prototype.quickPopupHide = function(hideAnimation) {
      var _this = this;
      if (!this.quickPopup.element.classList.contains(POPUP_OPEN)) {
        return;
      }
      var isCellPopup = this.quickPopup.element.querySelector("." + CELL_POPUP_CLASS);
      var popupData;
      if (isCellPopup) {
        var formvalidator = this.quickPopup.element.querySelector(".e-formvalidator");
        if (this.isCrudAction && formvalidator && !formvalidator.ej2_instances[0].validate()) {
          return;
        }
        var fields = this.parent.eventFields;
        var saveObj = this.parent.eventWindow.getObjectFromFormData(POPUP_WRAPPER_CLASS);
        this.parent.eventWindow.setDefaultValueToObject(saveObj);
        saveObj[fields.id] = this.parent.eventBase.getEventMaxID();
        saveObj[fields.startTime] = this.parent.activeCellsData.startTime;
        saveObj[fields.endTime] = this.parent.activeCellsData.endTime;
        saveObj[fields.isAllDay] = this.parent.activeCellsData.isAllDay;
        if (this.parent.resourceBase) {
          this.parent.resourceBase.setResourceValues(saveObj);
        }
        popupData = saveObj;
      } else {
        popupData = this.parent.activeEventData.event;
      }
      var isEventPopup = this.quickPopup.element.querySelector("." + EVENT_POPUP_CLASS);
      var args = {
        event: this.dialogEvent,
        type: this.parent.isAdaptive ? isEventPopup ? "ViewEventInfo" : "EditEventInfo" : "QuickInfo",
        cancel: false,
        data: popupData,
        element: this.quickPopup.element,
        target: isCellPopup ? this.parent.activeCellsData.element : this.parent.activeEventData.element
      };
      this.parent.trigger(popupClose, args, function(popupCloseArgs) {
        if (!popupCloseArgs.cancel) {
          if (_this.quickPopup.element.classList.contains("e-popup-open")) {
            if (isCellPopup && _this.isCrudAction) {
              _this.parent.currentAction = "Add";
              _this.parent.crudModule.addEvent(popupCloseArgs.data);
            }
            if (hideAnimation) {
              var animation = _this.quickPopup.hideAnimation;
              _this.quickPopup.hideAnimation = null;
              _this.quickPopup.hide();
              _this.quickPopup.hideAnimation = animation;
            } else {
              _this.quickPopup.hide();
            }
            _this.isMultipleEventSelect = false;
            _this.isCrudAction = false;
          }
        }
      });
    };
    QuickPopups2.prototype.navigationClick = function(e) {
      var navigateEle = closest(e.target, "." + NAVIGATE_CLASS);
      if (!isNullOrUndefined(navigateEle)) {
        var date = this.parent.getDateFromElement(e.currentTarget);
        if (!isNullOrUndefined(date)) {
          this.closeClick(e);
          this.parent.setProperties({ selectedDate: date }, true);
          this.parent.changeView(this.parent.getNavigateView(), e);
        }
      }
    };
    QuickPopups2.prototype.documentClick = function(e) {
      var target = e.event.target;
      var classNames = "." + POPUP_WRAPPER_CLASS + ",." + HEADER_CELLS_CLASS + ",." + ALLDAY_CELLS_CLASS + ",." + WORK_CELLS_CLASS + ",." + APPOINTMENT_CLASS + ",.e-popup";
      var popupWrap = this.parent.element.querySelector("." + POPUP_WRAPPER_CLASS);
      if (popupWrap && popupWrap.childElementCount > 0 && !closest(target, classNames) || !closest(target, classNames)) {
        this.quickPopupHide();
        this.parent.removeNewEventElement();
      }
      var tar = this.parent.element.querySelector("." + INLINE_SUBJECT_CLASS);
      if (tar && tar !== target && this.parent.allowInline) {
        this.parent.inlineModule.documentClick();
      }
      if (closest(target, "." + APPOINTMENT_CLASS + ",." + HEADER_CELLS_CLASS)) {
        this.parent.removeNewEventElement();
      }
      if (!closest(target, "." + MORE_POPUP_WRAPPER_CLASS) && (target.classList && !target.classList.contains(MORE_INDICATOR_CLASS)) && !closest(target, "." + POPUP_OPEN) && !closest(target, "." + WORK_CELLS_CLASS)) {
        this.morePopup.hide();
      }
    };
    QuickPopups2.prototype.onClosePopup = function(event) {
      if (!isNullOrUndefined(event)) {
        this.dialogEvent = event;
      }
      this.quickPopupHide();
      if (isNullOrUndefined(event) || !isNullOrUndefined(event) && event.action !== "escape" || this.parent.inlineModule && this.parent.element.querySelector("." + INLINE_APPOINTMENT_CLASS)) {
        this.parent.eventBase.focusElement();
      }
    };
    QuickPopups2.prototype.addEventListener = function() {
      this.parent.on(cellClick, this.cellClick, this);
      this.parent.on(eventClick, this.eventClick, this);
      this.parent.on(documentClick, this.documentClick, this);
      this.parent.on(dataReady, this.updateMoreEventContent, this);
    };
    QuickPopups2.prototype.removeEventListener = function() {
      this.parent.off(cellClick, this.cellClick);
      this.parent.off(eventClick, this.eventClick);
      this.parent.off(documentClick, this.documentClick);
      this.parent.off(dataReady, this.updateMoreEventContent);
    };
    QuickPopups2.prototype.destroyPopupButtons = function(popupName) {
      var popup = popupName === "quickPopup" ? this.quickPopup : this.morePopup;
      var buttonCollections = [].slice.call(popup.element.querySelectorAll(".e-control.e-btn"));
      for (var _i = 0, buttonCollections_1 = buttonCollections; _i < buttonCollections_1.length; _i++) {
        var button = buttonCollections_1[_i];
        var instance = button.ej2_instances[0];
        if (instance) {
          instance.destroy();
        }
      }
      if (popupName === "quickPopup") {
        var input2 = popup.element.querySelector("input." + SUBJECT_CLASS);
        if (input2) {
          input2.remove();
        }
        var form = this.quickPopup.element.querySelector("form." + FORM_CLASS);
        if (form) {
          removeChildren(form);
          form.remove();
        }
        this.parent.resetTemplates(["content", "header", "footer"]);
      }
    };
    QuickPopups2.prototype.refreshQuickDialog = function() {
      this.destroyQuickDialog();
      this.renderQuickDialog();
    };
    QuickPopups2.prototype.refreshQuickPopup = function() {
      this.destroyQuickPopup();
      this.renderQuickPopup();
    };
    QuickPopups2.prototype.refreshMorePopup = function() {
      this.destroyMorePopup();
      this.renderMorePopup();
    };
    QuickPopups2.prototype.destroyQuickDialog = function() {
      if (this.quickDialog.element) {
        this.quickDialog.destroy();
        remove(this.quickDialog.element);
        this.quickDialog = null;
      }
    };
    QuickPopups2.prototype.destroyQuickPopup = function() {
      if (this.quickPopup.element) {
        this.destroyPopupButtons("quickPopup");
        this.quickPopup.destroy();
        remove(this.quickPopup.element);
        this.quickPopup = null;
      }
    };
    QuickPopups2.prototype.destroyMorePopup = function() {
      if (this.morePopup.element) {
        this.destroyPopupButtons("morePopup");
        this.morePopup.destroy();
        remove(this.morePopup.element);
        this.morePopup = null;
      }
    };
    QuickPopups2.prototype.destroy = function() {
      if (this.quickPopup.element.querySelectorAll(".e-formvalidator").length) {
        this.fieldValidator.destroy();
      }
      this.removeEventListener();
      this.destroyQuickPopup();
      this.destroyMorePopup();
      this.destroyQuickDialog();
      this.dialogEvent = null;
      this.parent = null;
      this.l10n = null;
      this.isCrudAction = null;
      this.fieldValidator = null;
      this.isMultipleEventSelect = null;
    };
    return QuickPopups2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/popups/event-tooltip.js
var EventTooltip = (
  /** @class */
  function() {
    function EventTooltip2(parent) {
      this.parent = parent;
      this.tooltipObj = new Tooltip({
        animation: { close: { effect: "FadeOut" } },
        content: "No title",
        position: "BottomRight",
        offsetY: 10,
        mouseTrail: this.parent.isAdaptive ? false : true,
        showTipPointer: false,
        cssClass: this.parent.cssClass + " " + EVENT_TOOLTIP_ROOT_CLASS,
        target: this.getTargets(),
        beforeRender: this.onBeforeRender.bind(this),
        beforeClose: this.onTooltipClose.bind(this),
        enableRtl: this.parent.enableRtl,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer
      });
      this.tooltipObj.appendTo(this.parent.element);
    }
    EventTooltip2.prototype.getTargets = function() {
      var targets = [];
      if (this.parent.activeViewOptions.group.headerTooltipTemplate) {
        targets.push("." + RESOURCE_CELLS_CLASS);
      }
      if (this.parent.eventSettings.enableTooltip) {
        targets.push("." + APPOINTMENT_CLASS);
      }
      return targets.join(",");
    };
    EventTooltip2.prototype.onBeforeRender = function(args) {
      if (!isNullOrUndefined(args.target.getAttribute("data-tooltip-id"))) {
        return;
      }
      if (args.target.classList.contains(RESOURCE_CELLS_CLASS) && this.parent.activeViewOptions.group.resources.length > 0) {
        var resCollection = void 0;
        if (this.parent.activeView.isTimelineView()) {
          var index = parseInt(args.target.getAttribute("data-group-index"), 10);
          resCollection = this.parent.resourceBase.lastResourceLevel[parseInt(index.toString(), 10)];
        } else {
          var rowIndex = args.target.parentNode.sectionRowIndex;
          var cellIndex = args.target.cellIndex;
          resCollection = this.parent.activeView.getColumnLevels()[parseInt(rowIndex.toString(), 10)][parseInt(cellIndex.toString(), 10)];
        }
        var data = {
          resource: resCollection.resource,
          resourceData: resCollection.resourceData
        };
        var contentContainer = createElement("div");
        var templateId = this.parent.element.id + "_headerTooltipTemplate";
        var tooltipTemplate = [].slice.call(this.parent.getHeaderTooltipTemplate()(data, this.parent, "headerTooltipTemplate", templateId, false));
        append(tooltipTemplate, contentContainer);
        this.setContent(contentContainer);
        this.parent.renderTemplates();
        return;
      }
      var record = this.parent.eventBase.getEventByGuid(args.target.getAttribute("data-guid"));
      if (isNullOrUndefined(record)) {
        return;
      }
      if (!isNullOrUndefined(this.parent.eventSettings.tooltipTemplate)) {
        var contentContainer = createElement("div");
        var templateId = this.parent.element.id + "_tooltipTemplate";
        var tooltipTemplate = [].slice.call(this.parent.getEventTooltipTemplate()(record, this.parent, "tooltipTemplate", templateId, false));
        append(tooltipTemplate, contentContainer);
        this.setContent(contentContainer);
      } else {
        var globalize = this.parent.globalize;
        var fields = this.parent.eventFields;
        var eventStart = /* @__PURE__ */ new Date("" + record[fields.startTime]);
        var eventEnd = /* @__PURE__ */ new Date("" + record[fields.endTime]);
        eventEnd = eventEnd.getTime() - eventStart.getTime() !== 0 && eventEnd.getHours() === 0 && eventEnd.getMinutes() === 0 ? new Date(eventEnd.setMilliseconds(-1e3)) : eventEnd;
        var startDate = resetTime(/* @__PURE__ */ new Date("" + eventStart));
        var endDate = resetTime(/* @__PURE__ */ new Date("" + eventEnd));
        var tooltipSubject = record[fields.subject] || this.parent.eventSettings.fields.subject.default || this.parent.localeObj.getConstant("addTitle");
        var tooltipLocation = !isNullOrUndefined(record[fields.location]) ? record[fields.location] : "";
        var startMonthDate = "";
        var startMonthYearDate = "";
        var endMonthYearDate = "";
        startMonthDate = globalize.formatDate(eventStart, {
          type: "date",
          skeleton: "MMMd",
          calendar: this.parent.getCalendarMode()
        });
        startMonthYearDate = globalize.formatDate(eventStart, {
          type: "date",
          skeleton: "medium",
          calendar: this.parent.getCalendarMode()
        });
        endMonthYearDate = globalize.formatDate(eventEnd, {
          type: "date",
          skeleton: "medium",
          calendar: this.parent.getCalendarMode()
        });
        startMonthDate = capitalizeFirstWord(startMonthDate, "single");
        startMonthYearDate = capitalizeFirstWord(startMonthYearDate, "single");
        endMonthYearDate = capitalizeFirstWord(endMonthYearDate, "single");
        var startTime = this.parent.getTimeString(eventStart);
        var endTime = this.parent.getTimeString(eventEnd);
        var tooltipDetails = void 0;
        if (startDate.getTime() === endDate.getTime()) {
          tooltipDetails = globalize.formatDate(eventStart, {
            type: "date",
            skeleton: "long",
            calendar: this.parent.getCalendarMode()
          });
          tooltipDetails = capitalizeFirstWord(tooltipDetails, "single");
        } else {
          tooltipDetails = startDate.getFullYear() === endDate.getFullYear() ? startMonthDate + " - " + endMonthYearDate : startMonthYearDate + " - " + endMonthYearDate;
        }
        var tooltipTime = record[fields.isAllDay] ? this.parent.localeObj.getConstant("allDay") : startTime + " - " + endTime;
        var content_1 = '<div><div class="e-subject">' + tooltipSubject + '</div><div class="e-location">' + tooltipLocation + '</div><div class="e-details">' + tooltipDetails + '</div><div class="e-all-day">' + tooltipTime + "</div></div>";
        var contentTemp = function() {
          return content_1;
        };
        this.setContent(initializeCSPTemplate(contentTemp));
      }
      this.parent.renderTemplates();
    };
    EventTooltip2.prototype.onTooltipClose = function(args) {
      if (args.element) {
        removeClass([args.element], POPUP_OPEN);
        addClass([args.element], POPUP_CLOSE);
      }
      this.parent.resetTemplates(["tooltipTemplate", "headerTooltipTemplate"]);
    };
    EventTooltip2.prototype.setContent = function(content) {
      this.tooltipObj.setProperties({ content }, true);
    };
    EventTooltip2.prototype.close = function() {
      this.tooltipObj.close();
    };
    EventTooltip2.prototype.destroy = function() {
      this.tooltipObj.destroy();
      addClass([this.parent.element], "e-control");
      this.tooltipObj = null;
      this.parent = null;
    };
    return EventTooltip2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/recurrence-editor/recurrence-editor.js
var __extends4 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate2 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HEADER = "e-editor";
var INPUTWARAPPER = "e-input-wrapper";
var INPUTWARAPPERSIDE = "e-input-wrapper-side";
var REPEATELEMENT = "e-repeat-element";
var REPEATINTERVAL = "e-repeat-interval";
var INTERVALCLASS = "e-interval";
var DAYWRAPPER = "e-days";
var WEEKWRAPPER = "e-non-week";
var WEEKPOSITION = "e-week-position";
var DAYPOSITION = "e-day-position";
var YEAREXPANDERWRAPPER = "e-year-expander";
var YEAREXPANDERELEMENT = "e-year-expander-element";
var MONETHEXPANDERWRAPPER = "e-month-expander";
var MONETHEXPANDWRAPPER = "e-month-expand-wrapper";
var MONTHEXPANDERELEMENT = "e-month-expander-element";
var MONTHEXPANDERCHECKBOXWRAPPER = "e-month-expander-checkbox-wrapper";
var FORMLEFT = "e-form-left";
var FORMRIGHT = "e-form-right";
var MONTHDAYWRAPPER = "e-month-day";
var MONTHEXPANNDERELEM = "e-month-expander-wrapper";
var MONTHPOS = "e-month-pos";
var MONTHWEEK = "e-month-week";
var ENDON = "e-end-on";
var MONTHEXPANDERLABEL = "e-month-expander-label";
var WEEKEXPANDERLABEL = "e-week-expander-label";
var ENDONLEFT = "e-end-on-left";
var MONTHDAYELEMENT = "e-monthday-element";
var ENDONELEMENT = "e-end-on-element";
var ENDONDATE = "e-end-on-date";
var UNTILDATE = "e-until-date";
var ENDONCOUNTWRAPPER = "e-end-on-count";
var ENDONCOUNT = "e-recurrence-count";
var HIDEWRAPPER = "e-hide-recurrence-element";
var RTLCLASS = "e-rtl";
var PRIMARY = "e-primary";
var ACTIVE = "e-active";
var RECURRENCETABLE = "e-recurrence-table";
var REPEATCONTENT = "e-repeat-content";
var REPEATCONTENTWRAPPER = "e-repeat-content-wrapper";
var NONE = "none";
var DAILY = "daily";
var WEEKLY = "weekly";
var MONTHLY = "monthly";
var YEARLY = "yearly";
var NEVER = "never";
var UNTIL2 = "until";
var COUNT = "count";
var TEXTFIELD = "text";
var VALUEFIELD = "value";
var LAST = "last";
var REPEAT = "repeat";
var REPEATEVERY = "repeatEvery";
var ON2 = "on";
var END = "end";
var RADIOLABEL = "onDay";
var RULEUNTIL = "UNTIL";
var RULEBYDAY = "BYDAY";
var RULEBYMONTHDAY = "BYMONTHDAY";
var RULEBYMONTH = "BYMONTH";
var RULEINTERVAL = "INTERVAL";
var RULECOUNT = "COUNT";
var RULESETPOS = "BYSETPOS";
var RULEFREQ = "FREQ";
var RULEDAILY = "DAILY";
var RULEWEEKLY = "WEEKLY";
var RULEMONTHLY = "MONTHLY";
var RULEYEARLY = "YEARLY";
var RULESUNDAY = "SU";
var RULEMONDAY = "MO";
var RULETUESDAY = "TU";
var RULEWEDNESDAY = "WE";
var RULETHURSDAY = "TH";
var RULEFRIDAY = "FR";
var RULESATURDAY = "SA";
var KEYSUNDAY = "sun";
var KEYMONDAY = "mon";
var KEYTUESDAY = "tue";
var KEYWEDNESDAY = "wed";
var KEYTHURSDAY = "thu";
var KEYFRIDAY = "fri";
var KEYSATURDAY = "sat";
var EQUAL = "=";
var SEMICOLON = ";";
var COMMA = ",";
var FIRST = "first";
var SECOND = "second";
var THIRD = "third";
var FOURTH = "fourth";
var contentType = {
  none: "",
  daily: "days",
  weekly: "weeks",
  monthly: "months",
  yearly: "years"
};
var valueData = {
  "sun": RULESUNDAY,
  "mon": RULEMONDAY,
  "tue": RULETUESDAY,
  "wed": RULEWEDNESDAY,
  "thu": RULETHURSDAY,
  "fri": RULEFRIDAY,
  "sat": RULESATURDAY
};
var neverClassList = [DAYWRAPPER, WEEKWRAPPER, ENDON, INTERVALCLASS, YEAREXPANDERWRAPPER, MONETHEXPANDERWRAPPER];
var weekClassList = [WEEKWRAPPER];
var monthClassList = [DAYWRAPPER, YEAREXPANDERWRAPPER];
var yearClassList = [DAYWRAPPER];
var dailyClassList = [DAYWRAPPER, WEEKWRAPPER, YEAREXPANDERWRAPPER, MONETHEXPANDERWRAPPER];
var noEndClassList = [ENDONDATE, ENDONCOUNTWRAPPER];
var endOnCountClassList = [ENDONDATE];
var endOnDateClassList = [ENDONCOUNTWRAPPER];
var RecurrenceEditor = (
  /** @class */
  function(_super) {
    __extends4(RecurrenceEditor2, _super);
    function RecurrenceEditor2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.defaultLocale = {
        none: "None",
        daily: "Daily",
        weekly: "Weekly",
        monthly: "Monthly",
        month: "Month",
        yearly: "Yearly",
        never: "Never",
        until: "Until",
        count: "Count",
        first: "First",
        second: "Second",
        third: "Third",
        fourth: "Fourth",
        last: "Last",
        repeat: "Repeat",
        repeatEvery: "Repeat every",
        on: "Repeat On",
        end: "End",
        onDay: "Day",
        days: "Day(s)",
        weeks: "Week(s)",
        months: "Month(s)",
        years: "Year(s)",
        every: "every",
        summaryTimes: "time(s)",
        summaryOn: "on",
        summaryUntil: "until",
        summaryRepeat: "Repeats",
        summaryDay: "day(s)",
        summaryWeek: "week(s)",
        summaryMonth: "month(s)",
        summaryYear: "year(s)",
        monthWeek: "Month Week",
        monthPosition: "Month Position",
        monthExpander: "Month Expander",
        yearExpander: "Year Expander",
        repeatInterval: "Repeat Interval"
      };
      _this.renderStatus = false;
      _this.dayButtons = [];
      _this.monthButtons = [];
      return _this;
    }
    RecurrenceEditor2.prototype.startState = function(freq, endOn, startDate) {
      this.showFormElement();
      this.updateForm(freq);
      this.freshOnEndForm();
      this.updateEndOnForm(endOn);
      this.selectMonthDay(startDate);
      this.updateUntilDate(startDate);
      this.onMonthDay.setProperties({ checked: true });
    };
    RecurrenceEditor2.prototype.preRender = function() {
      this.localeObj = new L10n(this.getModuleName(), this.defaultLocale, this.locale);
      this.calendarUtil = getCalendarUtil(this.calendarMode);
    };
    RecurrenceEditor2.prototype.applyCustomClass = function(cssClass) {
      if (cssClass) {
        addClass([this.element], cssClass.split(" "));
      }
    };
    RecurrenceEditor2.prototype.initialize = function() {
      addClass([this.element], "e-" + this.getModuleName());
      this.renderComponent();
      if (!isNullOrUndefined(this.value) && this.value !== "") {
        this.setRecurrenceRule(this.value);
      } else {
        if (!isNullOrUndefined(this.repeatType.value)) {
          this.startState(this.repeatType.value.toString().toUpperCase(), this.endTypes[0], this.startDate);
          this.updateForm(this.repeatType.value.toString());
        }
        if (this.selectedType > 0) {
          this.setProperties({ value: this.getRecurrenceRule() }, false);
        }
      }
      this.applyCustomClass(this.cssClass);
    };
    RecurrenceEditor2.prototype.triggerChangeEvent = function() {
      var _this = this;
      if (this.renderStatus) {
        var value = this.getRecurrenceRule();
        this.trigger("change", { value }, function(args) {
          return _this.setProperties({ value: args.value }, false);
        });
      }
    };
    RecurrenceEditor2.prototype.resetDayButton = function() {
      var elements = [].slice.call(this.element.querySelectorAll("." + DAYWRAPPER + " button"));
      elements.forEach(function(element) {
        return removeClass([element], [ACTIVE, PRIMARY]);
      });
    };
    RecurrenceEditor2.prototype.daySelection = function(dayIndex2) {
      this.resetDayButton();
      var days = [0, 1, 2, 3, 4, 5, 6];
      this.rotateArray(days, this.firstDayOfWeek);
      var element = this.element.querySelector("." + DAYWRAPPER + ' button[data-index="' + days.indexOf(dayIndex2) + '"]');
      if (element) {
        addClass([element], [ACTIVE, PRIMARY]);
      }
    };
    RecurrenceEditor2.prototype.rtlClass = function(status) {
      if (status) {
        addClass([this.element], RTLCLASS);
      } else {
        removeClass([this.element], RTLCLASS);
      }
    };
    RecurrenceEditor2.prototype.updateUntilDate = function(date) {
      var tempDate = new Date(date.getTime());
      tempDate.setDate(tempDate.getDate() + 60);
      this.untilDateObj.setProperties({ value: tempDate });
    };
    RecurrenceEditor2.prototype.selectMonthDay = function(date) {
      var weekday = [KEYSUNDAY, KEYMONDAY, KEYTUESDAY, KEYWEDNESDAY, KEYTHURSDAY, KEYFRIDAY, KEYSATURDAY];
      this.monthDate.setProperties({ value: this.calendarUtil.getDate(date) });
      this.monthWeekDays.setProperties({ value: valueData[weekday[date.getDay()]] });
      this.monthValue.setProperties({ value: "" + this.calendarUtil.getMonth(date) });
      this.monthWeekPos.setProperties({ value: this.getDayPosition(date) });
      this.daySelection(date.getDay());
    };
    RecurrenceEditor2.prototype.updateForm = function(state) {
      var _this = this;
      this.repeatType.setProperties({ value: state });
      var end = this.element.querySelector("." + ENDON);
      if (state === DAILY) {
        classList(end, [FORMLEFT], [FORMRIGHT]);
      } else {
        classList(end, [FORMRIGHT], [FORMLEFT]);
      }
      switch (state) {
        case NONE:
          neverClassList.forEach(function(className) {
            return addClass([_this.element.querySelector("." + className)], HIDEWRAPPER);
          });
          break;
        case WEEKLY:
          weekClassList.forEach(function(className) {
            return addClass([_this.element.querySelector("." + className)], HIDEWRAPPER);
          });
          break;
        case MONTHLY:
          monthClassList.forEach(function(className) {
            return addClass([_this.element.querySelector("." + className)], HIDEWRAPPER);
          });
          break;
        case YEARLY:
          yearClassList.forEach(function(className) {
            return addClass([_this.element.querySelector("." + className)], HIDEWRAPPER);
          });
          break;
        case DAILY:
          dailyClassList.forEach(function(className) {
            return addClass([_this.element.querySelector("." + className)], HIDEWRAPPER);
          });
          break;
      }
    };
    RecurrenceEditor2.prototype.updateEndOnForm = function(state) {
      var _this = this;
      this.endType.setProperties({ value: state });
      switch (state) {
        case NEVER:
          noEndClassList.forEach(function(className) {
            return addClass([_this.element.querySelector("." + className)], HIDEWRAPPER);
          });
          break;
        case UNTIL2:
          endOnDateClassList.forEach(function(className) {
            return addClass([_this.element.querySelector("." + className)], HIDEWRAPPER);
          });
          break;
        case COUNT:
          endOnCountClassList.forEach(function(className) {
            return addClass([_this.element.querySelector("." + className)], HIDEWRAPPER);
          });
          break;
      }
    };
    RecurrenceEditor2.prototype.freshOnEndForm = function() {
      var _this = this;
      noEndClassList.forEach(function(className) {
        var element = _this.element.querySelector("." + className);
        if (element) {
          removeClass([element], HIDEWRAPPER);
        }
      });
    };
    RecurrenceEditor2.prototype.showFormElement = function() {
      var _this = this;
      neverClassList.forEach(function(className) {
        var hideElement = _this.element.querySelector("." + className);
        if (hideElement) {
          removeClass([hideElement], HIDEWRAPPER);
        }
      });
    };
    RecurrenceEditor2.prototype.renderDropdowns = function() {
      var _this = this;
      var self = this;
      this.repeatType = new DropDownList({
        //set the data to dataSource property
        dataSource: this.getRepeatData(),
        floatLabelType: "Always",
        enableRtl: this.enableRtl,
        index: this.selectedType,
        fields: {
          text: TEXTFIELD,
          value: VALUEFIELD
        },
        placeholder: this.localeObj.getConstant(REPEAT),
        htmlAttributes: { "title": this.localeObj.getConstant(REPEAT) },
        change: function(args) {
          self.setProperties({ selectedType: _this.frequencies.indexOf(args.value) }, false);
          self.element.querySelector("." + REPEATCONTENT).innerHTML = self.localeObj.getConstant(contentType[args.value]);
          self.showFormElement();
          self.updateForm(args.value);
          self.resetFormValues();
          self.triggerChangeEvent();
        }
      });
      this.repeatType.appendTo(this.element.querySelector("." + REPEATELEMENT));
      this.endType = new DropDownList({
        dataSource: this.getEndData(),
        popupWidth: this.getPopupWidth(),
        floatLabelType: "Always",
        placeholder: this.localeObj.getConstant(END),
        enableRtl: this.enableRtl,
        index: 1,
        fields: {
          text: TEXTFIELD,
          value: VALUEFIELD
        },
        change: function(args) {
          self.freshOnEndForm();
          self.updateEndOnForm(args.value);
          self.resetFormValues();
          self.triggerChangeEvent();
        }
      });
      this.endType.appendTo(this.element.querySelector("." + ENDONELEMENT));
      var renderDropDownList = function(dropDownData) {
        return new DropDownList({
          dataSource: dropDownData,
          popupWidth: _this.getPopupWidth(),
          enableRtl: _this.enableRtl,
          fields: {
            text: TEXTFIELD,
            value: VALUEFIELD
          },
          index: 1,
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          change: function(args) {
            self.onWeekDay.setProperties({ checked: true });
            self.resetFormValues();
            self.triggerChangeEvent();
          }
        });
      };
      this.monthWeekPos = renderDropDownList(this.getMonthPosData());
      this.monthWeekPos.appendTo(this.element.querySelector("." + MONTHPOS));
      this.monthWeekDays = renderDropDownList(this.getDayData("wide"));
      this.monthWeekDays.appendTo(this.element.querySelector("." + MONTHWEEK));
      this.monthValue = new DropDownList({
        dataSource: this.getMonthData(),
        fields: {
          text: TEXTFIELD,
          value: VALUEFIELD
        },
        enableRtl: this.enableRtl,
        index: 7,
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        change: function(args) {
          self.resetFormValues();
          self.triggerChangeEvent();
        }
      });
      this.monthValue.appendTo(this.element.querySelector("." + YEAREXPANDERELEMENT));
    };
    RecurrenceEditor2.prototype.setDefaultValue = function() {
      var formelement = [].slice.call(this.element.querySelectorAll(".e-control .e-numerictextbox"));
      for (var _i = 0, formelement_1 = formelement; _i < formelement_1.length; _i++) {
        var element = formelement_1[_i];
        var instance = element.ej2_instances[0];
        if (instance.element.classList.contains(REPEATINTERVAL)) {
          instance.value = 1;
          instance.dataBind();
        } else if (instance.element.classList.contains(ENDONCOUNT)) {
          instance.value = 10;
          instance.dataBind();
        }
      }
    };
    RecurrenceEditor2.prototype.resetFormValues = function() {
      var recurreneElement = [].slice.call(this.element.querySelectorAll('.e-control [type="text"]'));
      for (var _i = 0, recurreneElement_1 = recurreneElement; _i < recurreneElement_1.length; _i++) {
        var element = recurreneElement_1[_i];
        var instance = void 0;
        if (element.classList.contains("e-datepicker")) {
          instance = element.ej2_instances[0];
          if (instance.value) {
            instance.value = instance.value;
            instance.dataBind();
          } else {
            this.updateUntilDate(this.startDate);
          }
        } else if (element.classList.contains("e-dropdownlist")) {
          instance = element.ej2_instances[0];
          instance.index = instance.index || 0;
          instance.dataBind();
        } else if (element.classList.contains("e-numerictextbox")) {
          instance = element.ej2_instances[0];
          var value = void 0;
          if (instance.element.classList.contains(REPEATINTERVAL)) {
            value = 1;
          } else if (instance.element.classList.contains(ENDONCOUNT)) {
            value = 10;
          } else {
            value = this.startDate.getDate();
          }
          instance.value = instance.value || value;
          instance.dataBind();
        }
      }
    };
    RecurrenceEditor2.prototype.getPopupWidth = function() {
      return Browser.isDevice ? "100%" : "auto";
    };
    RecurrenceEditor2.prototype.renderDatePickers = function() {
      var self = this;
      this.untilDateObj = new DatePicker({
        firstDayOfWeek: this.firstDayOfWeek,
        enableRtl: this.enableRtl,
        locale: this.locale,
        min: this.minDate,
        max: this.maxDate,
        format: isNullOrUndefined(this.dateFormat) ? this.getFormat("dateFormats") : this.dateFormat,
        change: function(args) {
          if (args.value) {
            self.triggerChangeEvent();
          }
        }
      });
      this.untilDateObj.appendTo(this.element.querySelector("." + UNTILDATE));
    };
    RecurrenceEditor2.prototype.getFormat = function(formatType) {
      var format;
      if (this.locale === "en" || this.locale === "en-US") {
        format = getValue(formatType + ".short", getDefaultDateObject(this.getCalendarMode()));
      } else {
        format = getValue("main." + this.locale + ".dates.calendars." + this.getCalendarMode() + "." + formatType + ".short", cldrData);
      }
      return format;
    };
    RecurrenceEditor2.prototype.dayButtonRender = function() {
      var _this = this;
      var btns = [].slice.call(this.element.querySelectorAll("." + DAYWRAPPER + " button"));
      var self = this;
      for (var _i = 0, btns_1 = btns; _i < btns_1.length; _i++) {
        var btn = btns_1[_i];
        var button = new Button({ isToggle: true, enableRtl: this.enableRtl }, btn);
        this.dayButtons.push(button);
        EventHandler.add(btn, "click", function(args) {
          var btns2 = [].slice.call(_this.element.querySelectorAll("." + DAYWRAPPER + " button." + PRIMARY));
          var element = args.target;
          if (!element.classList.contains(PRIMARY)) {
            addClass([element], PRIMARY);
            self.triggerChangeEvent();
          } else if (btns2.length > 1) {
            removeClass([element], PRIMARY);
            self.triggerChangeEvent();
          }
        });
      }
    };
    RecurrenceEditor2.prototype.radioButtonRender = function() {
      var self = this;
      this.onMonthDay = new RadioButton({
        label: this.localeObj.getConstant(RADIOLABEL),
        enableRtl: this.enableRtl,
        name: "monthType",
        value: "day",
        change: function() {
          self.resetFormValues();
          self.triggerChangeEvent();
        }
      });
      this.onMonthDay.appendTo(this.element.querySelector("." + MONTHEXPANDERELEMENT));
      this.monthButtons.push(this.onMonthDay);
      this.onWeekDay = new RadioButton({
        label: this.localeObj.getConstant("monthExpander"),
        cssClass: "e-month-type",
        name: "monthType",
        enableRtl: this.enableRtl,
        value: "daypos",
        change: function() {
          self.resetFormValues();
          self.triggerChangeEvent();
        }
      });
      this.onWeekDay.appendTo(this.element.querySelector("." + MONTHEXPANNDERELEM));
      this.monthButtons.push(this.onWeekDay);
    };
    RecurrenceEditor2.prototype.numericTextboxRender = function() {
      var self = this;
      this.recurrenceCount = new NumericTextBox({
        value: 10,
        format: "#",
        enableRtl: this.enableRtl,
        min: 1,
        max: 999,
        change: function() {
          self.triggerChangeEvent();
        }
      });
      this.recurrenceCount.appendTo(this.element.querySelector("." + ENDONCOUNT));
      this.monthDate = new NumericTextBox({
        value: 1,
        format: "#",
        enableRtl: this.enableRtl,
        min: 1,
        max: 31,
        change: function() {
          self.onMonthDay.setProperties({ checked: true });
          self.triggerChangeEvent();
        }
      });
      this.monthDate.appendTo(this.element.querySelector("." + MONTHDAYWRAPPER));
      this.repeatInterval = new NumericTextBox({
        value: 1,
        format: "#",
        min: 1,
        max: 999,
        enableRtl: this.enableRtl,
        floatLabelType: "Always",
        placeholder: this.localeObj.getConstant(REPEATEVERY),
        change: function() {
          self.triggerChangeEvent();
        }
      });
      this.repeatInterval.appendTo(this.element.querySelector("." + REPEATINTERVAL));
    };
    RecurrenceEditor2.prototype.renderComponent = function() {
      this.setTemplate();
      this.renderDropdowns();
      this.renderDatePickers();
      this.dayButtonRender();
      this.radioButtonRender();
      this.numericTextboxRender();
    };
    RecurrenceEditor2.prototype.rotateArray = function(data, count) {
      var temp;
      for (var index = 0; index < count; index++) {
        temp = data.shift();
        data.push(temp);
      }
    };
    RecurrenceEditor2.prototype.getEndData = function() {
      var self = this;
      var dataSource = [];
      this.endTypes.forEach(function(data) {
        dataSource.push({ text: self.localeObj.getConstant(data), value: data });
      });
      return dataSource;
    };
    RecurrenceEditor2.prototype.getDayPosition = function(date) {
      var temp = new Date(date.getTime());
      var endDate = new Date(date.getTime());
      var day = date.getDay();
      var positionCollection = [];
      temp = this.calendarUtil.getMonthStartDate(temp);
      endDate = this.calendarUtil.getMonthEndDate(endDate);
      while (temp < endDate) {
        if (temp.getDay() === day) {
          positionCollection.push(temp.getTime());
        }
        temp.setDate(temp.getDate() + 1);
      }
      if (positionCollection.indexOf(date.getTime()) === positionCollection.length - 1) {
        return -1;
      }
      return positionCollection.indexOf(date.getTime()) + 1;
    };
    RecurrenceEditor2.prototype.getRepeatData = function() {
      var data = [];
      var self = this;
      this.frequencies.forEach(function(element) {
        var textValue = element === NONE ? NEVER : element;
        data.push({ text: self.localeObj.getConstant(textValue), value: element });
      });
      return data;
    };
    RecurrenceEditor2.prototype.getMonthPosData = function() {
      var monthpos = [FIRST, SECOND, THIRD, FOURTH, LAST];
      var monthposValue = {
        first: 1,
        second: 2,
        third: 3,
        fourth: 4,
        last: -1
      };
      var self = this;
      var dataSource = [];
      monthpos.forEach(function(data) {
        dataSource.push({ text: self.localeObj.getConstant(data), value: monthposValue["" + data] });
      });
      return dataSource;
    };
    RecurrenceEditor2.prototype.getDayData = function(format) {
      var weekday = [KEYSUNDAY, KEYMONDAY, KEYTUESDAY, KEYWEDNESDAY, KEYTHURSDAY, KEYFRIDAY, KEYSATURDAY];
      var dayData = [];
      var cldrObj;
      this.rotateArray(weekday, this.firstDayOfWeek);
      if (this.locale === "en" || this.locale === "en-US") {
        var nameSpaceString = "days.stand-alone.";
        cldrObj = getValue(nameSpaceString + format, getDefaultDateObject(this.getCalendarMode()));
      } else {
        var nameSpaceString = "main." + this.locale + ".dates.calendars." + this.getCalendarMode() + ".days.stand-alone." + format;
        cldrObj = getValue(nameSpaceString, cldrData);
      }
      for (var _i = 0, weekday_1 = weekday; _i < weekday_1.length; _i++) {
        var obj = weekday_1[_i];
        var day = getValue(obj, cldrObj);
        dayData.push({ text: format === "narrow" ? day : capitalizeFirstWord(day, "single"), value: valueData["" + obj] });
      }
      return dayData;
    };
    RecurrenceEditor2.prototype.getMonthData = function() {
      var monthData = [];
      var cldrObj;
      if (this.locale === "en" || this.locale === "en-US") {
        var nameSpaceString = "months.stand-alone.wide";
        cldrObj = getValue(nameSpaceString, getDefaultDateObject(this.getCalendarMode()));
      } else {
        var nameSpaceString = "main." + this.locale + ".dates.calendars." + this.getCalendarMode() + ".months.stand-alone.wide";
        cldrObj = getValue(nameSpaceString, cldrData);
      }
      for (var _i = 0, _a = Object.keys(cldrObj); _i < _a.length; _i++) {
        var obj = _a[_i];
        monthData.push({
          text: capitalizeFirstWord(getValue(obj, cldrObj), "single"),
          value: obj
        });
      }
      return monthData;
    };
    RecurrenceEditor2.prototype.setTemplate = function() {
      var dayData = this.getDayData("narrow");
      var fullDay = this.getDayData("wide");
      this.element.innerHTML = '<div class="' + HEADER + '"><div class="' + INPUTWARAPPER + " " + FORMLEFT + '"><input type="text" tabindex="0" class="' + REPEATELEMENT + '"label="' + REPEATELEMENT.substr(2) + '" /></div><div class="' + INPUTWARAPPER + " " + INTERVALCLASS + " " + FORMRIGHT + '"><table  class="' + RECURRENCETABLE + " " + REPEATCONTENTWRAPPER + '"  role="none"><tr><td><input type="text" tabindex="0" id="' + this.element.id + "_" + REPEATINTERVAL + '" class="' + REPEATINTERVAL + '"title="' + this.localeObj.getConstant("repeatEvery") + '" /></td><td><span class="' + REPEATCONTENT + '"></span></td></tr></table></div><div class="' + INPUTWARAPPERSIDE + " " + DAYWRAPPER + " " + FORMLEFT + '"><div class=' + WEEKEXPANDERLABEL + ">" + this.localeObj.getConstant(ON2) + '</div><button type="button" class="e-round" data-index="0" title="' + fullDay[0].text + '">' + dayData[0].text + '</button><button type="button" class="e-round" data-index="1" title="' + fullDay[1].text + '">' + dayData[1].text + '</button><button type="button" class="e-round" data-index="2" title="' + fullDay[2].text + '">' + dayData[2].text + '</button><button type="button" class="e-round" data-index="3" title="' + fullDay[3].text + '">' + dayData[3].text + '</button><button type="button" class="e-round" data-index="4" title="' + fullDay[4].text + '">' + dayData[4].text + '</button><button type="button" class="e-round" data-index="5" title="' + fullDay[5].text + '">' + dayData[5].text + '</button><button type="button" class="e-round" data-index="6" title="' + fullDay[6].text + '">' + dayData[6].text + '</button></div><div class="' + INPUTWARAPPERSIDE + " " + WEEKWRAPPER + " " + FORMLEFT + '"><div class=' + MONTHEXPANDERLABEL + ">" + this.localeObj.getConstant(ON2) + '</div><div class="' + YEAREXPANDERWRAPPER + '"><input class="' + YEAREXPANDERELEMENT + '" type="text" tabindex="0" title="' + this.localeObj.getConstant("yearExpander") + '"/></div><div class="' + MONETHEXPANDERWRAPPER + '"><table class="' + RECURRENCETABLE + " " + MONETHEXPANDWRAPPER + '" role="none"><tr><td><div class="' + INPUTWARAPPER + " " + MONTHEXPANDERCHECKBOXWRAPPER + '"><input class="' + MONTHEXPANDERELEMENT + '"title="' + this.localeObj.getConstant("monthExpander") + '" type="radio"></div></td><td colspan="2"><div class="' + INPUTWARAPPER + " " + MONTHDAYELEMENT + '"><input type="text" tabindex="0" id="' + this.element.id + "_" + MONTHDAYWRAPPER + '" class="' + MONTHDAYWRAPPER + '"title="' + this.localeObj.getConstant("on") + '" /></div></td></tr><tr><td><div class="' + INPUTWARAPPER + " " + MONTHEXPANDERCHECKBOXWRAPPER + '" style="min-width: 30px;margin-bottom:18px;"><input class="' + MONTHEXPANNDERELEM + '"title="' + this.localeObj.getConstant("monthExpander") + '" type="radio"></div></td><td><div class="' + INPUTWARAPPER + " " + WEEKPOSITION + '" ><input type="text" tabindex="0" class="' + MONTHPOS + '"title="' + this.localeObj.getConstant("monthPosition") + '" /></div></td><td><div class="' + INPUTWARAPPER + " " + DAYPOSITION + '"><input type="text" tabindex="0" class="' + MONTHWEEK + '"title="' + this.localeObj.getConstant("monthWeek") + '" /></div></td></tr></table></div></div><div class="' + INPUTWARAPPERSIDE + " " + ENDON + " " + FORMRIGHT + '"><div class="' + INPUTWARAPPER + " " + ENDONLEFT + '"><input type="text" tabindex="0" class="' + ENDONELEMENT + '"title="' + this.localeObj.getConstant(END) + '" /></div><div class="' + INPUTWARAPPER + " " + ENDONDATE + '" ><input type="text" tabindex="0" class="' + UNTILDATE + '"title="' + this.localeObj.getConstant(UNTIL2) + '" /></div><div class="' + INPUTWARAPPER + " " + ENDONCOUNTWRAPPER + '"><input type="text" tabindex="0" id="' + this.element.id + "_" + ENDONCOUNT + '" class="' + ENDONCOUNT + '"title="' + this.localeObj.getConstant(COUNT) + '" /></div></div></div></div>';
    };
    RecurrenceEditor2.prototype.getSelectedDaysData = function() {
      var ruleData = RULEBYDAY + EQUAL;
      var elements = [].slice.call(this.element.querySelectorAll("." + DAYWRAPPER + " button." + PRIMARY));
      var weekday = [RULESUNDAY, RULEMONDAY, RULETUESDAY, RULEWEDNESDAY, RULETHURSDAY, RULEFRIDAY, RULESATURDAY];
      this.rotateArray(weekday, this.firstDayOfWeek);
      for (var index = 0; index < elements.length; index++) {
        ruleData += weekday[parseInt(elements[parseInt(index.toString(), 10)].getAttribute("data-index"), 10)] + (index === elements.length - 1 ? "" : COMMA);
      }
      return ruleData + SEMICOLON;
    };
    RecurrenceEditor2.prototype.getSelectedMonthData = function() {
      var ruleData;
      if (this.onWeekDay.checked) {
        ruleData = RULEBYDAY + EQUAL + this.monthWeekDays.value + SEMICOLON + RULESETPOS + EQUAL + this.monthWeekPos.value + SEMICOLON;
      } else {
        ruleData = RULEBYMONTHDAY + EQUAL + this.monthDate.value + SEMICOLON;
      }
      return ruleData;
    };
    RecurrenceEditor2.prototype.getIntervalData = function() {
      return RULEINTERVAL + EQUAL + this.repeatInterval.value + SEMICOLON;
    };
    RecurrenceEditor2.prototype.getEndOnCount = function() {
      return RULECOUNT + EQUAL + this.recurrenceCount.value + SEMICOLON;
    };
    RecurrenceEditor2.prototype.getYearMonthRuleData = function() {
      return RULEBYMONTH + EQUAL + this.monthValue.value + SEMICOLON;
    };
    RecurrenceEditor2.prototype.updateWeekButton = function(keys) {
      var weekday = [RULESUNDAY, RULEMONDAY, RULETUESDAY, RULEWEDNESDAY, RULETHURSDAY, RULEFRIDAY, RULESATURDAY];
      this.rotateArray(weekday, this.firstDayOfWeek);
      for (var _i = 0, _a = this.dayButtons; _i < _a.length; _i++) {
        var obj = _a[_i];
        var index = parseInt(obj.element.getAttribute("data-index"), 10);
        if (keys.indexOf(weekday[parseInt(index.toString(), 10)]) !== -1) {
          obj.setProperties({ isPrimary: true });
        } else {
          obj.setProperties({ isPrimary: false });
        }
      }
    };
    RecurrenceEditor2.prototype.updateMonthUI = function() {
      if (this.ruleObject.monthDay.length) {
        this.monthDate.setProperties({ value: this.ruleObject.monthDay[0] });
        this.onMonthDay.setProperties({ checked: true });
      } else {
        this.onWeekDay.setProperties({ checked: true });
        this.monthWeekPos.setProperties({ value: this.ruleObject.setPosition });
        for (var _i = 0, _a = Object.keys(valueData); _i < _a.length; _i++) {
          var key = _a[_i];
          if (valueData["" + key] === this.ruleObject.day[0]) {
            this.monthWeekDays.setProperties({ value: this.ruleObject.day[0] });
            break;
          }
        }
      }
    };
    RecurrenceEditor2.prototype.updateUI = function(repeat, state) {
      this.repeatInterval.setProperties({ value: this.ruleObject.interval });
      switch (state) {
        case UNTIL2:
          this.untilDateObj.setProperties({ value: this.ruleObject.until });
          break;
        case COUNT:
          this.recurrenceCount.setProperties({ value: this.ruleObject.count });
          break;
      }
      switch (repeat) {
        case WEEKLY:
          this.updateWeekButton(this.ruleObject.day);
          break;
        case YEARLY:
          this.monthValue.setProperties({ index: this.ruleObject.month[0] - 1 });
          this.updateMonthUI();
          break;
        case MONTHLY:
          this.updateMonthUI();
          break;
      }
    };
    RecurrenceEditor2.prototype.getUntilData = function() {
      if (!this.untilDateObj.value) {
        return "";
      }
      var tempStr = getRecurrenceStringFromDate(this.untilDateObj.value);
      return RULEUNTIL + EQUAL + tempStr + SEMICOLON;
    };
    RecurrenceEditor2.prototype.destroyComponents = function() {
      if (!this.recurrenceCount.isDestroyed) {
        this.recurrenceCount.destroy();
        this.recurrenceCount = null;
      }
      if (!this.monthDate.isDestroyed) {
        this.monthDate.destroy();
        this.monthDate = null;
      }
      if (!this.repeatInterval.isDestroyed) {
        this.repeatInterval.destroy();
        this.repeatInterval = null;
      }
      if (!this.untilDateObj.isDestroyed) {
        this.untilDateObj.destroy();
        this.untilDateObj = null;
      }
      if (!this.repeatType.isDestroyed) {
        this.repeatType.destroy();
        this.repeatType = null;
      }
      if (!this.endType.isDestroyed) {
        this.endType.destroy();
        this.endType = null;
      }
      if (!this.monthWeekPos.isDestroyed) {
        this.monthWeekPos.destroy();
        this.monthWeekPos = null;
      }
      if (!this.monthWeekDays.isDestroyed) {
        this.monthWeekDays.destroy();
        this.monthWeekDays = null;
      }
      if (!this.monthValue.isDestroyed) {
        this.monthValue.destroy();
        this.monthValue = null;
      }
      if (!this.onMonthDay.isDestroyed) {
        this.onMonthDay.destroy();
        this.onMonthDay = null;
      }
      if (!this.onWeekDay.isDestroyed) {
        this.onWeekDay.destroy();
        this.onWeekDay = null;
      }
      this.dayButtons.forEach(function(element) {
        if (!element.isDestroyed) {
          element.destroy();
        }
      });
      this.dayButtons = [];
      this.monthButtons.forEach(function(element) {
        if (!element.isDestroyed) {
          element.destroy();
        }
      });
      this.monthButtons = [];
    };
    RecurrenceEditor2.prototype.resetFields = function() {
      this.startState(NONE, this.endTypes[0], this.startDate);
      this.setDefaultValue();
    };
    RecurrenceEditor2.prototype.updateRuleUntilDate = function(startDate) {
      if (this.untilDateObj.value && startDate) {
        var untilDate = this.untilDateObj.value;
        var newUntilDate = new Date(untilDate.getFullYear(), untilDate.getMonth(), untilDate.getDate(), startDate.getHours(), startDate.getMinutes(), startDate.getMilliseconds());
        this.untilDateObj.setProperties({ value: newUntilDate });
      }
    };
    RecurrenceEditor2.prototype.getCalendarMode = function() {
      return !isNullOrUndefined(this.calendarMode) ? this.calendarMode.toLowerCase() : "gregorian";
    };
    RecurrenceEditor2.prototype.getRuleSummary = function(rule) {
      if (rule === void 0) {
        rule = this.getRecurrenceRule();
      }
      return generateSummary(rule, this.localeObj, this.locale, this.calendarMode);
    };
    RecurrenceEditor2.prototype.getRecurrenceDates = function(startDate, rule, excludeDate, maximumCount, viewDate) {
      viewDate = isNullOrUndefined(viewDate) ? this.startDate : viewDate;
      return generate(startDate, rule, excludeDate, this.firstDayOfWeek, maximumCount, viewDate, this.calendarMode);
    };
    RecurrenceEditor2.prototype.getRecurrenceRule = function() {
      var ruleData = RULEFREQ + EQUAL;
      switch (this.repeatType.value) {
        case DAILY:
          ruleData += RULEDAILY + SEMICOLON;
          break;
        case WEEKLY:
          ruleData += RULEWEEKLY + SEMICOLON + this.getSelectedDaysData();
          break;
        case MONTHLY:
          ruleData += RULEMONTHLY + SEMICOLON + this.getSelectedMonthData();
          break;
        case YEARLY:
          ruleData += RULEYEARLY + SEMICOLON + this.getSelectedMonthData() + this.getYearMonthRuleData();
          break;
        case NONE:
          return "";
      }
      ruleData += this.getIntervalData();
      switch (this.endType.value) {
        case UNTIL2:
          ruleData += this.getUntilData();
          break;
        case COUNT:
          ruleData += this.getEndOnCount();
          break;
      }
      return ruleData;
    };
    RecurrenceEditor2.prototype.setRecurrenceRule = function(rule, startDate) {
      if (startDate === void 0) {
        startDate = this.startDate;
      }
      if (!rule) {
        this.repeatType.setProperties({ value: NONE });
        return;
      }
      this.renderStatus = false;
      this.ruleObject = extractObjectFromRule(rule);
      var endon = this.ruleObject.count ? COUNT : this.ruleObject.until ? UNTIL2 : NEVER;
      switch (this.ruleObject.freq) {
        case RULEDAILY:
          this.startState(DAILY, endon, startDate);
          this.updateUI(DAILY, endon);
          break;
        case RULEWEEKLY:
          this.startState(WEEKLY, endon, startDate);
          this.updateUI(WEEKLY, endon);
          break;
        case RULEMONTHLY:
          this.startState(MONTHLY, endon, startDate);
          this.updateUI(MONTHLY, endon);
          break;
        case RULEYEARLY:
          this.startState(YEARLY, endon, startDate);
          this.updateUI(YEARLY, endon);
          break;
      }
      this.renderStatus = true;
      this.triggerChangeEvent();
    };
    RecurrenceEditor2.prototype.detachInputs = function() {
      var inputElements = [].slice.call(this.element.querySelectorAll("input"));
      for (var _i = 0, inputElements_1 = inputElements; _i < inputElements_1.length; _i++) {
        var element = inputElements_1[_i];
        detach(element);
      }
    };
    RecurrenceEditor2.prototype.destroy = function() {
      if (!this.isDestroyed) {
        this.destroyComponents();
        _super.prototype.destroy.call(this);
        var removeClasses = ["e-" + this.getModuleName()];
        if (this.cssClass) {
          removeClasses = removeClasses.concat(this.cssClass.split(" "));
        }
        removeClass([this.element], removeClasses);
        this.detachInputs();
        while (this.element.firstElementChild) {
          this.element.removeChild(this.element.firstElementChild);
        }
      }
    };
    RecurrenceEditor2.prototype.getModuleName = function() {
      return "recurrenceeditor";
    };
    RecurrenceEditor2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    RecurrenceEditor2.prototype.render = function() {
      this.initialize();
      this.rtlClass(this.enableRtl);
      this.renderStatus = true;
      this.renderComplete();
    };
    RecurrenceEditor2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "startDate":
            this.selectMonthDay(newProp.startDate);
            this.updateUntilDate(newProp.startDate);
            this.endType.setProperties({ index: 0 });
            break;
          case "enableRtl":
            this.rtlClass(newProp.enableRtl);
            break;
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([this.element], oldProp.cssClass.split(" "));
            }
            if (newProp.cssClass) {
              addClass([this.element], newProp.cssClass.split(" "));
            }
            break;
          case "selectedType":
            this.repeatType.setProperties({ index: this.selectedType });
            break;
          case "minDate":
            this.untilDateObj.setProperties({ minDate: this.minDate });
            break;
          case "maxDate":
            this.untilDateObj.setProperties({ maxDate: this.maxDate });
            break;
          case "value":
            if (this.getRecurrenceRule() !== this.value) {
              this.setRecurrenceRule(this.value);
            }
            break;
          case "calendarMode":
            this.calendarMode = newProp.calendarMode;
            this.calendarUtil = getCalendarUtil(newProp.calendarMode);
            break;
          case "locale":
          case "frequencies":
          case "firstDayOfWeek":
          case "endTypes":
            this.refresh();
            break;
          case "dateFormat":
            this.untilDateObj.setProperties({ format: newProp.dateFormat });
            break;
        }
      }
    };
    __decorate2([
      Property(["none", "daily", "weekly", "monthly", "yearly"])
    ], RecurrenceEditor2.prototype, "frequencies", void 0);
    __decorate2([
      Property(["never", "until", "count"])
    ], RecurrenceEditor2.prototype, "endTypes", void 0);
    __decorate2([
      Property(0)
    ], RecurrenceEditor2.prototype, "firstDayOfWeek", void 0);
    __decorate2([
      Property(/* @__PURE__ */ new Date())
    ], RecurrenceEditor2.prototype, "startDate", void 0);
    __decorate2([
      Property()
    ], RecurrenceEditor2.prototype, "dateFormat", void 0);
    __decorate2([
      Property("Gregorian")
    ], RecurrenceEditor2.prototype, "calendarMode", void 0);
    __decorate2([
      Property()
    ], RecurrenceEditor2.prototype, "cssClass", void 0);
    __decorate2([
      Property()
    ], RecurrenceEditor2.prototype, "value", void 0);
    __decorate2([
      Property(new Date(1900, 0, 1))
    ], RecurrenceEditor2.prototype, "minDate", void 0);
    __decorate2([
      Property(new Date(2099, 11, 31))
    ], RecurrenceEditor2.prototype, "maxDate", void 0);
    __decorate2([
      Property(0)
    ], RecurrenceEditor2.prototype, "selectedType", void 0);
    __decorate2([
      Event()
    ], RecurrenceEditor2.prototype, "change", void 0);
    RecurrenceEditor2 = __decorate2([
      NotifyPropertyChanges
    ], RecurrenceEditor2);
    return RecurrenceEditor2;
  }(Component2)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/popups/event-window.js
var EVENT_FIELD2 = "e-field";
var REPEAT_CONTAINER_CLASS = "e-recurrence-container";
var REPEAT_BUTTON_ICON_CLASS = "e-recurrence-edit";
var REPEAT_BUTTON_CLASS = "e-recurrence-edit-button";
var REPEAT_DIALOG_CLASS = "e-recurrence-dialog";
var HIDE_STYLE_CLASS = "e-hide";
var EventWindow = (
  /** @class */
  function() {
    function EventWindow2(parent) {
      this.parent = parent;
      this.l10n = this.parent.localeObj;
      this.fields = this.parent.eventFields;
      this.eventWindowTime = { startTime: /* @__PURE__ */ new Date(), endTime: /* @__PURE__ */ new Date() };
      this.renderEventWindow();
    }
    EventWindow2.prototype.renderEventWindow = function() {
      this.element = createElement("div", { id: this.parent.element.id + "_dialog_wrapper" });
      this.parent.element.appendChild(this.element);
      var dialogModel = {
        animationSettings: { effect: "Zoom" },
        content: this.getEventWindowContent(),
        cssClass: EVENT_WINDOW_DIALOG_CLASS,
        enableRtl: this.parent.enableRtl,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        height: this.parent.isAdaptive ? "100%" : "auto",
        minHeight: "300px",
        isModal: true,
        showCloseIcon: this.parent.isAdaptive ? false : true,
        target: document.body,
        visible: false,
        width: "500px",
        beforeOpen: this.onBeforeOpen.bind(this),
        beforeClose: this.onBeforeClose.bind(this)
      };
      if (this.parent.isAdaptive) {
        dialogModel.cssClass = EVENT_WINDOW_DIALOG_CLASS + " " + DEVICE_CLASS;
        if (!this.parent.editorHeaderTemplate) {
          dialogModel.header = '<div class="e-title-header"><div class="e-back-icon e-icons"></div><div class="e-title-text">' + this.l10n.getConstant("newEvent") + '</div><div class="e-save-icon e-icons"></div></div>';
        }
      } else {
        if (!this.parent.editorFooterTemplate) {
          this.renderDialogButtons(dialogModel);
        }
        if (!this.parent.editorHeaderTemplate) {
          dialogModel.header = '<div class="e-title-text">' + this.l10n.getConstant("newEvent") + "</div>";
        }
      }
      this.dialogObject = new Dialog(dialogModel, this.element);
      if (this.dialogObject.element.querySelector(".e-dlg-closeicon-btn")) {
        this.dialogObject.element.querySelector(".e-dlg-closeicon-btn").setAttribute("title", this.l10n.getConstant("close"));
      }
      this.addEventHandlers();
      addClass([this.element.parentElement], EVENT_WINDOW_DIALOG_CLASS + "-container");
      EventHandler.add(this.dialogObject.element, "keydown", this.preventEventSave, this);
      this.applyFormValidation();
    };
    EventWindow2.prototype.renderDialogButtons = function(dialogButton) {
      dialogButton.buttons = [{
        buttonModel: {
          content: this.l10n.getConstant("deleteButton"),
          cssClass: DELETE_EVENT_CLASS,
          disabled: !this.parent.eventSettings.allowDeleting || this.parent.readonly
        },
        click: this.eventDelete.bind(this)
      }, {
        buttonModel: {
          content: this.l10n.getConstant("saveButton"),
          cssClass: "e-primary " + EVENT_WINDOW_SAVE_BUTTON_CLASS,
          isPrimary: true,
          disabled: !this.parent.eventSettings.allowAdding || this.parent.readonly
        },
        click: this.eventSave.bind(this)
      }, {
        buttonModel: { cssClass: EVENT_WINDOW_CANCEL_BUTTON_CLASS, content: this.l10n.getConstant("cancelButton") },
        click: this.dialogClose.bind(this)
      }];
    };
    EventWindow2.prototype.addEventHandlers = function() {
      var backIcon = this.element.querySelector("." + EVENT_WINDOW_BACK_ICON_CLASS);
      var saveIcon = this.element.querySelector("." + EVENT_WINDOW_SAVE_ICON_CLASS);
      if (this.parent.isAdaptive && !isNullOrUndefined(backIcon) && !isNullOrUndefined(saveIcon)) {
        EventHandler.add(backIcon, "click", this.dialogClose, this);
        EventHandler.add(saveIcon, "click", this.eventSave, this);
      }
    };
    EventWindow2.prototype.refresh = function() {
      this.destroy(true);
      this.renderEventWindow();
    };
    EventWindow2.prototype.refreshRecurrenceEditor = function() {
      if (this.recurrenceEditor) {
        var recurrenceEditor = this.recurrenceEditor.element;
        this.recurrenceEditor.destroy();
        this.createRecurrenceEditor(recurrenceEditor);
      }
    };
    EventWindow2.prototype.setRecurrenceEditor = function(recurrenceEditor) {
      if (this.parent.editorTemplate) {
        this.recurrenceEditor = recurrenceEditor;
      }
    };
    EventWindow2.prototype.openEditor = function(data, type, isEventData, repeatType) {
      this.parent.currentAction = type;
      this.parent.removeNewEventElement();
      if (this.parent.quickPopup) {
        this.parent.quickPopup.quickPopupHide(true);
      }
      this.parent.inlineModule.removeInlineAppointmentElement();
      if (type === "Add") {
        var eventObj = {};
        this.cellClickAction = !isEventData;
        this.parent.activeCellsData = data;
        var event_1 = data;
        if (this.cellClickAction) {
          this.convertToEventData(event_1, eventObj);
        } else {
          this.parent.activeCellsData = {
            startTime: event_1.startTime || event_1[this.fields.startTime],
            endTime: event_1.endTime || event_1[this.fields.endTime],
            isAllDay: event_1.isAllDay || event_1[this.fields.isAllDay],
            element: event_1.element,
            groupIndex: event_1.groupIndex
          };
          eventObj = event_1;
        }
        data = eventObj;
      }
      if (!isNullOrUndefined(this.parent.editorHeaderTemplate)) {
        this.parent.resetTemplates(["editorHeaderTemplate"]);
        if (this.parent.isAdaptive && !this.parent.editorFooterTemplate) {
          this.dialogObject.header = this.createAdaptiveHeaderElement(data);
        } else {
          this.dialogObject.header = this.getDialogHeader(data);
        }
      }
      if (!isNullOrUndefined(this.parent.editorFooterTemplate)) {
        this.parent.resetTemplates(["editorFooterTemplate"]);
        this.dialogObject.footerTemplate = this.getDialogFooter(data);
      }
      if (!isNullOrUndefined(this.parent.editorHeaderTemplate) || !isNullOrUndefined(this.parent.editorFooterTemplate)) {
        this.dialogObject.dataBind();
        this.addEventHandlers();
      }
      if (!isNullOrUndefined(this.parent.editorTemplate)) {
        this.renderFormElements(this.element.querySelector(".e-schedule-form"), data, type, repeatType);
      } else {
        this.setEditorContent(data, type, repeatType);
      }
    };
    EventWindow2.prototype.setEditorContent = function(data, type, repeatType) {
      if (!this.parent.isAdaptive && isNullOrUndefined(this.parent.editorTemplate)) {
        removeClass([this.dialogObject.element.querySelector(".e-recurrenceeditor")], DISABLE_CLASS);
      }
      if (this.recurrenceEditor) {
        this.recurrenceEditor.firstDayOfWeek = this.parent.activeViewOptions.firstDayOfWeek;
      }
      switch (type) {
        case "Add":
          this.onCellDetailsUpdate(data, repeatType);
          break;
        case "Save":
        case "EditOccurrence":
        case "EditSeries":
        case "EditFollowingEvents":
          if (type === "EditOccurrence" && !this.parent.isAdaptive && isNullOrUndefined(this.parent.editorTemplate)) {
            addClass([this.dialogObject.element.querySelector(".e-recurrenceeditor")], DISABLE_CLASS);
          }
          this.cellClickAction = false;
          this.onEventDetailsUpdate(data);
          break;
      }
    };
    EventWindow2.prototype.setDialogContent = function() {
      this.dialogObject.content = this.getEventWindowContent();
      this.dialogObject.dataBind();
      this.applyFormValidation();
    };
    EventWindow2.prototype.setDialogHeader = function() {
      if (!isNullOrUndefined(this.parent.editorHeaderTemplate)) {
        this.parent.resetTemplates(["editorHeaderTemplate"]);
        if (this.parent.isAdaptive && !this.parent.editorFooterTemplate) {
          this.dialogObject.header = this.createAdaptiveHeaderElement();
        } else {
          this.dialogObject.header = this.getDialogHeader();
        }
      } else if (this.parent.isAdaptive) {
        this.dialogObject.header = '<div class="e-title-header"><div class="e-back-icon e-icons"></div><div class="e-title-text">' + this.l10n.getConstant("newEvent") + '</div><div class="e-save-icon e-icons"></div></div>';
      } else {
        this.dialogObject.header = '<div class="e-title-text">' + this.l10n.getConstant("newEvent") + "</div>";
      }
      this.dialogObject.dataBind();
      this.addEventHandlers();
    };
    EventWindow2.prototype.setDialogFooter = function() {
      if (!isNullOrUndefined(this.parent.editorFooterTemplate)) {
        this.parent.resetTemplates(["editorFooterTemplate"]);
        this.dialogObject.footerTemplate = this.getDialogFooter();
      } else if (!this.parent.isAdaptive && isNullOrUndefined(this.parent.editorFooterTemplate)) {
        this.renderDialogButtons(this.dialogObject);
      } else if (this.parent.isAdaptive && isNullOrUndefined(this.parent.editorFooterTemplate)) {
        this.dialogObject.footerTemplate = null;
      }
      this.dialogObject.dataBind();
    };
    EventWindow2.prototype.createAdaptiveHeaderElement = function(data) {
      var header = createElement("div", { className: "e-title-header" });
      var headerBackIcon = createElement("div", { className: "e-back-icon e-icons" });
      header.appendChild(headerBackIcon);
      var headerTemplate = this.getDialogHeader(data);
      header.appendChild(headerTemplate);
      var headerSaveIcon = createElement("div", { className: "e-save-icon e-icons" });
      header.appendChild(headerSaveIcon);
      return header;
    };
    EventWindow2.prototype.getDialogHeader = function(args) {
      var headerTemplate = [];
      var headerTemplateId = this.parent.element.id + "_editorHeaderTemplate";
      var temHeaderDiv = document.createElement("div");
      headerTemplate = [].slice.call(this.parent.getEditorHeaderTemplate()(args || {}, this.parent, "editorHeaderTemplate", headerTemplateId, false));
      append(headerTemplate, temHeaderDiv);
      return temHeaderDiv;
    };
    EventWindow2.prototype.getDialogFooter = function(args) {
      var footerTemplate = [];
      var footerTemplateId = this.parent.element.id + "_editorFooterTemplate";
      var temFooterDiv = document.createElement("div");
      footerTemplate = [].slice.call(this.parent.getEditorFooterTemplate()(args || {}, this.parent, "editorFooterTemplate", footerTemplateId, false));
      append(footerTemplate, temFooterDiv);
      return temFooterDiv;
    };
    EventWindow2.prototype.preventEventSave = function(e) {
      if (this.parent && !this.parent.allowKeyboardInteraction && e.code === "Enter") {
        this.isEnterKey = true;
      }
    };
    EventWindow2.prototype.onBeforeOpen = function(args) {
      var _this = this;
      var endTime = this.eventData[this.fields.endTime].getTime();
      var eventProp = {
        type: "Editor",
        data: this.eventData,
        cancel: false,
        element: this.element,
        target: this.cellClickAction ? this.parent.activeCellsData.element : this.parent.activeEventData.element
      };
      if (this.cellClickAction) {
        eventProp.duration = this.getSlotDuration();
      }
      var saveObj = this.getInstance(EVENT_WINDOW_SAVE_BUTTON_CLASS);
      if (saveObj) {
        saveObj.disabled = !(this.cellClickAction ? this.parent.eventSettings.allowAdding : this.parent.eventSettings.allowEditing);
        saveObj.dataBind();
      }
      var deleteObj = this.getInstance(DELETE_EVENT_CLASS);
      if (deleteObj) {
        deleteObj.disabled = !this.parent.eventSettings.allowDeleting;
        deleteObj.dataBind();
      }
      var callBackPromise = new Deferred();
      this.parent.trigger(popupOpen, eventProp, function(popupArgs) {
        args.cancel = popupArgs.cancel;
        _this.duration = _this.cellClickAction ? popupArgs.duration : null;
        if (_this.eventData[_this.fields.endTime].getTime() === endTime && !_this.cellClickAction && _this.eventData[_this.fields.endTime].getHours() === 0 && _this.eventData[_this.fields.endTime].getMinutes() === 0) {
          _this.eventData = extend({}, _this.eventData, null, true);
          _this.trimAllDay(_this.eventData);
        }
        _this.refreshDateTimePicker(_this.duration);
        if (_this.cellClickAction && popupArgs.duration !== _this.getSlotDuration() && isNullOrUndefined(_this.parent.editorTemplate)) {
          var startObj = _this.getInstance(EVENT_WINDOW_START_CLASS);
          var endObj = _this.getInstance(EVENT_WINDOW_END_CLASS);
          endObj.value = new Date(startObj.value.getTime() + MS_PER_MINUTE * popupArgs.duration);
          endObj.dataBind();
        }
        if (_this.parent.editorTemplate && _this.element.querySelector(".e-recurrenceeditor") && !_this.recurrenceEditor) {
          _this.recurrenceEditor = _this.getInstance("e-recurrenceeditor");
        }
        callBackPromise.resolve(args);
      });
      return callBackPromise;
    };
    EventWindow2.prototype.onBeforeClose = function(args) {
      var _this = this;
      if (args.isInteracted) {
        this.isCrudAction = false;
      }
      var eventProp = {
        type: "Editor",
        event: args.event || this.dialogEvent,
        data: this.eventCrudData,
        cancel: false,
        element: this.element,
        target: this.cellClickAction ? this.parent.activeCellsData.element : this.parent.activeEventData.element
      };
      var callBackPromise = new Deferred();
      this.parent.trigger(popupClose, eventProp, function(popupArgs) {
        args.cancel = popupArgs.cancel;
        if (!popupArgs.cancel) {
          if (_this.isCrudAction) {
            args.cancel = _this.processCrudActions(popupArgs.data);
            _this.isCrudAction = args.cancel;
          }
          if (!_this.isCrudAction) {
            _this.resetForm();
            _this.parent.eventBase.focusElement(true);
            _this.eventCrudData = null;
          }
        }
        callBackPromise.resolve(args);
      });
      return callBackPromise;
    };
    EventWindow2.prototype.getEventWindowContent = function() {
      var container = createElement("div", { className: FORM_CONTAINER_CLASS });
      var form = createElement("form", {
        id: this.parent.element.id + "EditForm",
        className: FORM_CLASS,
        attrs: { onsubmit: "return false;" }
      });
      this.renderFormElements(form);
      container.appendChild(form);
      return container;
    };
    EventWindow2.prototype.renderFormElements = function(form, args, type, repeatType) {
      var _this = this;
      if (!isNullOrUndefined(this.parent.editorTemplate)) {
        if (args) {
          if (this.fieldValidator) {
            this.fieldValidator.destroy();
            this.fieldValidator = null;
          }
          if (this.recurrenceEditor) {
            this.recurrenceEditor.destroy();
            this.recurrenceEditor = null;
          }
          this.destroyComponents();
          this.parent.resetTemplates(["editorTemplate"]);
          EventHandler.clearEvents(form);
          if (!this.parent.isReact) {
            var formElements = [].slice.call(form.children);
            for (var _i = 0, formElements_1 = formElements; _i < formElements_1.length; _i++) {
              var element = formElements_1[_i];
              remove(element);
            }
          }
        }
        var templateId = this.parent.element.id + "_editorTemplate";
        var tempEle = [].slice.call(this.parent.getEditorTemplate()(args || {}, this.parent, "editorTemplate", templateId, false));
        append(tempEle, form);
        this.parent.renderTemplates(function() {
          if (_this.element) {
            _this.applyFormValidation();
            if (args) {
              _this.setEditorContent(args, type, repeatType);
            }
          }
        });
      } else {
        form.appendChild(this.getDefaultEventWindowContent());
        if (args) {
          this.setEditorContent(args, type, repeatType);
        }
      }
    };
    EventWindow2.prototype.getDefaultEventWindowContent = function() {
      var parentDiv = this.createDivElement(EVENT_WINDOW_DIALOG_PARENT_CLASS);
      var titleLocationDiv = this.createDivElement(EVENT_WINDOW_TITLE_LOCATION_DIV_CLASS);
      parentDiv.appendChild(titleLocationDiv);
      titleLocationDiv.appendChild(this.renderTextBox(SUBJECT_CLASS));
      titleLocationDiv.appendChild(this.renderTextBox(LOCATION_CLASS));
      var startEndDateTimeDiv = this.createDivElement(EVENT_WINDOW_START_END_DIV_CLASS);
      parentDiv.appendChild(startEndDateTimeDiv);
      startEndDateTimeDiv.appendChild(this.renderDateTimePicker(EVENT_WINDOW_START_CLASS, this.onTimeChange.bind(this)));
      startEndDateTimeDiv.appendChild(this.renderDateTimePicker(EVENT_WINDOW_END_CLASS));
      var allDayTimezoneDiv = this.createDivElement(EVENT_WINDOW_ALLDAY_TZ_DIV_CLASS);
      parentDiv.appendChild(allDayTimezoneDiv);
      allDayTimezoneDiv.appendChild(this.renderCheckBox(EVENT_WINDOW_ALL_DAY_CLASS));
      allDayTimezoneDiv.appendChild(this.renderCheckBox(TIME_ZONE_CLASS));
      var timezoneParentDiv = this.createDivElement(EVENT_WINDOW_TIME_ZONE_DIV_CLASS);
      parentDiv.appendChild(timezoneParentDiv);
      timezoneParentDiv.appendChild(this.renderDropDown(EVENT_WINDOW_START_TZ_CLASS));
      timezoneParentDiv.appendChild(this.renderDropDown(EVENT_WINDOW_END_TZ_CLASS));
      var repeatParentDiv = this.createDivElement(EVENT_WINDOW_REPEAT_DIV_CLASS);
      parentDiv.appendChild(repeatParentDiv);
      var repeatDiv = this.renderCheckBox(EVENT_WINDOW_REPEAT_CLASS);
      var repeatEditContainer = createElement("span", { className: REPEAT_CONTAINER_CLASS });
      var button = createElement("button", {
        className: REPEAT_BUTTON_CLASS,
        attrs: { type: "button", "title": this.l10n.getConstant("editRecurrence") }
      });
      this.buttonObj = new Button({ iconCss: REPEAT_BUTTON_ICON_CLASS + " e-icons", cssClass: "e-medium " + this.parent.cssClass });
      repeatEditContainer.appendChild(button);
      this.buttonObj.appendTo(button);
      repeatDiv.appendChild(repeatEditContainer);
      repeatParentDiv.appendChild(repeatDiv);
      if (this.parent.isAdaptive) {
        EventHandler.add(button, "click", this.loadRecurrenceEditor, this);
      } else {
        this.createRecurrenceEditor(parentDiv);
      }
      if (this.parent.resourceCollection.length > 0) {
        var resourceParentDiv = this.createDivElement(EVENT_WINDOW_RESOURCES_DIV_CLASS);
        for (var _i = 0, _a = this.parent.resourceBase.resourceCollection; _i < _a.length; _i++) {
          var resource = _a[_i];
          resourceParentDiv.appendChild(this.renderResourceDetails(resource));
        }
        parentDiv.appendChild(resourceParentDiv);
      }
      var description = this.createDivElement(DESCRIPTION_CLASS + "-row");
      description.appendChild(this.renderTextBox(DESCRIPTION_CLASS));
      parentDiv.appendChild(description);
      var submit = createElement("button", { attrs: { type: "hidden", title: "submit", style: "display:none" } });
      parentDiv.appendChild(submit);
      return parentDiv;
    };
    EventWindow2.prototype.createRecurrenceEditor = function(parentDiv) {
      var recurrenceEditor = createElement("div", { id: this.parent.element.id + "_recurrence_editor" });
      parentDiv.appendChild(recurrenceEditor);
      this.recurrenceEditor = this.renderRecurrenceEditor();
      this.recurrenceEditor.appendTo(recurrenceEditor);
      this.updateMinMaxDateToEditor();
    };
    EventWindow2.prototype.createDivElement = function(className) {
      return createElement("div", { className });
    };
    EventWindow2.prototype.createInputElement = function(className, fieldName, type) {
      return createElement(type || "input", {
        className,
        attrs: {
          type: "text",
          name: fieldName,
          value: "",
          id: fieldName
        }
      });
    };
    EventWindow2.prototype.getSlotDuration = function() {
      return this.parent.activeViewOptions.timeScale.interval / this.parent.activeViewOptions.timeScale.slotCount;
    };
    EventWindow2.prototype.renderDateTimePicker = function(value, changeEvent) {
      var dateTimeDiv = this.createDivElement(value + "-container");
      var fieldName = this.getFieldName(value);
      var dateTimeInput = this.createInputElement(value + " " + EVENT_FIELD2, fieldName);
      dateTimeDiv.appendChild(dateTimeInput);
      var dateTimePicker = new DateTimePicker({
        change: changeEvent,
        firstDayOfWeek: this.parent.activeViewOptions.firstDayOfWeek,
        calendarMode: this.parent.calendarMode,
        min: this.parent.minDate,
        max: new Date((/* @__PURE__ */ new Date(+this.parent.maxDate)).setHours(23, 59, 59)),
        cssClass: this.parent.cssClass,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        floatLabelType: "Always",
        strictMode: true,
        timeFormat: this.parent.activeViewOptions.timeFormat,
        format: (isNullOrUndefined(this.parent.dateFormat) ? this.getFormat("dateFormats") : this.parent.dateFormat) + " " + this.parent.activeViewOptions.timeFormat,
        placeholder: this.getFieldLabel(value),
        step: this.getSlotDuration(),
        width: "100%"
      });
      dateTimePicker.appendTo(dateTimeInput);
      return dateTimeDiv;
    };
    EventWindow2.prototype.refreshDateTimePicker = function(duration) {
      var elementSelector = "." + EVENT_WINDOW_START_CLASS + ",." + EVENT_WINDOW_END_CLASS;
      var startEndElement = [].slice.call(this.element.querySelectorAll(elementSelector));
      for (var _i = 0, startEndElement_1 = startEndElement; _i < startEndElement_1.length; _i++) {
        var element = startEndElement_1[_i];
        var instance = element.ej2_instances[0];
        instance.firstDayOfWeek = this.parent.activeViewOptions.firstDayOfWeek;
        instance.timeFormat = this.parent.activeViewOptions.timeFormat;
        instance.step = duration || this.getSlotDuration();
        instance.dataBind();
      }
    };
    EventWindow2.prototype.onTimeChange = function() {
      var startObj = this.getInstance(EVENT_WINDOW_START_CLASS);
      if (startObj.element.parentElement.classList.contains("e-input-focus")) {
        var endObj = this.getInstance(EVENT_WINDOW_END_CLASS);
        var duration = 0;
        if (this.cellClickAction) {
          duration = MS_PER_MINUTE * this.duration;
          this.eventWindowTime.startTime = startObj.value;
        } else {
          duration = this.eventData[this.fields.endTime].getTime() - this.eventData[this.fields.startTime].getTime();
        }
        var endDate = isNullOrUndefined(startObj.value) ? null : new Date(startObj.value.getTime() + duration);
        if (this.cellClickAction) {
          this.eventWindowTime.endTime = endDate;
        }
        endObj.value = endDate;
        endObj.dataBind();
      }
      if (this.recurrenceEditor) {
        this.recurrenceEditor.updateRuleUntilDate(this.eventWindowTime.startTime);
      }
    };
    EventWindow2.prototype.renderResourceDetails = function(resourceData) {
      var fieldName = resourceData.field;
      var value = "e-" + fieldName;
      var labelValue = resourceData.title;
      var resourceDiv = this.createDivElement(value + "-container e-resources");
      var resourceInput = this.createInputElement(value + " " + EVENT_FIELD2, fieldName);
      resourceDiv.appendChild(resourceInput);
      var resourceTemplate = function(data) {
        return SanitizeHtmlHelper.sanitize('<div class="e-resource-template"><div class="e-resource-color" style="background-color:' + data[resourceData.colorField] + '"></div><div class="e-resource-text">' + data[resourceData.textField] + "</div></div>");
      };
      initializeCSPTemplate(resourceTemplate, resourceData);
      if (resourceData.allowMultiple) {
        var listObj = new MultiSelect({
          enableRtl: this.parent.enableRtl,
          enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
          cssClass: this.parent.cssClass || "",
          dataSource: resourceData.dataSource,
          change: this.onMultiselectResourceChange.bind(this),
          itemTemplate: resourceTemplate,
          fields: {
            text: resourceData.textField,
            value: resourceData.idField
          },
          htmlAttributes: { "name": fieldName },
          floatLabelType: "Always",
          placeholder: labelValue,
          popupHeight: "230px",
          popupWidth: "447px",
          mode: "Box"
        });
        listObj.appendTo(resourceInput);
      } else {
        var dropDownList = new DropDownList({
          cssClass: this.parent.cssClass || "",
          change: this.onDropdownResourceChange.bind(this),
          dataSource: resourceData.dataSource,
          enableRtl: this.parent.enableRtl,
          fields: {
            text: resourceData.textField,
            value: resourceData.idField
          },
          htmlAttributes: { "name": fieldName },
          floatLabelType: "Always",
          placeholder: labelValue,
          popupHeight: "230px",
          popupWidth: "447px",
          itemTemplate: resourceTemplate
        });
        dropDownList.appendTo(resourceInput);
      }
      return resourceDiv;
    };
    EventWindow2.prototype.renderDropDown = function(value) {
      var _this = this;
      var fieldName = this.getFieldName(value);
      var timezoneDiv = this.createDivElement(value + "-container");
      var timezoneInput = this.createInputElement(value + " " + EVENT_FIELD2, fieldName);
      timezoneDiv.appendChild(timezoneInput);
      var dropDownList = new DropDownList({
        allowFiltering: true,
        change: this.onTimezoneChange.bind(this),
        cssClass: this.parent.cssClass || "",
        dataSource: this.parent.timezoneDataSource,
        enableRtl: this.parent.enableRtl,
        fields: { text: "Text", value: "Value" },
        filterBarPlaceholder: this.parent.localeObj.getConstant("searchTimezone"),
        noRecordsTemplate: this.parent.localeObj.getConstant("noRecords"),
        filtering: function(e) {
          var query = new Query();
          query = e.text !== "" ? query.where("Text", "contains", e.text, true) : query;
          e.updateData(_this.parent.timezoneDataSource, query);
        },
        htmlAttributes: { "title": this.getFieldLabel(value), "name": fieldName },
        floatLabelType: "Always",
        placeholder: this.getFieldLabel(value),
        popupHeight: "230px"
      });
      dropDownList.appendTo(timezoneInput);
      return timezoneDiv;
    };
    EventWindow2.prototype.onMultiselectResourceChange = function(args) {
      if (!args.value || !this.parent.activeViewOptions.group.byGroupID || this.parent.resourceCollection.length <= 1) {
        return;
      }
      var resourceCollection = this.parent.resourceBase.resourceCollection;
      var fieldName = args.element.getAttribute("name") || this.getColumnName(args.element);
      for (var i = 0; i < resourceCollection.length; i++) {
        if (resourceCollection[parseInt(i.toString(), 10)].field === fieldName && i < resourceCollection.length - 1) {
          var resObject = this.createInstance(i);
          var datasource = [];
          var _loop_1 = function(j2) {
            var resourceModel = resourceCollection[i + 1];
            var filter = resourceModel.dataSource.filter(function(data) {
              return data[resourceModel.groupIDField] === args.value[parseInt(j2.toString(), 10)];
            })[0];
            var groupId = !isNullOrUndefined(filter) ? filter[resourceCollection[i + 1].groupIDField] : null;
            var filterRes = this_1.filterDatasource(i, groupId);
            datasource = datasource.concat(filterRes);
          };
          var this_1 = this;
          for (var j = 0; j < args.value.length; j++) {
            _loop_1(j);
          }
          resObject.dataSource = datasource;
          resObject.dataBind();
        }
      }
    };
    EventWindow2.prototype.createInstance = function(index) {
      var resourceData = this.parent.resourceBase.resourceCollection[index + 1];
      var resObject = this.element.querySelector(".e-" + resourceData.field).ej2_instances[0];
      resObject.clear();
      return resObject;
    };
    EventWindow2.prototype.onDropdownResourceChange = function(args) {
      if (!args.value || this.parent.resourceCollection.length <= 1 || !this.parent.activeViewOptions.group.byGroupID) {
        return;
      }
      var fieldName = args.element.getAttribute("name") || this.getColumnName(args.element);
      var resourceCollection = this.parent.resourceBase.resourceCollection;
      for (var i = 0; i < resourceCollection.length; i++) {
        if (i < resourceCollection.length - 1 && resourceCollection[parseInt(i.toString(), 10)].field === fieldName) {
          var resObj = this.createInstance(i);
          var groupId = args.itemData[resourceCollection[parseInt(i.toString(), 10)].idField];
          resObj.dataSource = this.filterDatasource(i, groupId);
          resObj.dataBind();
          var resValue = resObj.dataSource.length > 0 ? resObj.dataSource[0][resourceCollection[i + 1].idField] : null;
          resObj.value = resourceCollection[i + 1].allowMultiple ? [resValue] : resValue;
          resObj.dataBind();
        }
      }
    };
    EventWindow2.prototype.filterDatasource = function(index, groupId) {
      var resourceData = this.parent.resourceBase.resourceCollection[index + 1];
      return resourceData.dataSource.filter(function(data) {
        return data[resourceData.groupIDField] === groupId;
      });
    };
    EventWindow2.prototype.onTimezoneChange = function(args) {
      var fieldName = args.element.getAttribute("name") || this.getColumnName(args.element);
      if (fieldName === this.parent.eventFields.startTimezone) {
        var startTimezoneObj = this.getInstance(EVENT_WINDOW_START_TZ_CLASS);
        var endTimezoneObj = this.getInstance(EVENT_WINDOW_END_TZ_CLASS);
        endTimezoneObj.value = startTimezoneObj.value;
        endTimezoneObj.dataBind();
      }
    };
    EventWindow2.prototype.renderCheckBox = function(value) {
      var checkBoxDiv = this.createDivElement(value + "-container");
      var fieldName = this.getFieldName(value);
      var checkBoxInput = this.createInputElement(value + " " + EVENT_FIELD2, fieldName);
      checkBoxDiv.appendChild(checkBoxInput);
      var checkBox = new CheckBox({
        change: this.onChange.bind(this),
        cssClass: value + " " + this.parent.cssClass,
        enableRtl: this.parent.enableRtl,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        label: this.getFieldLabel(value)
      });
      checkBox.appendTo(checkBoxInput);
      checkBoxInput.setAttribute("name", fieldName);
      if (fieldName === "Repeat") {
        this.repeatStatus = checkBox;
      }
      return checkBoxDiv;
    };
    EventWindow2.prototype.renderTextBox = function(value) {
      var textBoxDiv = this.createDivElement(value + "-container");
      var fieldName = this.getFieldName(value);
      var elementType = value === DESCRIPTION_CLASS ? "textarea" : "input";
      var textBoxInput = this.createInputElement(value + " " + EVENT_FIELD2, fieldName, elementType);
      textBoxDiv.appendChild(textBoxInput);
      Input.createInput({
        element: textBoxInput,
        floatLabelType: "Always",
        properties: {
          enableRtl: this.parent.enableRtl,
          placeholder: this.getFieldLabel(value)
        }
      });
      return textBoxDiv;
    };
    EventWindow2.prototype.getFieldName = function(name) {
      var fieldName = "";
      switch (name) {
        case SUBJECT_CLASS:
          fieldName = this.fields.subject;
          break;
        case LOCATION_CLASS:
          fieldName = this.fields.location;
          break;
        case EVENT_WINDOW_START_CLASS:
          fieldName = this.fields.startTime;
          break;
        case EVENT_WINDOW_END_CLASS:
          fieldName = this.fields.endTime;
          break;
        case DESCRIPTION_CLASS:
          fieldName = this.fields.description;
          break;
        case EVENT_WINDOW_ALL_DAY_CLASS:
          fieldName = this.fields.isAllDay;
          break;
        case EVENT_WINDOW_START_TZ_CLASS:
          fieldName = this.fields.startTimezone;
          break;
        case EVENT_WINDOW_END_TZ_CLASS:
          fieldName = this.fields.endTimezone;
          break;
        case TIME_ZONE_CLASS:
          fieldName = "Timezone";
          break;
        case EVENT_WINDOW_REPEAT_CLASS:
          fieldName = "Repeat";
          break;
      }
      return fieldName;
    };
    EventWindow2.prototype.getFieldLabel = function(fieldName) {
      var labelText = "";
      switch (fieldName) {
        case SUBJECT_CLASS:
          labelText = this.parent.editorTitles.subject;
          break;
        case LOCATION_CLASS:
          labelText = this.parent.editorTitles.location;
          break;
        case DESCRIPTION_CLASS:
          labelText = this.parent.editorTitles.description;
          break;
        case EVENT_WINDOW_START_CLASS:
          labelText = this.parent.editorTitles.startTime;
          break;
        case EVENT_WINDOW_END_CLASS:
          labelText = this.parent.editorTitles.endTime;
          break;
        case EVENT_WINDOW_START_TZ_CLASS:
          labelText = this.parent.editorTitles.startTimezone;
          break;
        case EVENT_WINDOW_END_TZ_CLASS:
          labelText = this.parent.editorTitles.endTimezone;
          break;
        case EVENT_WINDOW_REPEAT_CLASS:
          labelText = this.parent.editorTitles.recurrenceRule;
          break;
        case EVENT_WINDOW_ALL_DAY_CLASS:
          labelText = this.parent.editorTitles.isAllDay;
          break;
        case TIME_ZONE_CLASS:
          labelText = this.l10n.getConstant("timezone");
          break;
      }
      return labelText;
    };
    EventWindow2.prototype.onChange = function(args) {
      if (args.event && args.event.target) {
        var targetSelector = "." + EVENT_WINDOW_ALL_DAY_CLASS + ",." + TIME_ZONE_CLASS + ",." + EVENT_WINDOW_REPEAT_CLASS;
        var target = closest(args.event.target, targetSelector);
        if (target.classList.contains(EVENT_WINDOW_ALL_DAY_CLASS)) {
          this.onAllDayChange(args.checked);
        } else if (target.classList.contains(TIME_ZONE_CLASS)) {
          this.timezoneChangeStyle(args.checked);
        } else if (target.classList.contains(EVENT_WINDOW_REPEAT_CLASS)) {
          this.onRepeatChange(args.checked);
        }
      }
    };
    EventWindow2.prototype.renderRepeatDialog = function() {
      var element = createElement("div");
      this.repeatDialogObject = new Dialog({
        header: this.l10n.getConstant("recurrence"),
        visible: false,
        content: '<div class="e-rec-editor"></div>',
        closeOnEscape: true,
        width: "90%",
        buttons: [
          {
            click: this.repeatSaveDialog.bind(this),
            buttonModel: { content: this.l10n.getConstant("save"), cssClass: "e-save", isPrimary: true }
          },
          { click: this.repeatCancelDialog.bind(this), buttonModel: { cssClass: "e-cancel", content: this.l10n.getConstant("cancel") } }
        ],
        target: this.element,
        animationSettings: { effect: "Zoom" },
        enableRtl: this.parent.enableRtl,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        isModal: true,
        cssClass: REPEAT_DIALOG_CLASS,
        open: this.repeatOpenDialog.bind(this)
      });
      this.element.appendChild(element);
      this.repeatDialogObject.appendTo(element);
      this.createRecurrenceEditor(this.repeatDialogObject.element.querySelector(".e-rec-editor"));
    };
    EventWindow2.prototype.loadRecurrenceEditor = function() {
      this.repeatDialogObject.show();
      if (this.recurrenceEditor && this.repeatRule) {
        this.recurrenceEditor.setRecurrenceRule(this.repeatRule);
      }
    };
    EventWindow2.prototype.onRepeatChange = function(state) {
      if (state) {
        if (!this.repeatDialogObject) {
          this.renderRepeatDialog();
        }
        this.recurrenceEditor.setProperties({ startDate: this.repeatStartDate, selectedType: 0 });
        this.loadRecurrenceEditor();
      } else {
        if (this.repeatDialogObject) {
          this.repeatDialogObject.hide();
        }
        this.repeatRule = "";
        if (this.recurrenceEditor) {
          this.recurrenceEditor.setRecurrenceRule(this.repeatRule);
          this.updateRepeatLabel(this.repeatRule);
        }
        var element = this.element.querySelector("." + REPEAT_CONTAINER_CLASS);
        addClass([element], HIDE_STYLE_CLASS);
      }
    };
    EventWindow2.prototype.repeatSaveDialog = function() {
      this.repeatRule = this.recurrenceEditor.getRecurrenceRule();
      var element = this.element.querySelector("." + REPEAT_CONTAINER_CLASS);
      if (this.recurrenceEditor.getRecurrenceRule()) {
        removeClass([element], HIDE_STYLE_CLASS);
      } else {
        addClass([element], HIDE_STYLE_CLASS);
        this.repeatStatus.setProperties({ checked: false });
      }
      this.updateRepeatLabel(this.repeatRule);
      this.closeRepeatDialog();
    };
    EventWindow2.prototype.closeRepeatDialog = function() {
      this.repeatDialogObject.hide();
    };
    EventWindow2.prototype.repeatCancelDialog = function() {
      this.closeRepeatDialog();
      if (this.recurrenceEditor) {
        this.recurrenceEditor.setRecurrenceRule(this.repeatTempRule);
      }
      if (!this.repeatTempRule) {
        this.repeatStatus.setProperties({ checked: false });
      }
    };
    EventWindow2.prototype.repeatOpenDialog = function() {
      this.repeatTempRule = this.recurrenceEditor.getRecurrenceRule();
    };
    EventWindow2.prototype.onCellDetailsUpdate = function(eventObj, repeatType) {
      if (!this.parent.eventSettings.allowAdding) {
        return;
      }
      if (this.parent.isAdaptive && repeatType && !this.repeatDialogObject) {
        this.renderRepeatDialog();
      }
      this.element.querySelector("." + FORM_CLASS).removeAttribute("data-id");
      if (isNullOrUndefined(this.parent.editorHeaderTemplate)) {
        this.element.querySelector("." + EVENT_WINDOW_TITLE_TEXT_CLASS).innerHTML = this.l10n.getConstant("newEvent");
      }
      eventObj.Timezone = false;
      this.repeatStartDate = eventObj[this.fields.startTime];
      this.repeatRule = "";
      if (!isNullOrUndefined(this.parent.eventSettings.fields.subject.default)) {
        eventObj[this.fields.subject] = this.parent.eventSettings.fields.subject.default;
      }
      if (!isNullOrUndefined(this.parent.eventSettings.fields.location.default)) {
        eventObj[this.fields.location] = this.parent.eventSettings.fields.location.default;
      }
      if (!isNullOrUndefined(this.parent.eventSettings.fields.description.default)) {
        eventObj[this.fields.description] = this.parent.eventSettings.fields.description.default;
      }
      this.showDetails(eventObj);
      if (eventObj[this.fields.recurrenceRule] && this.recurrenceEditor) {
        this.recurrenceEditor.setRecurrenceRule(eventObj[this.fields.recurrenceRule], eventObj[this.fields.startTime]);
        this.repeatRule = eventObj[this.fields.recurrenceRule];
      }
      var deleteButton = this.element.querySelector("." + DELETE_EVENT_CLASS);
      if (deleteButton) {
        addClass([deleteButton], DISABLE_CLASS);
      }
      if (this.recurrenceEditor) {
        this.recurrenceEditor.setProperties({
          startDate: eventObj[this.fields.startTime],
          selectedType: !isNullOrUndefined(repeatType) ? repeatType : !isNullOrUndefined(eventObj[this.fields.recurrenceRule]) ? this.recurrenceEditor.selectedType : 0
        });
        this.repeatRule = this.recurrenceEditor.value;
      }
      if (this.parent.isAdaptive && isNullOrUndefined(this.parent.editorTemplate)) {
        var element = this.element.querySelector("." + REPEAT_CONTAINER_CLASS);
        if (eventObj[this.fields.recurrenceRule] || repeatType) {
          removeClass([element], HIDE_STYLE_CLASS);
          this.repeatStatus.setProperties({ checked: true });
        } else {
          addClass([element], HIDE_STYLE_CLASS);
          this.repeatStatus.setProperties({ checked: false });
        }
        this.updateRepeatLabel(this.repeatRule);
      } else {
        var saveButton = this.element.querySelector("." + EVENT_WINDOW_SAVE_BUTTON_CLASS);
        this.disableButton(saveButton, false);
      }
      this.dialogObject.show();
    };
    EventWindow2.prototype.convertToEventData = function(cellsData, eventObj) {
      if (cellsData.subject) {
        eventObj[this.fields.subject] = cellsData.subject;
      }
      eventObj[this.fields.startTime] = cellsData.startTime;
      eventObj[this.fields.endTime] = cellsData.endTime;
      eventObj[this.fields.isAllDay] = cellsData.isAllDay;
      if (cellsData.RecurrenceRule) {
        eventObj[this.fields.recurrenceRule] = cellsData.RecurrenceRule;
      }
      if (this.parent.resourceCollection.length > 0 || this.parent.activeViewOptions.group.resources.length > 0) {
        this.parent.resourceBase.setResourceValues(eventObj);
      }
    };
    EventWindow2.prototype.applyFormValidation = function() {
      var form = this.element.querySelector("." + FORM_CLASS);
      if (!form) {
        return;
      }
      var getValidationRule = function(rules2) {
        return rules2 && Object.keys(rules2).length > 0 ? rules2 : void 0;
      };
      var rules = {};
      var subjectRule = getValidationRule(this.parent.eventSettings.fields.subject.validation);
      if (!isNullOrUndefined(subjectRule)) {
        rules[this.parent.eventSettings.fields.subject.name] = subjectRule;
      }
      var locationRule = getValidationRule(this.parent.eventSettings.fields.location.validation);
      if (!isNullOrUndefined(locationRule)) {
        rules[this.parent.eventSettings.fields.location.name] = locationRule;
      }
      var startTimeRule = getValidationRule(this.parent.eventSettings.fields.startTime.validation);
      if (!isNullOrUndefined(startTimeRule)) {
        rules[this.parent.eventSettings.fields.startTime.name] = startTimeRule;
      }
      var endTimeRule = getValidationRule(this.parent.eventSettings.fields.endTime.validation);
      if (!isNullOrUndefined(endTimeRule)) {
        rules[this.parent.eventSettings.fields.endTime.name] = endTimeRule;
      }
      var descriptionRule = getValidationRule(this.parent.eventSettings.fields.description.validation);
      if (!isNullOrUndefined(descriptionRule)) {
        rules[this.parent.eventSettings.fields.description.name] = descriptionRule;
      }
      if (this.fieldValidator) {
        this.fieldValidator.destroy();
        this.fieldValidator = null;
      }
      this.fieldValidator = new FieldValidator();
      this.fieldValidator.renderFormValidator(form, rules, this.element, this.parent.locale);
    };
    EventWindow2.prototype.showDetails = function(eventData) {
      this.eventData = eventData;
      var eventObj = extend({}, eventData, null, true);
      var formElements = this.getFormElements(EVENT_WINDOW_DIALOG_CLASS);
      if ((!this.cellClickAction || this.cellClickAction && !isNullOrUndefined(this.parent.editorTemplate)) && eventObj[this.fields.endTime].getHours() === 0 && eventObj[this.fields.endTime].getMinutes() === 0) {
        this.trimAllDay(eventObj);
      }
      var keyNames = Object.keys(eventObj);
      for (var _i = 0, formElements_2 = formElements; _i < formElements_2.length; _i++) {
        var curElement = formElements_2[_i];
        var columnName = curElement.name || this.getColumnName(curElement);
        if (!isNullOrUndefined(columnName) && columnName !== "") {
          if (keyNames.indexOf(columnName) !== -1) {
            this.setValueToElement(curElement, eventObj["" + columnName]);
          } else {
            this.setDefaultValueToElement(curElement);
          }
        }
      }
      if (isNullOrUndefined(this.parent.editorTemplate)) {
        this.onAllDayChange(eventObj[this.fields.isAllDay]);
        var timezoneObj = this.getInstance(TIME_ZONE_CLASS + "." + EVENT_FIELD2);
        if (!(isNullOrUndefined(eventObj[this.fields.startTimezone]) && isNullOrUndefined(eventObj[this.fields.endTimezone]))) {
          timezoneObj.checked = true;
          timezoneObj.dataBind();
        }
        this.timezoneChangeStyle(timezoneObj.checked);
        delete eventObj.Timezone;
      }
    };
    EventWindow2.prototype.getColumnName = function(element) {
      var attrName = element.getAttribute("data-name") || "";
      if (attrName === "") {
        var isDropDowns = false;
        var fieldSelector = "";
        if (element.classList.contains("e-dropdownlist")) {
          fieldSelector = "e-ddl";
          isDropDowns = true;
        } else if (element.classList.contains("e-multiselect")) {
          fieldSelector = "e-multiselect";
          isDropDowns = true;
        } else if (element.classList.contains("e-datetimepicker")) {
          fieldSelector = "e-datetimepicker";
        } else if (element.classList.contains("e-datepicker")) {
          fieldSelector = "e-datepicker";
        } else if (element.classList.contains("e-checkbox")) {
          fieldSelector = "e-checkbox";
        }
        var classSelector = isDropDowns ? "." + fieldSelector + ":not(.e-control)" : "." + fieldSelector;
        var control = closest(element, classSelector) || element.querySelector("." + fieldSelector);
        if (control) {
          var attrEle = control.querySelector("[name]");
          if (attrEle) {
            attrName = attrEle.name;
          }
        }
      }
      return attrName;
    };
    EventWindow2.prototype.onAllDayChange = function(allDayStatus) {
      var startObj = this.getInstance(EVENT_WINDOW_START_CLASS);
      var endObj = this.getInstance(EVENT_WINDOW_END_CLASS);
      var timezoneDiv = this.element.querySelector(".e-time-zone-container");
      var format;
      if (allDayStatus) {
        format = isNullOrUndefined(this.parent.dateFormat) ? this.getFormat("dateFormats") : this.parent.dateFormat;
        addClass(this.element.querySelectorAll(".e-time-icon"), EVENT_WINDOW_ICON_DISABLE_CLASS);
        addClass([timezoneDiv], DISABLE_CLASS);
        if (this.element.querySelector("." + EVENT_WINDOW_TIME_ZONE_DIV_CLASS)) {
          removeClass([this.element.querySelector("." + EVENT_WINDOW_TIME_ZONE_DIV_CLASS)], ENABLE_CLASS);
        }
        startObj.format = endObj.format = format;
      } else {
        format = isNullOrUndefined(this.parent.dateFormat) ? this.getFormat("dateFormats") + " " + this.parent.activeViewOptions.timeFormat : this.parent.dateFormat + " " + this.parent.activeViewOptions.timeFormat;
        removeClass(this.element.querySelectorAll(".e-time-icon"), EVENT_WINDOW_ICON_DISABLE_CLASS);
        removeClass([timezoneDiv], DISABLE_CLASS);
        if (this.element.querySelector(".e-checkbox-wrapper .e-time-zone").checked) {
          addClass([this.element.querySelector("." + EVENT_WINDOW_TIME_ZONE_DIV_CLASS)], ENABLE_CLASS);
        }
        startObj.format = endObj.format = format;
      }
      if (this.cellClickAction) {
        this.updateDateTime(allDayStatus, startObj, endObj);
      }
      startObj.dataBind();
      endObj.dataBind();
      if (!isNullOrUndefined(this.recurrenceEditor)) {
        this.recurrenceEditor.updateRuleUntilDate(startObj.value);
      }
    };
    EventWindow2.prototype.updateDateTime = function(allDayStatus, startObj, endObj) {
      var startDate;
      var endDate;
      if (allDayStatus) {
        startDate = resetTime(new Date(this.eventWindowTime.startTime.getTime()));
        if (this.parent.activeCellsData.isAllDay) {
          var temp = addDays(new Date(this.eventWindowTime.endTime.getTime()), -1).getTime();
          endDate = +this.eventWindowTime.startTime > temp ? this.eventWindowTime.endTime : new Date(temp);
        } else {
          endDate = resetTime(new Date(this.eventWindowTime.endTime.getTime()));
        }
      } else {
        var start = this.parent.activeCellsData.startTime;
        startDate = new Date(this.eventWindowTime.startTime.getTime());
        startDate.setHours(start.getHours(), start.getMinutes(), start.getSeconds());
        if (this.parent.activeCellsData.isAllDay) {
          var startHour = this.parent.getStartEndTime(this.parent.workHours.start);
          startDate.setHours(startHour.getHours(), startHour.getMinutes(), startHour.getSeconds());
          endDate = new Date(startDate.getTime());
          endDate.setMilliseconds(MS_PER_MINUTE * this.getSlotDuration());
        } else {
          endDate = new Date(startDate.getTime());
          endDate.setMilliseconds(this.parent.activeCellsData.endTime.getTime() - this.parent.activeCellsData.startTime.getTime());
        }
      }
      this.eventWindowTime = { startTime: new Date(startDate.getTime()), endTime: new Date(endDate.getTime()) };
      startObj.value = startDate;
      endObj.value = endDate;
      startObj.dataBind();
      endObj.dataBind();
    };
    EventWindow2.prototype.getFormat = function(formatType) {
      var format;
      if (isNullOrUndefined(this.parent.locale) || this.parent.locale === "en" || this.parent.locale === "en-US") {
        format = getValue(formatType + ".short", getDefaultDateObject(this.parent.getCalendarMode()));
      } else {
        format = getValue("main." + this.parent.locale + ".dates.calendars." + this.parent.getCalendarMode() + "." + formatType + ".short", cldrData);
      }
      return format;
    };
    EventWindow2.prototype.onEventDetailsUpdate = function(eventObj) {
      if (!this.parent.eventSettings.allowEditing) {
        return;
      }
      if (!this.parent.isAdaptive && isNullOrUndefined(this.parent.editorFooterTemplate)) {
        removeClass([this.element.querySelector("." + DELETE_EVENT_CLASS)], DISABLE_CLASS);
      }
      if (isNullOrUndefined(this.parent.editorHeaderTemplate)) {
        this.element.querySelector("." + EVENT_WINDOW_TITLE_TEXT_CLASS).innerHTML = this.l10n.getConstant("editEvent");
      }
      this.element.querySelector("." + FORM_CLASS).setAttribute("data-id", eventObj[this.fields.id].toString());
      if (isNullOrUndefined(this.parent.editorTemplate)) {
        eventObj = extend({}, eventObj, null, true);
        var timezoneObj = this.getInstance(TIME_ZONE_CLASS + "." + EVENT_FIELD2);
        var timezoneValue = void 0;
        if (eventObj[this.fields.startTimezone] || eventObj[this.fields.endTimezone]) {
          timezoneValue = true;
          this.parent.eventBase.timezoneConvert(eventObj);
        } else {
          timezoneValue = false;
        }
        eventObj.Timezone = timezoneValue;
        timezoneObj.checked = timezoneValue;
        timezoneObj.dataBind();
      }
      this.showDetails(eventObj);
      if (eventObj[this.fields.recurrenceRule] && this.recurrenceEditor) {
        this.recurrenceEditor.setRecurrenceRule(eventObj[this.fields.recurrenceRule], eventObj[this.fields.startTime]);
      } else if (!this.parent.isAdaptive && this.recurrenceEditor) {
        this.recurrenceEditor.setProperties({ startDate: eventObj[this.fields.startTime] });
        this.recurrenceEditor.setRecurrenceRule("");
      }
      this.repeatStartDate = eventObj[this.fields.startTime];
      this.repeatRule = "";
      if (eventObj[this.fields.recurrenceRule]) {
        if (this.recurrenceEditor) {
          this.recurrenceEditor.setRecurrenceRule(eventObj[this.fields.recurrenceRule], eventObj[this.fields.startTime]);
        }
        this.repeatRule = eventObj[this.fields.recurrenceRule];
      }
      if (this.parent.isAdaptive && isNullOrUndefined(this.parent.editorTemplate)) {
        var element = this.element.querySelector("." + REPEAT_CONTAINER_CLASS);
        if (eventObj[this.fields.recurrenceRule]) {
          removeClass([element], HIDE_STYLE_CLASS);
          this.repeatStatus.setProperties({ checked: true });
        } else {
          addClass([element], HIDE_STYLE_CLASS);
          this.repeatStatus.setProperties({ checked: false });
        }
        this.updateRepeatLabel(this.repeatRule);
      }
      var isDisable = this.parent.readonly || eventObj[this.fields.isReadonly];
      if (!this.parent.isAdaptive) {
        var saveButton = this.element.querySelector("." + EVENT_WINDOW_SAVE_BUTTON_CLASS);
        var deleteButton = this.element.querySelector("." + DELETE_EVENT_CLASS);
        this.disableButton(saveButton, isDisable);
        this.disableButton(deleteButton, isDisable);
      } else {
        var saveIcon = this.element.querySelector("." + EVENT_WINDOW_SAVE_ICON_CLASS);
        if (saveIcon) {
          if (isDisable) {
            addClass([saveIcon], ICON_DISABLE_CLASS);
          } else {
            removeClass([saveIcon], ICON_DISABLE_CLASS);
          }
        }
      }
      this.dialogObject.show();
    };
    EventWindow2.prototype.disableButton = function(element, value) {
      if (element) {
        element.ej2_instances[0].disabled = value;
      }
    };
    EventWindow2.prototype.renderRecurrenceEditor = function() {
      return new RecurrenceEditor({
        calendarMode: this.parent.calendarMode,
        cssClass: this.parent.cssClass,
        dateFormat: this.parent.dateFormat,
        enableRtl: this.parent.enableRtl,
        firstDayOfWeek: this.parent.activeViewOptions.firstDayOfWeek,
        locale: this.parent.locale
      });
    };
    EventWindow2.prototype.updateMinMaxDateToEditor = function() {
      var startDate = this.element.querySelector(".e-start");
      var endDate = this.element.querySelector(".e-end");
      if (startDate && endDate) {
        var startObj = startDate.ej2_instances[0];
        var endObj = endDate.ej2_instances[0];
        startObj.min = this.parent.minDate;
        startObj.max = this.parent.maxDate;
        endObj.min = this.parent.minDate;
        endObj.max = this.parent.maxDate;
        startObj.dataBind();
        endObj.dataBind();
      }
      if (this.recurrenceEditor) {
        var untilDate = this.recurrenceEditor.element.querySelector(".e-until-date");
        if (untilDate) {
          var untilObj = untilDate.ej2_instances[0];
          untilObj.min = this.parent.minDate;
          untilObj.max = this.parent.maxDate;
          untilObj.dataBind();
        }
      }
    };
    EventWindow2.prototype.updateRepeatLabel = function(repeatRule) {
      if (this.parent.isAdaptive && !this.repeatDialogObject) {
        this.renderRepeatDialog();
      }
      var data = repeatRule ? this.l10n.getConstant("repeats") + " " + this.recurrenceEditor.getRuleSummary(repeatRule) : this.l10n.getConstant("repeat");
      this.repeatStatus.setProperties({ label: data });
    };
    EventWindow2.prototype.dialogClose = function(event) {
      if (this.isEnterKey) {
        this.isEnterKey = false;
        return;
      }
      this.dialogEvent = event;
      this.isCrudAction = false;
      this.parent.activeEventData = { event: void 0, element: void 0 };
      this.parent.currentAction = null;
      this.dialogObject.hide();
    };
    EventWindow2.prototype.resetForm = function() {
      this.fieldValidator.destroyToolTip();
      this.resetFormFields();
      if (!this.parent.isAdaptive && this.recurrenceEditor && !this.recurrenceEditor.isDestroyed) {
        this.recurrenceEditor.resetFields();
      }
    };
    EventWindow2.prototype.timezoneChangeStyle = function(value) {
      var timezoneDiv = this.element.querySelector("." + EVENT_WINDOW_TIME_ZONE_DIV_CLASS);
      var localTimezoneName = this.parent.tzModule.getLocalTimezoneName();
      if (value) {
        addClass([timezoneDiv], ENABLE_CLASS);
        var startTimezoneObj = this.getInstance(EVENT_WINDOW_START_TZ_CLASS);
        var endTimezoneObj = this.getInstance(EVENT_WINDOW_END_TZ_CLASS);
        var timezone = startTimezoneObj.dataSource;
        if (!startTimezoneObj.value || !this.parent.timezone) {
          var found = timezone.some(function(tz) {
            return tz.Value === localTimezoneName;
          });
          if (!found) {
            timezone.push({ Value: localTimezoneName, Text: localTimezoneName });
            startTimezoneObj.dataSource = timezone;
            endTimezoneObj.dataSource = timezone;
            startTimezoneObj.dataBind();
            endTimezoneObj.dataBind();
          }
        }
        startTimezoneObj.value = startTimezoneObj.value || this.parent.timezone || localTimezoneName;
        endTimezoneObj.value = endTimezoneObj.value || this.parent.timezone || localTimezoneName;
        startTimezoneObj.dataBind();
        endTimezoneObj.dataBind();
      } else {
        removeClass([timezoneDiv], ENABLE_CLASS);
      }
    };
    EventWindow2.prototype.resetFormFields = function() {
      var formElement = this.getFormElements(EVENT_WINDOW_DIALOG_CLASS);
      for (var _i = 0, formElement_1 = formElement; _i < formElement_1.length; _i++) {
        var currentElement = formElement_1[_i];
        var columnName = currentElement.name || this.getColumnName(currentElement);
        if (!isNullOrUndefined(columnName) && columnName !== "") {
          this.setDefaultValueToElement(currentElement);
        }
      }
    };
    EventWindow2.prototype.eventSave = function(event, alert) {
      if (this.isEnterKey) {
        this.isEnterKey = false;
        return;
      }
      var formElement = this.element.querySelector("." + FORM_CLASS);
      if (formElement && formElement.classList.contains("e-formvalidator") && !formElement.ej2_instances[0].validate()) {
        return;
      }
      var dataCollection = this.getEventDataFromEditor();
      if (this.processEventValidation(dataCollection.tempData, alert)) {
        return;
      }
      this.eventCrudData = dataCollection.eventData;
      this.dialogEvent = event;
      this.isCrudAction = true;
      this.dialogObject.hide();
    };
    EventWindow2.prototype.getEventDataFromEditor = function() {
      var eventObj = extend({}, this.getObjectFromFormData(EVENT_WINDOW_DIALOG_CLASS));
      if (!eventObj.Timezone) {
        eventObj[this.fields.startTimezone] = null;
        eventObj[this.fields.endTimezone] = null;
      }
      delete eventObj.Timezone;
      delete eventObj.Repeat;
      this.setDefaultValueToObject(eventObj);
      eventObj[this.fields.recurrenceRule] = this.recurrenceEditor ? this.recurrenceEditor.getRecurrenceRule() || null : void 0;
      var tempObj = extend({}, eventObj, null, true);
      if (eventObj[this.fields.isAllDay]) {
        eventObj[this.fields.startTime] = isNullOrUndefined(eventObj[this.fields.startTime]) ? null : resetTime(new Date(eventObj[this.fields.startTime].getTime()));
        eventObj[this.fields.endTime] = isNullOrUndefined(eventObj[this.fields.endTime]) ? null : addDays(resetTime(new Date(eventObj[this.fields.endTime].getTime())), 1);
      }
      return { eventData: eventObj, tempData: tempObj };
    };
    EventWindow2.prototype.processEventValidation = function(eventObj, alert) {
      var alertType;
      if (isNullOrUndefined(this.parent.editorTemplate)) {
        if (!eventObj[this.fields.startTime] || !eventObj[this.fields.endTime]) {
          this.parent.quickPopup.openValidationError("invalidDateError");
          return true;
        }
        if (eventObj[this.fields.startTime] > eventObj[this.fields.endTime]) {
          this.parent.quickPopup.openValidationError("startEndError");
          return true;
        }
      }
      if (this.recurrenceEditor && this.recurrenceEditor.value && this.recurrenceEditor.value !== "") {
        if (this.parent.currentAction !== "EditOccurrence") {
          alertType = this.recurrenceValidation(eventObj[this.fields.startTime], eventObj[this.fields.endTime], alert);
        }
        var isShowAlert = true;
        if (alertType === "seriesChangeAlert" && this.parent.uiStateValues.isIgnoreOccurrence) {
          isShowAlert = false;
        }
        if (!isNullOrUndefined(alertType) && isShowAlert && (!this.parent.enableRecurrenceValidation && alertType === "wrongPattern" || this.parent.enableRecurrenceValidation)) {
          this.parent.quickPopup.openRecurrenceValidationAlert(alertType);
          return true;
        }
      }
      return false;
    };
    EventWindow2.prototype.processCrudActions = function(eventObj) {
      var _this = this;
      this.parent.uiStateValues.isBlock = false;
      var resourceData = this.getResourceData(eventObj);
      var isResourceEventExpand = (this.parent.activeViewOptions.group.resources.length > 0 || this.parent.resourceCollection.length > 0) && !this.parent.activeViewOptions.group.allowGroupEdit && !isNullOrUndefined(resourceData);
      var eventId = this.getEventIdFromForm();
      if (!isNullOrUndefined(eventId)) {
        var eveId_1 = this.parent.eventBase.getEventIDType() === "string" ? eventId : parseInt(eventId, 10);
        var editedData = this.parent.eventsData.filter(function(data) {
          return data[_this.fields.id] === eveId_1;
        })[0];
        if (isNullOrUndefined(editedData)) {
          editedData = this.parent.blockData.filter(function(data) {
            return data[_this.fields.id] === eveId_1;
          })[0];
        }
        eventObj = extend({}, editedData, eventObj);
        if (eventObj[this.fields.isReadonly]) {
          return false;
        }
        var currentAction = void 0;
        if (!isNullOrUndefined(editedData[this.fields.recurrenceRule])) {
          currentAction = this.parent.currentAction;
          eventObj.Guid = this.parent.activeEventData.event.Guid;
          if (this.parent.currentAction === "EditOccurrence") {
            if (!eventObj[this.fields.recurrenceID]) {
              eventObj[this.fields.id] = this.parent.eventBase.getEventMaxID();
              eventObj.Guid = this.parent.activeEventData.event.Guid;
            } else {
              eveId_1 = eventObj[this.fields.recurrenceID];
              currentAction = null;
            }
            if (this.parent.enableRecurrenceValidation && this.editOccurrenceValidation(eveId_1, eventObj)) {
              return true;
            }
          }
          if (this.parent.currentAction === "EditSeries" || eventObj[this.fields.id] !== editedData[this.fields.id]) {
            eventObj[this.fields.recurrenceID] = editedData[this.fields.id];
          } else if (this.parent.currentAction === "EditFollowingEvents") {
            eventObj[this.fields.id] = this.parent.eventBase.getEventMaxID();
            eventObj[this.fields.followingID] = editedData[this.fields.id];
          }
        }
        if (isResourceEventExpand) {
          this.resourceSaveEvent(eventObj, "Save", currentAction);
        } else {
          this.parent.saveEvent(eventObj, currentAction);
        }
      } else {
        this.parent.currentAction = "Add";
        if (isResourceEventExpand) {
          this.resourceSaveEvent(eventObj, this.parent.currentAction);
        } else {
          eventObj[this.fields.id] = this.parent.eventBase.getEventMaxID();
          this.parent.addEvent(eventObj);
        }
      }
      return this.parent.uiStateValues.isBlock;
    };
    EventWindow2.prototype.getResourceData = function(eventObj) {
      var resourceData = null;
      if (!isNullOrUndefined(this.parent.resourceBase) && !isNullOrUndefined(this.parent.resourceBase.resourceCollection) && this.parent.resourceBase.resourceCollection.length > 0) {
        var lastResourceData = this.parent.resourceBase.resourceCollection.slice(-1)[0];
        resourceData = eventObj[lastResourceData.field];
      }
      return resourceData;
    };
    EventWindow2.prototype.getObjectFromFormData = function(className) {
      var formElement = this.getFormElements(className);
      var eventObj = {};
      for (var _i = 0, formElement_2 = formElement; _i < formElement_2.length; _i++) {
        var currentElement = formElement_2[_i];
        var columnName = currentElement.name || this.getColumnName(currentElement);
        if (!isNullOrUndefined(columnName) && columnName !== "") {
          eventObj["" + columnName] = this.getValueFromElement(currentElement);
        }
      }
      return eventObj;
    };
    EventWindow2.prototype.setDefaultValueToObject = function(eventObj) {
      if (!isNullOrUndefined(eventObj[this.fields.subject])) {
        eventObj[this.fields.subject] = eventObj[this.fields.subject] || this.parent.eventSettings.fields.subject.default || this.l10n.getConstant("addTitle");
      }
      if (!isNullOrUndefined(eventObj[this.fields.location])) {
        eventObj[this.fields.location] = eventObj[this.fields.location] || this.parent.eventSettings.fields.location.default;
      }
      if (!isNullOrUndefined(eventObj[this.fields.description])) {
        eventObj[this.fields.description] = eventObj[this.fields.description] || this.parent.eventSettings.fields.description.default;
      }
    };
    EventWindow2.prototype.recurrenceValidation = function(startDate, endDate, alert) {
      var alertMessage;
      var recEditor = this.recurrenceEditor;
      var interval = this.getInstance("e-repeat-interval.e-numerictextbox").value;
      if (alert !== this.l10n.getConstant("ok")) {
        var activeEvent = this.parent.activeEventData.event;
        var excludedEvents = [];
        if ((this.parent.currentAction === "EditSeries" || this.parent.currentAction === "EditFollowingEvents") && !isNullOrUndefined(activeEvent)) {
          var eventStartTime = activeEvent[this.parent.eventFields.startTime];
          var seriesEvents = this.parent.eventBase.getSeriesEvents(this.eventData, eventStartTime);
          if (seriesEvents.length > 0) {
            excludedEvents = this.parent.eventBase.getEditedOccurrences(seriesEvents, eventStartTime);
          } else {
            var event_2 = this.parent.eventBase.getEventById(activeEvent[this.parent.eventFields.id]);
            excludedEvents = this.parent.eventBase.getEditedOccurrences([event_2], eventStartTime);
          }
          if (this.parent.currentAction === "EditSeries" && !isNullOrUndefined(this.eventData[this.parent.eventFields.recurrenceException])) {
            excludedEvents.push(this.eventData);
          }
        }
        if (excludedEvents.length > 0) {
          alertMessage = "seriesChangeAlert";
        }
        if (this.getInstance("e-end-on-left .e-ddl .e-dropdownlist").value === "until" && this.getInstance("e-end-on-date .e-datepicker").value < startDate) {
          alertMessage = "wrongPattern";
        }
        if (isNullOrUndefined(alertMessage)) {
          var types = recEditor.value.split(";")[1].split("=")[1].split(",");
          var obj = { "SU": 0, "MO": 1, "TU": 2, "WE": 3, "TH": 4, "FR": 5, "SA": 6 };
          var temp = [];
          var tempDiff = [];
          var tempValue = void 0;
          switch (recEditor.value.split(";")[0].split("=")[1]) {
            case "DAILY":
              if ((endDate.getTime() - startDate.getTime()) / (1e3 * 3600) > interval * 24) {
                alertMessage = "createError";
              }
              break;
            case "WEEKLY":
              types = recEditor.value.split(";")[1].split("=")[1].split(",");
              for (var index = 0; index < types.length * (interval + 1); index++) {
                temp[parseInt(index.toString(), 10)] = types.length > index ? obj[types[parseInt(index.toString(), 10)]] : temp[index - types.length] + 7 * interval;
              }
              tempValue = temp.sort(function(a, b) {
                return a - b;
              });
              for (var index = 1; index < tempValue.length; index++) {
                tempDiff.push(tempValue[parseInt(index.toString(), 10)] - tempValue[index - 1]);
              }
              if ((endDate.getTime() - startDate.getTime()) / (1e3 * 3600) >= Math.min.apply(Math, tempDiff) * 24 || isNullOrUndefined(interval)) {
                alertMessage = "createError";
              }
              break;
            case "MONTHLY":
              if (endDate.getTime() >= (/* @__PURE__ */ new Date(+startDate)).setMonth(startDate.getMonth() + interval)) {
                alertMessage = "createError";
              }
              break;
            case "YEARLY":
              if (endDate.getTime() >= (/* @__PURE__ */ new Date(+startDate)).setFullYear(startDate.getFullYear() + interval)) {
                alertMessage = "createError";
              }
              break;
          }
        }
      } else {
        if (endDate.getTime() >= (/* @__PURE__ */ new Date(+startDate)).setMonth(startDate.getMonth() + interval)) {
          alertMessage = "createError";
        }
        if (isNullOrUndefined(alertMessage)) {
          this.parent.quickPopup.quickDialog.hide();
        }
      }
      if (isNullOrUndefined(interval)) {
        alertMessage = "createError";
      }
      return alertMessage;
    };
    EventWindow2.prototype.getRecurrenceIndex = function(recColl, event) {
      var recIndex;
      for (var index = 0; index < recColl.length; index++) {
        if (event[this.fields.startTime].valueOf() === recColl[parseInt(index.toString(), 10)][this.fields.startTime].valueOf()) {
          recIndex = index;
          break;
        }
      }
      return recIndex;
    };
    EventWindow2.prototype.trimAllDay = function(data) {
      if (data[this.fields.isAllDay]) {
        var temp = addDays(/* @__PURE__ */ new Date(+data[this.fields.endTime]), -1).getTime();
        data[this.fields.endTime] = +data[this.fields.startTime] > temp ? data[this.fields.endTime] : new Date(temp);
      }
    };
    EventWindow2.prototype.editOccurrenceValidation = function(eventId, currentData, editData) {
      var _this = this;
      if (editData === void 0) {
        editData = this.eventData;
      }
      var recurColl = this.parent.getOccurrencesByID(eventId);
      var excludedDatas = this.parent.eventsData.filter(function(data2) {
        return data2[_this.fields.recurrenceID] === eventId;
      });
      excludedDatas.map(function(data2) {
        return recurColl.push(extend({}, data2));
      });
      currentData = extend({}, currentData);
      this.trimAllDay(currentData);
      for (var _i = 0, recurColl_1 = recurColl; _i < recurColl_1.length; _i++) {
        var data = recurColl_1[_i];
        this.trimAllDay(data);
      }
      this.parent.eventBase.sortByTime(recurColl);
      var index = this.getRecurrenceIndex(recurColl, editData);
      if (isNullOrUndefined(index)) {
        return false;
      }
      var currentStartTime = /* @__PURE__ */ new Date(+currentData[this.fields.startTime]);
      var currentEndTime = /* @__PURE__ */ new Date(+currentData[this.fields.endTime]);
      var nextStartTime;
      var nextEndTime;
      if (index !== recurColl.length - 1) {
        nextStartTime = /* @__PURE__ */ new Date(+recurColl[index + 1][this.fields.startTime]);
        nextEndTime = /* @__PURE__ */ new Date(+recurColl[index + 1][this.fields.endTime]);
      }
      var lastEndTime = /* @__PURE__ */ new Date(+recurColl[recurColl.length - 1][this.fields.endTime]);
      if (index === 0) {
        if (!isNullOrUndefined(recurColl[index + 1])) {
          if (!(nextStartTime.getTime() >= currentEndTime.getTime()) && resetTime(lastEndTime).getTime() >= resetTime(currentStartTime).getTime() || resetTime(lastEndTime).getTime() < resetTime(currentStartTime).getTime()) {
            this.parent.quickPopup.openRecurrenceValidationAlert("occurrenceAlert");
            return true;
          } else if (!(resetTime(currentStartTime).getTime() < resetTime(nextStartTime).getTime())) {
            this.parent.quickPopup.openRecurrenceValidationAlert("sameDayAlert");
            return true;
          }
        }
        return false;
      } else {
        var previousStartTime = /* @__PURE__ */ new Date(+recurColl[index - 1][this.fields.startTime]);
        var previousEndTime = /* @__PURE__ */ new Date(+recurColl[index - 1][this.fields.endTime]);
        if (index === recurColl.length - 1) {
          if (resetTime(/* @__PURE__ */ new Date(+recurColl[recurColl.length - 1 - index][this.fields.startTime])).getTime() > resetTime(currentStartTime).getTime()) {
            this.parent.quickPopup.openRecurrenceValidationAlert("occurrenceAlert");
            return true;
          } else if (!(previousEndTime.getTime() <= currentStartTime.getTime() && resetTime(currentStartTime).getTime() > resetTime(previousStartTime).getTime())) {
            this.parent.quickPopup.openRecurrenceValidationAlert("sameDayAlert");
            return true;
          }
        } else if (!((resetTime(previousStartTime).getTime() < resetTime(currentStartTime).getTime() || resetTime(/* @__PURE__ */ new Date(+recurColl[0][this.fields.startTime])).getTime() > resetTime(currentStartTime).getTime()) && (resetTime(nextStartTime).getTime() > resetTime(currentStartTime).getTime() || lastEndTime.getTime() < currentStartTime.getTime()))) {
          this.parent.quickPopup.openRecurrenceValidationAlert("sameDayAlert");
          return true;
        } else if (!(previousEndTime.getTime() <= currentStartTime.getTime() && nextStartTime.getTime() >= currentEndTime.getTime()) || resetTime(nextEndTime).getTime() < resetTime(currentStartTime).getTime() || resetTime(previousStartTime).getTime() > resetTime(currentEndTime).getTime() || !(resetTime(currentStartTime).getTime() < resetTime(nextStartTime).getTime())) {
          this.parent.quickPopup.openRecurrenceValidationAlert("occurrenceAlert");
          return true;
        }
      }
      return false;
    };
    EventWindow2.prototype.resourceSaveEvent = function(eventObj, action, currentAction) {
      var _this = this;
      var lastResourceData = this.parent.resourceBase.resourceCollection.slice(-1)[0];
      var resourceData = eventObj[lastResourceData.field];
      resourceData = resourceData instanceof Array ? resourceData.reverse() : [resourceData].reverse();
      var lastLevel = this.parent.resourceBase.lastResourceLevel;
      var eventList = [];
      var _loop_2 = function(i2) {
        var events = extend({}, eventObj, null, true);
        events[this_2.fields.id] = this_2.parent.eventBase.getEventMaxID();
        var temp = [];
        var addValues = function() {
          if (action === "Save" && i2 === resourceData.length - 1) {
            if (temp.length > 0) {
              temp[0][_this.fields.id] = eventObj[_this.fields.id];
              for (var k2 = 1; k2 < temp.length; k2++) {
                temp[parseInt(k2.toString(), 10)][_this.fields.id] = _this.parent.eventBase.getEventMaxID(i2);
                eventList.push(temp[parseInt(k2.toString(), 10)]);
                _this.parent.saveEvent(temp[0], currentAction);
              }
            } else {
              events[_this.fields.id] = eventObj[_this.fields.id];
              _this.parent.saveEvent(events, currentAction);
            }
          } else {
            if (temp.length > 0) {
              for (var j = 0; j < temp.length; j++) {
                temp[parseInt(j.toString(), 10)][_this.fields.id] = _this.parent.eventBase.getEventMaxID(j);
                eventList.push(temp[parseInt(j.toString(), 10)]);
              }
            } else {
              events[_this.fields.id] = _this.parent.eventBase.getEventMaxID(i2);
              eventList.push(events);
            }
          }
        };
        if (this_2.parent.activeViewOptions.group.byGroupID && !isNullOrUndefined(lastLevel)) {
          var lastResource = lastResourceData.dataSource;
          var resCol = this_2.parent.resourceCollection;
          var index = void 0;
          if (resCol.length > 1) {
            index = findIndexInData(lastResource, lastResourceData.idField, resourceData[parseInt(i2.toString(), 10)], events, resCol);
          } else {
            index = findIndexInData(lastResource, lastResourceData.idField, resourceData[parseInt(i2.toString(), 10)]);
          }
          if (index < 0) {
            return { value: void 0 };
          }
          var groupId_1 = lastResource[parseInt(index.toString(), 10)][lastResourceData.groupIDField];
          var filter = lastLevel.filter(function(obj) {
            return obj.resourceData[lastResourceData.idField] === resourceData[parseInt(i2.toString(), 10)];
          }).filter(function(obj) {
            return obj.resourceData[lastResourceData.groupIDField] === groupId_1;
          })[0];
          var groupOrder = filter.groupOrder;
          for (var index_1 = 0; index_1 < this_2.parent.resourceBase.resourceCollection.length; index_1++) {
            var field = this_2.parent.resourceBase.resourceCollection[parseInt(index_1.toString(), 10)].field;
            events["" + field] = groupOrder[parseInt(index_1.toString(), 10)] instanceof Array ? groupOrder[parseInt(index_1.toString(), 10)][0] : groupOrder[parseInt(index_1.toString(), 10)];
          }
          addValues();
        } else {
          for (var index = 0; index < this_2.parent.resourceBase.resourceCollection.length - 1; index++) {
            var field = this_2.parent.resourceBase.resourceCollection[parseInt(index.toString(), 10)].field;
            if (events["" + field] instanceof Array && events["" + field].length > 1) {
              for (var k = 0; k < events["" + field].length; k++) {
                var event_3 = extend({}, events, null, true);
                event_3["" + field] = eventObj["" + field][parseInt(k.toString(), 10)];
                event_3[lastResourceData.field] = resourceData[parseInt(i2.toString(), 10)];
                temp.push(event_3);
              }
            } else {
              if (temp.length === 0) {
                events["" + field] = eventObj["" + field] instanceof Array ? eventObj["" + field][0] : eventObj["" + field];
                events[lastResourceData.field] = resourceData[parseInt(i2.toString(), 10)];
              } else {
                for (var l = 0; l < temp.length; l++) {
                  temp[parseInt(l.toString(), 10)]["" + field] = eventObj["" + field] instanceof Array ? eventObj["" + field][0] : eventObj["" + field];
                }
              }
            }
          }
          events[lastResourceData.field] = resourceData[parseInt(i2.toString(), 10)];
          addValues();
        }
      };
      var this_2 = this;
      for (var i = 0; i < resourceData.length; i++) {
        var state_1 = _loop_2(i);
        if (typeof state_1 === "object")
          return state_1.value;
      }
      if (eventList.length > 0) {
        for (var _i = 0, eventList_1 = eventList; _i < eventList_1.length; _i++) {
          var event_4 = eventList_1[_i];
          event_4[this.fields.recurrenceException] = null;
          event_4[this.fields.recurrenceID] = null;
        }
        this.parent.addEvent(eventList);
      }
    };
    EventWindow2.prototype.getEventIdFromForm = function() {
      return this.element.querySelector("." + FORM_CLASS).getAttribute("data-id");
    };
    EventWindow2.prototype.getFormElements = function(className) {
      var elements = [];
      if (className === EVENT_WINDOW_DIALOG_CLASS) {
        elements = [].slice.call(this.element.querySelectorAll("." + EVENT_FIELD2));
      } else {
        elements = [].slice.call(this.parent.element.querySelectorAll("." + className + " ." + EVENT_FIELD2));
      }
      return elements;
    };
    EventWindow2.prototype.getValueFromElement = function(element) {
      var value;
      if (element.classList.contains("e-datepicker")) {
        value = element.ej2_instances[0].value;
      } else if (element.classList.contains("e-datetimepicker")) {
        value = element.ej2_instances[0].value;
      } else if (element.classList.contains("e-dropdownlist")) {
        value = element.ej2_instances[0].value;
      } else if (element.classList.contains("e-multiselect")) {
        value = element.ej2_instances[0].value;
      } else if (element.classList.contains("e-checkbox")) {
        value = element.ej2_instances[0].checked;
      } else {
        if (element.type === "checkbox") {
          value = element.checked;
        } else {
          value = this.parent.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(element.value) : element.value;
        }
      }
      return value;
    };
    EventWindow2.prototype.setValueToElement = function(element, value) {
      if (element.classList.contains("e-datepicker")) {
        var instance = element.ej2_instances[0];
        instance.value = value;
        instance.dataBind();
      } else if (element.classList.contains("e-datetimepicker")) {
        var instance = element.ej2_instances[0];
        if (instance.element.classList.contains(EVENT_WINDOW_START_CLASS)) {
          this.eventWindowTime.startTime = /* @__PURE__ */ new Date("" + value);
        } else {
          this.eventWindowTime.endTime = /* @__PURE__ */ new Date("" + value);
        }
        instance.value = value;
        instance.dataBind();
      } else if (element.classList.contains("e-dropdownlist")) {
        var instance = element.ej2_instances[0];
        instance.value = value;
        instance.dataBind();
      } else if (element.classList.contains("e-multiselect")) {
        var instance = element.ej2_instances[0];
        instance.value = [];
        instance.value = value instanceof Array ? value : [value];
        instance.dataBind();
      } else if (element.classList.contains("e-checkbox")) {
        var instance = element.ej2_instances[0];
        instance.checked = value;
        instance.dataBind();
      } else {
        if (element.type !== "checkbox") {
          element.value = value || "";
        } else {
          element.checked = value;
        }
      }
    };
    EventWindow2.prototype.setDefaultValueToElement = function(element) {
      if (element.classList.contains("e-datepicker")) {
        var instance = element.ej2_instances[0];
        instance.value = this.parent.getCurrentTime();
        instance.dataBind();
      } else if (element.classList.contains("e-datetimepicker")) {
        var instance = element.ej2_instances[0];
        var dateValue = this.parent.getCurrentTime();
        this.eventWindowTime = { startTime: dateValue, endTime: dateValue };
        instance.value = dateValue;
        instance.dataBind();
      } else if (element.classList.contains("e-dropdownlist")) {
        var instance = element.ej2_instances[0];
        instance.value = null;
        instance.dataBind();
      } else if (element.classList.contains("e-multiselect")) {
        var instance = element.ej2_instances[0];
        instance.value = [];
        instance.dataBind();
      } else if (element.classList.contains("e-checkbox")) {
        var instance = element.ej2_instances[0];
        instance.checked = false;
        instance.dataBind();
      } else {
        if (element.type === "checkbox") {
          element.checked = false;
        } else {
          element.value = "";
        }
      }
    };
    EventWindow2.prototype.getInstance = function(className) {
      var element = this.element.querySelector("." + className);
      return element ? element.ej2_instances[0] : null;
    };
    EventWindow2.prototype.eventDelete = function(event) {
      if (this.isEnterKey) {
        this.isEnterKey = false;
        return;
      }
      switch (this.parent.currentAction) {
        case "EditOccurrence":
          if (!isNullOrUndefined(this.parent.activeEventData.event[this.parent.eventFields.recurrenceRule])) {
            this.parent.currentAction = "DeleteOccurrence";
          } else {
            this.parent.currentAction = "Delete";
          }
          break;
        case "EditSeries":
          this.parent.currentAction = "DeleteSeries";
          break;
        case "Save":
          this.parent.currentAction = "Delete";
          break;
        case "EditFollowingEvents":
          if (!isNullOrUndefined(this.parent.activeEventData.event[this.parent.eventFields.recurrenceRule])) {
            this.parent.currentAction = "DeleteFollowingEvents";
          }
          break;
      }
      this.dialogEvent = event;
      this.isCrudAction = false;
      this.dialogObject.hide();
      this.parent.quickPopup.openDeleteAlert();
    };
    EventWindow2.prototype.getRecurrenceEditorInstance = function() {
      if (this.parent.isAdaptive && !this.repeatDialogObject) {
        this.renderRepeatDialog();
      }
      return this.recurrenceEditor;
    };
    EventWindow2.prototype.destroyComponents = function() {
      var formElements = this.getFormElements(EVENT_WINDOW_DIALOG_CLASS);
      for (var _i = 0, formElements_3 = formElements; _i < formElements_3.length; _i++) {
        var element = formElements_3[_i];
        var instance = void 0;
        if (element.classList.contains("e-datetimepicker")) {
          instance = element.ej2_instances;
        } else if (element.classList.contains("e-datepicker")) {
          instance = element.ej2_instances;
        } else if (element.classList.contains("e-checkbox")) {
          instance = element.ej2_instances;
        } else if (element.classList.contains("e-dropdownlist")) {
          instance = element.ej2_instances;
        } else if (element.classList.contains("e-multiselect")) {
          instance = element.ej2_instances;
        } else if (element.classList.contains("e-numerictextbox")) {
          instance = element.ej2_instances;
        }
        if (instance && instance[0]) {
          instance[0].destroy();
        }
      }
      if (this.buttonObj) {
        this.buttonObj.destroy();
      }
    };
    EventWindow2.prototype.detachComponents = function() {
      var formElements = this.getFormElements(EVENT_WINDOW_DIALOG_CLASS);
      for (var _i = 0, formElements_4 = formElements; _i < formElements_4.length; _i++) {
        var element = formElements_4[_i];
        detach(element);
      }
    };
    EventWindow2.prototype.destroy = function(isIgnore) {
      if (this.parent && !this.parent.isDestroyed) {
        this.parent.resetTemplates(["editorTemplate", "editorHeaderTemplate", "editorFooterTemplate"]);
      }
      this.destroyComponents();
      if (this.recurrenceEditor) {
        this.recurrenceEditor.destroy();
        detach(this.recurrenceEditor.element);
        this.recurrenceEditor = null;
      }
      if (this.fieldValidator) {
        this.fieldValidator.destroy();
        this.fieldValidator = null;
      }
      if (this.repeatDialogObject) {
        this.repeatDialogObject.destroy();
        this.repeatDialogObject = null;
      }
      this.detachComponents();
      if (this.dialogObject) {
        if (this.dialogObject.element) {
          var form = this.dialogObject.element.querySelector("form");
          removeChildren(form);
          detach(form);
          EventHandler.remove(this.dialogObject.element, "keydown", this.preventEventSave);
        }
        this.dialogObject.destroy();
        this.dialogObject = null;
      }
      if (this.element) {
        remove(this.element);
        this.element = null;
      }
      if (!isIgnore) {
        this.l10n = null;
        this.parent = null;
        this.fields = null;
        this.buttonObj = null;
        this.repeatStatus = null;
        this.eventWindowTime = null;
        this.dialogEvent = null;
      }
    };
    return EventWindow2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/actions/virtual-scroll.js
var VirtualScroll = (
  /** @class */
  function() {
    function VirtualScroll2(parent) {
      this.translateY = 0;
      this.itemSize = 60;
      this.bufferCount = 3;
      this.renderedLength = 0;
      this.averageRowHeight = 0;
      this.startIndex = 0;
      this.existingDataCollection = [];
      this.enableTransition = true;
      this.parent = parent;
      this.addEventListener();
    }
    VirtualScroll2.prototype.addEventListener = function() {
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
      this.parent.on(virtualScroll, this.virtualScrolling, this);
    };
    VirtualScroll2.prototype.removeEventListener = function() {
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
      this.parent.off(virtualScroll, this.virtualScrolling);
    };
    VirtualScroll2.prototype.getRenderedCount = function() {
      this.setItemSize();
      var containerSize = this.isHorizontalScroll ? this.parent.element.clientWidth : this.parent.element.clientHeight;
      this.renderedLength = Math.ceil(containerSize / this.itemSize) + this.bufferCount;
      return this.renderedLength;
    };
    VirtualScroll2.prototype.renderVirtualTrack = function(contentWrap) {
      var wrap = createElement("div", { className: VIRTUAL_TRACK_CLASS });
      if (this.isHorizontalScroll) {
        var colCount = this.parent.activeView.colLevels[this.parent.activeView.colLevels.length - 1].length;
        wrap.style.width = colCount * this.itemSize + "px";
      } else {
        wrap.style.height = this.parent.resourceBase.expandedResources.length * this.itemSize + "px";
      }
      contentWrap.appendChild(wrap);
    };
    VirtualScroll2.prototype.updateVirtualScrollHeight = function() {
      var virtual = this.parent.element.querySelector("." + VIRTUAL_TRACK_CLASS);
      var lastResourceIndex = this.parent.resourceBase.expandedResources[this.parent.resourceBase.expandedResources.length - 1].groupIndex;
      var lastRenderIndex = this.parent.resourceBase.renderedResources[this.parent.resourceBase.renderedResources.length - 1].groupIndex;
      if (lastRenderIndex !== lastResourceIndex) {
        var conTable = this.parent.element.querySelector("." + CONTENT_TABLE_CLASS);
        this.renderedLength = conTable.querySelector("tbody").children.length;
        virtual.style.height = conTable.offsetHeight + (this.parent.resourceBase.expandedResources.length - this.renderedLength) * conTable.offsetHeight / this.renderedLength + "px";
        var conWrap = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
        if (conWrap.scrollHeight - conWrap.scrollTop < conWrap.offsetHeight * this.bufferCount) {
          virtual.style.height = parseInt(virtual.style.height, 10) + conWrap.offsetHeight * this.bufferCount + "px";
        }
      } else {
        virtual.style.height = "";
      }
      this.averageRowHeight = virtual.offsetHeight / this.parent.resourceBase.expandedResources.length;
    };
    VirtualScroll2.prototype.updateVirtualTrackHeight = function(wrap) {
      var resourceCount = this.parent.resourceBase.renderedResources.length;
      if (resourceCount !== this.getRenderedCount()) {
        wrap.style.height = this.parent.element.querySelector(".e-content-wrap").clientHeight + "px";
        var resWrap = this.parent.element.querySelector("." + RESOURCE_COLUMN_WRAP_CLASS);
        var conWrap = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
        var eventWrap = this.parent.element.querySelector("." + EVENT_TABLE_CLASS);
        this.translateY = 0;
        this.setTranslate(resWrap, conWrap, eventWrap);
      } else {
        var lastRenderIndex = this.parent.resourceBase.renderedResources[resourceCount - 1].groupIndex;
        var lastCollIndex = this.parent.resourceBase.expandedResources[this.parent.resourceBase.expandedResources.length - 1].groupIndex;
        var renderedResCount = resourceCount + (lastCollIndex - lastRenderIndex);
        renderedResCount = renderedResCount > this.parent.resourceBase.expandedResources.length ? this.parent.resourceBase.expandedResources.length : renderedResCount;
        wrap.style.height = renderedResCount * this.itemSize + "px";
      }
    };
    VirtualScroll2.prototype.setItemSize = function() {
      if (this.isHorizontalScroll) {
        this.itemSize = getElementWidthFromClass(this.parent.activeView.element, WORK_CELLS_CLASS, this.parent.uiStateValues.isTransformed) || this.itemSize;
      } else {
        this.itemSize = this.parent.getElementHeightFromClass(this.parent.activeView.element, WORK_CELLS_CLASS) || this.itemSize;
      }
    };
    VirtualScroll2.prototype.refreshLayout = function() {
      var initialHeight = this.parent.uiStateValues.scheduleHeight;
      this.parent.uiStateValues.scheduleHeight = this.parent.element.offsetHeight;
      var preRenderedLength = this.renderedLength;
      if (this.parent.uiStateValues.scheduleHeight !== initialHeight) {
        if (preRenderedLength < this.getRenderedCount()) {
          this.isRemoteRefresh = true;
        }
        var resWrap = this.parent.element.querySelector("." + RESOURCE_COLUMN_WRAP_CLASS);
        var conWrap = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
        var eventWrap = this.parent.element.querySelector("." + EVENT_TABLE_CLASS);
        if (!this.parent.rowAutoHeight) {
          this.enableTransition = false;
          removeClass([conWrap, resWrap], "e-transition");
        }
        var firstTDIndex = parseInt(resWrap.querySelector("tbody td").getAttribute("data-group-index"), 10);
        var endIndex = firstTDIndex + this.renderedLength;
        firstTDIndex = endIndex > this.parent.resourceBase.expandedResources.length ? this.parent.resourceBase.expandedResources.length - this.renderedLength : firstTDIndex;
        firstTDIndex = firstTDIndex < 0 ? 0 : firstTDIndex;
        this.parent.resourceBase.renderedResources = this.parent.resourceBase.expandedResources.slice(firstTDIndex, endIndex);
        if (this.parent.resourceBase.renderedResources.length > 0) {
          this.updateContent(resWrap, conWrap, eventWrap, this.parent.resourceBase.renderedResources);
        }
      }
    };
    VirtualScroll2.prototype.renderEvents = function() {
      this.setTabIndex();
      var dynamicData = this.triggerScrollEvent(virtualScrollStop);
      if (this.parent.activeViewOptions && this.parent.activeViewOptions.enableLazyLoading && this.parent.crudModule) {
        if (dynamicData.length > 0) {
          this.parent.crudModule.refreshProcessedData(true, dynamicData);
          this.parent.hideSpinner();
          return;
        }
        this.parent.crudModule.refreshDataManager();
        return;
      }
      if (this.parent.crudModule) {
        this.parent.crudModule.refreshProcessedData(true);
      }
      if (this.parent.currentView !== "Month") {
        this.parent.notify(contentReady, {});
      }
      this.parent.hideSpinner();
    };
    VirtualScroll2.prototype.virtualScrolling = function() {
      var _this = this;
      if (this.parent.quickPopup) {
        this.parent.quickPopup.quickPopupHide();
        this.parent.quickPopup.morePopup.hide();
      }
      var conWrap = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
      if (this.isHorizontalScroll) {
        this.horizontalScrolling(conWrap);
      } else {
        var resWrap = this.parent.element.querySelector("." + RESOURCE_COLUMN_WRAP_CLASS);
        var eventWrap = this.parent.element.querySelector("." + EVENT_TABLE_CLASS);
        var timeIndicator = this.parent.element.querySelector("." + CURRENT_TIMELINE_CLASS);
        var conTable = this.parent.element.querySelector("." + CONTENT_TABLE_CLASS);
        if (!this.parent.rowAutoHeight) {
          addClass([conWrap, resWrap], "e-transition");
        }
        this.renderedLength = resWrap.querySelector("tbody").children.length;
        var firstTDIndex = parseInt(resWrap.querySelector("tbody td").getAttribute("data-group-index"), 10);
        var scrollHeight = this.parent.rowAutoHeight ? conTable.offsetHeight - conWrap.offsetHeight : this.bufferCount * this.itemSize;
        var resCollection = [];
        if (conWrap.scrollTop - this.translateY < 0) {
          resCollection = this.upScroll(conWrap, firstTDIndex);
        } else if (conWrap.scrollTop - this.translateY > scrollHeight) {
          resCollection = this.downScroll(conWrap, firstTDIndex);
        }
        if (!isNullOrUndefined(resCollection) && resCollection.length > 0) {
          this.triggerScrollEvent(virtualScrollStart);
          var selectedEle = this.parent.getSelectedCells();
          this.focusedEle = selectedEle[selectedEle.length - 1] || this.focusedEle;
          this.updateContent(resWrap, conWrap, eventWrap, resCollection);
          this.setTranslate(resWrap, conWrap, eventWrap, timeIndicator);
          if (this.parent.dragAndDropModule && this.parent.dragAndDropModule.actionObj.action === "drag") {
            this.parent.dragAndDropModule.navigationWrapper();
          }
          window.clearTimeout(this.timeValue);
          this.timeValue = window.setTimeout(function() {
            _this.renderEvents();
          }, 250);
        }
      }
    };
    VirtualScroll2.prototype.horizontalScrolling = function(conWrap) {
      var _this = this;
      var resCollection = [];
      var scrollWidth2 = this.bufferCount * this.itemSize;
      if (Math.abs(conWrap.scrollLeft) - Math.abs(this.translateY) < 0) {
        resCollection = this.leftScroll(conWrap);
      } else if (Math.abs(conWrap.scrollLeft) - Math.abs(this.translateY) > scrollWidth2) {
        resCollection = this.rightScroll(conWrap);
      }
      if (!isNullOrUndefined(resCollection) && resCollection.length > 0) {
        if (this.parent.resourceBase.expandedResources.length !== resCollection.length || this.parent.resourceBase.expandedResources[0] !== resCollection[0] || this.parent.resourceBase.expandedResources[this.parent.resourceBase.expandedResources.length - 1] !== resCollection[resCollection.length - 1]) {
          this.triggerScrollEvent(virtualScrollStart);
          var colLevels = this.parent.activeView.colLevels.slice(0);
          this.updateHorizontalContent(conWrap, resCollection);
          setStyleAttribute(conWrap.querySelector("table"), { transform: "translateX(" + this.translateY + "px)" });
          this.parent.activeView.colLevels = colLevels;
          if (this.parent.dragAndDropModule && this.parent.dragAndDropModule.actionObj.action === "drag") {
            this.parent.dragAndDropModule.navigationWrapper();
          }
        }
        window.clearTimeout(this.timeValue);
        this.timeValue = window.setTimeout(function() {
          _this.renderEvents();
        }, 250);
      }
    };
    VirtualScroll2.prototype.triggerScrollEvent = function(action) {
      var _this = this;
      var dynamicData = [];
      if (!this.parent.activeView) {
        return dynamicData;
      }
      var eventArgs = {
        startDate: this.parent.activeView.startDate(),
        endDate: this.parent.activeView.endDate(),
        startIndex: this.parent.resourceBase.renderedResources[0].groupIndex,
        endIndex: this.parent.resourceBase.renderedResources[this.parent.resourceBase.renderedResources.length - 1].groupIndex,
        resourceData: this.parent.resourceBase.renderedResources.map(function(x) {
          return x.resourceData;
        }),
        name: action
      };
      this.parent.trigger(action, eventArgs, function(args) {
        if (action === virtualScrollStart) {
          _this.parent.showSpinner();
        } else if (action === virtualScrollStop && !isNullOrUndefined(args.eventData) && args.eventData.length > 0) {
          dynamicData = args.eventData;
        }
      });
      return dynamicData;
    };
    VirtualScroll2.prototype.upScroll = function(conWrap, firstTDIndex) {
      var index = 0;
      index = ~~(conWrap.scrollTop / this.itemSize) + Math.ceil(conWrap.clientHeight / this.itemSize) - this.renderedLength;
      if (this.parent.rowAutoHeight) {
        index = index > firstTDIndex ? firstTDIndex - this.bufferCount : index;
      }
      index = index > 0 ? index : 0;
      var prevSetCollection = this.getBufferCollection(index, index + this.renderedLength);
      this.parent.resourceBase.renderedResources = prevSetCollection;
      if (firstTDIndex === 0) {
        this.translateY = conWrap.scrollTop;
      } else {
        var height = this.parent.rowAutoHeight ? this.averageRowHeight : this.itemSize;
        height = height > 0 ? height : this.itemSize;
        this.translateY = conWrap.scrollTop - this.bufferCount * height > 0 ? conWrap.scrollTop - this.bufferCount * height : 0;
      }
      return prevSetCollection;
    };
    VirtualScroll2.prototype.downScroll = function(conWrap, firstTDIndex) {
      var lastResource = this.parent.resourceBase.renderedResources[this.parent.resourceBase.renderedResources.length - 1].groupIndex;
      var lastResourceIndex = this.parent.resourceBase.expandedResources[this.parent.resourceBase.expandedResources.length - 1].groupIndex;
      if (lastResource === lastResourceIndex) {
        return null;
      }
      var nextSetResIndex = 0;
      nextSetResIndex = ~~(conWrap.scrollTop / this.itemSize);
      if (this.parent.rowAutoHeight) {
        nextSetResIndex = ~~((conWrap.scrollTop - this.translateY) / this.averageRowHeight) + firstTDIndex;
        nextSetResIndex = nextSetResIndex > firstTDIndex + this.bufferCount ? nextSetResIndex : firstTDIndex + this.bufferCount;
      }
      var lastIndex = nextSetResIndex + this.renderedLength;
      lastIndex = lastIndex > this.parent.resourceBase.expandedResources.length ? nextSetResIndex + (this.parent.resourceBase.expandedResources.length - nextSetResIndex) : lastIndex;
      var nextSetCollection = this.getBufferCollection(lastIndex - this.renderedLength, lastIndex);
      this.translateY = conWrap.scrollTop;
      return nextSetCollection;
    };
    VirtualScroll2.prototype.leftScroll = function(conWrap) {
      var index = 0;
      index = ~~(Math.abs(conWrap.scrollLeft) / this.itemSize) + Math.ceil(conWrap.clientWidth / this.itemSize) - this.renderedLength;
      index = index > 0 ? index : 0;
      return this.getCollection(index, index + this.renderedLength);
    };
    VirtualScroll2.prototype.rightScroll = function(conWrap) {
      var lastLevel = this.parent.activeView.colLevels[this.parent.activeView.colLevels.length - 1];
      var nextSetIndex = 0;
      nextSetIndex = ~~(Math.abs(conWrap.scrollLeft) / this.itemSize);
      var lastIndex = nextSetIndex + this.renderedLength;
      lastIndex = lastIndex > lastLevel.length - 1 ? lastLevel.length - 1 : lastIndex;
      return this.getCollection(lastIndex - this.renderedLength, lastIndex);
    };
    VirtualScroll2.prototype.getCollection = function(startIndex, endIndex) {
      this.translateY = startIndex * this.itemSize;
      var lastLevel = this.getResCollection(startIndex, endIndex);
      if (this.parent.enableRtl) {
        this.translateY = -this.translateY;
      }
      return lastLevel;
    };
    VirtualScroll2.prototype.getResCollection = function(startIndex, endIndex) {
      var lastLevel = this.parent.activeView.colLevels[this.parent.activeView.colLevels.length - 1];
      var resCollection = [];
      var index = { startIndex: 0, endIndex: 0 };
      if (this.parent.activeViewOptions.group.byDate) {
        if (lastLevel[parseInt(startIndex.toString(), 10)].date.getTime() === this.parent.resourceBase.expandedResources[0].date.getTime() && lastLevel[parseInt(endIndex.toString(), 10)].date.getTime() === this.parent.resourceBase.expandedResources[this.parent.resourceBase.expandedResources.length - 1].date.getTime()) {
          return this.parent.resourceBase.expandedResources;
        }
        resCollection = this.getByDateCollection(lastLevel[parseInt(startIndex.toString(), 10)], lastLevel[parseInt(endIndex.toString(), 10)], index);
        this.setRenderedDates(resCollection);
      } else {
        if (lastLevel[parseInt(startIndex.toString(), 10)].groupIndex === this.parent.resourceBase.expandedResources[0].groupIndex && lastLevel[parseInt(endIndex.toString(), 10)].groupIndex === this.parent.resourceBase.expandedResources[this.parent.resourceBase.expandedResources.length - 1].groupIndex) {
          return this.parent.resourceBase.expandedResources;
        }
        resCollection = this.getByIdCollection(lastLevel[parseInt(startIndex.toString(), 10)], lastLevel[parseInt(endIndex.toString(), 10)], index);
      }
      if (this.parent.currentView !== "Month") {
        this.startIndex = index.startIndex;
        resCollection = lastLevel.slice(index.startIndex, index.endIndex);
      }
      this.translateY = index.startIndex * this.itemSize;
      return resCollection;
    };
    VirtualScroll2.prototype.getByDateCollection = function(firstItem, lastItem, index) {
      var resCollection = this.parent.activeView.colLevels[0].filter(function(data) {
        return firstItem.date.getTime() <= data.date.getTime() && data.date.getTime() <= lastItem.date.getTime();
      });
      this.setStartEndIndex(this.parent.activeView.colLevels[0], resCollection[0], resCollection[resCollection.length - 1], index);
      return resCollection;
    };
    VirtualScroll2.prototype.getByIdCollection = function(firstItem, lastItem, index) {
      var resCollection = this.parent.resourceBase.lastResourceLevel.filter(function(data) {
        return firstItem.groupIndex <= data.groupIndex && data.groupIndex <= lastItem.groupIndex;
      });
      this.parent.resourceBase.renderedResources = resCollection;
      this.setStartEndIndex(this.parent.resourceBase.lastResourceLevel, resCollection[0], resCollection[resCollection.length - 1], index);
      return resCollection;
    };
    VirtualScroll2.prototype.setStartEndIndex = function(data, firstItem, lastItem, colIndex) {
      var index = 0;
      data.filter(function(data2) {
        if (firstItem === data2) {
          colIndex.startIndex = index;
        } else if (lastItem === data2) {
          colIndex.endIndex = index + data2.colSpan;
        }
        index += data2.colSpan;
      });
      if (firstItem === lastItem) {
        colIndex.endIndex = colIndex.startIndex + lastItem.colSpan;
      }
    };
    VirtualScroll2.prototype.updateContent = function(resWrap, conWrap, eventWrap, resCollection) {
      var renderedLength = resWrap.querySelector("tbody").children.length;
      if (document.activeElement && document.activeElement.classList.contains(RESOURCE_CELLS_CLASS)) {
        this.isResourceCell = true;
        this.parent.element.focus();
      }
      for (var i = 0; i < renderedLength; i++) {
        remove(resWrap.querySelector("tbody tr"));
        remove(conWrap.querySelector("tbody tr"));
        remove(eventWrap.querySelector("div"));
      }
      this.parent.resourceBase.renderedResources = resCollection;
      var resourceRows = this.parent.resourceBase.getContentRows(resCollection, true);
      var contentRows = this.parent.activeView.getContentRows();
      var eventRows = this.parent.activeView.getEventRows(resCollection.length);
      append(resourceRows, resWrap.querySelector("tbody"));
      append(contentRows, conWrap.querySelector("tbody"));
      append(eventRows, eventWrap);
    };
    VirtualScroll2.prototype.updateHorizontalContent = function(conWrap, resCollection) {
      this.existingDataCollection = this.parent.resourceBase.expandedResources;
      this.parent.resourceBase.expandedResources = resCollection;
      var selectedEle = this.parent.getSelectedCells();
      this.focusedEle = selectedEle[selectedEle.length - 1] || this.focusedEle;
      var tbody = conWrap.querySelector("tbody");
      var renderedRows = Array.from(tbody.querySelectorAll("tr"));
      if (this.parent.currentView === "Month") {
        this.updateMonthViewContent(conWrap, resCollection);
      } else {
        this.updateOtherViewContent(conWrap, resCollection, renderedRows);
      }
    };
    VirtualScroll2.prototype.updateMonthViewContent = function(conWrap, resCollection) {
      var renderedLength = conWrap.querySelectorAll(" tr").length;
      for (var i = 0; i < renderedLength; i++) {
        remove(conWrap.querySelector("tbody tr"));
      }
      if (this.parent.activeViewOptions.group.byDate) {
        this.parent.activeView.colLevels[0] = resCollection;
      } else {
        this.parent.activeView.colLevels[this.parent.activeView.colLevels.length - 2] = resCollection;
      }
      var contentRows = this.parent.activeView.getContentRows();
      append(contentRows, conWrap.querySelector("tbody"));
    };
    VirtualScroll2.prototype.updateOtherViewContent = function(conWrap, resCollection, renderedRows) {
      var tbody = conWrap.querySelector("tbody");
      var colGroup = conWrap.querySelector("colgroup");
      var thead = conWrap.querySelector("thead");
      var table = conWrap.querySelector("table");
      this.parent.activeView.colLevels[this.parent.activeView.colLevels.length - 1] = resCollection;
      var newGroupIndices = new Set(resCollection.map(function(data) {
        return data.groupIndex;
      }));
      renderedRows.forEach(function(row) {
        var tdElements = row.querySelectorAll("td");
        tdElements.forEach(function(td) {
          var groupIndex = parseInt(td.getAttribute("data-group-index"), 10);
          if (!newGroupIndices.has(groupIndex)) {
            td.remove();
          }
        });
      });
      var col = [].slice.call(conWrap.querySelector("colgroup").children);
      for (var i = 0; i < col.length; i++) {
        remove(col[parseInt(i.toString(), 10)]);
      }
      resCollection.forEach(function() {
        return colGroup.appendChild(createElement("col"));
      });
      var tHead = [].slice.call(conWrap.querySelector("thead").children);
      for (var i = 0; i < tHead.length; i++) {
        remove(tHead[parseInt(i.toString(), 10)]);
      }
      thead.appendChild(this.parent.eventBase.createEventWrapper("", this.startIndex > 0 ? this.startIndex : 0));
      if (this.parent.activeViewOptions.timeScale.enable) {
        thead.appendChild(this.parent.eventBase.createEventWrapper("timeIndicator"));
      }
      prepend([thead], table);
      var contentRows = this.parent.activeView.getContentRows();
      this.mergeNewTdData(tbody, contentRows);
    };
    VirtualScroll2.prototype.mergeNewTdData = function(tbody, contentRows) {
      var existingRows = Array.from(tbody.querySelectorAll("tr"));
      existingRows.forEach(function(existingRow, rowIndex) {
        if (rowIndex < contentRows.length) {
          var newRow = contentRows[parseInt(rowIndex.toString(), 10)];
          var existingTds_1 = Array.from(existingRow.querySelectorAll("td"));
          var newTds = Array.from(newRow.querySelectorAll("td"));
          newTds.forEach(function(newTd) {
            var newGroupIndex = parseInt(newTd.getAttribute("data-group-index").toString(), 10);
            var inserted = false;
            for (var _i = 0, existingTds_2 = existingTds_1; _i < existingTds_2.length; _i++) {
              var existingTd = existingTds_2[_i];
              var existingGroupIndex = parseInt(existingTd.getAttribute("data-group-index").toString(), 10);
              if (newGroupIndex < existingGroupIndex) {
                existingRow.insertBefore(newTd, existingTd);
                inserted = true;
                break;
              }
            }
            if (!inserted) {
              existingRow.appendChild(newTd);
            }
          });
        }
      });
    };
    VirtualScroll2.prototype.getBufferCollection = function(startIndex, endIndex) {
      return this.parent.resourceBase.expandedResources.slice(startIndex, endIndex);
    };
    VirtualScroll2.prototype.setTranslate = function(resWrap, conWrap, eventWrap, timeIndicator) {
      setStyleAttribute(resWrap.querySelector("table"), { transform: "translateY(" + this.translateY + "px)" });
      setStyleAttribute(conWrap.querySelector("table"), { transform: "translateY(" + this.translateY + "px)" });
      setStyleAttribute(eventWrap, { transform: "translateY(" + this.translateY + "px)" });
      if (!isNullOrUndefined(timeIndicator)) {
        setStyleAttribute(timeIndicator, { transform: "translateY(" + this.translateY + "px)" });
      }
    };
    VirtualScroll2.prototype.updateFocusedWorkCell = function() {
      if (this.focusedEle) {
        var date = parseInt(this.focusedEle.getAttribute("data-date"), 10);
        var groupIndex = parseInt(this.focusedEle.getAttribute("data-group-index"), 10);
        var ele = this.parent.element.querySelector("." + WORK_CELLS_CLASS + '[data-date="' + date + '"][data-group-index="' + groupIndex + '"]');
        if (ele) {
          this.parent.addSelectedClass([ele], ele, true);
        }
        this.focusedEle = null;
      }
    };
    VirtualScroll2.prototype.setRenderedDates = function(resCollection) {
      if (this.parent.currentView !== "Month") {
        var dateCol_1 = resCollection.map(function(x) {
          return x.date;
        });
        this.parent.resourceBase.renderedResources.forEach(function(x) {
          return x.renderDates = dateCol_1;
        });
      } else {
        var dateCol_2 = resCollection.map(function(x) {
          return x.date.getDay();
        });
        var renderDates_1 = this.parent.activeView.renderDates.filter(function(x) {
          return dateCol_2.indexOf(x.getDay()) >= 0;
        });
        this.parent.resourceBase.renderedResources.forEach(function(x) {
          return x.renderDates = renderDates_1;
        });
      }
    };
    VirtualScroll2.prototype.setTabIndex = function() {
      var resColWrap = this.parent.element.querySelector("." + RESOURCE_COLUMN_WRAP_CLASS);
      var resCells = [].slice.call(this.parent.element.querySelectorAll("." + RESOURCE_CELLS_CLASS));
      if (resCells && resColWrap) {
        resCells.forEach(function(element) {
          if (element.getBoundingClientRect().top >= resColWrap.getBoundingClientRect().top) {
            element.setAttribute("tabindex", "0");
          }
        });
      }
      var focusResCell = this.parent.element.querySelector("." + RESOURCE_CELLS_CLASS + '[tabindex="0"]');
      if (this.isResourceCell && focusResCell) {
        focusResCell.focus();
        this.isResourceCell = false;
      }
    };
    VirtualScroll2.prototype.destroy = function() {
      this.removeEventListener();
      this.focusedEle = null;
    };
    return VirtualScroll2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/renderer/renderer.js
var Render = (
  /** @class */
  function() {
    function Render2(parent) {
      this.parent = parent;
    }
    Render2.prototype.render = function(viewName, isDataRefresh) {
      if (isDataRefresh === void 0) {
        isDataRefresh = true;
      }
      this.initializeLayout(viewName);
      if (this.parent.activeView && isDataRefresh) {
        this.parent.crudModule.refreshDataManager();
      }
    };
    Render2.prototype.initializeLayout = function(viewName) {
      if (this.parent.activeView) {
        var templates = [
          "cellTemplate",
          "tooltipTemplate",
          "majorSlotTemplate",
          "minorSlotTemplate",
          "headerTooltipTemplate",
          "dateHeaderTemplate",
          "dayHeaderTemplate",
          "monthHeaderTemplate",
          "headerIndentTemplate",
          "resourceHeaderTemplate",
          "cellHeaderTemplate",
          "dateRangeTemplate"
        ];
        if (this.parent.activeEventTemplates.length > 0) {
          templates = templates.concat(this.parent.activeEventTemplates);
          this.parent.activeEventTemplates = [];
        } else {
          templates.push("eventTemplate");
        }
        this.parent.resetTemplates(templates);
        this.parent.activeView.removeEventListener();
        this.parent.activeView.destroy();
      }
      switch (viewName) {
        case "Day":
          this.parent.activeView = this.parent.dayModule;
          break;
        case "Week":
          this.parent.activeView = this.parent.weekModule;
          break;
        case "WorkWeek":
          this.parent.activeView = this.parent.workWeekModule;
          break;
        case "Month":
          this.parent.activeView = this.parent.monthModule;
          break;
        case "Year":
          this.parent.activeView = this.parent.yearModule;
          break;
        case "Agenda":
          this.parent.activeView = this.parent.agendaModule;
          break;
        case "MonthAgenda":
          this.parent.activeView = this.parent.monthAgendaModule;
          break;
        case "TimelineDay":
          this.parent.activeView = this.parent.timelineViewsModule;
          if (!isNullOrUndefined(this.parent.activeView)) {
            this.parent.activeView.viewClass = "e-timeline-day-view";
          }
          break;
        case "TimelineWorkWeek":
          this.parent.activeView = this.parent.timelineViewsModule;
          if (!isNullOrUndefined(this.parent.activeView)) {
            this.parent.activeView.viewClass = "e-timeline-work-week-view";
          }
          break;
        case "TimelineWeek":
          this.parent.activeView = this.parent.timelineViewsModule;
          if (!isNullOrUndefined(this.parent.activeView)) {
            this.parent.activeView.viewClass = "e-timeline-week-view";
          }
          break;
        case "TimelineMonth":
          this.parent.activeView = this.parent.timelineMonthModule;
          break;
        case "TimelineYear":
          this.parent.activeView = this.parent.timelineYearModule;
          break;
      }
      if (isNullOrUndefined(this.parent.activeView)) {
        var firstView = this.parent.viewCollections[0].option;
        if (firstView) {
          this.parent.setProperties({ currentView: firstView }, true);
          if (this.parent.headerModule) {
            this.parent.headerModule.updateActiveView();
            this.parent.headerModule.setCalendarView();
          }
          console.warn('[WARNING] :: Module "' + viewName + '" is not available in Schedule component! You either misspelled the module name or forgot to load it.');
          return this.initializeLayout(firstView);
        }
        throw Error("Inject required modules");
      }
      this.parent.uiStateValues.scheduleHeight = this.parent.element.offsetHeight;
      this.parent.activeView.viewIndex = this.parent.viewIndex;
      this.updateLabelText(viewName);
      this.parent.activeView.addEventListener();
      this.parent.activeView.getRenderDates();
      this.parent.uiStateValues.isGroupAdaptive = this.parent.activeViewOptions.group.resources.length > 0 && (this.parent.enableAdaptiveUI && !this.parent.isAdaptive || this.parent.isAdaptive && this.parent.activeViewOptions.group.enableCompactView);
      if (this.parent.virtualScrollModule) {
        this.parent.virtualScrollModule.destroy();
        this.parent.virtualScrollModule = null;
      }
      if ((["Agenda", "MonthAgenda", "Year", "TimelineYear"].indexOf(this.parent.currentView) === -1 || this.parent.currentView === "TimelineYear" && this.parent.activeViewOptions.orientation === "Vertical") && this.parent.activeViewOptions.allowVirtualScrolling && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        this.parent.virtualScrollModule = new VirtualScroll(this.parent);
        if (this.parent.activeView.isTimelineView()) {
          this.parent.uiStateValues.top = 0;
        } else {
          this.parent.virtualScrollModule.isHorizontalScroll = true;
          this.parent.uiStateValues.left = 0;
        }
      }
      this.updateHeader();
      this.parent.currentTimezoneDate = this.parent.getCurrentTime();
      this.parent.activeView.renderLayout(CURRENT_PANEL_CLASS);
      this.parent.renderTemplates();
      if (this.parent.eventTooltip) {
        this.parent.eventTooltip.destroy();
        this.parent.eventTooltip = null;
      }
      if (this.parent.eventSettings.enableTooltip || this.parent.activeViewOptions.group.resources.length > 0 && this.parent.activeViewOptions.group.headerTooltipTemplate) {
        this.parent.eventTooltip = new EventTooltip(this.parent);
      }
    };
    Render2.prototype.updateHeader = function() {
      if (this.parent.headerModule) {
        this.parent.headerModule.setDayOfWeek(this.parent.activeViewOptions.firstDayOfWeek);
        if (this.parent.activeViewOptions.readonly) {
          addClass([this.parent.element], READ_ONLY);
        } else if (this.parent.element.classList.contains(READ_ONLY)) {
          removeClass([this.parent.element], READ_ONLY);
        }
        this.parent.headerModule.updateDateRange();
        this.parent.headerModule.updateHeaderItems("remove");
      }
    };
    Render2.prototype.updateLabelText = function(view) {
      this.parent.element.setAttribute("role", "application");
      this.parent.element.removeAttribute("aria-labelledby");
      this.parent.element.removeAttribute("aria-label");
      if (view === "Year") {
        this.parent.element.setAttribute("aria-label", this.parent.activeView.getLabelText(view));
      } else {
        this.parent.element.setAttribute("aria-labelledby", this.parent.element.id + "_table");
      }
    };
    return Render2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/models/work-hours.js
var __extends5 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate3 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var WorkHours = (
  /** @class */
  function(_super) {
    __extends5(WorkHours2, _super);
    function WorkHours2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate3([
      Property(true)
    ], WorkHours2.prototype, "highlight", void 0);
    __decorate3([
      Property("09:00")
    ], WorkHours2.prototype, "start", void 0);
    __decorate3([
      Property("18:00")
    ], WorkHours2.prototype, "end", void 0);
    return WorkHours2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/models/time-scale.js
var __extends6 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate4 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TimeScale = (
  /** @class */
  function(_super) {
    __extends6(TimeScale2, _super);
    function TimeScale2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([
      Property(true)
    ], TimeScale2.prototype, "enable", void 0);
    __decorate4([
      Property(60)
    ], TimeScale2.prototype, "interval", void 0);
    __decorate4([
      Property(2)
    ], TimeScale2.prototype, "slotCount", void 0);
    __decorate4([
      Property()
    ], TimeScale2.prototype, "minorSlotTemplate", void 0);
    __decorate4([
      Property()
    ], TimeScale2.prototype, "majorSlotTemplate", void 0);
    return TimeScale2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/models/quick-info-templates.js
var __extends7 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate5 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var QuickInfoTemplates = (
  /** @class */
  function(_super) {
    __extends7(QuickInfoTemplates2, _super);
    function QuickInfoTemplates2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate5([
      Property("Both")
    ], QuickInfoTemplates2.prototype, "templateType", void 0);
    __decorate5([
      Property()
    ], QuickInfoTemplates2.prototype, "header", void 0);
    __decorate5([
      Property()
    ], QuickInfoTemplates2.prototype, "content", void 0);
    __decorate5([
      Property()
    ], QuickInfoTemplates2.prototype, "footer", void 0);
    return QuickInfoTemplates2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/models/header-rows.js
var __extends8 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate6 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HeaderRows = (
  /** @class */
  function(_super) {
    __extends8(HeaderRows2, _super);
    function HeaderRows2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate6([
      Property()
    ], HeaderRows2.prototype, "option", void 0);
    __decorate6([
      Property()
    ], HeaderRows2.prototype, "template", void 0);
    return HeaderRows2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/actions/crud.js
var Crud = (
  /** @class */
  function() {
    function Crud2(parent) {
      this.parent = parent;
      this.crudObj = { sourceEvent: null, targetEvent: null, isCrudAction: false };
    }
    Crud2.prototype.getQuery = function() {
      var start = this.parent.activeView.startDate();
      var end = this.parent.activeView.endDate();
      return this.parent.dataModule.generateQuery(start, end);
    };
    Crud2.prototype.getTable = function() {
      if (this.parent.eventSettings.query) {
        var query = this.parent.eventSettings.query.clone();
        return query.fromTable;
      }
      return null;
    };
    Crud2.prototype.refreshDataManager = function() {
      var _this = this;
      if (!this.parent.activeView) {
        return;
      }
      if (this.parent.uiStateValues && this.parent.uiStateValues.isPreventEventRefresh) {
        this.parent.uiStateValues.isPreventEventRefresh = false;
        this.parent.refreshEvents(false);
        this.parent.hideSpinner();
        return;
      }
      var start = this.parent.activeView.startDate();
      var end = this.parent.activeView.endDate();
      var dataManager = this.parent.dataModule.getData(this.parent.dataModule.generateQuery(start, end));
      dataManager.then(function(e) {
        return _this.dataManagerSuccess(e);
      }).catch(function(e) {
        return _this.dataManagerFailure(e);
      });
    };
    Crud2.prototype.dataManagerSuccess = function(e) {
      var _this = this;
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
      this.parent.trigger(dataBinding, e, function(args) {
        if (args.cancel) {
          return;
        }
        var resultData = extend([], args.result, null, true);
        _this.parent.eventsData = resultData.filter(function(data) {
          return !data[_this.parent.eventFields.isBlock];
        });
        _this.parent.blockData = resultData.filter(function(data) {
          return data[_this.parent.eventFields.isBlock];
        });
        _this.refreshProcessedData();
        if (_this.parent.dragAndDropModule && _this.parent.dragAndDropModule.actionObj.action === "drag") {
          _this.parent.dragAndDropModule.navigationWrapper();
        }
        _this.parent.trigger(dataBound, null, function() {
          _this.parent.hideSpinner();
          if (_this.parent.isPrinting) {
            setTimeout(function() {
              _this.parent.notify(print2, {});
            }, 100);
          }
        });
      });
    };
    Crud2.prototype.dataManagerFailure = function(e) {
      var _this = this;
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
      this.parent.trigger(actionFailure, { error: e }, function() {
        return _this.parent.hideSpinner();
      });
    };
    Crud2.prototype.refreshProcessedData = function(isVirtualScrollAction, dynamicEvents) {
      if (isVirtualScrollAction === void 0) {
        isVirtualScrollAction = false;
      }
      if (this.parent.dragAndDropModule) {
        this.parent.dragAndDropModule.actionObj.action = "";
        removeClass([this.parent.element], "e-event-action");
      }
      if (this.parent.activeViewOptions && this.parent.activeViewOptions.eventTemplate) {
        var templateNames = ["eventTemplate"];
        if (this.crudObj.isCrudAction && ["Agenda", "MonthAgenda", "Year", "TimelineYear"].indexOf(this.parent.currentView) === -1) {
          templateNames = [];
          for (var i = 0, len = this.crudObj.sourceEvent.length; i < len; i++) {
            templateNames.push("eventTemplate_" + this.crudObj.sourceEvent[parseInt(i.toString(), 10)].groupIndex);
            if (this.crudObj.targetEvent[parseInt(i.toString(), 10)] && this.crudObj.sourceEvent[parseInt(i.toString(), 10)].groupIndex !== this.crudObj.targetEvent[parseInt(i.toString(), 10)].groupIndex) {
              templateNames.push("eventTemplate_" + this.crudObj.targetEvent[parseInt(i.toString(), 10)].groupIndex);
            }
          }
        }
        if (templateNames.length > 0) {
          this.parent.resetTemplates(templateNames);
        }
      }
      if (isVirtualScrollAction) {
        this.parent.notify(dataReady, { processedData: dynamicEvents ? this.parent.eventBase.processData(dynamicEvents) : this.parent.eventsProcessed });
        return;
      }
      var eventsData = this.parent.eventsData || [];
      var blockData = this.parent.blockData || [];
      var data = eventsData.concat(blockData);
      this.parent.notify(dataReady, { processedData: this.parent.eventBase ? this.parent.eventBase.processData(data) : [] });
    };
    Crud2.prototype.refreshData = function(args) {
      var _this = this;
      var actionArgs = {
        requestType: args.requestType,
        cancel: false,
        data: args.data,
        addedRecords: args.editParams.addedRecords,
        changedRecords: args.editParams.changedRecords,
        deletedRecords: args.editParams.deletedRecords
      };
      if (this.parent.dragAndDropModule && this.parent.dragAndDropModule.actionObj && this.parent.dragAndDropModule.actionObj.element) {
        this.parent.dragAndDropModule.actionObj.element.style.display = "none";
      }
      if (this.parent.resizeModule && this.parent.resizeModule.actionObj && this.parent.resizeModule.actionObj.element) {
        this.parent.resizeModule.actionObj.element.style.display = "none";
      }
      if (this.parent.isSpecificResourceEvents()) {
        if (args.requestType === "eventCreated" || args.requestType === "eventRemoved") {
          this.crudObj.isCrudAction = true;
          this.crudObj.sourceEvent = [];
          var crudData = args.data instanceof Array ? args.data.length === 0 && args.requestType === "eventRemoved" ? args.editParams.deletedRecords : args.data : (typeof args.data === "string" || typeof args.data === "number") && args.requestType === "eventRemoved" ? args.editParams.deletedRecords : [args.data];
          var _loop_1 = function(data2) {
            this_1.crudObj.isCrudAction = !(args.requestType === "eventRemoved" && !isNullOrUndefined(data2.parent));
            var groupIndex = this_1.parent.eventBase.getGroupIndexFromEvent(data2);
            if (groupIndex > -1 && this_1.parent.crudModule.crudObj.sourceEvent.filter(function(tdData) {
              return tdData.groupIndex === groupIndex;
            }).length === 0 && this_1.crudObj.isCrudAction) {
              this_1.crudObj.sourceEvent.push(this_1.parent.resourceBase.lastResourceLevel[parseInt(groupIndex.toString(), 10)]);
            }
          };
          var this_1 = this;
          for (var _i = 0, crudData_1 = crudData; _i < crudData_1.length; _i++) {
            var data = crudData_1[_i];
            _loop_1(data);
          }
          this.crudObj.targetEvent = this.crudObj.sourceEvent;
        }
      }
      if (this.parent.dataModule.dataManager.dataSource.offline) {
        this.parent.trigger(actionComplete, actionArgs, function(offlineArgs) {
          if (!offlineArgs.cancel) {
            _this.refreshDataManager();
          }
        });
      } else {
        args.promise.then(function() {
          if (!_this.parent || _this.parent && _this.parent.isDestroyed) {
            return;
          }
          _this.parent.trigger(actionComplete, actionArgs, function(onlineArgs) {
            if (!onlineArgs.cancel) {
              _this.refreshDataManager();
            }
          });
        }).catch(function(e) {
          if (!_this.parent || _this.parent && _this.parent.isDestroyed) {
            return;
          }
          _this.parent.trigger(actionFailure, { error: e });
        });
      }
    };
    Crud2.prototype.addEvent = function(eventData) {
      var _this = this;
      if (this.parent.eventSettings.allowAdding && !this.parent.activeViewOptions.readonly) {
        if (!this.isBlockEvent(eventData) && this.parent.eventBase.isBlockRange(eventData)) {
          this.parent.quickPopup.openValidationError("blockAlert", eventData);
          return;
        }
        var addEvents = eventData instanceof Array ? eventData : [eventData];
        if (addEvents.length === 0) {
          return;
        }
        var args = {
          requestType: "eventCreate",
          cancel: false,
          data: addEvents,
          addedRecords: addEvents,
          changedRecords: [],
          deletedRecords: []
        };
        this.parent.trigger(actionBegin, args, function(addArgs) {
          if (!addArgs.cancel) {
            var fields = _this.parent.eventFields;
            var editParams = { addedRecords: [], changedRecords: [], deletedRecords: [] };
            var promise = void 0;
            if (addArgs.addedRecords instanceof Array) {
              for (var _i = 0, _a = addArgs.addedRecords; _i < _a.length; _i++) {
                var event_1 = _a[_i];
                event_1 = _this.parent.eventBase.updateEventDateTime(event_1);
                var eventData_1 = extend({}, _this.parent.eventBase.processTimezone(event_1, true), null, true);
                editParams.addedRecords.push(eventData_1);
              }
              promise = _this.parent.dataModule.dataManager.saveChanges(editParams, fields.id, _this.getTable(), _this.getQuery());
            } else {
              var event_2 = _this.parent.eventBase.processTimezone(addArgs.addedRecords, true);
              editParams.addedRecords.push(event_2);
              promise = _this.parent.dataModule.dataManager.insert(event_2, _this.getTable(), _this.getQuery());
            }
            var crudArgs = {
              requestType: "eventCreated",
              cancel: false,
              data: addArgs.addedRecords,
              promise,
              editParams
            };
            _this.refreshData(crudArgs);
          }
        });
      }
    };
    Crud2.prototype.saveEvent = function(eventData, action) {
      var _this = this;
      if (this.parent.eventSettings.allowEditing && !this.parent.activeViewOptions.readonly) {
        if (this.parent.currentAction !== "EditFollowingEvents" && !this.isBlockEvent(eventData) && this.parent.eventBase.isBlockRange(eventData)) {
          this.parent.quickPopup.openValidationError("blockAlert", eventData);
          this.parent.crudModule.crudObj.isCrudAction = false;
          return;
        }
        var updateEvents = eventData instanceof Array ? eventData : [eventData];
        if (updateEvents.length === 0) {
          return;
        }
        this.parent.currentAction = action;
        if (action) {
          switch (action) {
            case "Save":
              this.processSave(eventData);
              break;
            case "EditOccurrence":
              this.processOccurrences(eventData, action);
              break;
            case "EditFollowingEvents":
              this.processFollowSeries(eventData, action);
              break;
            case "EditSeries":
              this.processEntireSeries(eventData, action);
              break;
          }
        } else {
          var args = {
            requestType: "eventChange",
            cancel: false,
            data: eventData,
            addedRecords: [],
            changedRecords: updateEvents,
            deletedRecords: []
          };
          this.parent.trigger(actionBegin, args, function(saveArgs) {
            if (!saveArgs.cancel) {
              var promise = void 0;
              var fields = _this.parent.eventFields;
              var editParams = { addedRecords: [], changedRecords: [], deletedRecords: [] };
              if (saveArgs.changedRecords instanceof Array) {
                for (var _i = 0, _a = saveArgs.changedRecords; _i < _a.length; _i++) {
                  var event_3 = _a[_i];
                  event_3 = _this.parent.eventBase.updateEventDateTime(event_3);
                  var eventData_2 = extend({}, _this.parent.eventBase.processTimezone(event_3, true), null, true);
                  editParams.changedRecords.push(eventData_2);
                }
                promise = _this.parent.dataModule.dataManager.saveChanges(editParams, fields.id, _this.getTable(), _this.getQuery());
              } else {
                var event_4 = _this.parent.eventBase.processTimezone(saveArgs.changedRecords, true);
                editParams.changedRecords.push(event_4);
                promise = _this.parent.dataModule.dataManager.update(fields.id, event_4, _this.getTable(), _this.getQuery());
              }
              var cloneEvent = extend({}, saveArgs.changedRecords[saveArgs.changedRecords.length - 1], null, true);
              _this.parent.eventBase.selectWorkCellByTime([_this.parent.eventBase.processTimezone(cloneEvent)]);
              var crudArgs = {
                requestType: "eventChanged",
                cancel: false,
                data: saveArgs.changedRecords,
                promise,
                editParams
              };
              _this.refreshData(crudArgs);
            }
          });
        }
      }
    };
    Crud2.prototype.deleteEvent = function(eventData, action) {
      var _this = this;
      if (this.parent.eventSettings.allowDeleting && !this.parent.activeViewOptions.readonly) {
        this.parent.currentAction = action;
        var deleteEvents = [];
        if (typeof eventData === "string" || typeof eventData === "number") {
          deleteEvents = this.parent.eventsData.filter(function(eventObj) {
            return eventObj[_this.parent.eventFields.id] === eventData;
          });
        } else {
          deleteEvents = eventData instanceof Array ? eventData : [eventData];
        }
        if (deleteEvents.length === 0) {
          return;
        }
        if (action) {
          switch (action) {
            case "Delete":
              this.processDelete(deleteEvents);
              break;
            case "DeleteOccurrence":
              this.processOccurrences(deleteEvents, action);
              break;
            case "DeleteFollowingEvents":
              this.processFollowSeries(deleteEvents, action);
              break;
            case "DeleteSeries":
              this.processEntireSeries(deleteEvents, action);
              break;
          }
        } else {
          var args = {
            requestType: "eventRemove",
            cancel: false,
            data: eventData,
            addedRecords: [],
            changedRecords: [],
            deletedRecords: deleteEvents
          };
          this.parent.trigger(actionBegin, args, function(deleteArgs) {
            if (!deleteArgs.cancel) {
              var promise = void 0;
              var fields = _this.parent.eventFields;
              var editParams = { addedRecords: [], changedRecords: [], deletedRecords: [] };
              if (deleteArgs.deletedRecords.length > 1) {
                editParams.deletedRecords = editParams.deletedRecords.concat(deleteArgs.deletedRecords);
                promise = _this.parent.dataModule.dataManager.saveChanges(editParams, fields.id, _this.getTable(), _this.getQuery());
              } else {
                editParams.deletedRecords.push(deleteArgs.deletedRecords[0]);
                promise = _this.parent.dataModule.dataManager.remove(fields.id, deleteArgs.deletedRecords[0], _this.getTable(), _this.getQuery());
              }
              _this.parent.eventBase.selectWorkCellByTime(deleteArgs.deletedRecords);
              var crudArgs = {
                requestType: "eventRemoved",
                cancel: false,
                data: deleteArgs.deletedRecords,
                promise,
                editParams
              };
              _this.refreshData(crudArgs);
            }
          });
        }
      }
    };
    Crud2.prototype.processOccurrences = function(eventData, action) {
      var _this = this;
      var occurrenceData = [];
      var isDeletedRecords = false;
      if (eventData instanceof Array) {
        for (var _i = 0, eventData_3 = eventData; _i < eventData_3.length; _i++) {
          var event_5 = eventData_3[_i];
          occurrenceData.push({ occurrence: event_5, parent: this.getParentEvent(event_5) });
        }
      } else {
        occurrenceData = { occurrence: eventData, parent: this.getParentEvent(eventData) };
      }
      var updateEvents = eventData instanceof Array ? eventData : [eventData];
      var args = {
        requestType: action === "EditOccurrence" ? "eventChange" : "eventRemove",
        cancel: false,
        addedRecords: [],
        changedRecords: updateEvents,
        deletedRecords: []
      };
      args.data = occurrenceData;
      this.parent.trigger(actionBegin, args, function(occurrenceArgs) {
        if (!occurrenceArgs.cancel) {
          var fields = _this.parent.eventFields;
          var editParams = { addedRecords: [], changedRecords: [], deletedRecords: [] };
          var occurrenceEvents = occurrenceData instanceof Array ? occurrenceData : [occurrenceData];
          var _loop_2 = function(a2, count2) {
            var childEvent = occurrenceArgs.changedRecords[parseInt(a2.toString(), 10)];
            var parentEvent = occurrenceEvents[parseInt(a2.toString(), 10)].parent;
            var parentException = parentEvent[fields.recurrenceException];
            var editedData = void 0;
            var exceptionDate = void 0;
            switch (action) {
              case "EditOccurrence":
                editedData = _this.parent.eventsProcessed.filter(function(event) {
                  return event.Guid === childEvent.Guid;
                })[0];
                exceptionDate = _this.excludeDateCheck(editedData[fields.startTime], parentException);
                if (exceptionDate !== parentEvent[fields.recurrenceException]) {
                  parentEvent[fields.recurrenceException] = exceptionDate;
                  childEvent[fields.recurrenceException] = getRecurrenceStringFromDate(editedData[fields.startTime]);
                  childEvent[fields.recurrenceID] = parentEvent[fields.id];
                  childEvent[fields.followingID] = null;
                  editParams.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));
                  editParams.addedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));
                } else {
                  editParams.changedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));
                }
                break;
              case "DeleteOccurrence":
                if (!childEvent[fields.recurrenceException]) {
                  parentEvent[fields.recurrenceException] = _this.excludeDateCheck(childEvent[fields.startTime], parentException);
                  editParams.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));
                }
                if (childEvent[fields.id] !== parentEvent[fields.id]) {
                  editParams.deletedRecords.push(childEvent);
                  isDeletedRecords = true;
                }
                break;
            }
          };
          for (var a = 0, count = occurrenceArgs.changedRecords.length; a < count; a++) {
            _loop_2(a, count);
          }
          var promise = _this.parent.dataModule.dataManager.saveChanges(editParams, fields.id, _this.getTable(), _this.getQuery());
          var cloneEvent = extend({}, occurrenceArgs.changedRecords[occurrenceArgs.changedRecords.length - 1], null, true);
          _this.parent.eventBase.selectWorkCellByTime(action === "EditOccurrence" ? [_this.parent.eventBase.processTimezone(cloneEvent)] : [cloneEvent]);
          var crudArgs = {
            requestType: action === "EditOccurrence" ? "eventChanged" : "eventRemoved",
            cancel: false,
            data: isDeletedRecords ? occurrenceArgs.deletedRecords : occurrenceArgs.changedRecords,
            promise,
            editParams
          };
          _this.refreshData(crudArgs);
        }
      });
    };
    Crud2.prototype.processFollowSeries = function(eventData, action) {
      var _this = this;
      var followData = [];
      if (eventData instanceof Array) {
        for (var _i = 0, eventData_4 = eventData; _i < eventData_4.length; _i++) {
          var event_6 = eventData_4[_i];
          followData.push({ occurrence: event_6, parent: this.getParentEvent(event_6) });
        }
      } else {
        followData = { occurrence: eventData, parent: this.getParentEvent(eventData) };
      }
      var updateFollowEvents = eventData instanceof Array ? eventData : [eventData];
      var args = {
        requestType: action === "EditFollowingEvents" ? "eventChange" : "eventRemove",
        cancel: false,
        addedRecords: [],
        changedRecords: updateFollowEvents,
        deletedRecords: []
      };
      args.data = followData;
      this.parent.trigger(actionBegin, args, function(followArgs) {
        if (!followArgs.cancel) {
          var fields_1 = _this.parent.eventFields;
          var editParams = { addedRecords: [], changedRecords: [], deletedRecords: [] };
          var followEvents = followData instanceof Array ? followData : [followData];
          var _loop_3 = function(a2, count2) {
            var childEvent = followArgs.changedRecords[parseInt(a2.toString(), 10)];
            var parentEvent = followEvents[parseInt(a2.toString(), 10)].parent;
            var followData_1 = _this.parent.eventBase.getEventCollections(parentEvent, childEvent);
            var isSpanned = void 0;
            switch (action) {
              case "EditFollowingEvents":
                _this.processRecurrenceRule(parentEvent, childEvent);
                isSpanned = !_this.parent.eventBase.isFollowingEvent(parentEvent, childEvent);
                childEvent[fields_1.followingID] = isSpanned ? null : parentEvent[fields_1.id];
                childEvent[fields_1.recurrenceID] = null;
                editParams.addedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));
                editParams.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));
                if (!_this.parent.uiStateValues.isIgnoreOccurrence) {
                  childEvent[fields_1.recurrenceException] = null;
                  if (followData_1.occurrence.length > 0) {
                    var rule = followData_1.occurrence.slice(-1)[0][fields_1.recurrenceRule];
                    if (rule.indexOf("COUNT") === -1) {
                      childEvent[fields_1.recurrenceRule] = rule;
                    }
                  }
                  if (followData_1.follow.length > 0) {
                    childEvent[fields_1.recurrenceRule] = followData_1.follow.slice(-1)[0][fields_1.recurrenceRule];
                    editParams.deletedRecords = editParams.deletedRecords.concat(followData_1.follow);
                  }
                  if (isSpanned) {
                    followData_1.occurrence = followData_1.occurrence.filter(function(eventObj) {
                      return eventObj[fields_1.recurrenceID] === parentEvent[fields_1.id];
                    });
                  }
                  editParams.deletedRecords = editParams.deletedRecords.concat(followData_1.occurrence);
                }
                break;
              case "DeleteFollowingEvents":
                _this.processRecurrenceRule(parentEvent, childEvent[fields_1.startTime]);
                editParams.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));
                editParams.deletedRecords = editParams.deletedRecords.concat(followData_1.occurrence).concat(followData_1.follow);
                break;
            }
          };
          for (var a = 0, count = followArgs.changedRecords.length; a < count; a++) {
            _loop_3(a, count);
          }
          var promise = _this.parent.dataModule.dataManager.saveChanges(editParams, fields_1.id, _this.getTable(), _this.getQuery());
          var cloneEvent = extend({}, followArgs.changedRecords[followArgs.changedRecords.length - 1], null, true);
          _this.parent.eventBase.selectWorkCellByTime(action === "EditFollowingEvents" ? [_this.parent.eventBase.processTimezone(cloneEvent)] : [cloneEvent]);
          var crudArgs = {
            requestType: action === "EditFollowingEvents" ? "eventChanged" : "eventRemoved",
            cancel: false,
            data: followArgs.changedRecords,
            promise,
            editParams
          };
          _this.refreshData(crudArgs);
        }
      });
    };
    Crud2.prototype.processEntireSeries = function(eventData, action) {
      var _this = this;
      var seriesData = [];
      var isDeletedRecords = false;
      if (eventData instanceof Array) {
        for (var _i = 0, eventData_5 = eventData; _i < eventData_5.length; _i++) {
          var event_7 = eventData_5[_i];
          seriesData.push(this.getParentEvent(event_7, true));
        }
      } else {
        seriesData = this.getParentEvent(eventData, true);
      }
      var updateSeriesEvents = eventData instanceof Array ? eventData : [eventData];
      var args = {
        requestType: action === "EditSeries" ? "eventChange" : "eventRemove",
        cancel: false,
        addedRecords: [],
        changedRecords: [],
        deletedRecords: []
      };
      args.data = seriesData;
      if (action === "EditSeries") {
        args.changedRecords = updateSeriesEvents;
      } else {
        args.deletedRecords = updateSeriesEvents;
      }
      if (action === "EditSeries" && !this.parent.uiStateValues.isIgnoreOccurrence) {
        var seriesEvents = seriesData instanceof Array ? seriesData : [seriesData];
        for (var a = 0, count = args.changedRecords.length; a < count; a++) {
          var parentEvent = seriesEvents[parseInt(a.toString(), 10)];
          var eventCollections = this.parent.eventBase.getEventCollections(parentEvent);
          var deletedEvents = eventCollections.follow.concat(eventCollections.occurrence);
          args.deletedRecords = args.deletedRecords.concat(deletedEvents);
        }
      }
      this.parent.trigger(actionBegin, args, function(seriesArgs) {
        if (!seriesArgs.cancel) {
          var fields_2 = _this.parent.eventFields;
          var editParams = { addedRecords: [], changedRecords: [], deletedRecords: [] };
          var seriesEvents2 = seriesData instanceof Array ? seriesData : [seriesData];
          var records = action === "EditSeries" ? seriesArgs.changedRecords : seriesArgs.deletedRecords;
          var _loop_4 = function(a3, count3) {
            var childEvent = records[parseInt(a3.toString(), 10)];
            var parentEvent2 = seriesEvents2[parseInt(a3.toString(), 10)];
            var eventCollections2 = _this.parent.eventBase.getEventCollections(parentEvent2);
            var deletedEvents2 = eventCollections2.follow.concat(eventCollections2.occurrence);
            switch (action) {
              case "EditSeries":
                childEvent[fields_2.id] = parentEvent2[fields_2.id];
                childEvent[fields_2.recurrenceID] = null;
                childEvent[fields_2.followingID] = null;
                if (_this.parent.uiStateValues.isIgnoreOccurrence && childEvent[fields_2.recurrenceException]) {
                  var originalParent = _this.parent.eventsData.filter(function(eventObj) {
                    return eventObj[fields_2.id] === childEvent[fields_2.id];
                  });
                  if (originalParent.length > 0) {
                    childEvent[fields_2.recurrenceRule] = originalParent[0][fields_2.recurrenceRule];
                  }
                } else {
                  childEvent[fields_2.recurrenceException] = null;
                  editParams.deletedRecords = editParams.deletedRecords.concat(deletedEvents2);
                }
                editParams.changedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));
                _this.parent.uiStateValues.isIgnoreOccurrence = false;
                break;
              case "DeleteSeries":
                editParams.deletedRecords = editParams.deletedRecords.concat(deletedEvents2.concat(parentEvent2));
                isDeletedRecords = true;
                break;
            }
          };
          for (var a2 = 0, count2 = records.length; a2 < count2; a2++) {
            _loop_4(a2, count2);
          }
          var promise = _this.parent.dataModule.dataManager.saveChanges(editParams, fields_2.id, _this.getTable(), _this.getQuery());
          var cloneEvent = extend({}, records[records.length - 1], null, true);
          _this.parent.eventBase.selectWorkCellByTime(action === "EditSeries" ? [_this.parent.eventBase.processTimezone(cloneEvent)] : [cloneEvent]);
          var crudArgs = {
            requestType: action === "EditSeries" ? "eventChanged" : "eventRemoved",
            cancel: false,
            data: isDeletedRecords ? seriesArgs.deletedRecords : seriesArgs.changedRecords,
            promise,
            editParams
          };
          _this.refreshData(crudArgs);
        }
      });
    };
    Crud2.prototype.processDelete = function(eventData) {
      var _this = this;
      var deleteData = [];
      for (var _i = 0, eventData_6 = eventData; _i < eventData_6.length; _i++) {
        var eventObj = eventData_6[_i];
        if (eventObj[this.parent.eventFields.recurrenceRule]) {
          deleteData.push({ occurrence: eventObj, parent: this.getParentEvent(eventObj) });
        } else {
          deleteData.push(eventObj);
        }
      }
      var args = {
        requestType: "eventRemove",
        cancel: false,
        addedRecords: [],
        changedRecords: [],
        deletedRecords: eventData
      };
      args.data = deleteData;
      this.parent.trigger(actionBegin, args, function(deleteArgs) {
        if (!deleteArgs.cancel) {
          var fields_3 = _this.parent.eventFields;
          var editParams = { addedRecords: [], changedRecords: [], deletedRecords: [] };
          var _loop_5 = function(a2, count2) {
            var isDelete = isNullOrUndefined(deleteArgs.deletedRecords[parseInt(a2.toString(), 10)][_this.parent.eventFields.recurrenceRule]);
            if (!isDelete) {
              var parentEvent_1 = deleteData[parseInt(a2.toString(), 10)].parent;
              var isEdited = editParams.changedRecords.filter(function(obj) {
                return obj[fields_3.id] === parentEvent_1[fields_3.id];
              });
              var editedDate = deleteArgs.deletedRecords[parseInt(a2.toString(), 10)][fields_3.startTime];
              if (isEdited.length > 0) {
                var editedData = isEdited[0];
                editedData[fields_3.recurrenceException] = _this.excludeDateCheck(editedDate, editedData[fields_3.recurrenceException]);
              } else {
                parentEvent_1[fields_3.recurrenceException] = _this.excludeDateCheck(editedDate, parentEvent_1[fields_3.recurrenceException]);
              }
              if (isEdited.length === 0) {
                editParams.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent_1, true));
              }
              isDelete = deleteArgs.deletedRecords[parseInt(a2.toString(), 10)][fields_3.id] !== parentEvent_1[fields_3.id];
            }
            if (isDelete) {
              editParams.deletedRecords.push(deleteArgs.deletedRecords[parseInt(a2.toString(), 10)]);
            }
          };
          for (var a = 0, count = deleteArgs.deletedRecords.length; a < count; a++) {
            _loop_5(a, count);
          }
          var promise = _this.parent.dataModule.dataManager.saveChanges(editParams, fields_3.id, _this.getTable(), _this.getQuery());
          _this.parent.eventBase.selectWorkCellByTime(deleteArgs.deletedRecords);
          var crudArgs = {
            requestType: "eventRemoved",
            cancel: false,
            data: deleteArgs.deletedRecords,
            promise,
            editParams
          };
          _this.refreshData(crudArgs);
        }
      });
    };
    Crud2.prototype.processSave = function(data) {
      var _this = this;
      var eventData = data instanceof Array ? data : [data];
      var editData = [];
      for (var _i = 0, eventData_7 = eventData; _i < eventData_7.length; _i++) {
        var eventObj = eventData_7[_i];
        if (eventObj[this.parent.eventFields.recurrenceRule]) {
          editData.push({ occurrence: eventObj, parent: this.getParentEvent(eventObj) });
        } else {
          editData.push(eventObj);
        }
      }
      var args = { requestType: "eventChange", cancel: false, addedRecords: [], changedRecords: eventData, deletedRecords: [] };
      args.data = editData;
      this.parent.trigger(actionBegin, args, function(editArgs) {
        if (!editArgs.cancel) {
          var fields = _this.parent.eventFields;
          var editParams = { addedRecords: [], changedRecords: [], deletedRecords: [] };
          for (var _i2 = 0, _a = editArgs.changedRecords; _i2 < _a.length; _i2++) {
            var record = _a[_i2];
            if (!isNullOrUndefined(record[fields.recurrenceRule]) && isNullOrUndefined(record[fields.recurrenceException])) {
              var exceptionString = getRecurrenceStringFromDate(record[fields.startTime]);
              var parentEle = _this.getParentEvent(record);
              parentEle[fields.recurrenceException] = isNullOrUndefined(parentEle[fields.recurrenceException]) ? exceptionString : parentEle[fields.recurrenceException].concat("," + exceptionString);
              record[fields.id] = _this.parent.getEventMaxID();
              record[fields.recurrenceException] = exceptionString;
              editParams.addedRecords.push(_this.parent.eventBase.processTimezone(record, true));
              editParams.changedRecords.push(_this.parent.eventBase.processTimezone(parentEle, true));
            } else {
              editParams.changedRecords.push(_this.parent.eventBase.processTimezone(record, true));
            }
          }
          var promise = _this.parent.dataModule.dataManager.saveChanges(editParams, fields.id, _this.getTable(), _this.getQuery());
          var cloneEvent = extend({}, editArgs.changedRecords[editArgs.changedRecords.length - 1], null, true);
          _this.parent.eventBase.selectWorkCellByTime([_this.parent.eventBase.processTimezone(cloneEvent)]);
          var crudArgs = { requestType: "eventChanged", cancel: false, data: editArgs.changedRecords, promise, editParams };
          _this.refreshData(crudArgs);
        }
      });
    };
    Crud2.prototype.getParentEvent = function(event, isParent) {
      if (isParent === void 0) {
        isParent = false;
      }
      var parentEvent = this.parent.eventBase.getParentEvent(event, isParent) || event;
      if (parentEvent[this.parent.eventFields.startTimezone] || parentEvent[this.parent.eventFields.endTimezone]) {
        this.parent.eventBase.timezoneConvert(parentEvent);
      }
      return parentEvent;
    };
    Crud2.prototype.excludeDateCheck = function(eventStartTime, exceptionDateList) {
      var timezone = this.parent.timezone || this.parent.tzModule.getLocalTimezoneName();
      if (timezone) {
        eventStartTime = this.parent.tzModule.remove(/* @__PURE__ */ new Date(+eventStartTime.getTime()), timezone);
      }
      var exDate = getRecurrenceStringFromDate(eventStartTime);
      if (!isNullOrUndefined(exceptionDateList)) {
        if (exceptionDateList.indexOf(exDate) === -1) {
          exceptionDateList = !isNullOrUndefined(exceptionDateList) ? exceptionDateList + "," + exDate : exDate;
        }
      } else {
        exceptionDateList = exDate;
      }
      return exceptionDateList;
    };
    Crud2.prototype.processRecurrenceRule = function(parentEvent, followEvent) {
      var fields = this.parent.eventFields;
      var recurrenceRule = parentEvent[fields.recurrenceRule];
      var endDate;
      if (followEvent instanceof Date) {
        endDate = /* @__PURE__ */ new Date(+followEvent);
      } else {
        endDate = /* @__PURE__ */ new Date(+followEvent[fields.startTime]);
        var newRecurrenceRule = followEvent[fields.recurrenceRule];
        if (newRecurrenceRule) {
          var startDate = parentEvent[fields.startTime];
          var ruleException = this.parent.currentAction === "DeleteFollowingEvents" ? followEvent[fields.recurrenceException] : null;
          var dateCollection = generate(startDate, newRecurrenceRule, ruleException, this.parent.activeViewOptions.firstDayOfWeek);
          var untilDate = new Date(dateCollection.slice(-1)[0]);
          untilDate.setHours(endDate.getHours(), endDate.getMinutes(), endDate.getSeconds());
          endDate.setHours(startDate.getHours(), startDate.getMinutes(), startDate.getSeconds());
          followEvent[fields.recurrenceRule] = this.getUpdatedRecurrenceRule(newRecurrenceRule, /* @__PURE__ */ new Date(+untilDate), false);
        }
      }
      parentEvent[fields.recurrenceRule] = this.getUpdatedRecurrenceRule(recurrenceRule, addDays(new Date(endDate.getTime()), -1), true);
    };
    Crud2.prototype.getUpdatedRecurrenceRule = function(recurrenceRule, untilDate, isParent) {
      var splitRule = recurrenceRule.split(";");
      var updatedRule = "";
      for (var _i = 0, splitRule_1 = splitRule; _i < splitRule_1.length; _i++) {
        var rule = splitRule_1[_i];
        if (rule !== "") {
          var ruleKey = rule.split("=")[0];
          var ruleValue = rule.split("=")[1];
          if (ruleKey === "COUNT" || ruleKey === "UNTIL") {
            ruleValue = getRecurrenceStringFromDate(untilDate);
            rule = rule.replace(rule, "UNTIL=" + ruleValue);
          }
          updatedRule += rule + ";";
        }
      }
      if (isParent && updatedRule.indexOf("UNTIL") === -1) {
        updatedRule += "UNTIL=" + getRecurrenceStringFromDate(untilDate);
      }
      return updatedRule;
    };
    Crud2.prototype.isBlockEvent = function(eventData) {
      var eventCollection = eventData instanceof Array ? eventData : [eventData];
      var value = false;
      for (var _i = 0, eventCollection_1 = eventCollection; _i < eventCollection_1.length; _i++) {
        var event_8 = eventCollection_1[_i];
        value = event_8[this.parent.eventFields.isBlock] || false;
      }
      return value;
    };
    Crud2.prototype.destroy = function() {
      this.crudObj = null;
      this.parent = null;
    };
    return Crud2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/actions/work-cells.js
var WorkCellInteraction = (
  /** @class */
  function() {
    function WorkCellInteraction2(parent) {
      this.parent = parent;
      EventHandler.add(this.parent.element, "mouseover", this.onHover, this);
    }
    WorkCellInteraction2.prototype.cellMouseDown = function(e) {
      if (this.isPreventAction(e)) {
        return;
      }
      this.parent.notify(cellMouseDown, { event: e });
    };
    WorkCellInteraction2.prototype.cellClick = function(e) {
      var _this = this;
      if (this.isPreventAction(e)) {
        return;
      }
      var queryStr = "." + WORK_CELLS_CLASS + ",." + ALLDAY_CELLS_CLASS + ",." + HEADER_CELLS_CLASS;
      var target = closest(e.target, queryStr);
      if (isNullOrUndefined(target)) {
        return;
      }
      if (!isNullOrUndefined(closest(e.target, "." + NEW_EVENT_CLASS))) {
        this.parent.eventWindow.openEditor(this.parent.activeCellsData, "Add");
        return;
      }
      var isWorkCell = target.classList.contains(WORK_CELLS_CLASS) || target.classList.contains(ALLDAY_CELLS_CLASS);
      if (this.parent.uiStateValues.isTapHold && !this.parent.uiStateValues.action && isWorkCell) {
        this.parent.uiStateValues.isTapHold = false;
        this.parent.eventBase.removeSelectedAppointmentClass();
        this.parent.selectedElements = [];
      }
      var navigateEle = closest(e.target, "." + NAVIGATE_CLASS);
      var navigateView = this.parent.getNavigateView();
      var sameView = this.parent.currentView === navigateView;
      if (isNullOrUndefined(navigateEle) || sameView || isNullOrUndefined(this.parent.viewOptions[navigateView.charAt(0).toLowerCase() + navigateView.slice(1)])) {
        if (this.parent.activeViewOptions.readonly && this.parent.currentView !== "MonthAgenda") {
          if (this.parent.quickPopup) {
            this.parent.quickPopup.quickPopupHide();
          }
          return;
        }
        if (this.parent.isAdaptive && (e.target.classList.contains(MORE_INDICATOR_CLASS) || closest(e.target, "." + MORE_INDICATOR_CLASS))) {
          return;
        }
        if (isWorkCell && e.shiftKey && e.which === 1 && this.parent.keyboardInteractionModule) {
          this.parent.keyboardInteractionModule.onMouseSelection(e);
          return;
        }
        this.parent.activeCellsData = this.parent.getCellDetails(target);
        var args = extend(this.parent.activeCellsData, { cancel: false, event: e, name: "cellClick" });
        this.parent.trigger(cellClick, args, function(clickArgs) {
          if (!clickArgs.cancel) {
            if (isWorkCell) {
              _this.parent.selectCell(target);
            }
            if (_this.parent.allowInline) {
              var inlineArgs = {
                element: clickArgs.element,
                groupIndex: clickArgs.groupIndex,
                type: "Cell"
              };
              _this.parent.notify(inlineClick, inlineArgs);
            } else {
              _this.parent.notify(cellClick, clickArgs);
            }
          } else {
            if (_this.parent.quickPopup) {
              _this.parent.quickPopup.quickPopupHide();
            }
          }
        });
      } else {
        var date = this.parent.getDateFromElement(target);
        if (!isNullOrUndefined(date) && this.parent.isMinMaxDate(date)) {
          this.parent.setProperties({ selectedDate: date }, true);
          this.parent.changeView(this.parent.getNavigateView(), e);
        }
      }
    };
    WorkCellInteraction2.prototype.cellDblClick = function(e) {
      var _this = this;
      var queryStr = "." + WORK_CELLS_CLASS + ",." + ALLDAY_CELLS_CLASS + ",." + HEADER_CELLS_CLASS;
      var target = closest(e.target, queryStr);
      if (this.parent.activeViewOptions.readonly || this.isPreventAction(e) || isNullOrUndefined(target)) {
        return;
      }
      var args = extend(this.parent.activeCellsData, { cancel: false, event: e, name: "cellDoubleClick" });
      this.parent.trigger(cellDoubleClick, args, function(clickArgs) {
        var date = new Date(clickArgs.startTime.getTime());
        if (!_this.parent.isMinMaxDate(new Date(date.setHours(0, 0, 0, 0)))) {
          return;
        }
        if (!clickArgs.cancel) {
          _this.parent.eventWindow.openEditor(_this.parent.activeCellsData, "Add");
        }
      });
    };
    WorkCellInteraction2.prototype.onHover = function(e) {
      var targetSelector = "." + WORK_CELLS_CLASS + ",." + TIME_SLOT_CLASS + ",." + ALLDAY_CELLS_CLASS + ",." + HEADER_CELLS_CLASS + ",." + RESOURCE_CELLS_CLASS + ",." + APPOINTMENT_CLASS + ",." + WEEK_NUMBER_CLASS + ",." + MONTH_HEADER_CLASS;
      var hoverTarget = closest(e.target, targetSelector);
      if (hoverTarget) {
        var hoverArgs = { element: hoverTarget, event: e };
        this.parent.trigger(hover, hoverArgs);
      }
    };
    WorkCellInteraction2.prototype.isPreventAction = function(e) {
      if (closest(e.target, "." + NAVIGATE_CLASS)) {
        return false;
      }
      if (closest(e.target, "." + APPOINTMENT_WRAPPER_CLASS) && !closest(e.target, "." + MORE_INDICATOR_CLASS)) {
        return true;
      }
      var target = closest(e.target, "." + APPOINTMENT_CLASS + ",." + RESOURCE_GROUP_CELLS_CLASS);
      if (!isNullOrUndefined(target)) {
        return true;
      }
      target = closest(e.target, "." + HEADER_CELLS_CLASS);
      if (this.parent.activeView && this.parent.activeView.isTimelineView() && !isNullOrUndefined(target)) {
        return true;
      }
      return false;
    };
    WorkCellInteraction2.prototype.destroy = function() {
      EventHandler.remove(this.parent.element, "mouseover", this.onHover);
    };
    return WorkCellInteraction2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/models/field-options.js
var __extends9 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate7 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FieldOptions = (
  /** @class */
  function(_super) {
    __extends9(FieldOptions2, _super);
    function FieldOptions2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate7([
      Property()
    ], FieldOptions2.prototype, "name", void 0);
    __decorate7([
      Property()
    ], FieldOptions2.prototype, "default", void 0);
    __decorate7([
      Property()
    ], FieldOptions2.prototype, "title", void 0);
    __decorate7([
      Property({})
    ], FieldOptions2.prototype, "validation", void 0);
    return FieldOptions2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/models/fields.js
var __extends10 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate8 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Field = (
  /** @class */
  function(_super) {
    __extends10(Field2, _super);
    function Field2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate8([
      Property("Id")
    ], Field2.prototype, "id", void 0);
    __decorate8([
      Property("IsBlock")
    ], Field2.prototype, "isBlock", void 0);
    __decorate8([
      Complex({ name: "Subject" }, FieldOptions)
    ], Field2.prototype, "subject", void 0);
    __decorate8([
      Complex({ name: "StartTime" }, FieldOptions)
    ], Field2.prototype, "startTime", void 0);
    __decorate8([
      Complex({ name: "EndTime" }, FieldOptions)
    ], Field2.prototype, "endTime", void 0);
    __decorate8([
      Complex({ name: "StartTimezone" }, FieldOptions)
    ], Field2.prototype, "startTimezone", void 0);
    __decorate8([
      Complex({ name: "EndTimezone" }, FieldOptions)
    ], Field2.prototype, "endTimezone", void 0);
    __decorate8([
      Complex({ name: "Location" }, FieldOptions)
    ], Field2.prototype, "location", void 0);
    __decorate8([
      Complex({ name: "Description" }, FieldOptions)
    ], Field2.prototype, "description", void 0);
    __decorate8([
      Complex({ name: "IsAllDay" }, FieldOptions)
    ], Field2.prototype, "isAllDay", void 0);
    __decorate8([
      Complex({ name: "RecurrenceID" }, FieldOptions)
    ], Field2.prototype, "recurrenceID", void 0);
    __decorate8([
      Complex({ name: "RecurrenceRule" }, FieldOptions)
    ], Field2.prototype, "recurrenceRule", void 0);
    __decorate8([
      Complex({ name: "RecurrenceException" }, FieldOptions)
    ], Field2.prototype, "recurrenceException", void 0);
    __decorate8([
      Property("IsReadonly")
    ], Field2.prototype, "isReadonly", void 0);
    __decorate8([
      Property("FollowingID")
    ], Field2.prototype, "followingID", void 0);
    return Field2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/models/event-settings.js
var __extends11 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate9 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var EventSettings = (
  /** @class */
  function(_super) {
    __extends11(EventSettings2, _super);
    function EventSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate9([
      Property()
    ], EventSettings2.prototype, "template", void 0);
    __decorate9([
      Property([])
    ], EventSettings2.prototype, "dataSource", void 0);
    __decorate9([
      Property()
    ], EventSettings2.prototype, "query", void 0);
    __decorate9([
      Complex({}, Field)
    ], EventSettings2.prototype, "fields", void 0);
    __decorate9([
      Property(false)
    ], EventSettings2.prototype, "enableTooltip", void 0);
    __decorate9([
      Property("AllDayRow")
    ], EventSettings2.prototype, "spannedEventPlacement", void 0);
    __decorate9([
      Property(1)
    ], EventSettings2.prototype, "minimumEventDuration", void 0);
    __decorate9([
      Property()
    ], EventSettings2.prototype, "tooltipTemplate", void 0);
    __decorate9([
      Property()
    ], EventSettings2.prototype, "resourceColorField", void 0);
    __decorate9([
      Property(false)
    ], EventSettings2.prototype, "editFollowingEvents", void 0);
    __decorate9([
      Property(true)
    ], EventSettings2.prototype, "allowAdding", void 0);
    __decorate9([
      Property(true)
    ], EventSettings2.prototype, "allowEditing", void 0);
    __decorate9([
      Property(true)
    ], EventSettings2.prototype, "allowDeleting", void 0);
    __decorate9([
      Property(false)
    ], EventSettings2.prototype, "enableMaxHeight", void 0);
    __decorate9([
      Property(false)
    ], EventSettings2.prototype, "enableIndicator", void 0);
    __decorate9([
      Property(false)
    ], EventSettings2.prototype, "ignoreWhitespace", void 0);
    __decorate9([
      Property()
    ], EventSettings2.prototype, "sortComparer", void 0);
    __decorate9([
      Property()
    ], EventSettings2.prototype, "includeFiltersInQuery", void 0);
    return EventSettings2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/models/group.js
var __extends12 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate10 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Group = (
  /** @class */
  function(_super) {
    __extends12(Group2, _super);
    function Group2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate10([
      Property(false)
    ], Group2.prototype, "byDate", void 0);
    __decorate10([
      Property(true)
    ], Group2.prototype, "byGroupID", void 0);
    __decorate10([
      Property(false)
    ], Group2.prototype, "allowGroupEdit", void 0);
    __decorate10([
      Property([])
    ], Group2.prototype, "resources", void 0);
    __decorate10([
      Property(true)
    ], Group2.prototype, "enableCompactView", void 0);
    __decorate10([
      Property()
    ], Group2.prototype, "headerTooltipTemplate", void 0);
    __decorate10([
      Property(false)
    ], Group2.prototype, "hideNonWorkingDays", void 0);
    return Group2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/models/resources.js
var __extends13 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate11 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Resources = (
  /** @class */
  function(_super) {
    __extends13(Resources2, _super);
    function Resources2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate11([
      Property()
    ], Resources2.prototype, "field", void 0);
    __decorate11([
      Property()
    ], Resources2.prototype, "title", void 0);
    __decorate11([
      Property()
    ], Resources2.prototype, "name", void 0);
    __decorate11([
      Property(false)
    ], Resources2.prototype, "allowMultiple", void 0);
    __decorate11([
      Property([])
    ], Resources2.prototype, "dataSource", void 0);
    __decorate11([
      Property()
    ], Resources2.prototype, "query", void 0);
    __decorate11([
      Property("Id")
    ], Resources2.prototype, "idField", void 0);
    __decorate11([
      Property("Text")
    ], Resources2.prototype, "textField", void 0);
    __decorate11([
      Property("Expanded")
    ], Resources2.prototype, "expandedField", void 0);
    __decorate11([
      Property("GroupID")
    ], Resources2.prototype, "groupIDField", void 0);
    __decorate11([
      Property("Color")
    ], Resources2.prototype, "colorField", void 0);
    __decorate11([
      Property("StartHour")
    ], Resources2.prototype, "startHourField", void 0);
    __decorate11([
      Property("EndHour")
    ], Resources2.prototype, "endHourField", void 0);
    __decorate11([
      Property("WorkDays")
    ], Resources2.prototype, "workDaysField", void 0);
    __decorate11([
      Property("CssClass")
    ], Resources2.prototype, "cssClassField", void 0);
    return Resources2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/base/resource.js
var ResourceBase = (
  /** @class */
  function() {
    function ResourceBase2(parent) {
      this.resourceCollection = [];
      this.leftPixel = 25;
      this.resourceDateTree = [];
      this.parent = parent;
    }
    ResourceBase2.prototype.renderResourceHeaderIndent = function(tr) {
      var resColTd = createElement("td", { className: RESOURCE_LEFT_TD_CLASS });
      var resColDiv = createElement("div", { className: RESOURCE_TEXT_CLASS });
      if (this.parent.activeViewOptions.headerIndentTemplate) {
        var data = { className: [resColTd.className], type: "emptyCells" };
        this.parent.renderHeaderIndentTemplate(data, resColTd);
      } else {
        resColTd.appendChild(resColDiv);
      }
      var args = { elementType: "emptyCells", element: resColTd };
      this.parent.trigger(renderCell, args);
      tr.appendChild(resColTd);
    };
    ResourceBase2.prototype.hideResourceRows = function(tBody) {
      if (this.resourceCollection.length <= 1 || this.parent.virtualScrollModule) {
        return;
      }
      var trCount = this.lastResourceLevel.length;
      for (var i = 0; i < trCount; i++) {
        var resData = this.lastResourceLevel[parseInt(i.toString(), 10)].resourceData;
        var res = this.lastResourceLevel[parseInt(i.toString(), 10)].resource;
        if (resData.ClassName === RESOURCE_PARENT_CLASS && !resData[res.expandedField] && !isNullOrUndefined(resData[res.expandedField])) {
          var trCollection = [].slice.call(tBody.children);
          var slicedCollection = trCollection.slice(i + 1, i + (parseInt(resData.Count, 10) + 1));
          addClass(slicedCollection, HIDDEN_CLASS);
        }
      }
    };
    ResourceBase2.prototype.createResourceColumn = function() {
      var resColl = this.resourceCollection;
      var resDiv = createElement("div", { className: RESOURCE_COLUMN_WRAP_CLASS });
      var tbl = this.parent.activeView.createTableLayout(RESOURCE_COLUMN_TABLE_CLASS);
      if (!this.parent.uiStateValues.isGroupAdaptive && this.parent.rowAutoHeight && this.parent.activeView.isTimelineView() && this.parent.activeViewOptions.group.resources.length > 0) {
        addClass([tbl], AUTO_HEIGHT);
      }
      var tBody = tbl.querySelector("tbody");
      var resData = this.generateTreeData(true);
      this.countCalculation(resColl.slice(0, -2), resColl.slice(0, -1));
      this.renderedResources = this.lastResourceLevel;
      if (this.parent.virtualScrollModule) {
        var resourceCount = this.parent.virtualScrollModule.getRenderedCount();
        this.setExpandedResources();
        resData = this.expandedResources.slice(0, resourceCount);
        this.renderedResources = resData;
      }
      append(this.getContentRows(resData), tBody);
      this.hideResourceRows(tBody);
      tbl.appendChild(tBody);
      resDiv.appendChild(tbl);
      return resDiv;
    };
    ResourceBase2.prototype.setRenderedResources = function() {
      var resColl = this.resourceCollection;
      var temp = this.generateTreeData(true);
      this.countCalculation(resColl.slice(0, -2), resColl.slice(0, -1));
      this.renderedResources = this.lastResourceLevel;
    };
    ResourceBase2.prototype.setExpandedResources = function() {
      var resources = [];
      for (var i = 0; i < this.lastResourceLevel.length; i++) {
        var resource = this.lastResourceLevel[parseInt(i.toString(), 10)].resourceData;
        var count = resource.Count;
        resources.push(this.lastResourceLevel[parseInt(i.toString(), 10)]);
        var isExpanded = resource[this.lastResourceLevel[parseInt(i.toString(), 10)].resource.expandedField];
        if (!isNullOrUndefined(isExpanded) && !isExpanded && count > 0) {
          i = i + count;
        }
      }
      this.expandedResources = resources;
    };
    ResourceBase2.prototype.getContentRows = function(resData, isVirtualScroll) {
      var resRows = [];
      var left;
      var rIndex;
      var resColl = this.resourceCollection;
      var tr = createElement("tr");
      var td = createElement("td", { attrs: { tabindex: isVirtualScroll ? "-1" : "0" } });
      for (var i = 0; i < resData.length; i++) {
        var ntd = td.cloneNode();
        rIndex = findIndexInData(resColl, "name", resData[parseInt(i.toString(), 10)].resource.name);
        if (rIndex === resColl.length - 1) {
          extend(resData[parseInt(i.toString(), 10)].resourceData, { ClassName: RESOURCE_CHILD_CLASS });
          this.renderedResources[parseInt(i.toString(), 10)].className = [RESOURCE_CHILD_CLASS];
        } else {
          extend(resData[parseInt(i.toString(), 10)].resourceData, { ClassName: RESOURCE_PARENT_CLASS });
          this.renderedResources[parseInt(i.toString(), 10)].className = [RESOURCE_PARENT_CLASS];
        }
        left = rIndex * this.leftPixel + "px";
        if (resData[parseInt(i.toString(), 10)].resourceData.ClassName === RESOURCE_PARENT_CLASS && !isNullOrUndefined(resData[parseInt(i.toString(), 10)].resourceData.Count) && resData[parseInt(i.toString(), 10)].resourceData.Count > 0) {
          var iconClass = void 0;
          if (resData[parseInt(i.toString(), 10)].resourceData[resColl[parseInt(rIndex.toString(), 10)].expandedField] || isNullOrUndefined(resData[parseInt(i.toString(), 10)].resourceData[resColl[parseInt(rIndex.toString(), 10)].expandedField])) {
            iconClass = RESOURCE_COLLAPSE_CLASS;
          } else {
            iconClass = RESOURCE_EXPAND_CLASS;
          }
          var iconDiv = createElement("div");
          addClass([iconDiv], [RESOURCE_TREE_ICON_CLASS, iconClass]);
          this.setMargin(iconDiv, left);
          ntd.appendChild(iconDiv);
          if (this.resourceCollection.length > 1) {
            EventHandler.add(iconDiv, "click", this.onTreeIconClick, this);
          }
        }
        this.parent.activeView.setResourceHeaderContent(ntd, resData[parseInt(i.toString(), 10)], RESOURCE_TEXT_CLASS);
        ntd.setAttribute("data-group-index", resData[parseInt(i.toString(), 10)].groupIndex.toString());
        ntd.setAttribute("aria-label", resData[parseInt(i.toString(), 10)].resourceData[resData[parseInt(i.toString(), 10)].resource.textField] + " resource");
        if (!this.parent.activeViewOptions.resourceHeaderTemplate) {
          this.setMargin(ntd.querySelector("." + RESOURCE_TEXT_CLASS), left);
        }
        var classCollection = [RESOURCE_CELLS_CLASS, resData[parseInt(i.toString(), 10)].resourceData.ClassName];
        addClass([ntd], classCollection);
        var args = { elementType: "resourceHeader", element: ntd, groupIndex: resData[parseInt(i.toString(), 10)].groupIndex };
        this.parent.trigger(renderCell, args);
        var ntr = tr.cloneNode();
        ntr.appendChild(ntd);
        resRows.push(ntr);
      }
      return resRows;
    };
    ResourceBase2.prototype.setMargin = function(element, value) {
      if (!this.parent.enableRtl) {
        element.style.marginLeft = value;
      } else {
        element.style.marginRight = value;
      }
    };
    ResourceBase2.prototype.countCalculation = function(parentCollection, wholeCollection) {
      var collection;
      for (var y = 0; y < parentCollection.length; y++) {
        var data = parentCollection[parentCollection.length - (y + 1)].dataSource;
        for (var x = 0; x < data.length; x++) {
          var totalCount = 0;
          if (this.parent.activeViewOptions.group.byGroupID) {
            var query = new Query().where(wholeCollection[wholeCollection.length - 1].groupIDField, "equal", data[parseInt(x.toString(), 10)][parentCollection[parentCollection.length - (y + 1)].idField]);
            collection = new DataManager(wholeCollection[wholeCollection.length - 1].dataSource).executeLocal(query);
          } else {
            collection = wholeCollection[wholeCollection.length - 1].dataSource;
          }
          for (var z = 0; z < collection.length; z++) {
            totalCount = totalCount + parseInt(collection[parseInt(z.toString(), 10)].Count, 10);
          }
          totalCount = totalCount + parseInt(data[parseInt(x.toString(), 10)].Count, 10);
          extend(data[parseInt(x.toString(), 10)], { Count: totalCount });
        }
        wholeCollection = wholeCollection.slice(0, -1);
      }
    };
    ResourceBase2.prototype.onTreeIconClick = function(e) {
      var _this = this;
      if (this.parent.eventTooltip) {
        this.parent.eventTooltip.close();
      }
      var target = e.target;
      var hide;
      var trElement = closest(target, "." + RESOURCE_PARENT_CLASS).parentElement;
      var index = parseInt(trElement.children[0].getAttribute("data-group-index"), 10);
      var args = {
        cancel: false,
        event: e,
        groupIndex: index,
        requestType: !target.classList.contains(RESOURCE_COLLAPSE_CLASS) ? "resourceExpand" : "resourceCollapse"
      };
      this.parent.trigger(actionBegin, args, function(actionArgs) {
        if (!actionArgs.cancel) {
          if (target.classList.contains(RESOURCE_COLLAPSE_CLASS)) {
            classList(target, [RESOURCE_EXPAND_CLASS], [RESOURCE_COLLAPSE_CLASS]);
            hide = true;
          } else {
            classList(target, [RESOURCE_COLLAPSE_CLASS], [RESOURCE_EXPAND_CLASS]);
            hide = false;
          }
          var eventElements = [].slice.call(_this.parent.element.querySelectorAll("." + APPOINTMENT_CLASS + ",." + MORE_INDICATOR_CLASS));
          for (var _i = 0, eventElements_1 = eventElements; _i < eventElements_1.length; _i++) {
            var element = eventElements_1[_i];
            remove(element);
          }
          if (_this.parent.virtualScrollModule) {
            _this.updateVirtualContent(index, hide, e, target);
          } else {
            _this.updateContent(index, hide);
          }
          var data = { cssProperties: _this.parent.getCssProperties(), module: "scroll" };
          _this.parent.notify(scrollUiUpdate, data);
          args = {
            cancel: false,
            event: e,
            groupIndex: index,
            requestType: target.classList.contains(RESOURCE_COLLAPSE_CLASS) ? "resourceExpanded" : "resourceCollapsed"
          };
          _this.parent.refreshEvents(false);
          _this.parent.trigger(actionComplete, args);
        }
      });
    };
    ResourceBase2.prototype.updateContent = function(index, hide) {
      var rowCollection = [];
      var workCellCollection = [];
      var headerRowCollection = [];
      var pNode;
      var clickedRes = this.lastResourceLevel[parseInt(index.toString(), 10)].resourceData;
      var resRows = [].slice.call(this.parent.element.querySelectorAll("." + RESOURCE_COLUMN_WRAP_CLASS + " tr"));
      var contentRows = [].slice.call(this.parent.element.querySelectorAll("." + CONTENT_WRAP_CLASS + " tbody tr"));
      var eventRows = [].slice.call(this.parent.element.querySelectorAll("." + CONTENT_WRAP_CLASS + " ." + APPOINTMENT_CONTAINER_CLASS));
      for (var j = 0; j < clickedRes.Count; j++) {
        rowCollection.push(resRows[index + j + 1]);
        workCellCollection.push(contentRows[index + j + 1]);
        headerRowCollection.push(eventRows[index + j + 1]);
      }
      var clonedCollection = this.lastResourceLevel;
      for (var i = 0; i < rowCollection.length; i++) {
        var expanded = true;
        pNode = rowCollection[parseInt(i.toString(), 10)].children[0].classList.contains(RESOURCE_PARENT_CLASS);
        clonedCollection[parseInt(index.toString(), 10)].resourceData[clonedCollection[parseInt(index.toString(), 10)].resource.expandedField] = !hide;
        if (hide) {
          if (pNode) {
            var trElem = rowCollection[parseInt(i.toString(), 10)].querySelector("." + RESOURCE_TREE_ICON_CLASS);
            if (trElem) {
              classList(trElem, [RESOURCE_EXPAND_CLASS], [RESOURCE_COLLAPSE_CLASS]);
            }
          }
          if (!rowCollection[parseInt(i.toString(), 10)].classList.contains(HIDDEN_CLASS)) {
            addClass([rowCollection[parseInt(i.toString(), 10)], workCellCollection[parseInt(i.toString(), 10)], headerRowCollection[parseInt(i.toString(), 10)]], HIDDEN_CLASS);
          }
        } else {
          if (pNode) {
            var rowIndex = rowCollection[parseInt(i.toString(), 10)].rowIndex;
            if (!clonedCollection[parseInt(rowIndex.toString(), 10)].resourceData[clonedCollection[parseInt(rowIndex.toString(), 10)].resource.expandedField] && !isNullOrUndefined(clonedCollection[parseInt(rowIndex.toString(), 10)].resourceData[clonedCollection[parseInt(rowIndex.toString(), 10)].resource.expandedField])) {
              rowCollection.splice(i + 1, parseInt(clonedCollection[parseInt(rowIndex.toString(), 10)].resourceData.Count, 10));
              workCellCollection.splice(i + 1, parseInt(clonedCollection[parseInt(rowIndex.toString(), 10)].resourceData.Count, 10));
              headerRowCollection.splice(i + 1, parseInt(clonedCollection[parseInt(rowIndex.toString(), 10)].resourceData.Count, 10));
              expanded = false;
            }
            if (expanded) {
              var trElem = rowCollection[parseInt(i.toString(), 10)].querySelector("." + RESOURCE_TREE_ICON_CLASS);
              if (trElem) {
                classList(trElem, [RESOURCE_COLLAPSE_CLASS], [RESOURCE_EXPAND_CLASS]);
              }
            }
          }
          if (rowCollection[parseInt(i.toString(), 10)].classList.contains(HIDDEN_CLASS)) {
            removeClass([rowCollection[parseInt(i.toString(), 10)], workCellCollection[parseInt(i.toString(), 10)], headerRowCollection[parseInt(i.toString(), 10)]], HIDDEN_CLASS);
          }
        }
      }
    };
    ResourceBase2.prototype.updateVirtualContent = function(index, expand, e, target) {
      this.lastResourceLevel[parseInt(index.toString(), 10)].resourceData[this.lastResourceLevel[parseInt(index.toString(), 10)].resource.expandedField] = !expand;
      this.setExpandedResources();
      var resourceCount = this.parent.virtualScrollModule.getRenderedCount();
      var startIndex = this.expandedResources.indexOf(this.renderedResources[0]);
      this.renderedResources = this.expandedResources.slice(startIndex, startIndex + resourceCount);
      if (this.renderedResources.length < resourceCount) {
        var sIndex = this.expandedResources.length - resourceCount;
        sIndex = sIndex > 0 ? sIndex : 0;
        this.renderedResources = this.expandedResources.slice(sIndex, this.expandedResources.length);
      }
      var virtualTrack = this.parent.element.querySelector("." + VIRTUAL_TRACK_CLASS);
      this.parent.virtualScrollModule.updateVirtualTrackHeight(virtualTrack);
      var resTable = this.parent.element.querySelector("." + RESOURCE_COLUMN_WRAP_CLASS + " table");
      var contentTable = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS + " table");
      var eventTable = this.parent.element.querySelector("." + EVENT_TABLE_CLASS);
      this.parent.virtualScrollModule.updateContent(resTable, contentTable, eventTable, this.renderedResources);
      var timeIndicator = this.parent.element.querySelector("." + CURRENT_TIMELINE_CLASS);
      if (!isNullOrUndefined(timeIndicator)) {
        timeIndicator.style.height = this.parent.element.querySelector("." + CONTENT_TABLE_CLASS).offsetHeight + "px";
      }
    };
    ResourceBase2.prototype.renderResourceHeader = function() {
      var resourceWrapper = createElement("div", { className: RESOURCE_TOOLBAR_CONTAINER });
      resourceWrapper.innerHTML = '<div class="' + RESOURCE_HEADER_TOOLBAR + '"><div class="' + RESOURCE_MENU + '"><div class="e-icons ' + RESOURCE_MENU_ICON + '"></div></div><div class="' + RESOURCE_LEVEL_TITLE + '"></div></div>';
      if (this.parent.currentView === "MonthAgenda") {
        var target = this.parent.activeView.getPanel().querySelector("." + CONTENT_WRAP_CLASS);
        target.insertBefore(resourceWrapper, target.querySelector("." + WRAPPER_CONTAINER_CLASS));
      } else {
        this.parent.element.insertBefore(resourceWrapper, this.parent.element.querySelector("." + TABLE_CONTAINER_CLASS));
      }
      this.renderResourceHeaderText();
      EventHandler.add(resourceWrapper.querySelector("." + RESOURCE_MENU_ICON), "click", this.menuClick, this);
    };
    ResourceBase2.prototype.renderResourceTree = function() {
      this.popupOverlay = createElement("div", { className: RESOURCE_TREE_POPUP_OVERLAY });
      var treeWrapper = createElement("div", { className: RESOURCE_TREE_POPUP + " e-popup-close" });
      if (this.parent.currentView === "MonthAgenda") {
        var target = this.parent.activeView.getPanel().querySelector("." + WRAPPER_CONTAINER_CLASS);
        target.insertBefore(treeWrapper, target.children[0]);
        target.appendChild(this.popupOverlay);
      } else {
        this.parent.element.querySelector("." + TABLE_CONTAINER_CLASS).appendChild(treeWrapper);
        this.parent.element.querySelector("." + TABLE_CONTAINER_CLASS).appendChild(this.popupOverlay);
      }
      var resourceTree = createElement("div", { className: RESOURCE_TREE });
      treeWrapper.appendChild(resourceTree);
      this.treeViewObj = new TreeView({
        cssClass: this.parent.cssClass,
        enableRtl: this.parent.enableRtl,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        fields: {
          dataSource: [].slice.call(this.generateTreeData()),
          id: "resourceId",
          text: "resourceName",
          child: "resourceChild"
        },
        nodeTemplate: this.parent.resourceHeaderTemplate,
        nodeClicked: this.resourceClick.bind(this),
        created: this.resourceTreeCreated.bind(this)
      });
      this.treeViewObj.root = this.parent.root ? this.parent.root : this.parent;
      this.treeViewObj.appendTo(resourceTree);
      this.treeViewObj.expandAll();
      this.treePopup = new Popup(treeWrapper, {
        targetType: "relative",
        actionOnScroll: "none",
        content: this.treeViewObj.element,
        relateTo: this.parent.element.querySelector("." + TABLE_CONTAINER_CLASS),
        enableRtl: this.parent.enableRtl,
        hideAnimation: { name: "SlideLeftOut", duration: 500 },
        showAnimation: { name: "SlideLeftIn", duration: 500 },
        viewPortElement: this.parent.element.querySelector("." + (this.parent.currentView === "MonthAgenda" ? WRAPPER_CONTAINER_CLASS : TABLE_CONTAINER_CLASS))
      });
      this.parent.on(documentClick, this.documentClick, this);
    };
    ResourceBase2.prototype.resourceTreeCreated = function() {
      if (this.parent.activeViewOptions.resourceHeaderTemplate && this.parent.portals && this.treeViewObj.portals) {
        this.parent.portals = this.parent.portals.concat(this.treeViewObj.portals);
        this.parent.renderTemplates();
      }
    };
    ResourceBase2.prototype.generateTreeData = function(isTimeLine) {
      var _this = this;
      var treeCollection = [];
      var resTreeColl = [];
      var groupIndex = 0;
      var _loop_1 = function(i2, len2) {
        var treeHandler = function(treeLevel, index, levelId) {
          var resource = _this.resourceCollection[parseInt(index.toString(), 10)];
          var treeArgs;
          var resObj;
          if (!isTimeLine) {
            treeArgs = {
              resourceId: levelId,
              resourceName: treeLevel.resourceData[resource.textField],
              resource: treeLevel.resource,
              resourceData: treeLevel.resourceData
            };
          } else {
            resObj = {
              type: "resourceHeader",
              resource: treeLevel.resource,
              resourceData: treeLevel.resourceData,
              groupIndex,
              groupOrder: treeLevel.groupOrder
            };
            resTreeColl.push(resObj);
            groupIndex++;
          }
          if (treeLevel.child.length > 0 && !isTimeLine) {
            treeArgs.resourceChild = [];
          }
          var count = 1;
          for (var _i = 0, _a = treeLevel.child; _i < _a.length; _i++) {
            var tree = _a[_i];
            if (!isTimeLine) {
              treeArgs.resourceChild.push(treeHandler(tree, index + 1, levelId + "-" + count));
            } else {
              treeHandler(tree, index + 1, levelId + "-" + count);
            }
            count += 1;
          }
          if (isTimeLine) {
            extend(resObj.resourceData, { Count: count - 1 });
          }
          return treeArgs;
        };
        if (!isTimeLine) {
          treeCollection.push(treeHandler(this_1.resourceTreeLevel[parseInt(i2.toString(), 10)], 0, (i2 + 1).toString()));
        } else {
          treeHandler(this_1.resourceTreeLevel[parseInt(i2.toString(), 10)], 0, (i2 + 1).toString());
        }
      };
      var this_1 = this;
      for (var i = 0, len = this.resourceTreeLevel.length; i < len; i++) {
        _loop_1(i, len);
      }
      if (isTimeLine) {
        this.lastResourceLevel = resTreeColl;
        return resTreeColl;
      } else {
        return treeCollection;
      }
    };
    ResourceBase2.prototype.renderResourceHeaderText = function() {
      var resource = this.lastResourceLevel[this.parent.uiStateValues.groupIndex];
      var headerCollection = [];
      var _loop_2 = function(i2, len2) {
        var resourceLevel = this_2.resourceCollection[parseInt(i2.toString(), 10)];
        var resourceText = resourceLevel.dataSource.filter(function(resData) {
          return resData[resourceLevel.idField] === resource.groupOrder[parseInt(i2.toString(), 10)];
        });
        var resourceName = createElement("div", { className: RESOURCE_NAME });
        this_2.parent.sanitize(resourceText[0][resourceLevel.textField], resourceName);
        headerCollection.push(resourceName);
        var levelIcon = createElement("div", { className: "e-icons e-icon-next" });
        headerCollection.push(levelIcon);
      };
      var this_2 = this;
      for (var i = 0, len = resource.groupOrder.length; i < len; i++) {
        _loop_2(i, len);
      }
      headerCollection.pop();
      var target = this.parent.currentView === "MonthAgenda" ? this.parent.activeView.getPanel() : this.parent.element;
      var headerWrapper = target.querySelector("." + RESOURCE_LEVEL_TITLE);
      removeChildren(headerWrapper);
      for (var _i = 0, headerCollection_1 = headerCollection; _i < headerCollection_1.length; _i++) {
        var header = headerCollection_1[_i];
        headerWrapper.appendChild(header);
      }
      if (this.lastResourceLevel.length === 1) {
        addClass([this.parent.element.querySelector("." + RESOURCE_MENU)], DISABLE_CLASS);
      }
    };
    ResourceBase2.prototype.menuClick = function(event) {
      if (this.parent.element.querySelector("." + RESOURCE_TREE_POPUP).classList.contains(POPUP_OPEN)) {
        this.treePopup.hide();
        removeClass([this.popupOverlay], ENABLE_CLASS);
      } else {
        var treeNodes = [].slice.call(this.treeViewObj.element.querySelectorAll(".e-list-item:not(.e-has-child)"));
        removeClass(treeNodes, "e-active");
        addClass([treeNodes[this.parent.uiStateValues.groupIndex]], "e-active");
        this.treePopup.show();
        addClass([this.popupOverlay], ENABLE_CLASS);
      }
    };
    ResourceBase2.prototype.selectResourceByIndex = function(groupIndex) {
      if (this.lastResourceLevel && groupIndex > -1 && groupIndex < this.lastResourceLevel.length) {
        this.triggerEvents(groupIndex);
      }
    };
    ResourceBase2.prototype.resourceClick = function(event) {
      if (!event.node.classList.contains("e-has-child")) {
        this.treePopup.hide();
        removeClass([this.popupOverlay], ENABLE_CLASS);
        var treeNodes = [].slice.call(this.treeViewObj.element.querySelectorAll(".e-list-item:not(.e-has-child)"));
        var groupIndex = treeNodes.indexOf(event.node);
        this.triggerEvents(groupIndex, event);
        event.event.preventDefault();
      }
    };
    ResourceBase2.prototype.triggerEvents = function(groupIndex, event) {
      var _this = this;
      var args = { cancel: false, event: event ? event.event : null, groupIndex, requestType: "resourceChange" };
      this.parent.trigger(actionBegin, args, function(actionArgs) {
        if (!actionArgs.cancel) {
          _this.parent.uiStateValues.groupIndex = actionArgs.groupIndex;
          _this.parent.renderModule.render(_this.parent.currentView);
          args = {
            cancel: false,
            event: event ? event.event : null,
            groupIndex: _this.parent.uiStateValues.groupIndex,
            requestType: "resourceChanged"
          };
          _this.parent.adaptiveGroupIndex = _this.parent.uiStateValues.groupIndex;
          _this.parent.trigger(actionComplete, args);
        }
      });
    };
    ResourceBase2.prototype.documentClick = function(args) {
      if (closest(args.event.target, "." + RESOURCE_TREE_POPUP)) {
        return;
      }
      var treeWrapper = this.parent.element.querySelector("." + RESOURCE_TREE_POPUP);
      if (treeWrapper && treeWrapper.classList.contains(POPUP_OPEN)) {
        this.treePopup.hide();
        removeClass([this.popupOverlay], ENABLE_CLASS);
      }
    };
    ResourceBase2.prototype.bindResourcesData = function(isSetModel) {
      var _this = this;
      this.parent.showSpinner();
      var promises = [];
      for (var _i = 0, _a = this.parent.resources; _i < _a.length; _i++) {
        var resource = _a[_i];
        var dataModule = new Data(this.parent, resource.dataSource, resource.query);
        promises.push(dataModule.getData(dataModule.generateQuery()));
      }
      Promise.all(promises).then(function(e) {
        return _this.dataManagerSuccess(e, isSetModel);
      }).catch(function(e) {
        return _this.parent.crudModule.dataManagerFailure(e);
      });
    };
    ResourceBase2.prototype.dataManagerSuccess = function(e, isSetModel) {
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
      this.parent.resourceCollection = [];
      for (var i = 0, length_1 = e.length; i < length_1; i++) {
        var resource = this.parent.resources[parseInt(i.toString(), 10)];
        var resourceObj = this.getResourceModel(resource, e[parseInt(i.toString(), 10)].result);
        this.parent.resourceCollection.push(resourceObj);
      }
      this.refreshLayout(isSetModel);
    };
    ResourceBase2.prototype.getResourceModel = function(resource, resourceData) {
      var resourceObj = {
        field: resource.field,
        title: resource.title,
        name: resource.name,
        allowMultiple: resource.allowMultiple,
        dataSource: resourceData || resource.dataSource,
        idField: resource.idField,
        textField: resource.textField,
        groupIDField: resource.groupIDField,
        colorField: resource.colorField,
        startHourField: resource.startHourField,
        endHourField: resource.endHourField,
        workDaysField: resource.workDaysField,
        expandedField: resource.expandedField,
        cssClassField: resource.cssClassField
      };
      return resourceObj;
    };
    ResourceBase2.prototype.refreshLayout = function(isSetModel) {
      if (isNullOrUndefined(this.parent.uiStateValues.groupIndex) || !this.parent.enablePersistence) {
        this.parent.uiStateValues.groupIndex = 0;
      }
      this.parent.renderElements(isSetModel);
    };
    ResourceBase2.prototype.setResourceCollection = function() {
      var requiredResources = [];
      this.resourceCollection = [];
      this.colorIndex = null;
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        for (var _i = 0, _a = this.parent.activeViewOptions.group.resources; _i < _a.length; _i++) {
          var resource = _a[_i];
          var index_1 = findIndexInData(this.parent.resourceCollection, "name", resource);
          if (index_1 >= 0) {
            requiredResources.push(this.parent.resourceCollection[parseInt(index_1.toString(), 10)]);
          }
        }
      } else if (this.parent.resourceCollection.length > 0) {
        requiredResources = this.parent.resourceCollection;
      }
      var index = 0;
      for (var _b = 0, requiredResources_1 = requiredResources; _b < requiredResources_1.length; _b++) {
        var resource = requiredResources_1[_b];
        var resources = this.getResourceModel(resource);
        if (resource.name === this.parent.eventSettings.resourceColorField) {
          this.colorIndex = index;
        }
        index++;
        this.resourceCollection.push(resources);
      }
      if (isNullOrUndefined(this.colorIndex)) {
        this.colorIndex = this.resourceCollection.length - 1;
      }
    };
    ResourceBase2.prototype.generateResourceLevels = function(innerDates, isTimeLine) {
      var _this = this;
      var resources = this.resourceCollection;
      var resTreeGroup = [];
      var lastColumnDates = [];
      var group = function(resources2, index, prevResource, prevResourceData, prevOrder) {
        var resTree = [];
        var resource = resources2[0];
        if (resource) {
          var data = void 0;
          if (prevResourceData && _this.parent.activeViewOptions.group.byGroupID) {
            var id_1 = prevResourceData[prevResource.idField];
            data = resource.dataSource.filter(function(e) {
              return e[resource.groupIDField] === id_1;
            });
          } else {
            data = resource.dataSource;
          }
          for (var i = 0; i < data.length; i++) {
            var groupOrder = [];
            if (prevOrder && prevOrder.length > 0) {
              groupOrder = groupOrder.concat(prevOrder);
            }
            groupOrder.push(data[parseInt(i.toString(), 10)][resource.idField]);
            var items = group(resources2.slice(1), index + 1, resource, data[parseInt(i.toString(), 10)], groupOrder);
            if (index === 0 && items.length === 0 && _this.resourceCollection.length > 1) {
              continue;
            }
            var dateCol = [];
            var renderDates = _this.parent.activeView.renderDates;
            var resWorkDays = void 0;
            if (!_this.parent.activeViewOptions.group.byDate && index + 1 === _this.resourceCollection.length) {
              var workDays = data[parseInt(i.toString(), 10)][resource.workDaysField];
              var resStartHour = data[parseInt(i.toString(), 10)][resource.startHourField];
              var resEndHour = data[parseInt(i.toString(), 10)][resource.endHourField];
              if (workDays && workDays.length > 0) {
                renderDates = _this.parent.activeView.getRenderDates(workDays);
                resWorkDays = workDays;
                dateCol = _this.parent.activeView.getDateSlots(renderDates, workDays);
              } else {
                resWorkDays = _this.parent.activeViewOptions.workDays;
                dateCol = innerDates;
              }
              var dateSlots = _this.generateCustomHours(dateCol, resStartHour, resEndHour, groupOrder);
              lastColumnDates = lastColumnDates.concat(dateSlots);
            }
            var resCssClass = data[parseInt(i.toString(), 10)][resource.cssClassField];
            var slotData = {
              type: "resourceHeader",
              className: ["e-resource-cells"],
              resourceLevelIndex: index,
              groupOrder,
              resource,
              resourceData: data[parseInt(i.toString(), 10)],
              colSpan: _this.parent.activeViewOptions.group.byDate ? 1 : dateCol.length,
              renderDates,
              workDays: resWorkDays,
              cssClass: resCssClass,
              child: items
            };
            resTree.push(slotData);
          }
          if (!resTreeGroup[parseInt(index.toString(), 10)]) {
            resTreeGroup[parseInt(index.toString(), 10)] = [];
          }
          if (resTree.length > 0) {
            resTreeGroup[parseInt(index.toString(), 10)].push(resTree);
          }
          return resTree;
        }
        return [];
      };
      this.resourceTreeLevel = group(resources, 0);
      return isTimeLine ? [] : this.generateHeaderLevels(resTreeGroup, lastColumnDates, innerDates);
    };
    ResourceBase2.prototype.generateCustomHours = function(renderDates, startHour, endHour, groupOrder) {
      var dateSlots = extend([], renderDates, null, true);
      for (var _i = 0, dateSlots_1 = dateSlots; _i < dateSlots_1.length; _i++) {
        var dateSlot = dateSlots_1[_i];
        if (startHour) {
          dateSlot.startHour = this.parent.getStartEndTime(startHour);
        }
        if (endHour) {
          dateSlot.endHour = this.parent.getStartEndTime(endHour);
        }
        if (groupOrder) {
          dateSlot.groupOrder = groupOrder;
        }
      }
      return dateSlots;
    };
    ResourceBase2.prototype.generateHeaderLevels = function(resTreeGroup, lastColumnDates, headerDates) {
      var headerLevels = [];
      for (var i = resTreeGroup.length - 1; i >= 0; i--) {
        var temp = 0;
        for (var _i = 0, _a = resTreeGroup[parseInt(i.toString(), 10)]; _i < _a.length; _i++) {
          var currentLevelChilds = _a[_i];
          for (var _b = 0, currentLevelChilds_1 = currentLevelChilds; _b < currentLevelChilds_1.length; _b++) {
            var currentLevelChild = currentLevelChilds_1[_b];
            if (resTreeGroup[i + 1] && resTreeGroup[i + 1].length > 0) {
              var nextLevelChilds = resTreeGroup[parseInt((i + 1).toString(), 10)][parseInt(temp.toString(), 10)];
              if (!nextLevelChilds) {
                continue;
              }
              var colSpan = 0;
              for (var _c = 0, nextLevelChilds_1 = nextLevelChilds; _c < nextLevelChilds_1.length; _c++) {
                var nextLevelChild = nextLevelChilds_1[_c];
                if (!this.parent.activeViewOptions.group.byGroupID || this.parent.activeViewOptions.group.byGroupID && nextLevelChild.resourceData[nextLevelChild.resource.groupIDField] === currentLevelChild.resourceData[currentLevelChild.resource.idField]) {
                  colSpan += nextLevelChild.colSpan;
                }
              }
              currentLevelChild.colSpan = colSpan;
            }
            currentLevelChild.groupIndex = temp;
            temp++;
            headerLevels[currentLevelChild.resourceLevelIndex] = headerLevels[currentLevelChild.resourceLevelIndex] || [];
            headerLevels[currentLevelChild.resourceLevelIndex].push(currentLevelChild);
          }
        }
      }
      this.lastResourceLevel = headerLevels.slice(-1)[0] || [];
      if (!this.parent.activeViewOptions.group.byDate) {
        var index = 0;
        for (var _d = 0, _e = this.lastResourceLevel; _d < _e.length; _d++) {
          var lastLevelResource = _e[_d];
          for (var i = 0; i < lastLevelResource.colSpan; i++) {
            lastColumnDates[parseInt(index.toString(), 10)].groupIndex = lastLevelResource.groupIndex;
            index++;
          }
        }
        headerLevels.push(lastColumnDates);
        return headerLevels;
      }
      var dateHeaderLevels = [];
      var levels = extend([], headerLevels, null, true);
      var datesColumn = [];
      if (this.parent.activeViewOptions.group.hideNonWorkingDays) {
        var renderDates_1 = [];
        var dateIndex = 0;
        var _loop_3 = function(headerDate2) {
          this_3.resourceDateTree[parseInt(dateIndex.toString(), 10)] = [];
          var currentDateLevels = [];
          var _loop_4 = function(j2) {
            var workDays = this_3.lastResourceLevel[parseInt(j2.toString(), 10)].resourceData[this_3.lastResourceLevel[parseInt(j2.toString(), 10)].resource.workDaysField];
            if (!workDays) {
              workDays = this_3.parent.activeViewOptions.workDays;
            }
            if (workDays.indexOf(headerDate2.date.getDay()) !== -1) {
              var resTd_1 = extend({}, this_3.lastResourceLevel[parseInt(j2.toString(), 10)], null, true);
              resTd_1.date = headerDate2.date;
              this_3.lastResourceLevel[parseInt(j2.toString(), 10)].workDays = workDays;
              resTd_1.startHour = this_3.parent.getStartEndTime(resTd_1.resourceData[resTd_1.resource.startHourField]) || headerDate2.startHour;
              resTd_1.endHour = this_3.parent.getStartEndTime(resTd_1.resourceData[resTd_1.resource.endHourField]) || headerDate2.endHour;
              this_3.resourceDateTree[parseInt(dateIndex.toString(), 10)].push(resTd_1);
              var _loop_5 = function(k3) {
                if (!currentDateLevels[parseInt(k3.toString(), 10)]) {
                  currentDateLevels[parseInt(k3.toString(), 10)] = [];
                }
                if (k3 === resTd_1.groupOrder.length - 1) {
                  if (!renderDates_1[parseInt(j2.toString(), 10)]) {
                    renderDates_1[parseInt(j2.toString(), 10)] = [];
                  }
                  var filterDates = resTd_1.renderDates.filter(function(x) {
                    return x.getDay() === headerDate2.date.getDay();
                  });
                  renderDates_1[parseInt(j2.toString(), 10)] = renderDates_1[parseInt(j2.toString(), 10)].concat(filterDates);
                  currentDateLevels[parseInt(k3.toString(), 10)].push(resTd_1);
                  return "continue";
                }
                var currentLevel = levels[parseInt(k3.toString(), 10)];
                var filteredResource = currentLevel.filter(function(data) {
                  return data.resourceData[data.resource.idField] === resTd_1.groupOrder[parseInt(k3.toString(), 10)];
                });
                if (filteredResource && filteredResource.length > 0) {
                  var existedResource = currentDateLevels[parseInt(k3.toString(), 10)].filter(function(data) {
                    return data.resourceData[data.resource.idField] === resTd_1.groupOrder[parseInt(k3.toString(), 10)];
                  });
                  if (existedResource && existedResource.length > 0) {
                    existedResource[0].colSpan += 1;
                  } else {
                    var filteredTd = extend({}, filteredResource[0], null, true);
                    filteredTd.colSpan = 1;
                    currentDateLevels[parseInt(k3.toString(), 10)].push(filteredTd);
                  }
                }
              };
              for (var k2 = 0; k2 < resTd_1.groupOrder.length; k2++) {
                _loop_5(k2);
              }
            }
          };
          for (var j = 0; j < this_3.lastResourceLevel.length; j++) {
            _loop_4(j);
          }
          if (currentDateLevels.length > 0) {
            for (var l = 0; l < levels.length; l++) {
              if (!dateHeaderLevels[parseInt(l.toString(), 10)]) {
                dateHeaderLevels[parseInt(l.toString(), 10)] = [];
              }
              dateHeaderLevels[parseInt(l.toString(), 10)] = dateHeaderLevels[parseInt(l.toString(), 10)].concat(currentDateLevels[parseInt(l.toString(), 10)]);
            }
            headerDate2.colSpan = currentDateLevels[currentDateLevels.length - 1].length;
            datesColumn.push(headerDate2);
          }
          dateIndex++;
        };
        var this_3 = this;
        for (var _f = 0, headerDates_1 = headerDates; _f < headerDates_1.length; _f++) {
          var headerDate = headerDates_1[_f];
          _loop_3(headerDate);
        }
        this.resourceDateTree = this.resourceDateTree.filter(function(data) {
          return data.length > 0;
        });
        this.lastResourceLevel.forEach(function(x, index2) {
          if (renderDates_1[parseInt(index2.toString(), 10)]) {
            x.renderDates = renderDates_1[parseInt(index2.toString(), 10)].sort(function(a, b) {
              return a.getTime() - b.getTime();
            });
          }
        });
        dateHeaderLevels.unshift(datesColumn);
        return dateHeaderLevels;
      }
      var dateColSpan = 0;
      for (var _g = 0, _h = levels[0]; _g < _h.length; _g++) {
        var firstRowTd = _h[_g];
        dateColSpan += firstRowTd.colSpan;
      }
      for (var _j = 0, headerDates_2 = headerDates; _j < headerDates_2.length; _j++) {
        var headerDate = headerDates_2[_j];
        headerDate.colSpan = dateColSpan;
        datesColumn.push(headerDate);
        var resGroup = extend([], levels, null, true);
        for (var k = 0, length_2 = resGroup.length; k < length_2; k++) {
          if (k === resGroup.length - 1) {
            for (var _k = 0, _l = resGroup[parseInt(k.toString(), 10)]; _k < _l.length; _k++) {
              var resTd = _l[_k];
              resTd.date = headerDate.date;
              resTd.workDays = headerDate.workDays;
              resTd.startHour = this.parent.getStartEndTime(resTd.resourceData[resTd.resource.startHourField]) || headerDate.startHour;
              resTd.endHour = this.parent.getStartEndTime(resTd.resourceData[resTd.resource.endHourField]) || headerDate.endHour;
            }
          }
          if (!dateHeaderLevels[parseInt(k.toString(), 10)]) {
            dateHeaderLevels[parseInt(k.toString(), 10)] = [];
          }
          dateHeaderLevels[parseInt(k.toString(), 10)] = dateHeaderLevels[parseInt(k.toString(), 10)].concat(resGroup[parseInt(k.toString(), 10)]);
        }
      }
      dateHeaderLevels.unshift(datesColumn);
      return dateHeaderLevels;
    };
    ResourceBase2.prototype.setResourceValues = function(eventObj, groupIndex) {
      var _this = this;
      var setValues = function(index2, field, value) {
        if (_this.resourceCollection[parseInt(index2.toString(), 10)].allowMultiple && _this.parent.activeViewOptions.group.allowGroupEdit) {
          eventObj["" + field] = [value];
        } else {
          eventObj["" + field] = value;
        }
      };
      if (groupIndex === void 0) {
        groupIndex = this.parent.uiStateValues.isGroupAdaptive ? this.parent.uiStateValues.groupIndex : this.parent.activeCellsData.groupIndex;
      }
      if (this.parent.activeViewOptions.group.resources.length > 0 && !isNullOrUndefined(groupIndex)) {
        var groupOrder = this.lastResourceLevel[parseInt(groupIndex.toString(), 10)].groupOrder;
        for (var index = 0; index < this.resourceCollection.length; index++) {
          setValues(index, this.resourceCollection[parseInt(index.toString(), 10)].field, groupOrder[parseInt(index.toString(), 10)]);
        }
      } else if (this.parent.resourceCollection.length > 0) {
        for (var index = 0; index < this.resourceCollection.length; index++) {
          var data = this.resourceCollection[parseInt(index.toString(), 10)].dataSource[0];
          if (data) {
            setValues(index, this.resourceCollection[parseInt(index.toString(), 10)].field, data[this.resourceCollection[parseInt(index.toString(), 10)].idField]);
          }
        }
      }
    };
    ResourceBase2.prototype.getResourceColor = function(eventObj, groupOrder) {
      var colorFieldIndex = !isNullOrUndefined(groupOrder) && this.colorIndex > groupOrder.length - 1 ? groupOrder.length - 1 : this.colorIndex;
      var resource = this.resourceCollection[parseInt(colorFieldIndex.toString(), 10)];
      if (isNullOrUndefined(groupOrder) && this.parent.activeViewOptions.group.allowGroupEdit && resource.allowMultiple) {
        return void 0;
      }
      var id = isNullOrUndefined(groupOrder) ? eventObj[resource.field] : groupOrder[parseInt(colorFieldIndex.toString(), 10)];
      var data = this.filterData(resource.dataSource, resource.idField, id);
      if (data.length > 0) {
        return data[0][resource.colorField];
      }
      return void 0;
    };
    ResourceBase2.prototype.getCssClass = function(eventObj) {
      var resource = this.resourceCollection.slice(-1)[0];
      if (this.parent.activeViewOptions.group.allowGroupEdit && resource.allowMultiple) {
        return void 0;
      }
      var data = this.filterData(resource.dataSource, resource.idField, eventObj[resource.field]);
      if (data.length > 0) {
        return data[0][resource.cssClassField];
      }
      return void 0;
    };
    ResourceBase2.prototype.getResourceRenderDates = function() {
      var resourceDates = [].concat.apply([], this.lastResourceLevel.map(function(e) {
        return e.renderDates;
      }));
      var time = resourceDates.map(function(dateObj) {
        return dateObj.getTime();
      });
      var removeDuplicateDates = function(dateColl) {
        return dateColl.filter(function(date, index) {
          return time.indexOf(date.getTime()) === index;
        });
      };
      var renderDates = removeDuplicateDates(resourceDates);
      renderDates.sort(function(a, b) {
        return a.getTime() - b.getTime();
      });
      return renderDates;
    };
    ResourceBase2.prototype.filterData = function(dataSource, field, value) {
      return dataSource.filter(function(data) {
        return data["" + field] === value;
      });
    };
    ResourceBase2.prototype.getResourceData = function(eventObj, index, groupEditIndex) {
      if (this.parent.activeViewOptions.group.allowGroupEdit) {
        var resourceObj = {};
        for (var _i = 0, groupEditIndex_1 = groupEditIndex; _i < groupEditIndex_1.length; _i++) {
          var groupIndex = groupEditIndex_1[_i];
          var resourceLevel = this.lastResourceLevel[parseInt(groupIndex.toString(), 10)].groupOrder;
          for (var level = 0, length_3 = resourceLevel.length; level < length_3; level++) {
            var fieldName = this.resourceCollection[parseInt(level.toString(), 10)].field;
            if (isNullOrUndefined(resourceObj["" + fieldName])) {
              resourceObj["" + fieldName] = [];
            }
            resourceObj["" + fieldName].push(resourceLevel[parseInt(level.toString(), 10)]);
          }
        }
        eventObj = extend(eventObj, resourceObj);
      } else {
        for (var level = 0, length_4 = this.resourceCollection.length; level < length_4; level++) {
          if (this.lastResourceLevel[parseInt(index.toString(), 10)]) {
            eventObj[this.resourceCollection[parseInt(level.toString(), 10)].field] = this.lastResourceLevel[parseInt(index.toString(), 10)].groupOrder[parseInt(level.toString(), 10)];
          }
        }
      }
    };
    ResourceBase2.prototype.addResource = function(resources, name, index) {
      var resourceCollection = resources instanceof Array ? resources : [resources];
      var _loop_6 = function(resource2) {
        if (resource2.name === name) {
          resourceCollection.forEach(function(addObj, i) {
            return new DataManager({ json: resource2.dataSource }).insert(addObj, null, null, index + i);
          });
          return "break";
        }
      };
      for (var _i = 0, _a = this.parent.resourceCollection; _i < _a.length; _i++) {
        var resource = _a[_i];
        var state_1 = _loop_6(resource);
        if (state_1 === "break")
          break;
      }
      this.refreshLayout(true);
    };
    ResourceBase2.prototype.removeResource = function(resourceId, name) {
      var resourceCollection = resourceId instanceof Array ? resourceId : [resourceId];
      var _loop_7 = function(resource2) {
        if (resource2.name === name) {
          resourceCollection.forEach(function(removeObj) {
            return new DataManager({ json: resource2.dataSource }).remove(resource2.idField, removeObj);
          });
          return "break";
        }
      };
      for (var _i = 0, _a = this.parent.resourceCollection; _i < _a.length; _i++) {
        var resource = _a[_i];
        var state_2 = _loop_7(resource);
        if (state_2 === "break")
          break;
      }
      this.refreshLayout(true);
    };
    ResourceBase2.prototype.getIndexFromResourceId = function(id, name, resourceData, event, parentField) {
      name = name || this.parent.resourceCollection.slice(-1)[0].name;
      if (isNullOrUndefined(resourceData)) {
        resourceData = this.resourceCollection.filter(function(e) {
          return e.name === name;
        })[0];
        if (isNullOrUndefined(resourceData)) {
          return null;
        }
      }
      var resource = resourceData.dataSource.filter(function(e) {
        if (event && e[resourceData.idField] === id) {
          if (e[resourceData.groupIDField] === event["" + parentField]) {
            return e[resourceData.idField] === id;
          }
          return null;
        } else {
          return e[resourceData.idField] === id;
        }
      })[0];
      return this.lastResourceLevel.map(function(e) {
        return e.resourceData;
      }).indexOf(resource);
    };
    ResourceBase2.prototype.resourceExpand = function(id, name, hide) {
      var resource = this.parent.resourceCollection.filter(function(e) {
        if (e.name === name) {
          return e;
        }
        return null;
      })[0];
      var index = 0;
      var resourceData = resource.dataSource.filter(function(e) {
        return e[resource.idField] === id;
      })[0];
      if (!this.parent.activeViewOptions.group.byGroupID) {
        index = this.getIndexFromResourceId(id, name, resource);
      } else {
        index = this.lastResourceLevel.map(function(e) {
          return e.resourceData;
        }).indexOf(resourceData);
      }
      var target = this.parent.element.querySelector("." + RESOURCE_COLUMN_WRAP_CLASS + " " + ('[data-group-index="' + index + '"]') + " ." + RESOURCE_TREE_ICON_CLASS);
      if (target) {
        if (target.classList.contains(RESOURCE_EXPAND_CLASS) && !hide) {
          target.click();
        } else if (target.classList.contains(RESOURCE_COLLAPSE_CLASS) && hide) {
          target.click();
        }
      }
    };
    ResourceBase2.prototype.resourceScroll = function(id, name) {
      if (this.parent.isAdaptive || ["Agenda", "MonthAgenda"].indexOf(this.parent.currentView) > -1) {
        return;
      }
      var levelName = name || this.parent.resourceCollection.slice(-1)[0].name;
      var levelIndex = this.parent.resourceCollection.length - 1;
      var resource = this.parent.resourceCollection.filter(function(e, index2) {
        if (e.name === levelName) {
          levelIndex = index2;
          return e;
        }
        return null;
      })[0];
      var scrollElement = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
      var index = 0;
      if (this.parent.activeView.isTimelineView()) {
        if (!this.parent.activeViewOptions.group.byGroupID) {
          index = this.getIndexFromResourceId(id, levelName, resource);
        } else {
          var resourceData = resource.dataSource.filter(function(e) {
            return e[resource.idField] === id;
          })[0];
          index = this.lastResourceLevel.map(function(e) {
            return e.resourceData;
          }).indexOf(resourceData);
        }
        if (this.parent.virtualScrollModule) {
          var virtual = this.parent.element.querySelector("." + VIRTUAL_TRACK_CLASS);
          var averageRowHeight = Math.round(virtual.offsetHeight / this.expandedResources.length);
          if (this.parent.rowAutoHeight) {
            scrollElement.scrollTop = 0;
            this.parent.virtualScrollModule.virtualScrolling();
          }
          scrollElement.scrollTop = index * averageRowHeight - (this.parent.virtualScrollModule.bufferCount - 1) * averageRowHeight;
          this.parent.virtualScrollModule.virtualScrolling();
          if (this.parent.rowAutoHeight) {
            var td = this.parent.element.querySelector("." + WORK_CELLS_CLASS + '[data-group-index="' + index + '"]');
            if (td && !td.parentElement.classList.contains(HIDDEN_CLASS)) {
              scrollElement.scrollTop = scrollElement.scrollTop < td.offsetTop ? td.offsetTop : scrollElement.scrollTop + td.offsetTop;
            }
          } else {
            scrollElement.scrollTop = index * averageRowHeight;
          }
        } else {
          var td = this.parent.element.querySelector("." + WORK_CELLS_CLASS + '[data-group-index="' + index + '"]');
          if (td && !td.parentElement.classList.contains(HIDDEN_CLASS)) {
            scrollElement.scrollTop = td.offsetTop;
          }
        }
      } else {
        if (!this.parent.activeViewOptions.group.byGroupID) {
          index = this.getIndexFromResourceId(id, levelName, resource);
        } else {
          if (levelName === this.parent.resourceCollection.slice(-1)[0].name) {
            index = this.lastResourceLevel.map(function(e) {
              return e.resourceData[resource.idField];
            }).indexOf(id);
          } else {
            index = resource.dataSource.map(function(e) {
              return e[resource.idField];
            }).indexOf(id);
          }
        }
        var offsetTarget = this.parent.currentView === "Month" ? this.parent.element.querySelector("." + DATE_HEADER_WRAP_CLASS + " tbody tr:nth-child(" + (levelIndex + 1) + ")") : this.parent.element.querySelector("." + HEADER_ROW_CLASS + ":nth-child(" + (levelIndex + 1) + ")");
        var offset = [].slice.call(offsetTarget.children).map(function(node) {
          return node.offsetLeft;
        });
        scrollElement.scrollLeft = offset[parseInt(index.toString(), 10)];
      }
    };
    ResourceBase2.prototype.destroy = function() {
      this.parent.off(documentClick, this.documentClick);
      if (this.treeViewObj) {
        if (this.treeViewObj.portals && this.treeViewObj.portals.length > 0) {
          var treeViewTemplates = this.treeViewObj.portals.map(function(x) {
            return x.propName;
          });
          if (treeViewTemplates.length > 0) {
            this.parent.resetTemplates(treeViewTemplates);
          }
        }
        this.treeViewObj.destroy();
        this.treeViewObj = null;
      }
      if (this.treePopup) {
        this.treePopup.destroy();
        this.treePopup = null;
        remove(this.parent.element.querySelector("." + RESOURCE_TREE_POPUP));
        remove(this.parent.element.querySelector("." + RESOURCE_TREE_POPUP_OVERLAY));
      }
      var resToolBarEle = this.parent.element.querySelector("." + RESOURCE_TOOLBAR_CONTAINER);
      if (resToolBarEle) {
        remove(resToolBarEle);
      }
    };
    return ResourceBase2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/models/toolbar.js
var __extends14 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate12 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ToolbarItem = (
  /** @class */
  function(_super) {
    __extends14(ToolbarItem2, _super);
    function ToolbarItem2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate12([
      Property("")
    ], ToolbarItem2.prototype, "id", void 0);
    __decorate12([
      Property("")
    ], ToolbarItem2.prototype, "text", void 0);
    __decorate12([
      Property("auto")
    ], ToolbarItem2.prototype, "width", void 0);
    __decorate12([
      Property("")
    ], ToolbarItem2.prototype, "cssClass", void 0);
    __decorate12([
      Property(false)
    ], ToolbarItem2.prototype, "showAlwaysInPopup", void 0);
    __decorate12([
      Property(false)
    ], ToolbarItem2.prototype, "disabled", void 0);
    __decorate12([
      Property("")
    ], ToolbarItem2.prototype, "prefixIcon", void 0);
    __decorate12([
      Property("")
    ], ToolbarItem2.prototype, "suffixIcon", void 0);
    __decorate12([
      Property(true)
    ], ToolbarItem2.prototype, "visible", void 0);
    __decorate12([
      Property("None")
    ], ToolbarItem2.prototype, "overflow", void 0);
    __decorate12([
      Property("")
    ], ToolbarItem2.prototype, "template", void 0);
    __decorate12([
      Property("Button")
    ], ToolbarItem2.prototype, "type", void 0);
    __decorate12([
      Property("Both")
    ], ToolbarItem2.prototype, "showTextOn", void 0);
    __decorate12([
      Property(null)
    ], ToolbarItem2.prototype, "htmlAttributes", void 0);
    __decorate12([
      Property("")
    ], ToolbarItem2.prototype, "tooltipText", void 0);
    __decorate12([
      Property("Left")
    ], ToolbarItem2.prototype, "align", void 0);
    __decorate12([
      Property(-1)
    ], ToolbarItem2.prototype, "tabIndex", void 0);
    __decorate12([
      Property("Custom")
    ], ToolbarItem2.prototype, "name", void 0);
    __decorate12([
      Event()
    ], ToolbarItem2.prototype, "click", void 0);
    return ToolbarItem2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/base/schedule.js
var __extends15 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate13 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Schedule = (
  /** @class */
  function(_super) {
    __extends15(Schedule2, _super);
    function Schedule2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.adaptiveGroupIndex = 0;
      return _this;
    }
    Schedule2.prototype.render = function() {
      var addClasses = [];
      var removeClasses = [];
      addClasses.push(ROOT);
      if (this.enableRtl) {
        addClasses.push(RTL);
      } else {
        removeClasses.push(RTL);
      }
      if (this.isAdaptive) {
        addClasses.push(DEVICE_CLASS);
      } else {
        removeClasses.push(DEVICE_CLASS);
      }
      if (this.enableAdaptiveUI) {
        addClasses.push(ADAPTIVE_CLASS);
      } else {
        removeClasses.push(ADAPTIVE_CLASS);
      }
      if (this.allowMultiDrag) {
        addClasses.push(MULTI_DRAG);
      } else {
        removeClasses.push(MULTI_DRAG);
      }
      if (this.cssClass) {
        var cssClass = this.cssClass.split(" ");
        for (var _i = 0, cssClass_1 = cssClass; _i < cssClass_1.length; _i++) {
          var cls_1 = cssClass_1[_i];
          addClasses.push(cls_1);
        }
      }
      classList(this.element, addClasses, removeClasses);
      this.validateDate();
      createSpinner({ target: this.element });
      this.scrollModule = new Scroll(this);
      this.scrollModule.setWidth();
      this.scrollModule.setHeight();
      this.renderModule = new Render(this);
      this.eventBase = new EventBase(this);
      this.workCellAction = new WorkCellInteraction(this);
      if (this.allowKeyboardInteraction) {
        this.keyboardInteractionModule = new KeyboardInteraction(this);
      }
      this.inlineModule = new InlineEdit(this);
      this.initializeDataModule();
      this.renderTableContainer();
      this.activeViewOptions = this.getActiveViewOptions();
      this.initializeResources();
      this.wireEvents();
    };
    Schedule2.prototype.renderTableContainer = function() {
      if (!this.element.querySelector("." + TABLE_CONTAINER_CLASS)) {
        this.element.appendChild(this.createElement("div", { className: TABLE_CONTAINER_CLASS }));
      }
    };
    Schedule2.prototype.getEventTemplateName = function(resIndex) {
      var templateName = "eventTemplate_" + resIndex;
      if (this.activeEventTemplates.indexOf(templateName) < 0) {
        this.activeEventTemplates.push(templateName);
      }
      return templateName;
    };
    Schedule2.prototype.getElementWidth = function(element) {
      return getElementWidth(element, this.uiStateValues.isTransformed);
    };
    Schedule2.prototype.getElementHeight = function(element) {
      return getElementHeight(element, this.uiStateValues.isTransformed);
    };
    Schedule2.prototype.getElementHeightFromClass = function(element, elementClass) {
      return getElementHeightFromClass(element, elementClass, this.uiStateValues.isTransformed);
    };
    Schedule2.prototype.renderTemplates = function(callback) {
      if (this.isReact) {
        this.renderReactTemplates(callback);
      } else if (callback) {
        callback();
      }
    };
    Schedule2.prototype.resetTemplates = function(templates) {
      if (this.isAngular || this.isReact) {
        this.clearTemplate(templates);
      }
    };
    Schedule2.prototype.sanitize = function(value, element) {
      if (this.enableHtmlSanitizer) {
        element.innerText = SanitizeHtmlHelper.sanitize(value);
      } else {
        element.innerHTML = value;
      }
    };
    Schedule2.prototype.initializeResources = function(isSetModel) {
      if (isSetModel === void 0) {
        isSetModel = false;
      }
      if (this.resources.length > 0) {
        this.resourceBase = new ResourceBase(this);
        this.resourceBase.bindResourcesData(isSetModel);
      } else {
        this.resourceBase = null;
        this.resourceCollection = [];
        this.renderElements(isSetModel);
      }
    };
    Schedule2.prototype.destroyEditorWindow = function() {
      if (this.eventWindow) {
        this.eventWindow.destroy();
        this.eventWindow = null;
      }
      this.eventWindow = new EventWindow(this);
    };
    Schedule2.prototype.renderElements = function(isLayoutOnly) {
      if (isLayoutOnly) {
        this.initializeView(this.currentView);
        this.eventWindow.refresh();
        return;
      }
      this.destroyHeaderModule();
      if (this.showHeaderBar) {
        this.headerModule = new HeaderRenderer(this);
      }
      this.renderTableContainer();
      this.uiStateValues.isTransformed = Math.round(this.element.getBoundingClientRect().width) !== this.element.offsetWidth;
      if (Browser.isDevice || Browser.isTouch) {
        this.scheduleTouchModule = new ScheduleTouch(this);
      }
      this.initializeView(this.currentView);
      this.destroyPopups();
      if (!this.isPrinting) {
        this.initializePopups();
      }
    };
    Schedule2.prototype.validateDate = function(selectedDate) {
      if (selectedDate === void 0) {
        selectedDate = this.selectedDate;
      }
      var date = selectedDate instanceof Date ? new Date(selectedDate.getTime()) : new Date(selectedDate);
      var minDate = isNullOrUndefined(this.minDate) ? new Date(1900, 0, 1) : this.minDate instanceof Date ? new Date(this.minDate.getTime()) : new Date(this.minDate);
      var maxDate = isNullOrUndefined(this.maxDate) ? new Date(2099, 11, 31) : this.maxDate instanceof Date ? new Date(this.maxDate.getTime()) : new Date(this.maxDate);
      if (minDate <= maxDate) {
        if (date < minDate) {
          date = minDate;
        }
        if (date > maxDate) {
          date = maxDate;
        }
        this.setProperties({ selectedDate: /* @__PURE__ */ new Date("" + date), minDate: /* @__PURE__ */ new Date("" + minDate), maxDate: /* @__PURE__ */ new Date("" + maxDate) }, true);
        if (this.eventWindow) {
          this.eventWindow.updateMinMaxDateToEditor();
        }
      } else {
        throw Error("minDate should be equal or less than maxDate");
      }
    };
    Schedule2.prototype.getViewIndex = function(viewName) {
      for (var item = 0; item < this.viewCollections.length; item++) {
        var checkIndex = this.viewCollections[parseInt(item.toString(), 10)].option;
        if (checkIndex === viewName) {
          return item;
        }
      }
      return -1;
    };
    Schedule2.prototype.setViewOptions = function(isModuleLoad) {
      if (isModuleLoad === void 0) {
        isModuleLoad = false;
      }
      if (isNullOrUndefined(this.views) || this.views.length === 0) {
        return;
      }
      this.viewOptions = {};
      this.viewCollections = [];
      var viewName;
      var selectedView;
      var prevIndex = this.viewIndex;
      var count = 0;
      this.viewIndex = -1;
      for (var _i = 0, _a = this.views; _i < _a.length; _i++) {
        var view = _a[_i];
        var isOptions = typeof view === "string" ? false : true;
        if (typeof view === "string") {
          viewName = view;
          if (this.currentView === viewName) {
            selectedView = viewName;
            this.viewIndex = count;
          }
        } else {
          viewName = view.option;
          if (view.isSelected) {
            selectedView = viewName;
            this.viewIndex = count;
          }
        }
        var obj = extend({ option: viewName }, isOptions ? view : {});
        var fieldViewName = viewName.charAt(0).toLowerCase() + viewName.slice(1);
        obj.cellHeaderTemplateName = obj.cellHeaderTemplate ? obj.option : "";
        obj.dateHeaderTemplateName = obj.dateHeaderTemplate ? obj.option : "";
        obj.dateRangeTemplateName = obj.dateRangeTemplate ? obj.option : "";
        obj.cellTemplateName = obj.cellTemplate ? obj.option : "";
        obj.dayHeaderTemplateName = obj.dayHeaderTemplate ? obj.option : "";
        obj.monthHeaderTemplateName = obj.monthHeaderTemplate ? obj.option : "";
        obj.resourceHeaderTemplateName = obj.resourceHeaderTemplate ? obj.option : "";
        obj.headerIndentTemplateName = obj.headerIndentTemplate ? obj.option : "";
        obj.eventTemplateName = obj.eventTemplate ? obj.option : "";
        if (!isNullOrUndefined(obj.firstDayOfWeek) && obj.firstDayOfWeek === 0) {
          delete obj.firstDayOfWeek;
        }
        if (!isNullOrUndefined(obj.interval) && obj.interval === 1) {
          delete obj.interval;
        }
        this.viewCollections.push(obj);
        if (isNullOrUndefined(this.viewOptions["" + fieldViewName])) {
          this.viewOptions["" + fieldViewName] = [obj];
        } else {
          this.viewOptions["" + fieldViewName].push(obj);
        }
        count++;
      }
      if (!isModuleLoad && selectedView) {
        this.setProperties({ currentView: selectedView }, true);
      }
      if (this.viewIndex === -1) {
        var currentIndex = this.getViewIndex(this.currentView);
        this.viewIndex = typeof this.views[0] !== "string" && (!isNullOrUndefined(prevIndex) && prevIndex !== -1) ? prevIndex : currentIndex === -1 ? 0 : currentIndex;
      }
    };
    Schedule2.prototype.getActiveViewOptions = function() {
      var timeScale = {
        enable: this.timeScale.enable,
        interval: this.timeScale.interval,
        slotCount: this.timeScale.slotCount,
        majorSlotTemplate: this.timeScale.majorSlotTemplate,
        minorSlotTemplate: this.timeScale.minorSlotTemplate
      };
      var isYearView = this.viewCollections[this.viewIndex].option.indexOf("Year") > -1;
      var group = {
        byDate: isYearView ? false : this.group.byDate,
        byGroupID: this.group.byGroupID,
        allowGroupEdit: this.group.allowGroupEdit,
        resources: isNullOrUndefined(this.group.resources) ? [] : this.group.resources,
        headerTooltipTemplate: this.group.headerTooltipTemplate,
        enableCompactView: this.group.enableCompactView,
        hideNonWorkingDays: ["Day", "Week", "WorkWeek", "Month"].indexOf(this.currentView) > -1 ? this.group.hideNonWorkingDays : false
      };
      var workDays = this.viewCollections[this.viewIndex].workDays ? [] : this.workDays;
      var scheduleOptions = {
        dateFormat: this.dateFormat,
        endHour: this.endHour,
        isSelected: false,
        option: null,
        readonly: this.readonly,
        startHour: this.startHour,
        allowVirtualScrolling: false,
        cellHeaderTemplate: this.cellHeaderTemplate,
        dayHeaderTemplate: this.dayHeaderTemplate,
        monthHeaderTemplate: this.monthHeaderTemplate,
        cellTemplate: this.cellTemplate,
        eventTemplate: this.eventSettings.template,
        dateHeaderTemplate: this.dateHeaderTemplate,
        dateRangeTemplate: this.dateRangeTemplate,
        resourceHeaderTemplate: this.resourceHeaderTemplate,
        headerIndentTemplate: this.headerIndentTemplate,
        firstMonthOfYear: this.firstMonthOfYear,
        firstDayOfWeek: this.firstDayOfWeek,
        workDays,
        monthsCount: this.monthsCount,
        showWeekend: this.showWeekend,
        showWeekNumber: this.showWeekNumber,
        displayName: null,
        interval: 1,
        timeScale,
        timeFormat: this.internalTimeFormat,
        group,
        headerRows: this.headerRows,
        orientation: "Horizontal",
        numberOfWeeks: 0,
        displayDate: null,
        enableLazyLoading: false
      };
      var viewOptions = this.viewCollections[this.viewIndex];
      var viewsData = extend(scheduleOptions, viewOptions, void 0, true);
      if (this.firstDayOfWeek !== 0 && viewOptions.firstDayOfWeek && this.firstDayOfWeek !== viewOptions.firstDayOfWeek) {
        viewsData.firstDayOfWeek = this.firstDayOfWeek;
      }
      if (viewsData.displayDate) {
        viewsData.displayDate = viewsData.displayDate instanceof Date ? new Date(viewsData.displayDate.getTime()) : new Date(viewsData.displayDate);
      }
      if (viewsData.enableLazyLoading && !isNullOrUndefined(viewsData.group.resources) && viewsData.group.resources.length > 0 && (["Agenda", "MonthAgenda", "Year", "TimelineYear"].indexOf(viewsData.option) === -1 || viewsData.option === "TimelineYear" && viewsData.orientation === "Vertical")) {
        viewsData.allowVirtualScrolling = true;
      }
      return viewsData;
    };
    Schedule2.prototype.initializeDataModule = function() {
      this.eventFields = {
        id: this.eventSettings.fields.id,
        isBlock: this.eventSettings.fields.isBlock,
        subject: this.eventSettings.fields.subject.name,
        startTime: this.eventSettings.fields.startTime.name,
        endTime: this.eventSettings.fields.endTime.name,
        startTimezone: this.eventSettings.fields.startTimezone.name,
        endTimezone: this.eventSettings.fields.endTimezone.name,
        location: this.eventSettings.fields.location.name,
        description: this.eventSettings.fields.description.name,
        isAllDay: this.eventSettings.fields.isAllDay.name,
        recurrenceID: this.eventSettings.fields.recurrenceID.name,
        recurrenceRule: this.eventSettings.fields.recurrenceRule.name,
        recurrenceException: this.eventSettings.fields.recurrenceException.name,
        isReadonly: this.eventSettings.fields.isReadonly,
        followingID: this.eventSettings.fields.followingID
      };
      this.setEditorTitles();
      this.dataModule = new Data(this, this.eventSettings.dataSource, this.eventSettings.query);
      this.crudModule = new Crud(this);
    };
    Schedule2.prototype.setEditorTitles = function() {
      this.editorTitles = {
        subject: this.eventSettings.fields.subject.title || this.localeObj.getConstant("title"),
        startTime: this.eventSettings.fields.startTime.title || this.localeObj.getConstant("start"),
        endTime: this.eventSettings.fields.endTime.title || this.localeObj.getConstant("end"),
        isAllDay: this.eventSettings.fields.isAllDay.title || this.localeObj.getConstant("allDay"),
        startTimezone: this.eventSettings.fields.startTimezone.title || this.localeObj.getConstant("startTimezone"),
        endTimezone: this.eventSettings.fields.endTimezone.title || this.localeObj.getConstant("endTimezone"),
        location: this.eventSettings.fields.location.title || this.localeObj.getConstant("location"),
        description: this.eventSettings.fields.description.title || this.localeObj.getConstant("description"),
        recurrenceRule: this.eventSettings.fields.recurrenceRule.title || this.localeObj.getConstant("repeat")
      };
    };
    Schedule2.prototype.initializeView = function(viewName) {
      this.showSpinner();
      this.activeViewOptions = this.getActiveViewOptions();
      if (this.resourceBase) {
        this.resourceBase.setResourceCollection();
      }
      this.initializeTemplates();
      this.renderModule.render(viewName);
    };
    Schedule2.prototype.initializeTemplates = function() {
      this.cellHeaderTemplateFn = this.templateParser(this.activeViewOptions.cellHeaderTemplate);
      this.dayHeaderTemplateFn = this.templateParser(this.activeViewOptions.dayHeaderTemplate);
      this.monthHeaderTemplateFn = this.templateParser(this.activeViewOptions.monthHeaderTemplate);
      this.cellTemplateFn = this.templateParser(this.activeViewOptions.cellTemplate);
      this.dateHeaderTemplateFn = this.templateParser(this.activeViewOptions.dateHeaderTemplate);
      this.dateRangeTemplateFn = this.templateParser(this.activeViewOptions.dateRangeTemplate);
      this.majorSlotTemplateFn = this.templateParser(this.activeViewOptions.timeScale.majorSlotTemplate);
      this.minorSlotTemplateFn = this.templateParser(this.activeViewOptions.timeScale.minorSlotTemplate);
      this.appointmentTemplateFn = this.templateParser(this.activeViewOptions.eventTemplate);
      this.resourceHeaderTemplateFn = this.templateParser(this.activeViewOptions.resourceHeaderTemplate);
      this.headerIndentTemplateFn = this.templateParser(this.activeViewOptions.headerIndentTemplate);
      this.headerTooltipTemplateFn = this.templateParser(this.activeViewOptions.group.headerTooltipTemplate);
      this.eventTooltipTemplateFn = this.templateParser(this.eventSettings.tooltipTemplate);
      this.editorTemplateFn = this.templateParser(this.editorTemplate);
      this.editorHeaderTemplateFn = this.templateParser(this.editorHeaderTemplate);
      this.editorFooterTemplateFn = this.templateParser(this.editorFooterTemplate);
      this.quickInfoTemplatesHeaderFn = this.templateParser(this.quickInfoTemplates.header);
      this.quickInfoTemplatesContentFn = this.templateParser(this.quickInfoTemplates.content);
      this.quickInfoTemplatesFooterFn = this.templateParser(this.quickInfoTemplates.footer);
    };
    Schedule2.prototype.initializePopups = function() {
      this.eventWindow = new EventWindow(this);
      this.quickPopup = new QuickPopups(this);
    };
    Schedule2.prototype.getDayNames = function(type) {
      var culShortNames = [];
      var cldrObj;
      var nameSpace = "";
      if (isNullOrUndefined(this.locale) || this.locale === "en" || this.locale === "en-US") {
        nameSpace = "days.stand-alone.";
        cldrObj = getValue(nameSpace + type, getDefaultDateObject(this.getCalendarMode()));
      } else {
        nameSpace = "main." + this.locale + ".dates.calendars." + this.getCalendarMode() + ".days.format." + type;
        cldrObj = getValue(nameSpace, cldrData);
      }
      for (var _i = 0, _a = Object.keys(cldrObj); _i < _a.length; _i++) {
        var obj = _a[_i];
        culShortNames.push(getValue(obj, cldrObj));
      }
      return culShortNames;
    };
    Schedule2.prototype.setCldrTimeFormat = function() {
      if (!isNullOrUndefined(this.timeFormat)) {
        this.internalTimeFormat = this.timeFormat;
        return;
      }
      if (isNullOrUndefined(this.locale) || this.locale === "en" || this.locale === "en-US") {
        this.internalTimeFormat = getValue("timeFormats.short", getDefaultDateObject(this.getCalendarMode()));
      } else {
        this.internalTimeFormat = getValue("main." + this.locale + ".dates.calendars." + this.getCalendarMode() + ".timeFormats.short", cldrData);
      }
    };
    Schedule2.prototype.getCalendarMode = function() {
      return !isNullOrUndefined(this.calendarMode) ? this.calendarMode.toLowerCase() : "gregorian";
    };
    Schedule2.prototype.getTimeString = function(date) {
      var time = this.globalize.formatDate(date, {
        format: this.activeViewOptions.timeFormat,
        type: "time",
        calendar: this.getCalendarMode()
      });
      return time.toLocaleUpperCase();
    };
    Schedule2.prototype.getDateTime = function(date) {
      return date instanceof Date ? new Date(date.getTime()) : new Date(date);
    };
    Schedule2.prototype.setCalendarMode = function() {
      if (this.calendarMode === "Islamic") {
        this.calendarUtil = new Islamic();
      } else {
        this.calendarUtil = new Gregorian();
      }
    };
    Schedule2.prototype.changeView = function(view, event, muteOnChange, index) {
      var _this = this;
      if (isNullOrUndefined(index)) {
        index = this.getViewIndex(view);
      }
      if (!muteOnChange && index === this.viewIndex && this.currentView === view || index < 0) {
        return;
      }
      var previousView = this.activeViewOptions ? this.activeViewOptions.option : this.currentView;
      var args = { requestType: "viewNavigate", cancel: false, event };
      this.trigger(actionBegin, args, function(actionArgs) {
        if (!actionArgs.cancel) {
          var navArgs = {
            action: "view",
            cancel: false,
            currentDate: _this.selectedDate,
            previousView,
            currentView: view,
            viewIndex: index
          };
          _this.trigger(navigating, navArgs, function(navigationArgs) {
            if (!navigationArgs.cancel) {
              var isVertical = ["Day", "Week", "WorkWeek"].indexOf(view) > -1 && ["Day", "Week", "WorkWeek"].indexOf(previousView) < 0;
              _this.uiStateValues.isInitial = isVertical || view.indexOf("Timeline") > -1 || view.indexOf("Year") > -1;
              _this.uiStateValues.top = view.indexOf("Timeline") > -1 && previousView.indexOf("Timeline") < 0 ? 0 : _this.uiStateValues.top;
              _this.viewIndex = navigationArgs.viewIndex;
              _this.setProperties({ currentView: view }, true);
              if (_this.headerModule) {
                _this.headerModule.updateActiveView();
                _this.headerModule.setCalendarDate(_this.selectedDate);
                _this.headerModule.setCalendarView();
              }
              _this.initializeView(_this.currentView);
              _this.animateLayout();
              args = { requestType: "viewNavigate", cancel: false, event };
              _this.trigger(actionComplete, args);
            } else {
              _this.currentView = previousView;
            }
          });
        } else {
          _this.currentView = previousView;
        }
      });
    };
    Schedule2.prototype.changeDate = function(selectedDate, event) {
      var _this = this;
      var args = { requestType: "dateNavigate", cancel: false, event };
      this.trigger(actionBegin, args, function(actionArgs) {
        if (!actionArgs.cancel) {
          var navArgs = {
            action: "date",
            cancel: false,
            previousDate: _this.selectedDate,
            currentDate: selectedDate
          };
          _this.trigger(navigating, navArgs, function(navigationArgs) {
            if (!navigationArgs.cancel) {
              _this.uiStateValues.isInitial = _this.activeView.isTimelineView() && _this.currentView !== "TimelineYear";
              _this.validateDate(navigationArgs.currentDate);
              if (_this.headerModule) {
                _this.headerModule.setCalendarDate(navigationArgs.currentDate);
              }
              if (_this.currentView === "MonthAgenda" && _this.monthAgendaModule) {
                _this.monthAgendaModule.monthAgendaDate = /* @__PURE__ */ new Date("" + _this.selectedDate);
              }
              _this.initializeView(_this.currentView);
              _this.animateLayout();
              args = { requestType: "dateNavigate", cancel: false, event };
              _this.trigger(actionComplete, args);
            }
          });
        }
      });
    };
    Schedule2.prototype.isMinMaxDate = function(date) {
      if (date === void 0) {
        date = this.selectedDate;
      }
      var maxDate = isNullOrUndefined(this.maxDate) ? new Date(2099, 11, 31) : this.maxDate;
      var minDate = isNullOrUndefined(this.minDate) ? new Date(1900, 0, 1) : this.minDate;
      return date.getTime() >= minDate.getTime() && date.getTime() <= maxDate.getTime();
    };
    Schedule2.prototype.isSelectedDate = function(date) {
      return date.setHours(0, 0, 0, 0) === (/* @__PURE__ */ new Date("" + this.selectedDate)).setHours(0, 0, 0, 0);
    };
    Schedule2.prototype.getCurrentTime = function(date) {
      if (date === void 0) {
        date = /* @__PURE__ */ new Date();
      }
      if (this.timezone) {
        return this.tzModule.convert(date, this.tzModule.getLocalTimezoneName(), this.timezone);
      }
      return date;
    };
    Schedule2.prototype.getNavigateView = function() {
      if (this.activeView.isTimelineView()) {
        return this.currentView === "TimelineMonth" || this.currentView === "TimelineYear" ? "TimelineDay" : "Agenda";
      }
      return "Day";
    };
    Schedule2.prototype.animateLayout = function() {
      if (!this.activeView.element) {
        return;
      }
      new Animation({ duration: 600, name: "FadeIn", timingFunction: "easeIn" }).animate(this.activeView.element);
    };
    Schedule2.prototype.requiredModules = function() {
      var modules = [];
      this.setViewOptions(true);
      for (var _i = 0, _a = Object.keys(this.viewOptions); _i < _a.length; _i++) {
        var view = _a[_i];
        view = view === "timelineDay" || view === "timelineWeek" || view === "timelineWorkWeek" ? "timelineViews" : view;
        modules.push({ member: view, args: [this] });
      }
      if (this.allowDragAndDrop) {
        modules.push({ member: "dragAndDrop", args: [this] });
      }
      if (this.allowResizing) {
        modules.push({ member: "resize", args: [this] });
      }
      modules.push({ member: "excelExport", args: [this] });
      modules.push({ member: "iCalendarExport", args: [this] });
      modules.push({ member: "iCalendarImport", args: [this] });
      modules.push({ member: "print", args: [this] });
      return modules;
    };
    Schedule2.prototype.preRender = function() {
      this.isAdaptive = Browser.isDevice || isIPadDevice();
      this.globalize = new Internationalization(this.locale);
      this.tzModule = new Timezone();
      if (this && isNullOrUndefined(this.uiStateValues) || !this.enablePersistence) {
        this.uiStateValues = {
          expand: false,
          isInitial: true,
          left: 0,
          top: 0,
          isGroupAdaptive: false,
          isIgnoreOccurrence: false,
          groupIndex: this.adaptiveGroupIndex,
          action: false,
          isBlock: false,
          isCustomMonth: true,
          isPreventTimezone: false,
          isTransformed: false
        };
      }
      this.currentTimezoneDate = this.getCurrentTime();
      this.activeCellsData = {
        startTime: new Date(this.currentTimezoneDate),
        endTime: new Date(this.currentTimezoneDate),
        isAllDay: false
      };
      this.activeEventData = { event: void 0, element: void 0 };
      this.getDefaultLocale();
      this.localeObj = new L10n(this.getModuleName(), this.defaultLocale, this.locale);
      this.setCldrTimeFormat();
      this.setCalendarMode();
      this.eventsData = [];
      this.eventsProcessed = [];
      this.blockData = [];
      this.blockProcessed = [];
      this.resourceCollection = [];
      this.currentAction = null;
      this.selectedElements = [];
      this.activeEventTemplates = [];
      this.setViewOptions();
    };
    Schedule2.prototype.getDefaultLocale = function() {
      this.defaultLocale = {
        day: "Day",
        week: "Week",
        workWeek: "Work Week",
        month: "Month",
        year: "Year",
        agenda: "Agenda",
        weekAgenda: "Week Agenda",
        workWeekAgenda: "Work Week Agenda",
        monthAgenda: "Month Agenda",
        today: "Today",
        noEvents: "No events",
        emptyContainer: "There are no events scheduled on this day.",
        allDay: "All day",
        start: "Start",
        end: "End",
        more: "more",
        close: "Close",
        cancel: "Cancel",
        noTitle: "(No Title)",
        delete: "Delete",
        deleteEvent: "Delete Event",
        deleteMultipleEvent: "Delete Multiple Events",
        selectedItems: "Items selected",
        deleteSeries: "Entire Series",
        edit: "Edit",
        editSeries: "Entire Series",
        editEvent: "Edit Event",
        createEvent: "Create",
        subject: "Subject",
        addTitle: "Add title",
        moreDetails: "More Details",
        moreEvents: "More Events",
        save: "Save",
        editContent: "How would you like to change the appointment in the series?",
        deleteContent: "Are you sure you want to delete this event?",
        deleteMultipleContent: "Are you sure you want to delete the selected events?",
        newEvent: "New Event",
        title: "Title",
        location: "Location",
        description: "Description",
        timezone: "Timezone",
        startTimezone: "Start Timezone",
        endTimezone: "End Timezone",
        repeat: "Repeat",
        saveButton: "Save",
        cancelButton: "Cancel",
        deleteButton: "Delete",
        recurrence: "Recurrence",
        wrongPattern: "The recurrence pattern is not valid.",
        seriesChangeAlert: "Do you want to cancel the changes made to specific instances of this series and match it to the whole series again?",
        createError: "The duration of the event must be shorter than how frequently it occurs. Shorten the duration, or change the recurrence pattern in the recurrence event editor.",
        sameDayAlert: "Two occurrences of the same event cannot occur on the same day.",
        occurenceAlert: "Cannot reschedule an occurrence of the recurring appointment if it skips over a later occurrence of the same appointment.",
        editRecurrence: "Edit Recurrence",
        recurringEvent: "Recurring Event",
        repeats: "Repeats",
        alert: "Alert",
        startEndError: "The selected end date occurs before the start date.",
        invalidDateError: "The entered date value is invalid.",
        blockAlert: "Events cannot be scheduled within the blocked time range.",
        ok: "Ok",
        yes: "Yes",
        no: "No",
        of: "of",
        occurrence: "Occurrence",
        series: "Series",
        previous: "Previous",
        next: "Next",
        timelineDay: "Timeline Day",
        timelineWeek: "Timeline Week",
        timelineWorkWeek: "Timeline Work Week",
        timelineMonth: "Timeline Month",
        timelineYear: "Timeline Year",
        editFollowingEvent: "Following Events",
        deleteTitle: "Delete Event",
        editTitle: "Edit Event",
        beginFrom: "Begin From",
        endAt: "Ends At",
        expandAllDaySection: "Expand-all-day-section",
        collapseAllDaySection: "Collapse-all-day-section",
        searchTimezone: "Search Timezone",
        noRecords: "No records found"
      };
    };
    Schedule2.prototype.wireEvents = function() {
      EventHandler.add(window, "resize", this.onScheduleResize, this);
      EventHandler.add(window, "orientationchange", this.onScheduleResize, this);
      EventHandler.add(document, Browser.touchStartEvent, this.onDocumentClick, this);
    };
    Schedule2.prototype.removeSelectedClass = function() {
      var selectedCells = this.getSelectedCells();
      for (var _i = 0, selectedCells_1 = selectedCells; _i < selectedCells_1.length; _i++) {
        var cell = selectedCells_1[_i];
        if (this.currentView !== "Year") {
          cell.setAttribute("aria-selected", "false");
        }
        cell.removeAttribute("tabindex");
      }
      removeClass(selectedCells, SELECTED_CELL_CLASS);
      if (this.keyboardInteractionModule && this.keyboardInteractionModule.selectedCells.length > 0) {
        this.keyboardInteractionModule.selectedCells = [];
      }
    };
    Schedule2.prototype.addSelectedClass = function(cells, focusCell, isPreventScroll) {
      if (this.currentView !== "Year") {
        for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {
          var cell = cells_1[_i];
          cell.setAttribute("aria-selected", "true");
        }
      }
      addClass(cells, SELECTED_CELL_CLASS);
      if (focusCell) {
        focusCell.setAttribute("tabindex", "0");
        focusCell.focus({ preventScroll: isPreventScroll || false });
      }
    };
    Schedule2.prototype.selectCell = function(element) {
      this.removeSelectedClass();
      this.addSelectedClass([element], element);
    };
    Schedule2.prototype.getAllDayRow = function() {
      return this.element.querySelector("." + ALLDAY_ROW_CLASS);
    };
    Schedule2.prototype.getContentTable = function() {
      return this.activeView.element.querySelector("." + CONTENT_TABLE_CLASS + " tbody");
    };
    Schedule2.prototype.getTableRows = function() {
      return [].slice.call(this.element.querySelectorAll("." + CONTENT_TABLE_CLASS + " tbody tr:not(." + HIDDEN_CLASS + ")"));
    };
    Schedule2.prototype.getWorkCellElements = function() {
      return [].slice.call(this.element.querySelectorAll("." + WORK_CELLS_CLASS));
    };
    Schedule2.prototype.getIndexOfDate = function(collection, date) {
      return collection.map(Number).indexOf(+date);
    };
    Schedule2.prototype.isAllDayCell = function(td) {
      if (["Month", "TimelineMonth", "TimelineYear", "MonthAgenda"].indexOf(this.currentView) > -1 || td.classList.contains(ALLDAY_CELLS_CLASS) || td.classList.contains(HEADER_CELLS_CLASS) || !this.activeViewOptions.timeScale.enable) {
        return true;
      }
      if (this.activeView.isTimelineView() && this.activeViewOptions.headerRows.length > 0 && this.activeViewOptions.headerRows.slice(-1)[0].option !== "Hour") {
        return true;
      }
      return false;
    };
    Schedule2.prototype.getDateFromElement = function(td) {
      var dateString;
      if (!isNullOrUndefined(td)) {
        dateString = td.getAttribute("data-date");
      }
      if (!isNullOrUndefined(dateString)) {
        var dateInMS = parseInt(dateString, 10);
        var date = new Date(dateInMS);
        return date;
      }
      return void 0;
    };
    Schedule2.prototype.getTargetElement = function(selector, left, top) {
      var element = document.elementFromPoint(left, top);
      var targetElement;
      if (element) {
        targetElement = element.closest(selector);
      }
      return targetElement ? [targetElement] : null;
    };
    Schedule2.prototype.getCellHeaderTemplate = function() {
      return this.cellHeaderTemplateFn;
    };
    Schedule2.prototype.getDayHeaderTemplate = function() {
      return this.dayHeaderTemplateFn;
    };
    Schedule2.prototype.getMonthHeaderTemplate = function() {
      return this.monthHeaderTemplateFn;
    };
    Schedule2.prototype.getCellTemplate = function() {
      return this.cellTemplateFn;
    };
    Schedule2.prototype.getDateHeaderTemplate = function() {
      return this.dateHeaderTemplateFn;
    };
    Schedule2.prototype.getDateRangeTemplate = function() {
      return this.dateRangeTemplateFn;
    };
    Schedule2.prototype.getMajorSlotTemplate = function() {
      return this.majorSlotTemplateFn;
    };
    Schedule2.prototype.getMinorSlotTemplate = function() {
      return this.minorSlotTemplateFn;
    };
    Schedule2.prototype.getAppointmentTemplate = function() {
      return this.appointmentTemplateFn;
    };
    Schedule2.prototype.getEventTooltipTemplate = function() {
      return this.eventTooltipTemplateFn;
    };
    Schedule2.prototype.getHeaderTooltipTemplate = function() {
      return this.headerTooltipTemplateFn;
    };
    Schedule2.prototype.getEditorTemplate = function() {
      return this.editorTemplateFn;
    };
    Schedule2.prototype.getEditorHeaderTemplate = function() {
      return this.editorHeaderTemplateFn;
    };
    Schedule2.prototype.getEditorFooterTemplate = function() {
      return this.editorFooterTemplateFn;
    };
    Schedule2.prototype.getQuickInfoTemplatesHeader = function() {
      return this.quickInfoTemplatesHeaderFn;
    };
    Schedule2.prototype.getQuickInfoTemplatesContent = function() {
      return this.quickInfoTemplatesContentFn;
    };
    Schedule2.prototype.getQuickInfoTemplatesFooter = function() {
      return this.quickInfoTemplatesFooterFn;
    };
    Schedule2.prototype.getResourceHeaderTemplate = function() {
      return this.resourceHeaderTemplateFn;
    };
    Schedule2.prototype.getHeaderIndentTemplate = function() {
      return this.headerIndentTemplateFn;
    };
    Schedule2.prototype.getCssProperties = function() {
      var cssProps = {
        border: this.enableRtl ? "borderLeftWidth" : "borderRightWidth",
        padding: this.enableRtl ? "paddingLeft" : "paddingRight",
        rtlBorder: this.enableRtl ? "borderRightWidth" : "borderLeftWidth",
        rtlPadding: this.enableRtl ? "paddingRight" : "paddingLeft"
      };
      return cssProps;
    };
    Schedule2.prototype.removeNewEventElement = function() {
      var eventClone = this.element.querySelector("." + NEW_EVENT_CLASS);
      if (!isNullOrUndefined(eventClone)) {
        remove(eventClone);
      }
    };
    Schedule2.prototype.getStartEndTime = function(startEndTime) {
      if (!isNullOrUndefined(startEndTime) && startEndTime !== "") {
        var startEndDate = resetTime(new Date(this.currentTimezoneDate) || this.getCurrentTime());
        var timeString = startEndTime.split(":");
        if (timeString.length === 2) {
          startEndDate.setHours(parseInt(timeString[0], 10), parseInt(timeString[1], 10), 0);
        }
        return startEndDate;
      }
      return null;
    };
    Schedule2.prototype.onDocumentClick = function(args) {
      this.notify(documentClick, { event: args });
    };
    Schedule2.prototype.onScheduleResize = function() {
      if (isNullOrUndefined(this.activeView) || (this.isAdaptive || isMobile()) && document.activeElement && document.activeElement.classList.contains(SUBJECT_CLASS) || this.uiStateValues.isTapHold) {
        return;
      }
      if (this.virtualScrollModule && this.activeView.isTimelineView()) {
        this.virtualScrollModule.refreshLayout();
      }
      if (this.activeViewOptions.timeScale.enable && this.activeView) {
        this.activeView.highlightCurrentTime();
      }
      if (this.quickPopup) {
        this.quickPopup.onClosePopup();
      }
      resetScrollbarWidth();
      if (this.currentView === "Month" || this.currentView !== "Agenda" && this.currentView !== "MonthAgenda" && !this.activeViewOptions.timeScale.enable || this.activeView.isTimelineView()) {
        this.activeView.resetColWidth();
        this.notify(scrollUiUpdate, { cssProperties: this.getCssProperties(), isPreventScrollUpdate: true });
        var isRemoteRefresh = false;
        if (this.activeViewOptions.enableLazyLoading && this.virtualScrollModule && this.virtualScrollModule.isRemoteRefresh) {
          isRemoteRefresh = this.virtualScrollModule.isRemoteRefresh;
          this.virtualScrollModule.isRemoteRefresh = false;
        }
        this.refreshEvents(isRemoteRefresh);
        if (this.virtualScrollModule && !this.virtualScrollModule.enableTransition) {
          var resWrap = this.element.querySelector("." + RESOURCE_COLUMN_WRAP_CLASS);
          var conWrap = this.element.querySelector("." + CONTENT_WRAP_CLASS);
          this.virtualScrollModule.enableTransition = true;
          addClass([conWrap, resWrap], "e-transition");
        }
      } else {
        this.notify(contentReady, {});
      }
    };
    Schedule2.prototype.templateParser = function(template) {
      if (template) {
        try {
          if (typeof template === "function") {
            return compile(template);
          } else {
            if (document.querySelectorAll(template).length) {
              return compile(document.querySelector(template).innerHTML.trim());
            } else {
              return compile(template);
            }
          }
        } catch (error) {
          return compile(template);
        }
      }
      return void 0;
    };
    Schedule2.prototype.getSelectedCells = function() {
      return [].slice.call(this.element.querySelectorAll("." + SELECTED_CELL_CLASS));
    };
    Schedule2.prototype.getAnnouncementString = function(event, subject) {
      var resourceName;
      if (this.quickPopup && this.activeViewOptions.group.resources.length > 0) {
        var constantText = '"s event - ';
        resourceName = this.quickPopup.getResourceText({ event }, "event") + constantText;
      }
      var recordSubject = subject || (event[this.eventFields.subject] || this.eventSettings.fields.subject.default);
      var recordLocation = event[this.eventFields.location] || this.eventSettings.fields.location.default;
      var skeleton = "full";
      var startDateText = this.globalize.formatDate(event[this.eventFields.startTime], {
        type: "dateTime",
        skeleton,
        calendar: this.getCalendarMode()
      });
      var endDateText = this.globalize.formatDate(event[this.eventFields.endTime], {
        type: "dateTime",
        skeleton,
        calendar: this.getCalendarMode()
      });
      var announcementString = recordSubject + " " + this.localeObj.getConstant("beginFrom") + " " + startDateText + " " + this.localeObj.getConstant("endAt") + " " + endDateText;
      if (resourceName) {
        announcementString = resourceName + " " + announcementString;
      }
      if (recordLocation && recordLocation !== "") {
        announcementString = announcementString + " " + this.localeObj.getConstant("location") + " " + recordLocation;
      }
      if (event[this.eventFields.recurrenceRule] && event[this.eventFields.recurrenceRule] !== "" && event[this.eventFields.id] === event[this.eventFields.recurrenceID]) {
        announcementString = announcementString + " " + this.localeObj.getConstant("recurringEvent");
      }
      return announcementString;
    };
    Schedule2.prototype.boundaryValidation = function(pageY, pageX) {
      var autoScrollDistance = 30;
      var scrollEdges = { left: false, right: false, top: false, bottom: false };
      var viewBoundaries = this.element.querySelector("." + CONTENT_WRAP_CLASS).getBoundingClientRect();
      if (pageY < viewBoundaries.top + autoScrollDistance + window.pageYOffset && pageY > viewBoundaries.top + window.pageYOffset) {
        scrollEdges.top = true;
      }
      if (pageY > viewBoundaries.bottom - autoScrollDistance + window.pageYOffset && pageY < viewBoundaries.bottom + window.pageYOffset) {
        scrollEdges.bottom = true;
      }
      if (pageX < viewBoundaries.left + autoScrollDistance + window.pageXOffset && pageX > viewBoundaries.left + window.pageXOffset) {
        scrollEdges.left = true;
      }
      if (pageX > viewBoundaries.right - autoScrollDistance + window.pageXOffset && pageX < viewBoundaries.right + window.pageXOffset) {
        scrollEdges.right = true;
      }
      return scrollEdges;
    };
    Schedule2.prototype.getWeekNumberContent = function(dates) {
      var weekNumber;
      if (this.weekRule === "FirstDay") {
        var weekNumberDate = getWeekLastDate(dates.slice(-1)[0], this.firstDayOfWeek);
        weekNumber = this.globalize.formatNumber(getWeekNumber(weekNumberDate));
      } else if (this.weekRule === "FirstFourDayWeek") {
        var weekFirstDate = getWeekFirstDate(dates.slice(-1)[0], this.firstDayOfWeek);
        var weekLastDate = getWeekLastDate(dates.slice(-1)[0], this.firstDayOfWeek);
        var weekMidDate = getWeekMiddleDate(weekFirstDate, weekLastDate);
        weekNumber = this.globalize.formatNumber(getWeekNumber(weekMidDate));
      } else if (this.weekRule === "FirstFullWeek") {
        var weekFirstDate = getWeekFirstDate(dates.slice(-1)[0], this.firstDayOfWeek);
        weekNumber = this.globalize.formatNumber(getWeekNumber(weekFirstDate));
      }
      return weekNumber;
    };
    Schedule2.prototype.renderHeaderIndentTemplate = function(data, td) {
      if (this.activeViewOptions.headerIndentTemplate) {
        var scheduleId = this.element.id + "_";
        var viewName = this.activeViewOptions.headerIndentTemplateName;
        var templateId = scheduleId + viewName + "headerIndentTemplate";
        var indentTemplate = [].slice.call(this.getHeaderIndentTemplate()(data, this, "headerIndentTemplate", templateId, false, void 0, void 0, this.root));
        append(indentTemplate, td);
      }
    };
    Schedule2.prototype.isSpecificResourceEvents = function() {
      return this.activeViewOptions.group.resources.length > 0 && !this.activeViewOptions.group.allowGroupEdit && !this.rowAutoHeight && !this.virtualScrollModule && this.activeViewOptions.group.byGroupID;
    };
    Schedule2.prototype.unWireEvents = function() {
      EventHandler.remove(window, "resize", this.onScheduleResize);
      EventHandler.remove(window, "orientationchange", this.onScheduleResize);
      EventHandler.remove(document, Browser.touchStartEvent, this.onDocumentClick);
    };
    Schedule2.prototype.getModuleName = function() {
      return "schedule";
    };
    Schedule2.prototype.getPersistData = function() {
      return this.addOnPersist(["currentView", "selectedDate", "scrollTop", "scrollLeft", "adaptiveGroupIndex"]);
    };
    Schedule2.prototype.onPropertyChanged = function(newProp, oldProp) {
      if (this.isReact && isNullOrUndefined(this.activeView)) {
        return;
      }
      var state = {
        isRefresh: false,
        isResource: false,
        isDate: false,
        isView: false,
        isLayout: false,
        isDataManager: false
      };
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "views":
            this.setViewOptions();
            if (this.headerModule) {
              this.headerModule.updateItems();
            }
            state.isView = true;
            break;
          case "currentView":
            state.isView = true;
            break;
          case "minDate":
          case "maxDate":
          case "selectedDate":
            state.isDate = true;
            break;
          case "dateFormat":
            this.activeViewOptions = this.getActiveViewOptions();
            if (this.headerModule) {
              this.headerModule.updateDateRange();
            }
            break;
          case "showHeaderBar":
          case "toolbarItems":
            this.destroyHeaderModule();
            if (newProp.showHeaderBar) {
              this.headerModule = new HeaderRenderer(this);
              this.headerModule.updateDateRange();
            }
            this.notify(scrollUiUpdate, { cssProperties: this.getCssProperties() });
            if (this.activeView.isTimelineView()) {
              this.refreshEvents(false);
            }
            break;
          case "workDays":
            if (JSON.stringify(oldProp.workDays) !== JSON.stringify(newProp.workDays)) {
              state.isLayout = true;
            }
            break;
          case "showWeekend":
          case "startHour":
          case "endHour":
          case "workHours":
          case "readonly":
          case "headerRows":
          case "showWeekNumber":
          case "rowAutoHeight":
            state.isLayout = true;
            break;
          case "locale":
          case "calendarMode":
            this.globalize = new Internationalization(this.locale);
            this.localeObj = new L10n(this.getModuleName(), this.defaultLocale, this.locale);
            this.setCldrTimeFormat();
            this.setCalendarMode();
            state.isRefresh = true;
            break;
          case "firstDayOfWeek":
            this.activeViewOptions.firstDayOfWeek = newProp.firstDayOfWeek;
            if (this.eventWindow) {
              this.eventWindow.refreshRecurrenceEditor();
            }
            state.isLayout = true;
            break;
          case "showTimeIndicator":
            if (this.activeViewOptions.timeScale.enable && this.activeView) {
              this.activeView.highlightCurrentTime();
            }
            break;
          case "cellHeaderTemplate":
            this.activeViewOptions.cellHeaderTemplate = newProp.cellHeaderTemplate;
            this.cellHeaderTemplateFn = this.templateParser(this.activeViewOptions.cellHeaderTemplate);
            state.isLayout = true;
            break;
          case "cellTemplate":
            this.activeViewOptions.cellTemplate = newProp.cellTemplate;
            this.cellTemplateFn = this.templateParser(this.activeViewOptions.cellTemplate);
            state.isLayout = true;
            break;
          case "dateHeaderTemplate":
            this.activeViewOptions.dateHeaderTemplate = newProp.dateHeaderTemplate;
            this.dateHeaderTemplateFn = this.templateParser(this.activeViewOptions.dateHeaderTemplate);
            state.isLayout = true;
            break;
          case "dateRangeTemplate":
            this.activeViewOptions.dateRangeTemplate = newProp.dateRangeTemplate;
            this.dateRangeTemplateFn = this.templateParser(this.activeViewOptions.dateRangeTemplate);
            if (this.headerModule) {
              this.headerModule.updateDateRange();
            }
            break;
          case "dayHeaderTemplate":
            this.activeViewOptions.dayHeaderTemplate = newProp.dayHeaderTemplate;
            this.dayHeaderTemplateFn = this.templateParser(this.activeViewOptions.dayHeaderTemplate);
            state.isLayout = true;
            break;
          case "monthHeaderTemplate":
            this.activeViewOptions.monthHeaderTemplate = newProp.monthHeaderTemplate;
            this.monthHeaderTemplateFn = this.templateParser(this.activeViewOptions.monthHeaderTemplate);
            state.isLayout = true;
            break;
          case "resourceHeaderTemplate":
            this.activeViewOptions.resourceHeaderTemplate = newProp.resourceHeaderTemplate;
            this.resourceHeaderTemplateFn = this.templateParser(this.activeViewOptions.resourceHeaderTemplate);
            state.isLayout = true;
            break;
          case "timezone":
            this.eventBase.timezonePropertyChange(oldProp.timezone);
            if (this.headerModule) {
              this.headerModule.setCalendarTimezone();
            }
            break;
          case "enableRtl":
            this.setRtlClass();
            state.isRefresh = true;
            break;
          default:
            this.extendedPropertyChange(prop, newProp, oldProp, state);
            break;
        }
      }
      this.propertyChangeAction(state);
    };
    Schedule2.prototype.propertyChangeAction = function(state) {
      if (state.isRefresh) {
        this.refresh();
      } else if (state.isResource) {
        this.initializeResources(true);
      } else if (state.isView) {
        this.changeView(this.currentView, null, true);
      } else if (state.isDate) {
        if (isNullOrUndefined(this.selectedDate)) {
          this.setProperties({ selectedDate: this.getCurrentTime() }, true);
        }
        this.changeDate(this.selectedDate);
      } else if (state.isLayout) {
        this.activeCellsData = null;
        this.initializeView(this.currentView);
      } else if (state.isDataManager && this.crudModule) {
        if (this.dragAndDropModule) {
          this.dragAndDropModule.actionObj.action = "";
          removeClass([this.element], EVENT_ACTION_CLASS);
        }
        this.crudModule.refreshDataManager();
      }
    };
    Schedule2.prototype.allDayRowScrollUpdate = function() {
      var dateHeader = this.element.querySelector("." + DATE_HEADER_WRAP_CLASS);
      var allDayRow = this.element.querySelector("." + ALLDAY_ROW_CLASS);
      if (this.height === "auto" || !this.enableAllDayScroll) {
        addClass([dateHeader], ALLDAY_APPOINTMENT_AUTO);
        if (dateHeader.classList.contains(ALLDAY_APPOINTMENT_SCROLL)) {
          removeClass([dateHeader], ALLDAY_APPOINTMENT_SCROLL);
        }
        if (this.uiStateValues.expand) {
          var allDayCells = [].slice.call(this.element.querySelectorAll("." + ALLDAY_CELLS_CLASS));
          allDayCells[0].style.height = allDayRow.style.height ? allDayRow.style.height : allDayCells[1].style.height;
        }
      } else {
        if (dateHeader.classList.contains(ALLDAY_APPOINTMENT_AUTO)) {
          removeClass([dateHeader], ALLDAY_APPOINTMENT_AUTO);
        }
        this.eventBase.allDayExpandScroll(dateHeader);
      }
      if (!this.uiStateValues.expand) {
        allDayRow.style.height = "";
      }
    };
    Schedule2.prototype.extendedPropertyChange = function(prop, newProp, oldProp, state) {
      switch (prop) {
        case "width":
        case "height":
        case "enableAllDayScroll":
          if (["Day", "Week", "WorkWeek"].indexOf(this.currentView) > -1) {
            this.allDayRowScrollUpdate();
          }
          this.notify(uiUpdate, { module: "scroll", properties: { width: newProp.width, height: newProp.height } });
          break;
        case "cssClass":
          if (oldProp.cssClass) {
            removeClass([this.element], oldProp.cssClass.split(" "));
          }
          if (newProp.cssClass) {
            addClass([this.element], newProp.cssClass.split(" "));
          }
          break;
        case "hideEmptyAgendaDays":
        case "agendaDaysCount":
          this.activeViewOptions = this.getActiveViewOptions();
          state.isView = true;
          break;
        case "eventSettings":
          this.onEventSettingsPropertyChanged(newProp.eventSettings, oldProp.eventSettings, state);
          break;
        case "allowKeyboardInteraction":
          if (this.keyboardInteractionModule) {
            this.keyboardInteractionModule.destroy();
            this.keyboardInteractionModule = null;
          }
          if (newProp.allowKeyboardInteraction) {
            this.keyboardInteractionModule = new KeyboardInteraction(this);
          }
          break;
        case "timezoneDataSource":
          if (this.eventWindow) {
            this.eventWindow.refresh();
          }
          break;
        case "editorTemplate":
          if (!isNullOrUndefined(this.editorTemplate)) {
            this.editorTemplateFn = this.templateParser(this.editorTemplate);
          }
          if (this.eventWindow) {
            this.eventWindow.setDialogContent();
          }
          break;
        case "editorHeaderTemplate":
          if (!isNullOrUndefined(this.editorHeaderTemplate)) {
            this.editorHeaderTemplateFn = this.templateParser(this.editorHeaderTemplate);
          }
          if (this.eventWindow) {
            this.eventWindow.setDialogHeader();
          }
          break;
        case "editorFooterTemplate":
          if (!isNullOrUndefined(this.editorFooterTemplate)) {
            this.editorFooterTemplateFn = this.templateParser(this.editorFooterTemplate);
          }
          if (this.eventWindow) {
            this.eventWindow.setDialogFooter();
          }
          break;
        case "quickInfoTemplates":
          if (this.quickInfoTemplates.header) {
            this.quickInfoTemplatesHeaderFn = this.templateParser(this.quickInfoTemplates.header);
          }
          if (this.quickInfoTemplates.content) {
            this.quickInfoTemplatesContentFn = this.templateParser(this.quickInfoTemplates.content);
          }
          if (this.quickInfoTemplates.footer) {
            this.quickInfoTemplatesFooterFn = this.templateParser(this.quickInfoTemplates.footer);
          }
          break;
        case "group":
          this.onGroupSettingsPropertyChanged(newProp.group, oldProp.group, state);
          break;
        case "resources":
          state.isResource = true;
          break;
        case "timeScale":
          this.activeViewOptions.timeScale.interval = newProp.timeScale.interval || this.activeViewOptions.timeScale.interval;
          this.activeViewOptions.timeScale.slotCount = newProp.timeScale.slotCount || this.activeViewOptions.timeScale.slotCount;
          if (this.eventWindow) {
            this.eventWindow.refreshDateTimePicker();
          }
          state.isLayout = true;
          break;
        case "allowDragAndDrop":
        case "allowResizing":
        case "eventDragArea":
          this.refreshEvents(false);
          break;
        case "weekRule":
          state.isLayout = true;
          break;
        case "firstMonthOfYear":
          this.activeViewOptions.firstMonthOfYear = newProp.firstMonthOfYear;
          this.viewIndex = this.activeView.viewIndex;
          state.isLayout = true;
          break;
        case "monthsCount":
          this.activeViewOptions.monthsCount = newProp.monthsCount;
          this.viewIndex = this.activeView.viewIndex;
          state.isLayout = true;
          break;
        case "timeFormat":
          this.internalTimeFormat = newProp.timeFormat || this.activeViewOptions.timeFormat;
          if (this.eventWindow) {
            this.eventWindow.refreshDateTimePicker();
          }
          state.isLayout = true;
          break;
        case "enableAdaptiveUI":
          if (this.showHeaderBar && this.headerModule) {
            this.destroyHeaderModule();
            this.headerModule = new HeaderRenderer(this);
            this.headerModule.updateDateRange();
          }
          state.isLayout = true;
          break;
        case "headerIndentTemplate":
          this.activeViewOptions.headerIndentTemplate = newProp.headerIndentTemplate;
          this.headerIndentTemplateFn = this.templateParser(this.activeViewOptions.headerIndentTemplate);
          state.isLayout = true;
          break;
      }
    };
    Schedule2.prototype.setRtlClass = function() {
      if (this.enableRtl) {
        addClass([this.element], "e-rtl");
      } else {
        removeClass([this.element], "e-rtl");
      }
    };
    Schedule2.prototype.onGroupSettingsPropertyChanged = function(newProp, oldProp, state) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        if (prop === "headerTooltipTemplate") {
          this.headerTooltipTemplateFn = this.templateParser(newProp.headerTooltipTemplate);
        } else {
          state.isLayout = true;
          if (this.eventWindow) {
            this.eventWindow.refresh();
          }
        }
      }
    };
    Schedule2.prototype.onEventSettingsPropertyChanged = function(newProp, oldProp, state) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "dataSource":
          case "query":
          case "fields":
          case "includeFiltersInQuery":
            this.initializeDataModule();
            state.isDataManager = true;
            break;
          case "template":
            this.activeViewOptions.eventTemplate = newProp.template;
            this.appointmentTemplateFn = this.templateParser(this.activeViewOptions.eventTemplate);
            state.isDataManager = true;
            break;
          case "enableTooltip":
            if (this.eventTooltip) {
              this.eventTooltip.destroy();
              this.eventTooltip = null;
            }
            if (newProp.enableTooltip) {
              this.eventTooltip = new EventTooltip(this);
            }
            break;
          case "tooltipTemplate":
            this.eventTooltipTemplateFn = this.templateParser(this.eventSettings.tooltipTemplate);
            break;
          case "resourceColorField":
            if (this.resourceBase) {
              this.resourceBase.setResourceCollection();
            }
            state.isDataManager = true;
            break;
          case "editFollowingEvents":
            if (this.quickPopup) {
              this.quickPopup.refreshQuickDialog();
            }
            break;
          case "allowAdding":
          case "allowEditing":
          case "allowDeleting":
            if (this.showHeaderBar && this.headerModule) {
              this.headerModule.updateAddIcon();
            }
            if (this.eventWindow) {
              this.eventWindow.refresh();
            }
            break;
          case "spannedEventPlacement":
          case "minimumEventDuration":
          case "enableMaxHeight":
          case "enableIndicator":
            this.refreshEvents(false);
            break;
          case "ignoreWhitespace":
            state.isLayout = true;
            break;
        }
      }
    };
    Schedule2.prototype.destroyHeaderModule = function() {
      if (this.headerModule) {
        this.headerModule.destroy();
        this.headerModule = null;
      }
    };
    Schedule2.prototype.destroyPopups = function() {
      if (this.quickPopup) {
        this.quickPopup.destroy();
        this.quickPopup = null;
      }
      if (this.eventWindow) {
        this.eventWindow.destroy();
        this.eventWindow = null;
      }
    };
    Schedule2.prototype.showSpinner = function() {
      showSpinner(this.element);
    };
    Schedule2.prototype.hideSpinner = function() {
      hideSpinner(this.element);
    };
    Schedule2.prototype.setWorkHours = function(dates, start, end, groupIndex) {
      var cells = [];
      cells = this.getWorkHourCells(dates, start, end, groupIndex);
      addClass(cells, WORK_HOURS_CLASS);
    };
    Schedule2.prototype.resetWorkHours = function(dates, start, end, groupIndex) {
      if (dates === void 0) {
        dates = this.activeView.renderDates;
      }
      if (dates && start && end) {
        var cells = this.getWorkHourCells(dates, start, end, groupIndex);
        removeClass(cells, WORK_HOURS_CLASS);
      } else {
        var workHourCells = [].slice.call(this.element.querySelectorAll("." + WORK_HOURS_CLASS));
        removeClass(workHourCells, WORK_HOURS_CLASS);
      }
    };
    Schedule2.prototype.getWorkHourCells = function(dates, start, end, groupIndex) {
      if (["Agenda", "MonthAgenda", "Month", "TimelineMonth"].indexOf(this.currentView) > -1) {
        return [];
      }
      var startHour = this.getStartEndTime(start);
      var endHour = this.getStartEndTime(end);
      var tableEle = this.getContentTable();
      if (isNullOrUndefined(startHour) || isNullOrUndefined(endHour) || !tableEle) {
        return [];
      }
      startHour.setMilliseconds(0);
      endHour.setMilliseconds(0);
      var viewStartHour = this.activeView.getStartHour();
      if (startHour < viewStartHour) {
        startHour = viewStartHour;
      }
      var viewEndHour = this.activeView.getEndHour();
      if (endHour > viewEndHour) {
        endHour = viewEndHour;
      }
      var msMajorInterval = this.activeViewOptions.timeScale.interval * MS_PER_MINUTE;
      var msInterval = msMajorInterval / this.activeViewOptions.timeScale.slotCount;
      var offsetDiff = (viewStartHour.getTimezoneOffset() - startHour.getTimezoneOffset()) * MS_PER_MINUTE;
      var startIndex = Math.round((startHour.getTime() - viewStartHour.getTime() + offsetDiff) / msInterval);
      var endIndex = Math.ceil((endHour.getTime() - viewStartHour.getTime() + offsetDiff) / msInterval);
      var tempStartIndex = startIndex;
      var tempEndIndex = endIndex;
      var cells = [];
      for (var _i = 0, dates_1 = dates; _i < dates_1.length; _i++) {
        var date = dates_1[_i];
        date = this.getDateTime(date);
        resetTime(date);
        var renderDates = this.activeView.renderDates;
        if (!isNullOrUndefined(groupIndex) && this.resourceBase && !this.activeView.isTimelineView()) {
          renderDates = this.resourceBase.lastResourceLevel[parseInt(groupIndex.toString(), 10)].renderDates;
        }
        var colIndex = this.getIndexOfDate(renderDates, date);
        if (colIndex >= 0) {
          if (this.activeView.isTimelineView()) {
            var slotsPerDay = Math.round((viewEndHour.getTime() - viewStartHour.getTime()) / msInterval);
            startIndex = tempStartIndex + colIndex * slotsPerDay;
            endIndex = tempEndIndex + colIndex * slotsPerDay;
          }
          for (var i = startIndex; i < endIndex; i++) {
            if (this.activeView.isTimelineView()) {
              var rowIndex = !isNullOrUndefined(groupIndex) ? groupIndex : 0;
              cells.push(tableEle.rows[parseInt(rowIndex.toString(), 10)].cells[parseInt(i.toString(), 10)]);
            } else {
              if (!isNullOrUndefined(groupIndex)) {
                var selector = "." + WORK_CELLS_CLASS + '[data-group-index="' + groupIndex + '"]';
                var tds = [].slice.call(tableEle.rows[parseInt(i.toString(), 10)].querySelectorAll(selector));
                cells.push(tds[parseInt(colIndex.toString(), 10)]);
              } else {
                cells.push(tableEle.rows[parseInt(i.toString(), 10)].cells[parseInt(colIndex.toString(), 10)]);
              }
            }
          }
        }
      }
      return cells;
    };
    Schedule2.prototype.getCellDetails = function(tdCol) {
      var td = tdCol instanceof Array ? tdCol : [tdCol];
      var firstTd = getElement(td[0]);
      var lastTd = getElement(td.slice(-1)[0]);
      var startTime = this.getDateFromElement(firstTd);
      var endTime = this.getDateFromElement(lastTd);
      if (isNullOrUndefined(startTime) || isNullOrUndefined(endTime)) {
        return void 0;
      }
      var endDateFromColSpan = this.activeView.isTimelineView() && !isNullOrUndefined(lastTd.getAttribute("colSpan")) && this.headerRows.length > 0;
      var duration = endDateFromColSpan ? parseInt(lastTd.getAttribute("colSpan"), 10) : 1;
      if (!this.activeViewOptions.timeScale.enable || endDateFromColSpan || lastTd.classList.contains(ALLDAY_CELLS_CLASS) || lastTd.classList.contains(HEADER_CELLS_CLASS)) {
        endTime = addDays(new Date(endTime.getTime()), duration);
      } else {
        endTime = this.activeView.getEndDateFromStartDate(endTime);
      }
      var data = {
        startTime,
        endTime,
        isAllDay: this.isAllDayCell(firstTd),
        element: tdCol
      };
      var groupIndex = firstTd.getAttribute("data-group-index");
      if (!isNullOrUndefined(groupIndex)) {
        data.groupIndex = parseInt(groupIndex, 10);
      }
      return data;
    };
    Schedule2.prototype.getSelectedElements = function() {
      if (this.keyboardInteractionModule && this.keyboardInteractionModule.selectedCells.length > 0) {
        return this.keyboardInteractionModule.selectedCells;
      }
      return this.getSelectedCells();
    };
    Schedule2.prototype.getResourceCollections = function() {
      return this.resourceCollection;
    };
    Schedule2.prototype.setResourceCollections = function(resourceCol, isEventDataRefresh) {
      if (isEventDataRefresh === void 0) {
        isEventDataRefresh = true;
      }
      if (!isEventDataRefresh && this.uiStateValues) {
        this.uiStateValues.isPreventEventRefresh = true;
      }
      this.setProperties({ resources: resourceCol }, false);
    };
    Schedule2.prototype.changeCurrentView = function(viewName, viewIndex) {
      var index = this.getViewIndex(viewName);
      var view = viewName.charAt(0).toLowerCase() + viewName.slice(1);
      var viewOptions = this.viewOptions["" + view];
      if (viewOptions) {
        index = this.viewCollections.indexOf(viewOptions[viewIndex || 0]);
      }
      if (index === -1 || index === this.viewIndex) {
        return;
      }
      this.changeView(viewName, null, null, index);
    };
    Schedule2.prototype.getCurrentViewIndex = function() {
      return this.viewIndex;
    };
    Schedule2.prototype.getResourcesByIndex = function(index) {
      if (this.resourceBase && this.resourceBase.lastResourceLevel) {
        if (index < 0 || index >= this.resourceBase.lastResourceLevel.length) {
          return void 0;
        }
        var data = this.resourceBase.lastResourceLevel[parseInt(index.toString(), 10)];
        var groupData = {};
        this.resourceBase.setResourceValues(groupData, index);
        return { resource: data.resource, resourceData: data.resourceData, groupData };
      }
      return void 0;
    };
    Schedule2.prototype.expandResource = function(resourceId, name) {
      if (this.activeView.isTimelineView() && this.resourceBase && this.resourceCollection.length > 1) {
        this.resourceBase.resourceExpand(resourceId, name, false);
      }
    };
    Schedule2.prototype.collapseResource = function(resourceId, name) {
      if (this.activeView.isTimelineView() && this.resourceBase && this.resourceCollection.length > 1) {
        this.resourceBase.resourceExpand(resourceId, name, true);
      }
    };
    Schedule2.prototype.scrollTo = function(hour, scrollDate) {
      if (this.currentView.indexOf("Agenda") < 0 && isNullOrUndefined(this.element.querySelector(".e-work-cells"))) {
        return;
      }
      if (this.activeView.scrollToDate && isNullOrUndefined(hour) && scrollDate) {
        this.activeView.scrollToDate(scrollDate);
      } else if (this.activeView.scrollToHour) {
        this.activeView.scrollToHour(hour, scrollDate);
      }
    };
    Schedule2.prototype.scrollToResource = function(resourceId, groupName) {
      if (this.resourceBase && this.resourceBase.lastResourceLevel) {
        this.resourceBase.resourceScroll(resourceId, groupName);
      }
    };
    Schedule2.prototype.exportToICalendar = function(fileName, customData) {
      if (this.iCalendarExportModule) {
        this.iCalendarExportModule.initializeCalendarExport(fileName, customData);
      } else {
        console.warn('[WARNING] :: Module "ICalendarExport" is not available in Schedule component! You either misspelled the module name or forgot to load it.');
        throw Error("Inject ICalendarExport module");
      }
    };
    Schedule2.prototype.importICalendar = function(fileContent) {
      if (this.iCalendarImportModule) {
        this.iCalendarImportModule.initializeCalendarImport(fileContent);
      } else {
        console.warn('[WARNING] :: Module "ICalendarImport" is not available in Schedule component! You either misspelled the module name or forgot to load it.');
        throw Error("Inject ICalendarImport module");
      }
    };
    Schedule2.prototype.addEvent = function(data) {
      this.crudModule.addEvent(data);
    };
    Schedule2.prototype.generateEventOccurrences = function(event, startDate) {
      return this.eventBase ? this.eventBase.generateOccurrence(event, startDate) : [];
    };
    Schedule2.prototype.exportToExcel = function(excelExportOptions) {
      if (this.excelExportModule) {
        this.excelExportModule.initializeExcelExport(excelExportOptions);
      } else {
        console.warn('[WARNING] :: Module "ExcelExport" is not available in Schedule component! You either misspelled the module name or forgot to load it.');
        throw Error("Inject ExcelExport module");
      }
    };
    Schedule2.prototype.print = function(printOptions) {
      if (this.printModule) {
        this.printModule.print(printOptions);
      } else {
        console.warn('[WARNING] :: Module "Print" is not available in Schedule component! You either misspelled the module name or forgot to load it.');
        throw Error("Inject Print module");
      }
    };
    Schedule2.prototype.saveEvent = function(data, currentAction) {
      this.crudModule.saveEvent(data, currentAction);
    };
    Schedule2.prototype.deleteEvent = function(id, currentAction) {
      this.crudModule.deleteEvent(id, currentAction);
    };
    Schedule2.prototype.getEvents = function(startDate, endDate, includeOccurrences) {
      var eventCollections = [];
      if (includeOccurrences) {
        eventCollections = this.eventBase.getProcessedEvents();
      } else {
        eventCollections = this.eventsData;
      }
      if (startDate) {
        startDate = this.getDateTime(startDate);
      }
      if (endDate) {
        endDate = this.getDateTime(endDate);
      }
      eventCollections = this.eventBase.filterEventsByRange(eventCollections, startDate, endDate);
      return eventCollections;
    };
    Schedule2.prototype.getBlockEvents = function(startDate, endDate, includeOccurrences) {
      var eventCollections = [];
      if (includeOccurrences) {
        eventCollections = this.eventBase.getProcessedEvents(this.blockData);
      } else {
        eventCollections = this.blockData;
      }
      if (startDate) {
        startDate = this.getDateTime(startDate);
      }
      if (endDate) {
        endDate = this.getDateTime(endDate);
      }
      eventCollections = this.eventBase.filterEventsByRange(eventCollections, startDate, endDate);
      return eventCollections;
    };
    Schedule2.prototype.getOccurrencesByID = function(eventID) {
      return this.eventBase.getOccurrencesByID(eventID);
    };
    Schedule2.prototype.getOccurrencesByRange = function(startTime, endTime) {
      startTime = this.getDateTime(startTime);
      endTime = this.getDateTime(endTime);
      return this.eventBase.getOccurrencesByRange(startTime, endTime);
    };
    Schedule2.prototype.getCurrentViewDates = function() {
      return this.activeView ? this.activeView.renderDates : [];
    };
    Schedule2.prototype.setRecurrenceEditor = function(recurrenceEditor) {
      this.eventWindow.setRecurrenceEditor(recurrenceEditor);
    };
    Schedule2.prototype.getEventMaxID = function() {
      return this.eventBase.getEventMaxID();
    };
    Schedule2.prototype.getDeletedOccurrences = function(recurrenceData) {
      return this.eventBase.getDeletedOccurrences(recurrenceData);
    };
    Schedule2.prototype.getCurrentViewEvents = function() {
      return this.eventsProcessed;
    };
    Schedule2.prototype.refreshEvents = function(isRemoteRefresh) {
      if (isRemoteRefresh === void 0) {
        isRemoteRefresh = true;
      }
      if (isRemoteRefresh) {
        if (this.dragAndDropModule) {
          this.dragAndDropModule.actionObj.action = "";
          removeClass([this.element], EVENT_ACTION_CLASS);
        }
        this.crudModule.refreshDataManager();
      } else {
        if (this.uiStateValues) {
          this.uiStateValues.isPreventTimezone = true;
        }
        if (this.crudModule) {
          this.crudModule.refreshProcessedData();
        }
        if (this.uiStateValues) {
          this.uiStateValues.isPreventTimezone = false;
        }
      }
    };
    Schedule2.prototype.refreshTemplates = function(templateName) {
      if (templateName) {
        this.resetTemplates([templateName]);
      } else {
        this.resetTemplates();
      }
      switch (templateName) {
        case "eventTemplate":
          this.appointmentTemplateFn = this.templateParser(this.activeViewOptions.eventTemplate);
          this.refreshEvents(false);
          break;
        case "dateHeaderTemplate":
          this.dateHeaderTemplateFn = this.templateParser(this.activeViewOptions.dateHeaderTemplate);
          this.activeView.refreshHeader();
          break;
        case "dateRangeTemplate":
          this.dateRangeTemplateFn = this.templateParser(this.activeViewOptions.dateRangeTemplate);
          if (this.headerModule) {
            this.headerModule.refresh();
          }
          break;
        case "resourceHeaderTemplate":
          this.resourceHeaderTemplateFn = this.templateParser(this.activeViewOptions.resourceHeaderTemplate);
          if (this.activeView.isTimelineView()) {
            this.activeView.refreshResourceHeader();
          } else {
            this.activeView.refreshHeader();
          }
          break;
        case "quickInfoTemplates":
          if (this.quickPopup) {
            this.quickPopup.destroy();
            this.quickPopup = null;
          }
          this.quickPopup = new QuickPopups(this);
          this.quickInfoTemplatesHeaderFn = this.templateParser(this.quickInfoTemplates.header);
          this.quickInfoTemplatesContentFn = this.templateParser(this.quickInfoTemplates.content);
          this.quickInfoTemplatesFooterFn = this.templateParser(this.quickInfoTemplates.footer);
          break;
        case "editorTemplate":
          this.destroyEditorWindow();
          this.editorTemplateFn = this.templateParser(this.editorTemplate);
          break;
        case "editorHeaderTemplate":
          this.destroyEditorWindow();
          this.editorHeaderTemplateFn = this.templateParser(this.editorHeaderTemplate);
          break;
        case "editorFooterTemplate":
          this.destroyEditorWindow();
          this.editorFooterTemplateFn = this.templateParser(this.editorFooterTemplate);
          break;
        case "tooltipTemplate":
        case "headerTooltipTemplate":
          if (this.eventTooltip) {
            this.eventTooltip.destroy();
            this.eventTooltip = null;
          }
          this.eventTooltip = new EventTooltip(this);
          this.eventTooltipTemplateFn = this.templateParser(this.eventSettings.tooltipTemplate);
          this.headerTooltipTemplateFn = this.templateParser(this.activeViewOptions.group.headerTooltipTemplate);
          break;
        default:
          this.initializeView(this.currentView);
          break;
      }
    };
    Schedule2.prototype.refreshLayout = function() {
      this.onScheduleResize();
      if (this.headerModule) {
        this.headerModule.refresh();
      }
      if (this.eventWindow) {
        this.eventWindow.refresh();
      }
    };
    Schedule2.prototype.getEventDetails = function(element) {
      element = getElement(element);
      var guid = element.getAttribute("data-guid");
      if (guid) {
        return this.eventBase.getEventByGuid(guid);
      }
      return {};
    };
    Schedule2.prototype.isSlotAvailable = function(startTime, endTime, groupIndex) {
      var _this = this;
      var eventStart;
      var eventEnd;
      var eventObj = this.activeEventData.event;
      if (startTime instanceof Date || typeof startTime === "string") {
        eventStart = startTime;
        eventEnd = endTime;
      } else {
        eventObj = startTime;
        eventStart = startTime[this.eventFields.startTime];
        eventEnd = startTime[this.eventFields.endTime];
        if (this.resourceBase) {
          groupIndex = this.eventBase.getGroupIndexFromEvent(startTime);
        }
      }
      if (isNullOrUndefined(eventStart) || isNullOrUndefined(eventEnd)) {
        return true;
      }
      eventStart = this.getDateTime(eventStart);
      eventEnd = this.getDateTime(eventEnd);
      var eventCollection = this.eventBase.filterEvents(eventStart, eventEnd);
      if (!isNullOrUndefined(groupIndex) && this.resourceBase && this.resourceBase.lastResourceLevel.length > 0) {
        eventCollection = this.eventBase.filterEventsByResource(this.resourceBase.lastResourceLevel[parseInt(groupIndex.toString(), 10)], eventCollection);
      }
      if (eventObj) {
        if (eventObj.Guid) {
          eventCollection = eventCollection.filter(function(event) {
            return event.Guid !== eventObj.Guid;
          });
        } else {
          eventCollection = eventCollection.filter(function(event) {
            return event[_this.eventFields.id] !== eventObj[_this.eventFields.id];
          });
        }
      }
      return eventCollection.length > 0 ? false : true;
    };
    Schedule2.prototype.openEditor = function(data, action, isEventData, repeatType) {
      if (action === "Add" && !isEventData) {
        data.startTime = this.getDateTime(data.startTime);
        data.endTime = this.getDateTime(data.endTime);
        if (!isNullOrUndefined(data.element)) {
          data.element = getElement(data.element);
        }
      } else {
        data[this.eventFields.startTime] = this.getDateTime(data[this.eventFields.startTime]);
        data[this.eventFields.endTime] = this.getDateTime(data[this.eventFields.endTime]);
      }
      this.currentAction = action;
      if (action !== "Add") {
        this.activeEventData.event = data;
      }
      this.eventWindow.openEditor(data, action, isEventData, repeatType);
    };
    Schedule2.prototype.closeEditor = function() {
      if (this.eventWindow) {
        this.eventWindow.dialogClose();
      }
    };
    Schedule2.prototype.openQuickInfoPopup = function(data) {
      var _this = this;
      if (this.currentView === "Year" || isNullOrUndefined(data)) {
        return;
      }
      if (isNullOrUndefined(data[this.eventFields.id])) {
        if (this.currentView === "Agenda" || this.currentView === "MonthAgenda" || isNullOrUndefined(this.activeView)) {
          return;
        }
        var cellData = {
          startTime: this.activeCellsData.startTime = this.getDateTime(data[this.eventFields.startTime]),
          endTime: this.activeCellsData.endTime = this.getDateTime(data[this.eventFields.endTime]),
          isAllDay: this.activeCellsData.isAllDay = !isNullOrUndefined(data[this.eventFields.isAllDay]) ? data[this.eventFields.isAllDay] : false
        };
        var startTime = this.activeView.getAdjustedDate(new Date(cellData.startTime));
        if (startTime) {
          var query = "." + WORK_CELLS_CLASS + '[data-date="' + startTime.getTime() + '"]';
          if (this.activeViewOptions.group.resources.length > 0 && !this.uiStateValues.isGroupAdaptive && this.resourceBase && this.eventBase) {
            cellData.groupIndex = this.eventBase.getGroupIndexFromEvent(data);
            query = "." + WORK_CELLS_CLASS + '[data-date="' + startTime.getTime() + '"][data-group-index="' + cellData.groupIndex + '"]';
          }
          var workCell = this.element.querySelector(query);
          if (workCell) {
            workCell.focus();
            cellData.element = workCell;
            this.notify(cellClick, cellData);
          }
        }
      } else {
        var app = this.getCurrentViewEvents().filter(function(item) {
          return data[_this.eventFields.id] === item[_this.eventFields.id];
        });
        if (app.length <= 0) {
          return;
        }
        var selectEvent = app[0];
        if (data[this.eventFields.recurrenceRule]) {
          var occurence = app.filter(function(x) {
            return x[_this.eventFields.startTime].getTime() === data[_this.eventFields.startTime].getTime();
          });
          if (occurence.length > 0) {
            selectEvent = occurence[0];
          }
        }
        var element = this.element.querySelector('div[data-guid="' + selectEvent.Guid + '"]');
        if (element) {
          this.eventBase.removeSelectedAppointmentClass();
          this.eventBase.addSelectedAppointments([element], false);
          this.activeEventData = { event: selectEvent, element };
          if (this.currentView === "Agenda" || this.currentView === "MonthAgenda") {
            addClass([this.activeEventData.element], AGENDA_SELECTED_CELL);
          }
          this.notify(eventClick, this.activeEventData);
        }
      }
    };
    Schedule2.prototype.closeQuickInfoPopup = function() {
      if (this.quickPopup) {
        this.quickPopup.quickPopupHide(true);
      }
    };
    Schedule2.prototype.closeTooltip = function() {
      if (this.eventTooltip) {
        this.eventTooltip.close();
      }
    };
    Schedule2.prototype.selectResourceByIndex = function(groupIndex) {
      if (this.resourceBase && this.uiStateValues.isGroupAdaptive) {
        this.resourceBase.selectResourceByIndex(groupIndex);
      }
    };
    Schedule2.prototype.getIndexFromResourceId = function(id, name) {
      if (this.resourceBase) {
        return this.resourceBase.getIndexFromResourceId(id, name);
      }
      return null;
    };
    Schedule2.prototype.addResource = function(resources, name, index) {
      this.resourceBase.addResource(resources, name, index);
    };
    Schedule2.prototype.removeResource = function(resourceId, name) {
      this.resourceBase.removeResource(resourceId, name);
    };
    Schedule2.prototype.destroy = function() {
      if (this.eventTooltip) {
        this.eventTooltip.destroy();
        this.eventTooltip = null;
      }
      this.destroyPopups();
      this.hideSpinner();
      this.unWireEvents();
      this.destroyHeaderModule();
      if (this.eventBase) {
        this.eventBase.destroy();
        this.eventBase = null;
      }
      if (this.workCellAction) {
        this.workCellAction.destroy();
        this.workCellAction = null;
      }
      if (this.inlineModule) {
        this.inlineModule.destroy();
        this.inlineModule = null;
      }
      if (this.keyboardInteractionModule) {
        this.keyboardInteractionModule.destroy();
        this.keyboardInteractionModule = null;
      }
      if (this.scrollModule) {
        this.scrollModule.destroy();
        this.scrollModule = null;
      }
      if (this.printModule) {
        this.printModule.destroy();
      }
      if (this.activeView) {
        this.resetTemplates();
        this.activeView.removeEventListener();
        this.activeView.destroy();
        this.activeView = null;
      }
      if (this.scheduleTouchModule) {
        this.scheduleTouchModule.destroy();
        this.scheduleTouchModule = null;
      }
      if (this.crudModule) {
        this.crudModule.destroy();
        this.crudModule = null;
      }
      if (this.dataModule) {
        this.dataModule.destroy();
        this.dataModule = null;
      }
      _super.prototype.destroy.call(this);
      var modules = [
        "dayModule",
        "weekModule",
        "workWeekModule",
        "monthModule",
        "monthAgendaModule",
        "yearModule",
        "agendaModule",
        "timelineViewsModule",
        "timelineMonthModule",
        "timelineYearModule",
        "resizeModule",
        "dragAndDropModule",
        "excelExportModule",
        "printModule",
        "iCalendarExportModule",
        "iCalendarImportModule",
        "tzModule",
        "eventsData",
        "eventsProcessed",
        "blockData",
        "blockProcessed",
        "uiStateValues",
        "viewCollections",
        "viewOptions",
        "defaultLocale",
        "localeObj",
        "selectedElements",
        "resourceCollection",
        "editorTitles",
        "eventFields",
        "activeViewOptions",
        "activeEventData",
        "activeCellsData",
        "renderModule"
      ];
      for (var _i = 0, modules_1 = modules; _i < modules_1.length; _i++) {
        var module = modules_1[_i];
        this["" + module] = null;
      }
      removeChildren(this.element);
      var removeClasses = [ROOT, RTL, DEVICE_CLASS, MULTI_DRAG];
      if (this.cssClass) {
        removeClasses = removeClasses.concat(this.cssClass.split(" "));
      }
      removeClass([this.element], removeClasses);
    };
    __decorate13([
      Property("auto")
    ], Schedule2.prototype, "width", void 0);
    __decorate13([
      Property("auto")
    ], Schedule2.prototype, "height", void 0);
    __decorate13([
      Property(true)
    ], Schedule2.prototype, "showHeaderBar", void 0);
    __decorate13([
      Property(true)
    ], Schedule2.prototype, "showTimeIndicator", void 0);
    __decorate13([
      Property(true)
    ], Schedule2.prototype, "allowSwiping", void 0);
    __decorate13([
      Collection([], ToolbarItem)
    ], Schedule2.prototype, "toolbarItems", void 0);
    __decorate13([
      Property("Week")
    ], Schedule2.prototype, "currentView", void 0);
    __decorate13([
      Property(["Day", "Week", "WorkWeek", "Month", "Agenda"])
    ], Schedule2.prototype, "views", void 0);
    __decorate13([
      Property(/* @__PURE__ */ new Date())
    ], Schedule2.prototype, "selectedDate", void 0);
    __decorate13([
      Property(new Date(1900, 0, 1))
    ], Schedule2.prototype, "minDate", void 0);
    __decorate13([
      Property(new Date(2099, 11, 31))
    ], Schedule2.prototype, "maxDate", void 0);
    __decorate13([
      Property()
    ], Schedule2.prototype, "dateFormat", void 0);
    __decorate13([
      Property("Gregorian")
    ], Schedule2.prototype, "calendarMode", void 0);
    __decorate13([
      Property(true)
    ], Schedule2.prototype, "showWeekend", void 0);
    __decorate13([
      Property(0)
    ], Schedule2.prototype, "firstDayOfWeek", void 0);
    __decorate13([
      Property("FirstDay")
    ], Schedule2.prototype, "weekRule", void 0);
    __decorate13([
      Property([1, 2, 3, 4, 5])
    ], Schedule2.prototype, "workDays", void 0);
    __decorate13([
      Property(12)
    ], Schedule2.prototype, "monthsCount", void 0);
    __decorate13([
      Property("00:00")
    ], Schedule2.prototype, "startHour", void 0);
    __decorate13([
      Property("24:00")
    ], Schedule2.prototype, "endHour", void 0);
    __decorate13([
      Property(null)
    ], Schedule2.prototype, "timeFormat", void 0);
    __decorate13([
      Property(true)
    ], Schedule2.prototype, "enableHtmlSanitizer", void 0);
    __decorate13([
      Property(false)
    ], Schedule2.prototype, "enableAllDayScroll", void 0);
    __decorate13([
      Property(false)
    ], Schedule2.prototype, "enableAdaptiveUI", void 0);
    __decorate13([
      Property(true)
    ], Schedule2.prototype, "allowResizing", void 0);
    __decorate13([
      Complex({}, WorkHours)
    ], Schedule2.prototype, "workHours", void 0);
    __decorate13([
      Complex({}, TimeScale)
    ], Schedule2.prototype, "timeScale", void 0);
    __decorate13([
      Property(true)
    ], Schedule2.prototype, "allowKeyboardInteraction", void 0);
    __decorate13([
      Property(true)
    ], Schedule2.prototype, "allowDragAndDrop", void 0);
    __decorate13([
      Property()
    ], Schedule2.prototype, "dateHeaderTemplate", void 0);
    __decorate13([
      Property()
    ], Schedule2.prototype, "dateRangeTemplate", void 0);
    __decorate13([
      Property()
    ], Schedule2.prototype, "cellHeaderTemplate", void 0);
    __decorate13([
      Property()
    ], Schedule2.prototype, "dayHeaderTemplate", void 0);
    __decorate13([
      Property()
    ], Schedule2.prototype, "monthHeaderTemplate", void 0);
    __decorate13([
      Property()
    ], Schedule2.prototype, "cellTemplate", void 0);
    __decorate13([
      Property(false)
    ], Schedule2.prototype, "readonly", void 0);
    __decorate13([
      Property(true)
    ], Schedule2.prototype, "showQuickInfo", void 0);
    __decorate13([
      Property(false)
    ], Schedule2.prototype, "allowInline", void 0);
    __decorate13([
      Property(true)
    ], Schedule2.prototype, "allowMultiCellSelection", void 0);
    __decorate13([
      Property(true)
    ], Schedule2.prototype, "allowMultiRowSelection", void 0);
    __decorate13([
      Property(false)
    ], Schedule2.prototype, "quickInfoOnSelectionEnd", void 0);
    __decorate13([
      Property(false)
    ], Schedule2.prototype, "showWeekNumber", void 0);
    __decorate13([
      Property(false)
    ], Schedule2.prototype, "rowAutoHeight", void 0);
    __decorate13([
      Property(false)
    ], Schedule2.prototype, "allowMultiDrag", void 0);
    __decorate13([
      Property(0)
    ], Schedule2.prototype, "firstMonthOfYear", void 0);
    __decorate13([
      Property()
    ], Schedule2.prototype, "editorTemplate", void 0);
    __decorate13([
      Property()
    ], Schedule2.prototype, "editorHeaderTemplate", void 0);
    __decorate13([
      Property()
    ], Schedule2.prototype, "editorFooterTemplate", void 0);
    __decorate13([
      Complex({}, QuickInfoTemplates)
    ], Schedule2.prototype, "quickInfoTemplates", void 0);
    __decorate13([
      Property(7)
    ], Schedule2.prototype, "agendaDaysCount", void 0);
    __decorate13([
      Property(true)
    ], Schedule2.prototype, "hideEmptyAgendaDays", void 0);
    __decorate13([
      Property(true)
    ], Schedule2.prototype, "enableRecurrenceValidation", void 0);
    __decorate13([
      Property()
    ], Schedule2.prototype, "timezone", void 0);
    __decorate13([
      Complex({}, EventSettings)
    ], Schedule2.prototype, "eventSettings", void 0);
    __decorate13([
      Property(timezoneData)
    ], Schedule2.prototype, "timezoneDataSource", void 0);
    __decorate13([
      Property()
    ], Schedule2.prototype, "resourceHeaderTemplate", void 0);
    __decorate13([
      Property()
    ], Schedule2.prototype, "headerIndentTemplate", void 0);
    __decorate13([
      Complex({}, Group)
    ], Schedule2.prototype, "group", void 0);
    __decorate13([
      Collection([], Resources)
    ], Schedule2.prototype, "resources", void 0);
    __decorate13([
      Collection([], HeaderRows)
    ], Schedule2.prototype, "headerRows", void 0);
    __decorate13([
      Property()
    ], Schedule2.prototype, "cssClass", void 0);
    __decorate13([
      Property()
    ], Schedule2.prototype, "eventDragArea", void 0);
    __decorate13([
      Event()
    ], Schedule2.prototype, "created", void 0);
    __decorate13([
      Event()
    ], Schedule2.prototype, "destroyed", void 0);
    __decorate13([
      Event()
    ], Schedule2.prototype, "cellClick", void 0);
    __decorate13([
      Event()
    ], Schedule2.prototype, "cellDoubleClick", void 0);
    __decorate13([
      Event()
    ], Schedule2.prototype, "moreEventsClick", void 0);
    __decorate13([
      Event()
    ], Schedule2.prototype, "hover", void 0);
    __decorate13([
      Event()
    ], Schedule2.prototype, "select", void 0);
    __decorate13([
      Event()
    ], Schedule2.prototype, "actionBegin", void 0);
    __decorate13([
      Event()
    ], Schedule2.prototype, "actionComplete", void 0);
    __decorate13([
      Event()
    ], Schedule2.prototype, "actionFailure", void 0);
    __decorate13([
      Event()
    ], Schedule2.prototype, "navigating", void 0);
    __decorate13([
      Event()
    ], Schedule2.prototype, "renderCell", void 0);
    __decorate13([
      Event()
    ], Schedule2.prototype, "eventClick", void 0);
    __decorate13([
      Event()
    ], Schedule2.prototype, "eventDoubleClick", void 0);
    __decorate13([
      Event()
    ], Schedule2.prototype, "eventRendered", void 0);
    __decorate13([
      Event()
    ], Schedule2.prototype, "dataBinding", void 0);
    __decorate13([
      Event()
    ], Schedule2.prototype, "popupOpen", void 0);
    __decorate13([
      Event()
    ], Schedule2.prototype, "popupClose", void 0);
    __decorate13([
      Event()
    ], Schedule2.prototype, "dragStart", void 0);
    __decorate13([
      Event()
    ], Schedule2.prototype, "drag", void 0);
    __decorate13([
      Event()
    ], Schedule2.prototype, "dragStop", void 0);
    __decorate13([
      Event()
    ], Schedule2.prototype, "resizeStart", void 0);
    __decorate13([
      Event()
    ], Schedule2.prototype, "resizing", void 0);
    __decorate13([
      Event()
    ], Schedule2.prototype, "resizeStop", void 0);
    __decorate13([
      Event()
    ], Schedule2.prototype, "virtualScrollStart", void 0);
    __decorate13([
      Event()
    ], Schedule2.prototype, "virtualScrollStop", void 0);
    __decorate13([
      Event()
    ], Schedule2.prototype, "dataBound", void 0);
    Schedule2 = __decorate13([
      NotifyPropertyChanges
    ], Schedule2);
    return Schedule2;
  }(Component2)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/actions/action-base.js
var ActionBase = (
  /** @class */
  function() {
    function ActionBase2(parent) {
      this.daysVariation = 0;
      this.parent = parent;
      this.actionObj = {
        X: 0,
        Y: 0,
        groupIndex: 0,
        cellWidth: 0,
        cellHeight: 0,
        slotInterval: 0,
        interval: 0,
        actionIndex: 0,
        cloneElement: [],
        originalElement: [],
        action: null,
        isAllDay: null,
        excludeSelectors: null,
        index: 0,
        navigationInterval: null,
        scrollInterval: null
      };
      this.scrollArgs = { element: null, width: 0, height: 0 };
      this.resizeEdges = { left: false, right: false, top: false, bottom: false };
      this.scrollEdges = { left: false, right: false, top: false, bottom: false };
    }
    ActionBase2.prototype.getChangedData = function(multiData) {
      var _this = this;
      var eventObj = extend({}, this.actionObj.event, null, true);
      eventObj[this.parent.eventFields.startTime] = this.actionObj.start;
      eventObj[this.parent.eventFields.endTime] = this.actionObj.end;
      if (!isNullOrUndefined(this.actionObj.isAllDay)) {
        eventObj[this.parent.eventFields.isAllDay] = this.actionObj.isAllDay;
      }
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        var originalElement = this.getOriginalElement(this.actionObj.element);
        if (originalElement) {
          var indexCol_1 = originalElement.map(function(element) {
            return parseInt(element.getAttribute("data-group-index"), 10);
          });
          if (indexCol_1.indexOf(this.actionObj.groupIndex) === -1 || !isNullOrUndefined(multiData) && multiData.length > 0) {
            var cloneIndex_1 = parseInt(this.actionObj.clone.getAttribute("data-group-index"), 10);
            indexCol_1 = indexCol_1.filter(function(index) {
              return index !== cloneIndex_1;
            });
            indexCol_1.push(this.actionObj.groupIndex);
            if (multiData && multiData.length > 0) {
              multiData.forEach(function(data) {
                _this.parent.resourceBase.getResourceData(data, _this.actionObj.groupIndex, indexCol_1);
              });
            } else {
              this.parent.resourceBase.getResourceData(eventObj, this.actionObj.groupIndex, indexCol_1);
            }
          }
        }
      }
      return eventObj;
    };
    ActionBase2.prototype.saveChangedData = function(eventArgs, isMultiSelect) {
      if (isMultiSelect === void 0) {
        isMultiSelect = false;
      }
      this.parent.activeEventData.event = this.actionObj.event;
      this.parent.currentAction = "Save";
      var currentAction;
      var eventsCollection = [eventArgs.data];
      if (isMultiSelect) {
        eventsCollection = eventArgs.selectedData;
      }
      for (var _i = 0, eventsCollection_1 = eventsCollection; _i < eventsCollection_1.length; _i++) {
        var eventObj = eventsCollection_1[_i];
        var isSameResource = this.parent.activeViewOptions.group.resources.length > 0 ? parseInt(this.actionObj.element.getAttribute("data-group-index"), 10) === this.actionObj.groupIndex : true;
        if (+eventObj[this.parent.eventFields.startTime] === +this.actionObj.event[this.parent.eventFields.startTime] && +eventObj[this.parent.eventFields.endTime] === +this.actionObj.event[this.parent.eventFields.endTime] && isSameResource) {
          this.parent.crudModule.crudObj.isCrudAction = false;
          return;
        }
        if (eventObj[this.parent.eventFields.recurrenceRule]) {
          var eveId = eventObj[this.parent.eventFields.recurrenceID] || eventObj[this.parent.eventFields.id];
          if (eventObj[this.parent.eventFields.id] === eventObj[this.parent.eventFields.recurrenceID]) {
            eventObj[this.parent.eventFields.id] = this.parent.eventBase.getEventMaxID();
            currentAction = "EditOccurrence";
          }
          if (this.parent.enableRecurrenceValidation && this.parent.eventWindow.editOccurrenceValidation(eveId, eventObj, this.actionObj.event)) {
            return;
          }
        } else {
          currentAction = null;
        }
        if (eventObj[this.parent.eventFields.startTimezone] || eventObj[this.parent.eventFields.endTimezone]) {
          this.parent.eventBase.timezoneConvert(eventObj);
        }
        this.parent.crudModule.saveEvent(eventObj, currentAction);
      }
    };
    ActionBase2.prototype.calculateIntervalTime = function(date) {
      var intervalTime = /* @__PURE__ */ new Date(+date);
      intervalTime.setMinutes(Math.floor(intervalTime.getMinutes() / this.actionObj.interval) * this.actionObj.interval);
      return intervalTime;
    };
    ActionBase2.prototype.getContentAreaDimension = function() {
      var viewElement = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
      var trElement = [].slice.call(viewElement.querySelector("tr").children);
      if (!this.parent.activeView.isTimelineView() && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.isAdaptive && !this.parent.enableAdaptiveUI && !this.parent.virtualScrollModule) {
        trElement = this.getResourceElements(trElement);
      }
      var leftOffset = trElement[0].getBoundingClientRect();
      var rightOffset = trElement.slice(-1)[0].getBoundingClientRect();
      var viewDimension = {
        bottom: viewElement.scrollHeight - 5,
        left: this.parent.enableRtl ? rightOffset.left : leftOffset.left,
        right: this.parent.enableRtl ? leftOffset.right : rightOffset.right,
        top: 0,
        leftOffset: this.parent.enableRtl ? rightOffset.right : leftOffset.right,
        rightOffset: this.parent.enableRtl ? leftOffset.left : rightOffset.left
      };
      return viewDimension;
    };
    ActionBase2.prototype.getIndex = function(index) {
      var contentElements = [].slice.call(this.parent.getContentTable().querySelector("tr").children);
      var indexes = { minIndex: 0, maxIndex: contentElements.length - 1 };
      if (this.actionObj.action === "resize" && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive && !this.parent.activeView.isTimelineView()) {
        var groupElements = this.getResourceElements(contentElements);
        indexes.minIndex = groupElements[0].cellIndex;
        indexes.maxIndex = groupElements.slice(-1)[0].cellIndex;
      }
      if (index < indexes.minIndex) {
        index = indexes.minIndex;
      }
      if (index > indexes.maxIndex) {
        index = indexes.maxIndex;
      }
      return index;
    };
    ActionBase2.prototype.updateTimePosition = function(date, multiData) {
      var index = 0;
      for (var _i = 0, _a = this.actionObj.cloneElement; _i < _a.length; _i++) {
        var cloneElement = _a[_i];
        var timeElement = cloneElement.querySelector("." + APPOINTMENT_TIME);
        if (timeElement) {
          var startTime = this.actionObj.start;
          var endTime = this.actionObj.end;
          if (multiData && multiData.length > 0) {
            startTime = multiData[parseInt(index.toString(), 10)][this.parent.eventFields.startTime];
            endTime = multiData[parseInt(index.toString(), 10)][this.parent.eventFields.endTime];
          }
          timeElement.innerHTML = this.parent.getTimeString(startTime) + " - " + this.parent.getTimeString(endTime);
        }
        index++;
      }
      if (!this.parent.activeViewOptions.timeScale.enable || !this.parent.isAdaptive || this.parent.currentView === "Month" || this.parent.currentView === "TimelineMonth") {
        return;
      }
      var timeIndicator = this.parent.element.querySelector("." + CLONE_TIME_INDICATOR_CLASS);
      if (!timeIndicator) {
        timeIndicator = createElement("div", { className: CLONE_TIME_INDICATOR_CLASS });
        var wrapperClass = this.parent.activeView.isTimelineView() ? DATE_HEADER_WRAP_CLASS : TIME_CELLS_WRAP_CLASS;
        this.parent.element.querySelector("." + wrapperClass).appendChild(timeIndicator);
      }
      timeIndicator.innerHTML = this.parent.getTimeString(date);
      var offsetValue = 0;
      if (this.parent.activeView.isTimelineView()) {
        if (this.parent.enableRtl) {
          var rightValue = parseInt(this.actionObj.clone.style.right, 10);
          offsetValue = this.actionObj.action === "drag" || this.resizeEdges.left ? rightValue + this.actionObj.clone.offsetWidth : rightValue;
          timeIndicator.style.right = formatUnit(offsetValue);
        } else {
          var leftValue = parseInt(this.actionObj.clone.style.left, 10);
          offsetValue = this.actionObj.action === "drag" || this.resizeEdges.left ? leftValue : leftValue + this.actionObj.clone.offsetWidth;
          timeIndicator.style.left = formatUnit(offsetValue);
        }
      } else {
        offsetValue = this.actionObj.action === "drag" || this.resizeEdges.top ? this.actionObj.clone.offsetTop : this.actionObj.clone.offsetTop + this.actionObj.clone.offsetHeight;
        timeIndicator.style.top = formatUnit(offsetValue);
      }
    };
    ActionBase2.prototype.getResourceElements = function(table) {
      var _this = this;
      return table.filter(function(element) {
        return parseInt(element.getAttribute("data-group-index"), 10) === _this.actionObj.groupIndex;
      });
    };
    ActionBase2.prototype.getOriginalElement = function(element) {
      var originalElement;
      var guid = element.getAttribute("data-guid");
      var isMorePopup = element.offsetParent && element.offsetParent.classList.contains(MORE_EVENT_POPUP_CLASS);
      if (isMorePopup || this.parent.activeView.isTimelineView() || this.actionObj.action !== "resize" && this.parent.virtualScrollModule) {
        originalElement = [].slice.call(this.parent.element.querySelectorAll('[data-guid="' + guid + '"]'));
      } else {
        var tr = closest(element, "tr");
        if (tr) {
          originalElement = [].slice.call(tr.querySelectorAll('[data-guid="' + guid + '"]'));
        }
      }
      return originalElement;
    };
    ActionBase2.prototype.createCloneElement = function(element) {
      var cloneWrapper = createElement("div", { innerHTML: element.outerHTML });
      var cloneElement = cloneWrapper.children[0];
      var cloneClassLists = [CLONE_ELEMENT_CLASS];
      cloneClassLists.push(this.actionObj.action === "drag" ? DRAG_CLONE_CLASS : RESIZE_CLONE_CLASS);
      if (this.parent.currentView === "Month" || this.parent.currentView === "TimelineMonth") {
        cloneClassLists.push(MONTH_CLONE_ELEMENT_CLASS);
      }
      addClass([cloneElement], cloneClassLists);
      addClass([element], EVENT_ACTION_CLASS);
      if (!isNullOrUndefined(element.parentElement)) {
        element.parentElement.appendChild(cloneElement);
      }
      cloneElement.style.width = formatUnit(cloneElement.offsetWidth - 2);
      var dragElement = document.querySelector(this.parent.eventDragArea);
      if (this.parent.eventDragArea && this.actionObj.action === "drag" && dragElement) {
        dragElement.appendChild(cloneElement);
      }
      setStyleAttribute(cloneElement, { border: "0px" });
      return cloneElement;
    };
    ActionBase2.prototype.removeCloneElementClasses = function() {
      var elements = this.actionObj.originalElement;
      if (this.parent.currentView === "Month" || this.parent.currentView === "TimelineYear" || this.parent.currentView === "Day" || this.parent.currentView === "Week" || this.parent.currentView === "WorkWeek") {
        elements = [].slice.call(this.parent.element.querySelectorAll("." + EVENT_ACTION_CLASS));
      }
      removeClass(elements, EVENT_ACTION_CLASS);
    };
    ActionBase2.prototype.removeCloneElement = function() {
      this.actionObj.originalElement = [];
      var dynamicEle = [].slice.call(this.parent.element.querySelectorAll(".e-dynamic-clone"));
      for (var _i = 0, dynamicEle_1 = dynamicEle; _i < dynamicEle_1.length; _i++) {
        var cloneEle = dynamicEle_1[_i];
        remove(cloneEle);
      }
      for (var _a = 0, _b = this.actionObj.cloneElement; _a < _b.length; _a++) {
        var cloneElement = _b[_a];
        if (!isNullOrUndefined(cloneElement.parentNode)) {
          remove(cloneElement);
        }
      }
      this.actionObj.cloneElement = [];
      var timeIndicator = this.parent.element.querySelector("." + CLONE_TIME_INDICATOR_CLASS);
      if (timeIndicator) {
        remove(timeIndicator);
      }
    };
    ActionBase2.prototype.getCursorElement = function(e) {
      var pages = this.parent.eventBase.getPageCoordinates(e);
      return document.elementFromPoint(pages.clientX, pages.clientY);
    };
    ActionBase2.prototype.autoScroll = function() {
      var parent = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
      var yIsScrollable = parent.offsetHeight <= parent.scrollHeight;
      var xIsScrollable = parent.offsetWidth <= parent.scrollWidth;
      var yInBounds = yIsScrollable && parent.scrollTop >= 0 && parent.scrollTop + parent.offsetHeight <= parent.scrollHeight;
      var xInBounds = xIsScrollable && parent.scrollLeft >= 0 && parent.scrollLeft + parent.offsetWidth <= parent.scrollWidth;
      if (this.actionObj.action === "resize" && this.scrollEdges.right && parent.scrollLeft + parent.offsetWidth > parent.scrollWidth) {
        var tdCollections = [].slice.call(this.parent.getContentTable().querySelector("tr").children).length - 1;
        var cellIndex = Math.ceil((this.actionObj.clone.offsetLeft + this.actionObj.clone.offsetWidth) / this.actionObj.cellWidth);
        xInBounds = cellIndex === tdCollections;
      }
      if (yInBounds && (this.scrollEdges.top || this.scrollEdges.bottom)) {
        parent.scrollTop += this.scrollEdges.top ? -this.actionObj.scroll.scrollBy : this.actionObj.scroll.scrollBy;
        if (this.actionObj.action === "resize") {
          if (parent.scrollHeight !== parent.offsetHeight + parent.scrollTop && parent.scrollTop > 0) {
            this.actionObj.Y += this.scrollEdges.top ? this.actionObj.scroll.scrollBy : -this.actionObj.scroll.scrollBy;
          }
        }
      }
      if (xInBounds && (this.scrollEdges.left || this.scrollEdges.right)) {
        parent.scrollLeft += this.scrollEdges.left ? -this.actionObj.scroll.scrollBy : this.actionObj.scroll.scrollBy;
        if (this.actionObj.action === "resize") {
          if (parent.scrollWidth !== parent.offsetWidth + parent.scrollLeft && parent.scrollLeft > 0) {
            this.actionObj.X += this.scrollEdges.left ? this.actionObj.scroll.scrollBy : -this.actionObj.scroll.scrollBy;
          }
        }
      }
    };
    ActionBase2.prototype.autoScrollValidation = function() {
      if (!this.actionObj.scroll.enable) {
        return false;
      }
      var res = this.parent.boundaryValidation(this.actionObj.pageY, this.actionObj.pageX);
      this.scrollEdges = res;
      return res.bottom || res.top || res.left || res.right;
    };
    ActionBase2.prototype.actionClass = function(type) {
      if (type === "addClass") {
        addClass([this.parent.element], EVENT_ACTION_CLASS);
      } else {
        removeClass([this.parent.element], EVENT_ACTION_CLASS);
      }
    };
    ActionBase2.prototype.updateScrollPosition = function(e) {
      var _this = this;
      this.scrollEventArgs = e;
      if (this.actionObj.scroll.enable && isNullOrUndefined(this.actionObj.scrollInterval)) {
        this.actionObj.scrollInterval = window.setInterval(function() {
          if (_this.autoScrollValidation() && !_this.actionObj.clone.classList.contains(ALLDAY_APPOINTMENT_CLASS)) {
            if (_this.parent.activeView.isTimelineView() && _this.parent.activeViewOptions.group.resources.length > 0 && _this.actionObj.groupIndex < 0) {
              return;
            }
            _this.autoScroll();
            if (_this.actionObj.action === "drag") {
              _this.parent.dragAndDropModule.updateDraggingDateTime(_this.scrollEventArgs);
            } else {
              _this.parent.resizeModule.updateResizingDirection(_this.scrollEventArgs);
            }
          }
        }, this.actionObj.scroll.timeDelay);
      }
    };
    ActionBase2.prototype.updateOriginalElement = function(cloneElement) {
      var query = '[data-id="' + cloneElement.getAttribute("data-id") + '"]';
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        query = query.concat('[data-group-index = "' + cloneElement.getAttribute("data-group-index") + '"]');
      }
      var elements = [].slice.call(this.parent.element.querySelectorAll(query));
      addClass(elements, EVENT_ACTION_CLASS);
      var eventWrappers = [].slice.call(this.parent.element.querySelectorAll("." + CLONE_ELEMENT_CLASS));
      removeClass(eventWrappers, EVENT_ACTION_CLASS);
    };
    ActionBase2.prototype.getUpdatedEvent = function(startTime, endTime, eventObj) {
      var event = JSON.parse(JSON.stringify(eventObj));
      event[this.parent.eventFields.startTime] = startTime;
      event[this.parent.eventFields.endTime] = endTime;
      return event;
    };
    ActionBase2.prototype.dynamicYearlyEventsRendering = function(event, isResize) {
      if (isResize === void 0) {
        isResize = false;
      }
      if (!isNullOrUndefined(this.parent.eventDragArea)) {
        return;
      }
      var appWidth = this.actionObj.cellWidth - 7;
      if (isResize && (this.resizeEdges.left || this.resizeEdges.right)) {
        appWidth = this.actionObj.cellWidth * event.count;
      }
      if (!isResize && (this.parent.activeViewOptions.orientation === "Horizontal" && this.parent.activeViewOptions.group.resources.length === 0)) {
        var eventObj = this.yearEvent.isSpannedEvent(event, event[this.parent.eventFields.startTime]);
        if (eventObj[this.parent.eventFields.startTime].getTime() === eventObj[this.parent.eventFields.endTime].getTime()) {
          eventObj.isSpanned.count = 1;
        }
        appWidth = eventObj.isSpanned.count * this.actionObj.cellWidth;
      }
      if (!isResize && this.parent.activeViewOptions.orientation === "Vertical" && this.parent.activeViewOptions.group.resources.length !== 0) {
        var eventObj = this.yearEvent.isSpannedEvent(event, event[this.parent.eventFields.startTime]);
        appWidth = eventObj.isSpanned.count * this.actionObj.cellWidth;
      }
      var appointmentElement = this.createAppointmentElement(this.actionObj.groupIndex, event[this.parent.eventFields.subject]);
      appointmentElement.setAttribute("drag", "true");
      addClass([appointmentElement], CLONE_ELEMENT_CLASS);
      setStyleAttribute(appointmentElement, {
        "width": appWidth + "px",
        "border": "0px",
        "pointer-events": "none",
        "position": "absolute",
        "overflow": "hidden",
        "padding": "3px"
      });
      if (this.actionObj.clone.style.backgroundColor !== "") {
        setStyleAttribute(appointmentElement, { "backgroundColor": this.actionObj.clone.style.backgroundColor });
      }
      var date = resetTime(event[this.parent.eventFields.startTime]).getTime();
      var query = "." + WORK_CELLS_CLASS + '[data-date="' + date + '"]';
      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        query = "." + WORK_CELLS_CLASS + '[data-date="' + date + '"][data-group-index="' + this.actionObj.groupIndex + '"]';
      }
      var cellTd = this.parent.element.querySelector(query);
      if (isNullOrUndefined(cellTd)) {
        return;
      }
      if (isResize) {
        var dateHeader = cellTd.querySelector("." + DATE_HEADER_CLASS);
        var appHeight = this.actionObj.cellHeight * event.count - (dateHeader ? dateHeader.offsetHeight : 0) - 7;
        if (this.resizeEdges.right || this.resizeEdges.left) {
          appHeight = parseInt(this.actionObj.clone.style.height, 10);
        }
        setStyleAttribute(appointmentElement, { "height": appHeight + "px" });
      }
      this.renderDynamicElement(cellTd, appointmentElement, true);
      this.actionObj.cloneElement.push(appointmentElement);
    };
    ActionBase2.prototype.renderDynamicElement = function(cellTd, element, isAppointment) {
      if (isAppointment === void 0) {
        isAppointment = false;
      }
      if (cellTd.querySelector("." + APPOINTMENT_WRAPPER_CLASS)) {
        cellTd.querySelector("." + APPOINTMENT_WRAPPER_CLASS).appendChild(element);
      } else {
        var wrapper = createElement("div", { className: APPOINTMENT_WRAPPER_CLASS });
        wrapper.appendChild(element);
        cellTd.appendChild(wrapper);
      }
    };
    ActionBase2.prototype.createAppointmentElement = function(resIndex, innerText) {
      var appointmentWrapper = createElement("div", {
        className: APPOINTMENT_CLASS,
        innerHTML: innerText
      });
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        appointmentWrapper.setAttribute("data-group-index", resIndex.toString());
      }
      return appointmentWrapper;
    };
    ActionBase2.prototype.dynamicEventsRendering = function(event) {
      var _this = this;
      if (!isNullOrUndefined(this.parent.eventDragArea)) {
        return;
      }
      var dateRender = this.parent.activeView.renderDates;
      var workCells = [].slice.call(this.parent.element.querySelectorAll("." + WORK_CELLS_CLASS));
      var workDays = this.parent.activeViewOptions.workDays;
      var groupOrder;
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        var renderedResource = this.parent.virtualScrollModule && this.parent.virtualScrollModule.isHorizontalScroll ? this.parent.resourceBase.renderedResources : this.parent.resourceBase.lastResourceLevel;
        var resources = renderedResource.filter(function(res) {
          return res.groupIndex === _this.actionObj.groupIndex;
        });
        dateRender = resources[0].renderDates;
        var elementSelector = "." + WORK_CELLS_CLASS + '[data-group-index="' + this.actionObj.groupIndex + '"]';
        workCells = [].slice.call(this.parent.element.querySelectorAll(elementSelector));
        workDays = resources[0].workDays;
        groupOrder = resources[0].groupOrder;
      }
      this.monthEvent.dateRender = dateRender;
      this.monthEvent.getSlotDates(workDays);
      if (this.resizeEdges.left || this.resizeEdges.right) {
        var eventWrappers = [].slice.call(this.parent.element.querySelectorAll("." + CLONE_ELEMENT_CLASS));
        for (var _i = 0, eventWrappers_1 = eventWrappers; _i < eventWrappers_1.length; _i++) {
          var wrapper = eventWrappers_1[_i];
          remove(wrapper);
        }
      }
      var spannedEvents = this.monthEvent.splitEvent(event, dateRender);
      for (var _a = 0, spannedEvents_1 = spannedEvents; _a < spannedEvents_1.length; _a++) {
        var event_1 = spannedEvents_1[_a];
        var day = this.parent.getIndexOfDate(dateRender, resetTime(event_1[this.monthEvent.fields.startTime]));
        var diffInDays = event_1.data.count;
        var appWidth = diffInDays * this.actionObj.cellWidth - 7;
        var appointmentElement = this.monthEvent.createAppointmentElement(event_1, this.actionObj.groupIndex, true);
        appointmentElement.setAttribute("drag", "true");
        addClass([appointmentElement], CLONE_ELEMENT_CLASS);
        this.monthEvent.applyResourceColor(appointmentElement, event_1, "backgroundColor", groupOrder);
        setStyleAttribute(appointmentElement, { "width": appWidth + "px", "border": "0px", "pointer-events": "none" });
        var cellTd = workCells[parseInt(day.toString(), 10)];
        if (cellTd) {
          this.monthEvent.renderElement(cellTd, appointmentElement, true);
          this.actionObj.cloneElement.push(appointmentElement);
        }
      }
    };
    ActionBase2.prototype.destroy = function() {
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
      this.actionObj = {};
      this.scrollArgs = {};
      this.resizeEdges = { left: false, right: false, top: false, bottom: false };
      this.scrollEdges = { left: false, right: false, top: false, bottom: false };
    };
    return ActionBase2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/actions/resize.js
var __extends16 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Resize = (
  /** @class */
  function(_super) {
    __extends16(Resize2, _super);
    function Resize2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    Resize2.prototype.wireResizeEvent = function(element) {
      var resizeElement = [].slice.call(element.querySelectorAll("." + EVENT_RESIZE_CLASS));
      for (var _i = 0, resizeElement_1 = resizeElement; _i < resizeElement_1.length; _i++) {
        var element_1 = resizeElement_1[_i];
        EventHandler.add(element_1, Browser.touchStartEvent, this.resizeStart, this);
      }
    };
    Resize2.prototype.resizeHelper = function() {
      if (this.parent.activeViewOptions.group.resources.length > 0 && this.parent.activeViewOptions.group.allowGroupEdit) {
        for (var i = 0, len = this.actionObj.originalElement.length; i < len; i++) {
          var cloneElement = this.createCloneElement(this.actionObj.originalElement[parseInt(i.toString(), 10)]);
          this.actionObj.cloneElement[parseInt(i.toString(), 10)] = cloneElement;
          if (this.actionObj.element === this.actionObj.originalElement[parseInt(i.toString(), 10)]) {
            this.actionObj.clone = cloneElement;
          }
        }
      } else {
        if (this.actionObj.element) {
          this.actionObj.clone = this.createCloneElement(this.actionObj.element);
        }
        this.actionObj.cloneElement = [this.actionObj.clone];
        this.actionObj.originalElement = [this.actionObj.element];
      }
    };
    Resize2.prototype.resizeStart = function(e) {
      var _this = this;
      if (e && e.type === "touchstart" && (!this.parent.uiStateValues.isTapHold || !closest(e.target, "." + APPOINTMENT_BORDER))) {
        return;
      }
      this.actionObj.action = "resize";
      this.actionObj.slotInterval = this.parent.activeViewOptions.timeScale.interval / this.parent.activeViewOptions.timeScale.slotCount;
      this.actionObj.interval = this.actionObj.slotInterval;
      var resizeTarget = closest(e.target, "." + EVENT_RESIZE_CLASS);
      this.actionObj.element = closest(resizeTarget, "." + APPOINTMENT_CLASS);
      this.actionObj.event = this.parent.eventBase.getEventByGuid(this.actionObj.element.getAttribute("data-guid"));
      var eventObj = extend({}, this.actionObj.event, null, true);
      var resizeArgs = {
        cancel: false,
        data: eventObj,
        element: this.actionObj.element,
        event: e,
        interval: this.actionObj.interval,
        scroll: { enable: true, scrollBy: 30, timeDelay: 100 }
      };
      this.parent.trigger(resizeStart, resizeArgs, function(resizeEventArgs) {
        if (resizeEventArgs.cancel) {
          return;
        }
        _this.actionClass("addClass");
        _this.parent.uiStateValues.action = true;
        _this.resizeEdges = {
          left: resizeTarget.classList.contains(LEFT_RESIZE_HANDLER),
          right: resizeTarget.classList.contains(RIGHT_RESIZE_HANDLER),
          top: resizeTarget.classList.contains(TOP_RESIZE_HANDLER),
          bottom: resizeTarget.classList.contains(BOTTOM_RESIZE_HANDLER)
        };
        _this.actionObj.groupIndex = _this.parent.uiStateValues.isGroupAdaptive ? _this.parent.uiStateValues.groupIndex : 0;
        var workCell = _this.parent.element.querySelector("." + WORK_CELLS_CLASS);
        _this.actionObj.cellWidth = _this.parent.getElementWidth(workCell);
        _this.actionObj.cellHeight = _this.parent.getElementHeight(workCell);
        var hRows = _this.parent.activeViewOptions.headerRows.map(function(row) {
          return row.option;
        });
        if (_this.parent.activeView.isTimelineView() && hRows.length > 0 && ["Date", "Hour"].indexOf(hRows.slice(-1)[0]) < 0) {
          var tr = _this.parent.getContentTable().querySelector("tr");
          var noOfDays = 0;
          var tdCollections = [].slice.call(tr.children);
          for (var _i = 0, tdCollections_1 = tdCollections; _i < tdCollections_1.length; _i++) {
            var td = tdCollections_1[_i];
            noOfDays += parseInt(td.getAttribute("colspan"), 10);
          }
          var trRect = tr.getBoundingClientRect();
          _this.actionObj.cellWidth = trRect.width / noOfDays;
          _this.actionObj.cellHeight = trRect.height;
        }
        var pages = _this.parent.eventBase.getPageCoordinates(e);
        _this.actionObj.X = pages.pageX;
        _this.actionObj.Y = pages.pageY;
        _this.actionObj.groupIndex = parseInt(_this.actionObj.element.getAttribute("data-group-index") || "0", 10);
        _this.actionObj.interval = resizeEventArgs.interval;
        _this.actionObj.scroll = resizeEventArgs.scroll;
        _this.actionObj.start = new Date(eventObj[_this.parent.eventFields.startTime].getTime());
        _this.actionObj.end = new Date(eventObj[_this.parent.eventFields.endTime].getTime());
        _this.actionObj.originalElement = _this.getOriginalElement(_this.actionObj.element);
        if (_this.parent.currentView === "Month") {
          _this.daysVariation = -1;
          _this.monthEvent = new MonthEvent(_this.parent);
        }
        var viewElement = _this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
        _this.scrollArgs = { element: viewElement, width: viewElement.scrollWidth, height: viewElement.scrollHeight };
        if (["Month", "TimelineYear"].indexOf(_this.parent.currentView) < 0) {
          var scrollWidth2 = Math.round(_this.scrollArgs.width / _this.actionObj.cellWidth) * _this.actionObj.cellWidth;
          _this.scrollArgs.width = _this.scrollArgs.width < scrollWidth2 ? scrollWidth2 : _this.scrollArgs.width;
        }
        EventHandler.add(document, Browser.touchMoveEvent, _this.resizing, _this);
        EventHandler.add(document, Browser.touchEndEvent, _this.resizeStop, _this);
      });
    };
    Resize2.prototype.resizing = function(e) {
      if (e && e.type === "touchmove") {
        e.preventDefault();
      }
      if (this.parent.quickPopup) {
        this.parent.quickPopup.quickPopupHide();
      }
      if (this.parent.element.querySelectorAll("." + RESIZE_CLONE_CLASS).length === 0) {
        this.resizeHelper();
      }
      if (!isNullOrUndefined(e.target) && e.target.classList.contains(DISABLE_DATES)) {
        return;
      }
      var pages = this.parent.eventBase.getPageCoordinates(e);
      if (this.parent.currentView === "Month" || this.parent.currentView === "TimelineYear") {
        var doc = document.documentElement;
        var left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
        var top_1 = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
        this.actionObj.pageX = pages.pageX - left;
        this.actionObj.pageY = pages.pageY - top_1;
      } else {
        this.actionObj.pageX = pages.pageX;
        this.actionObj.pageY = pages.pageY;
      }
      this.updateScrollPosition(e);
      this.updateResizingDirection(e);
      var eventObj = extend({}, this.actionObj.event, null, true);
      var resizeArgs = {
        cancel: false,
        data: eventObj,
        element: this.actionObj.element,
        event: e,
        startTime: this.actionObj.start,
        endTime: this.actionObj.end
      };
      if (this.parent.group.resources.length > 0) {
        resizeArgs.groupIndex = this.actionObj.groupIndex;
      }
      this.parent.trigger(resizing, resizeArgs);
    };
    Resize2.prototype.updateResizingDirection = function(e) {
      if (this.parent.currentView === "Month" || this.parent.currentView === "TimelineYear") {
        this.monthResizing();
        return;
      }
      var resizeValidation = this.resizeValidation(e);
      if (this.resizeEdges.left) {
        if (resizeValidation) {
          var leftStyles = this.getLeftRightStyles(e, true);
          if (parseInt(leftStyles.width, 10) < 1) {
            return;
          }
          for (var _i = 0, _a = this.actionObj.cloneElement; _i < _a.length; _i++) {
            var cloneElement = _a[_i];
            setStyleAttribute(cloneElement, leftStyles);
            addClass([cloneElement], LEFT_RESIZE_HANDLER);
          }
        }
        this.horizontalResizing(!this.parent.enableRtl);
      }
      if (this.resizeEdges.right) {
        if (resizeValidation) {
          var rightStyles = this.getLeftRightStyles(e, false);
          if (parseInt(rightStyles.width, 10) < 1) {
            return;
          }
          for (var _b = 0, _c = this.actionObj.cloneElement; _b < _c.length; _b++) {
            var cloneElement = _c[_b];
            setStyleAttribute(cloneElement, rightStyles);
            addClass([cloneElement], RIGHT_RESIZE_HANDLER);
          }
        }
        this.horizontalResizing(this.parent.enableRtl);
      }
      if (this.resizeEdges.top) {
        if (resizeValidation) {
          var topStyles = this.getTopBottomStyles(e, true);
          if (parseInt(topStyles.height, 10) < 1) {
            return;
          }
          for (var _d = 0, _e = this.actionObj.cloneElement; _d < _e.length; _d++) {
            var cloneElement = _e[_d];
            setStyleAttribute(cloneElement, topStyles);
            addClass([cloneElement], TOP_RESIZE_HANDLER);
          }
        }
        this.verticalResizing(true);
      }
      if (this.resizeEdges.bottom) {
        if (resizeValidation) {
          var bottomStyles = this.getTopBottomStyles(e, false);
          if (parseInt(bottomStyles.height, 10) < 1) {
            return;
          }
          for (var _f = 0, _g = this.actionObj.cloneElement; _f < _g.length; _f++) {
            var cloneElement = _g[_f];
            setStyleAttribute(cloneElement, bottomStyles);
            addClass([cloneElement], BOTTOM_RESIZE_HANDLER);
          }
        }
        this.verticalResizing(false);
      }
    };
    Resize2.prototype.monthResizing = function() {
      this.removeCloneElement();
      if (isNullOrUndefined(this.actionObj.pageX) || isNullOrUndefined(this.actionObj.pageY)) {
        return;
      }
      var td = document.elementFromPoint(this.actionObj.pageX, this.actionObj.pageY);
      if (isNullOrUndefined(td)) {
        return;
      }
      var resizeTime = this.parent.getDateFromElement(td);
      var isSameCell = this.parent.activeViewOptions.group.resources.length > 0 ? parseInt(td.getAttribute("data-group-index"), 10) === this.actionObj.groupIndex : true;
      var startTime = new Date(this.actionObj.event[this.parent.eventFields.startTime].getTime());
      var endTime = new Date(this.actionObj.event[this.parent.eventFields.endTime].getTime());
      if (!this.parent.enableRtl && this.resizeEdges.left || this.parent.enableRtl && this.resizeEdges.right || this.resizeEdges.top) {
        startTime = resizeTime;
      } else if (!this.parent.enableRtl && this.resizeEdges.right || this.parent.enableRtl && this.resizeEdges.left || this.resizeEdges.bottom) {
        endTime = addDays(resizeTime, 1);
      }
      if (isSameCell && startTime < endTime) {
        this.actionObj.start = startTime;
        this.actionObj.end = endTime;
        var event_1 = this.getUpdatedEvent(this.actionObj.start, this.actionObj.end, this.actionObj.event);
        if (this.parent.currentView === "TimelineYear") {
          this.yearEventsRendering(event_1);
        } else {
          this.dynamicEventsRendering(event_1);
        }
        this.updateOriginalElement(this.actionObj.clone);
      }
    };
    Resize2.prototype.yearEventsRendering = function(event) {
      var eventWrappers = [].slice.call(this.parent.element.querySelectorAll("." + CLONE_ELEMENT_CLASS));
      for (var _i = 0, eventWrappers_1 = eventWrappers; _i < eventWrappers_1.length; _i++) {
        var wrapper = eventWrappers_1[_i];
        remove(wrapper);
      }
      var endDate = new Date(event[this.parent.eventFields.endTime]);
      var monthDiff = 0;
      if (this.parent.activeViewOptions.group.resources.length === 0) {
        monthDiff = this.getMonthDiff(event[this.parent.eventFields.startTime], addDays(endDate, -1));
      }
      for (var i = 0; i <= monthDiff; i++) {
        var eventObj = void 0;
        if (this.parent.activeViewOptions.group.resources.length === 0) {
          eventObj = this.getEventCount(event, this.actionObj.start.getMonth() + i);
        } else {
          eventObj = extend({}, event, null, true);
          endDate = this.resizeEdges.left || this.resizeEdges.right ? addDays(endDate, -1) : endDate;
          eventObj.count = this.getMonthDiff(event[this.parent.eventFields.startTime], endDate) + 1;
        }
        this.dynamicYearlyEventsRendering(eventObj, true);
      }
    };
    Resize2.prototype.getMonthDiff = function(startDate, endDate) {
      var months;
      months = (endDate.getFullYear() - startDate.getFullYear()) * 12;
      months -= startDate.getMonth();
      months += endDate.getMonth();
      return months <= 0 ? 0 : months;
    };
    Resize2.prototype.getEventCount = function(eventObj, month) {
      var eventData = extend({}, eventObj, null, true);
      var eventStart = eventData[this.parent.eventFields.startTime];
      var eventEnd = eventData[this.parent.eventFields.endTime];
      var monthStart = new Date(this.parent.selectedDate.getFullYear(), month, 1);
      var monthEnd = addDays(new Date(this.parent.selectedDate.getFullYear(), month + 1, 0), 1);
      var count = 1;
      if (eventStart.getTime() < monthStart.getTime()) {
        eventData[this.parent.eventFields.startTime] = monthStart;
      }
      if (eventEnd.getTime() > monthEnd.getTime()) {
        eventData[this.parent.eventFields.endTime] = monthEnd;
      }
      if (this.parent.activeViewOptions.group.resources.length === 0) {
        count = Math.ceil((eventData[this.parent.eventFields.endTime].getTime() - eventData[this.parent.eventFields.startTime].getTime()) / MS_PER_DAY);
      }
      eventData.count = count;
      return eventData;
    };
    Resize2.prototype.resizeStop = function(e) {
      var _this = this;
      EventHandler.remove(document, Browser.touchMoveEvent, this.resizing);
      EventHandler.remove(document, Browser.touchEndEvent, this.resizeStop);
      clearInterval(this.actionObj.scrollInterval);
      this.actionObj.scrollInterval = null;
      this.removeCloneElementClasses();
      this.removeCloneElement();
      this.actionClass("removeClass");
      this.parent.uiStateValues.action = this.parent.uiStateValues.isTapHold = false;
      var resizeArgs = { cancel: false, data: this.getChangedData(), element: this.actionObj.element, event: e };
      this.parent.trigger(resizeStop, resizeArgs, function(resizeEventArgs) {
        if (resizeEventArgs.cancel) {
          return;
        }
        if (_this.parent.isSpecificResourceEvents()) {
          _this.parent.crudModule.crudObj.sourceEvent = [_this.parent.resourceBase.lastResourceLevel[parseInt(resizeEventArgs.element.getAttribute("data-group-index"), 10)]];
          _this.parent.crudModule.crudObj.targetEvent = _this.parent.crudModule.crudObj.sourceEvent;
          _this.parent.crudModule.crudObj.isCrudAction = true;
        }
        _this.saveChangedData(resizeEventArgs);
      });
    };
    Resize2.prototype.verticalResizing = function(isTop) {
      var offsetValue = this.actionObj.clone.offsetTop;
      if (!isTop) {
        offsetValue += this.actionObj.clone.offsetHeight;
      }
      var minutes = offsetValue / this.actionObj.cellHeight * this.actionObj.slotInterval;
      var element = this.actionObj.clone.offsetParent;
      if (isNullOrUndefined(element)) {
        return;
      }
      var resizeTime = resetTime(this.parent.getDateFromElement(element));
      resizeTime.setHours(this.parent.activeView.getStartHour().getHours());
      resizeTime.setMinutes(minutes + this.parent.activeView.getStartHour().getMinutes());
      if (isTop) {
        this.actionObj.start = this.calculateIntervalTime(resizeTime);
      } else {
        this.actionObj.end = this.calculateIntervalTime(resizeTime);
      }
      this.updateTimePosition(resizeTime);
    };
    Resize2.prototype.horizontalResizing = function(isLeft) {
      var eventStart = new Date(this.actionObj.event[this.parent.eventFields.startTime].getTime());
      var eventEnd = new Date(this.actionObj.event[this.parent.eventFields.endTime].getTime());
      var resizeTime;
      var isDateHeader = false;
      var headerName = this.parent.currentView;
      var isTimeViews = ["TimelineDay", "TimelineWeek", "TimelineWorkWeek"].indexOf(this.parent.currentView) > -1;
      var isTimelineMonth = this.parent.currentView === "TimelineMonth";
      var isWithoutScale = isTimelineMonth || isTimeViews && !this.parent.activeViewOptions.timeScale.enable;
      if (this.parent.activeView.isTimelineView()) {
        var tr = this.parent.getContentTable().querySelector("tr");
        if (this.parent.activeViewOptions.headerRows.length > 0) {
          var rows = this.parent.activeViewOptions.headerRows.map(function(row) {
            return row.option;
          });
          headerName = rows.slice(-1)[0];
          if (isTimelineMonth && headerName === "Hour") {
            headerName = rows.slice(-2)[0] || "Month";
          }
        }
        resizeTime = isLeft ? eventStart : eventEnd;
        var cellIndex = 0;
        var tdCollections = [].slice.call(tr.children);
        var isLastCell = false;
        var pixelsPerMinute = this.actionObj.cellWidth / (this.parent.activeViewOptions.timeScale.interval / this.parent.activeViewOptions.timeScale.slotCount);
        var offset = parseFloat(this.parent.enableRtl ? this.actionObj.clone.style.right : this.actionObj.clone.style.left);
        offset = Math.round(offset / pixelsPerMinute) * pixelsPerMinute;
        if (["Year", "Month", "Week", "Date"].indexOf(headerName) !== -1) {
          var noOfDays = 0;
          for (var _i = 0, tdCollections_2 = tdCollections; _i < tdCollections_2.length; _i++) {
            var td = tdCollections_2[_i];
            noOfDays += parseInt(td.getAttribute("colspan"), 10);
          }
          var offsetValue = this.parent.enableRtl ? parseInt(this.actionObj.clone.style.right, 10) : parseInt(this.actionObj.clone.style.left, 10);
          offsetValue = Math.round(offsetValue / this.actionObj.cellWidth) * this.actionObj.cellWidth;
          if (!isLeft) {
            offsetValue += this.parent.getElementWidth(this.actionObj.clone) - this.actionObj.cellWidth;
          }
          cellIndex = !isTimelineMonth ? Math.round(offsetValue / (this.parent.getElementWidth(tr) / noOfDays)) : Math.floor(offsetValue / Math.floor(this.parent.getElementWidth(tr) / noOfDays));
          isDateHeader = isTimeViews && headerName === "Date";
          cellIndex = isLeft ? cellIndex : isTimelineMonth ? cellIndex + 1 : cellIndex;
          isLastCell = cellIndex === tdCollections.length;
          cellIndex = cellIndex < 0 ? 0 : cellIndex >= noOfDays ? noOfDays - 1 : cellIndex;
        } else {
          var cellWidth = this.actionObj.cellWidth;
          cellIndex = isLeft ? Math.floor(offset / this.actionObj.cellWidth) : Math.ceil((offset + (this.parent.getElementWidth(this.actionObj.clone) - cellWidth)) / this.actionObj.cellWidth);
          if (this.parent.enableRtl) {
            var cellOffsetWidth = 0;
            if (headerName === "TimelineMonth" || !this.parent.activeViewOptions.timeScale.enable && !isTimelineMonth) {
              cellOffsetWidth = this.actionObj.cellWidth;
            }
            var offsetWidth = Math.floor(offset / this.actionObj.cellWidth) * this.actionObj.cellWidth + (isLeft ? 0 : this.parent.getElementWidth(this.actionObj.clone) - cellOffsetWidth);
            cellIndex = Math.floor(offsetWidth / this.actionObj.cellWidth);
          }
          isLastCell = cellIndex === tdCollections.length;
          cellIndex = this.getIndex(cellIndex);
        }
        var resizeDate = void 0;
        if (["Year", "Month", "Week", "Date"].indexOf(headerName) !== -1) {
          resizeDate = new Date(this.parent.activeView.renderDates[parseInt(cellIndex.toString(), 10)].getTime());
        } else {
          resizeDate = this.parent.getDateFromElement(tr.children[parseInt(cellIndex.toString(), 10)]);
        }
        if (["TimelineMonth", "Year", "Month", "Week", "Date"].indexOf(headerName) !== -1 || !this.parent.activeViewOptions.timeScale.enable) {
          resizeTime = new Date(resizeDate.setHours(resizeTime.getHours(), resizeTime.getMinutes(), resizeTime.getSeconds()));
        } else {
          if (!isLeft) {
            offset += this.parent.getElementWidth(this.actionObj.clone);
          }
          var spanMinutes = Math.ceil(this.actionObj.slotInterval / this.actionObj.cellWidth * (offset - Math.floor(offset / this.actionObj.cellWidth) * this.actionObj.cellWidth));
          spanMinutes = isLastCell || !isLeft && spanMinutes === 0 ? this.actionObj.slotInterval : spanMinutes;
          resizeTime = new Date(resizeDate.getTime());
          resizeTime.setMinutes(resizeTime.getMinutes() + spanMinutes);
          this.updateTimePosition(resizeTime);
        }
      } else {
        var cloneIndex = closest(this.actionObj.clone, "td").cellIndex;
        var originalWidth = Math.ceil((isLeft ? this.parent.getElementWidth(this.actionObj.element) : 0) / this.actionObj.cellWidth) * this.actionObj.cellWidth;
        var noOfDays = Math.ceil((this.parent.getElementWidth(this.actionObj.clone) - originalWidth) / this.actionObj.cellWidth);
        var tr = closest(this.actionObj.clone, "tr");
        var dayIndex2 = isLeft ? cloneIndex - noOfDays : cloneIndex + noOfDays - 1;
        dayIndex2 = this.getIndex(dayIndex2);
        resizeTime = this.parent.getDateFromElement(tr.children[parseInt(dayIndex2.toString(), 10)]);
        if (isLeft) {
          resizeTime.setHours(eventStart.getHours(), eventStart.getMinutes(), eventStart.getSeconds());
        } else {
          resizeTime.setHours(eventEnd.getHours(), eventEnd.getMinutes(), eventEnd.getSeconds());
        }
      }
      var isNotHourSlot = ["TimelineMonth", "Year", "Month", "Week", "Date"].indexOf(headerName) !== -1 || !this.parent.activeViewOptions.timeScale.enable;
      if (isLeft) {
        if (eventEnd.getTime() - resizeTime.getTime() <= 0) {
          resizeTime = isWithoutScale ? resetTime(eventEnd) : eventStart;
        }
        this.actionObj.start = !isNotHourSlot ? this.calculateIntervalTime(resizeTime) : resizeTime;
      } else {
        var isTimeScaleViews = isTimeViews && this.parent.activeViewOptions.timeScale.enable;
        var resizeEnd = (!isTimeScaleViews || isDateHeader || isTimeViews && ["Week", "Month", "Year"].indexOf(headerName) > -1) && resizeTime.getHours() === 0 && resizeTime.getMinutes() === 0 ? addDays(resizeTime, 1) : resizeTime;
        if (isWithoutScale && resizeEnd.getTime() - eventStart.getTime() <= 0) {
          resizeEnd = addDays(resetTime(eventStart), 1);
        }
        this.actionObj.end = !isNotHourSlot ? this.calculateIntervalTime(resizeEnd) : resizeEnd;
      }
    };
    Resize2.prototype.getTopBottomStyles = function(e, isTop) {
      var viewElement = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
      var slotInterval = this.actionObj.cellHeight / this.actionObj.slotInterval * this.actionObj.interval;
      var clnHeight = isTop ? this.actionObj.element.offsetHeight + (this.actionObj.Y - this.actionObj.pageY) : this.actionObj.element.offsetHeight + (this.actionObj.pageY - this.actionObj.Y);
      var clnTop = isTop ? this.actionObj.element.offsetTop - (this.actionObj.Y - this.actionObj.pageY) : this.actionObj.clone.offsetTop;
      clnHeight = clnTop < 0 ? this.actionObj.clone.offsetHeight : this.actionObj.clone.offsetTop + this.actionObj.clone.offsetHeight > this.scrollArgs.height ? this.actionObj.clone.offsetHeight : clnHeight;
      clnTop = clnTop < 0 ? 0 : clnTop;
      clnTop = isTop ? Math.floor(clnTop / slotInterval) * slotInterval : clnTop;
      clnHeight = clnTop + clnHeight >= viewElement.scrollHeight ? viewElement.scrollHeight - clnTop : Math.ceil(clnHeight / slotInterval) * slotInterval;
      if (!isTop && this.actionObj.clone.offsetTop + clnHeight >= this.parent.getContentTable().offsetHeight) {
        clnHeight = this.parent.getContentTable().offsetHeight - this.actionObj.clone.offsetTop;
      }
      var styles = {
        height: formatUnit(clnHeight < this.actionObj.cellHeight ? Math.floor(clnHeight / slotInterval) * slotInterval : clnHeight),
        top: formatUnit(clnHeight < this.actionObj.cellHeight && isTop ? Math.ceil(clnTop / slotInterval) * slotInterval : clnTop),
        left: "0px",
        right: "0px",
        width: "100%"
      };
      return styles;
    };
    Resize2.prototype.getLeftRightStyles = function(e, isLeft) {
      var styles = {};
      var isTimelineView = this.parent.activeView.isTimelineView();
      var isTimeViews = ["TimelineDay", "TimelineWeek", "TimelineWorkWeek"].indexOf(this.parent.currentView) > -1 && this.parent.activeViewOptions.timeScale.enable;
      var slotInterval = this.actionObj.cellWidth / this.actionObj.slotInterval * this.actionObj.interval;
      var pageWidth = isLeft ? this.actionObj.X - this.actionObj.pageX : this.actionObj.pageX - this.actionObj.X;
      var targetWidth = isTimelineView ? this.parent.getElementWidth(this.actionObj.element) / this.actionObj.cellWidth * this.actionObj.cellWidth : this.parent.currentView === "Month" ? this.parent.getElementWidth(this.actionObj.element) : Math.ceil(this.parent.getElementWidth(this.actionObj.element) / this.actionObj.cellWidth) * this.actionObj.cellWidth;
      var offsetWidth = targetWidth + Math.ceil(pageWidth / this.actionObj.cellWidth) * this.actionObj.cellWidth;
      var left = this.parent.enableRtl ? parseInt(this.actionObj.element.style.right, 10) : this.actionObj.clone.offsetLeft;
      if (isTimeViews) {
        offsetWidth = targetWidth + Math.ceil(pageWidth / slotInterval) * slotInterval;
        if (!isLeft) {
          var roundedLeft = (+parseFloat(this.actionObj.element.style[this.parent.enableRtl ? "right" : "left"])).toFixed(1);
          var roundedWidth = Math.round(targetWidth / slotInterval) * slotInterval;
          if (roundedLeft !== left.toFixed(1) || roundedWidth !== targetWidth) {
            offsetWidth = Math.round((left + offsetWidth) / slotInterval) * slotInterval - left;
          }
        }
        this.actionObj.event[this.parent.eventFields.isAllDay] = false;
      }
      var width = !isLeft && offsetWidth + this.actionObj.clone.offsetLeft > this.scrollArgs.width ? this.parent.getElementWidth(this.actionObj.clone) : offsetWidth < this.actionObj.cellWidth ? offsetWidth : offsetWidth;
      if (this.parent.enableRtl) {
        var rightValue = isTimelineView ? parseInt(this.actionObj.element.style.right, 10) : -(offsetWidth - this.actionObj.cellWidth);
        rightValue = isTimelineView ? rightValue : isLeft ? 0 : rightValue > 0 ? 0 : rightValue;
        if (isTimelineView && !isLeft) {
          rightValue = rightValue - Math.ceil((this.actionObj.pageX - this.actionObj.X) / slotInterval) * slotInterval;
          if (rightValue < 0) {
            rightValue = parseInt(this.actionObj.clone.style.right, 10);
            width = parseInt(this.actionObj.clone.style.width, 10);
          }
        }
        rightValue = rightValue >= this.scrollArgs.width ? this.scrollArgs.width - this.actionObj.cellWidth : rightValue;
        styles.right = formatUnit(rightValue);
        width = width + rightValue > this.scrollArgs.width ? this.parent.getElementWidth(this.actionObj.clone) : width;
      } else {
        var offsetLeft = isLeft ? this.actionObj.element.offsetLeft - (this.actionObj.X - this.actionObj.pageX) : this.parent.enableRtl ? this.actionObj.element.offsetLeft : 0;
        if (isTimelineView) {
          offsetLeft = isLeft ? offsetLeft : parseInt(this.actionObj.clone.style.left, 10);
          if (this.parent.enableRtl) {
            offsetLeft = !isLeft ? this.actionObj.pageX < this.actionObj.X - this.parent.getElementWidth(this.actionObj.clone) ? parseInt(this.actionObj.clone.style.right, 10) : offsetLeft : offsetLeft;
          } else {
            offsetLeft = isLeft ? this.actionObj.pageX > this.actionObj.X + this.parent.getElementWidth(this.actionObj.clone) && this.parent.getElementWidth(this.actionObj.clone) === this.actionObj.cellWidth ? parseInt(this.actionObj.clone.style.left, 10) : offsetLeft : offsetLeft;
          }
        }
        var leftValue = offsetLeft;
        offsetLeft = isTimelineView ? isTimeViews ? isLeft ? this.actionObj.element.offsetLeft - Math.ceil((this.actionObj.element.offsetLeft - offsetLeft) / slotInterval) * slotInterval : offsetLeft : Math.floor(offsetLeft / this.actionObj.cellWidth) * this.actionObj.cellWidth : Math.ceil(Math.abs(offsetLeft) / this.actionObj.cellWidth) * this.actionObj.cellWidth;
        if (offsetLeft < 0) {
          if (isTimelineView && isLeft && offsetLeft % slotInterval) {
            offsetLeft = parseInt(this.actionObj.clone.style.left, 10);
            width = parseInt(this.actionObj.clone.style.width, 10);
          } else {
            offsetLeft = 0;
            width = this.parent.getElementWidth(this.actionObj.clone);
          }
        }
        var cloneWidth = Math.ceil(this.parent.getElementWidth(this.actionObj.clone) / this.actionObj.cellWidth) * this.actionObj.cellWidth;
        if (isLeft) {
          styles.left = formatUnit(isTimelineView ? offsetLeft : isLeft ? leftValue < 0 ? -offsetLeft : Math.ceil((targetWidth - cloneWidth) / this.actionObj.cellWidth) * this.actionObj.cellWidth : offsetLeft);
        }
      }
      styles.width = formatUnit(width);
      return styles;
    };
    Resize2.prototype.resizeValidation = function(e) {
      var pages = this.parent.eventBase.getPageCoordinates(e);
      var viewDimension = this.getContentAreaDimension();
      var isTimeScale = this.parent.activeView.isTimelineView() && this.parent.activeViewOptions.timeScale.enable;
      var cellWidth = this.actionObj.cellWidth;
      var resizeValidation = false;
      if (this.resizeEdges.left) {
        if (pages.pageX < viewDimension.leftOffset && pages.pageX >= viewDimension.left && isTimeScale) {
          cellWidth = 0;
        }
        resizeValidation = pages.pageX - cellWidth >= viewDimension.left;
      }
      if (this.resizeEdges.right) {
        if (pages.pageX > viewDimension.rightOffset && pages.pageX <= viewDimension.right && isTimeScale) {
          cellWidth = 0;
        }
        resizeValidation = pages.pageX + cellWidth <= viewDimension.right;
      }
      if (this.resizeEdges.top) {
        resizeValidation = this.actionObj.clone.offsetTop >= viewDimension.top;
      }
      if (this.resizeEdges.bottom) {
        resizeValidation = this.actionObj.clone.offsetTop + this.actionObj.clone.offsetHeight <= this.scrollArgs.height;
      }
      return resizeValidation;
    };
    Resize2.prototype.getModuleName = function() {
      return "resize";
    };
    return Resize2;
  }(ActionBase)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/event-renderer/year.js
var __extends17 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var EVENT_GAP3 = 2;
var YearEvent = (
  /** @class */
  function(_super) {
    __extends17(YearEvent2, _super);
    function YearEvent2(parent) {
      var _this = _super.call(this, parent, "day") || this;
      _this.isResource = false;
      return _this;
    }
    YearEvent2.prototype.renderAppointments = function() {
      if (this.parent.dragAndDropModule) {
        this.parent.dragAndDropModule.setDragArea();
      }
      this.fields = this.parent.eventFields;
      var elementSelector = this.parent.currentView === "Year" ? "." + APPOINTMENT_CLASS : "." + APPOINTMENT_WRAPPER_CLASS + ",." + MORE_INDICATOR_CLASS;
      var eventWrappers = [].slice.call(this.parent.element.querySelectorAll(elementSelector));
      for (var _i = 0, eventWrappers_1 = eventWrappers; _i < eventWrappers_1.length; _i++) {
        var wrapper = eventWrappers_1[_i];
        remove(wrapper);
      }
      this.renderedEvents = [];
      if (this.parent.currentView === "Year") {
        this.yearViewEvents();
      } else {
        this.removeCellHeight();
        if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
          this.isResource = true;
          this.timelineResourceEvents();
        } else {
          this.timelineYearViewEvents();
        }
      }
      this.parent.renderTemplates();
      this.parent.notify(contentReady, {});
    };
    YearEvent2.prototype.yearViewEvents = function() {
      var months = this.getMonths();
      for (var _i = 0, months_1 = months; _i < months_1.length; _i++) {
        var month = months_1[_i];
        var queryString = ".e-month-calendar:nth-child(" + (months.indexOf(month) + 1) + ") td.e-work-cells";
        var workCells = [].slice.call(this.parent.element.querySelectorAll(queryString));
        var monthDate = new Date(this.parent.selectedDate.getFullYear(), month, 1);
        var monthStart = this.parent.calendarUtil.getMonthStartDate(new Date(monthDate.getTime()));
        var monthEnd = this.parent.calendarUtil.getMonthEndDate(new Date(monthDate.getTime()));
        var startDate = getWeekFirstDate(monthStart, this.parent.firstDayOfWeek);
        var endDate = addDays(getWeekLastDate(monthEnd, this.parent.firstDayOfWeek), 1);
        for (var index = 0; startDate.getTime() < endDate.getTime(); index++) {
          var start = resetTime(new Date(startDate.getTime()));
          var end = addDays(new Date(start.getTime()), 1);
          startDate = addDays(new Date(startDate.getTime()), 1);
          if (!this.parent.isMinMaxDate(start)) {
            continue;
          }
          var filterEvents = this.parent.eventBase.filterEvents(start, end);
          if (filterEvents.length > 0) {
            var workCell = workCells[parseInt(index.toString(), 10)];
            if (workCell) {
              workCell.appendChild(createElement("div", { className: APPOINTMENT_CLASS }));
            }
          }
        }
      }
    };
    YearEvent2.prototype.timelineYearViewEvents = function() {
      var _this = this;
      var workCell = this.parent.element.querySelector("." + WORK_CELLS_CLASS + ":not(." + OTHERMONTH_CLASS + ")");
      this.cellWidth = this.parent.getElementWidth(workCell);
      this.cellHeader = getOuterHeight(workCell.querySelector("." + DATE_HEADER_CLASS));
      var eventTable = this.parent.element.querySelector("." + EVENT_TABLE_CLASS);
      this.eventHeight = this.parent.getElementHeightFromClass(eventTable, APPOINTMENT_CLASS);
      var selector = "." + MONTH_HEADER_WRAPPER + " tbody tr,." + RESOURCE_COLUMN_TABLE_CLASS + " tbody tr,." + CONTENT_TABLE_CLASS + " tbody tr";
      this.addCellHeight(selector, this.eventHeight, EVENT_GAP3, this.cellHeader, this.moreIndicatorHeight);
      var wrapperCollection = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_CONTAINER_CLASS));
      var months = this.getMonths();
      var groupIndex = this.parent.activeViewOptions.group.resources.length > 0 && this.parent.uiStateValues.isGroupAdaptive ? this.parent.uiStateValues.groupIndex : void 0;
      for (var row = 0; row < months.length; row++) {
        var wrapper = wrapperCollection[parseInt(row.toString(), 10)];
        var td = row + 1;
        var eventWrapper = createElement("div", { className: APPOINTMENT_WRAPPER_CLASS });
        wrapper.appendChild(eventWrapper);
        var monthStart = new Date(this.parent.selectedDate.getFullYear(), months[parseInt(row.toString(), 10)], 1);
        var monthEnd = new Date(monthStart.getFullYear(), monthStart.getMonth() + 1, 0);
        var dayIndex2 = monthStart.getDay();
        var isSpannedCollection = [];
        if (this.parent.activeViewOptions.orientation === "Horizontal") {
          this.renderedEvents = [];
        }
        while (monthStart.getTime() <= monthEnd.getTime()) {
          var leftValue = void 0;
          var rightValue = void 0;
          if (this.parent.activeViewOptions.orientation === "Vertical") {
            var wrapper_1 = wrapperCollection[parseInt(dayIndex2.toString(), 10)];
            td = dayIndex2 + 1;
            eventWrapper = wrapper_1.querySelector("." + APPOINTMENT_WRAPPER_CLASS);
            if (!eventWrapper) {
              eventWrapper = createElement("div", { className: APPOINTMENT_WRAPPER_CLASS });
              wrapper_1.appendChild(eventWrapper);
            }
            if (this.parent.enableRtl) {
              rightValue = row * this.cellWidth;
            } else {
              leftValue = row * this.cellWidth;
            }
          } else {
            if (this.parent.enableRtl) {
              rightValue = (dayIndex2 + monthStart.getDate() - 1) * this.cellWidth;
            } else {
              leftValue = (dayIndex2 + monthStart.getDate() - 1) * this.cellWidth;
            }
          }
          var rowTd = this.parent.element.querySelector(".e-content-wrap tr:nth-child(" + td + ") td");
          this.cellHeight = rowTd.offsetHeight;
          var dayStart = resetTime(new Date(monthStart.getTime()));
          var dayEnd = addDays(new Date(dayStart.getTime()), 1);
          var resource = void 0;
          if (this.parent.uiStateValues.isGroupAdaptive) {
            resource = this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex];
          }
          var dayEvents = this.parent.eventBase.filterEvents(dayStart, dayEnd, void 0, resource);
          dayEvents = this.parent.eventBase.sortByDateTime(dayEvents);
          var _loop_1 = function(index2, count2) {
            var eventData = extend({}, dayEvents[parseInt(index2.toString(), 10)], null, true);
            this_1.updateSpannedEvents(eventData, dayStart, dayEnd);
            var overlapIndex = this_1.getIndex(dayStart);
            eventData.Index = overlapIndex;
            var availedHeight = this_1.cellHeader + this_1.eventHeight * (overlapIndex + 1) + EVENT_GAP3 + this_1.moreIndicatorHeight;
            var appArea = this_1.cellHeight - this_1.cellHeader - this_1.moreIndicatorHeight;
            var renderedAppCount = Math.floor(appArea / (this_1.eventHeight + EVENT_GAP3));
            var eventsPerRow = this_1.parent.rowAutoHeight ? 1 : this_1.parent.activeViewOptions.maxEventsPerRow;
            var moreIndicatorCount = this_1.parent.activeViewOptions.maxEventsPerRow ? count2 - eventsPerRow : count2 - renderedAppCount <= 0 ? 1 : count2 - renderedAppCount;
            if (this_1.parent.activeViewOptions.orientation === "Horizontal") {
              var isRendered = this_1.renderedEvents.filter(function(eventObj) {
                return eventObj.Guid === eventData.Guid;
              });
              var isSpanned = isSpannedCollection.filter(function(eventObj) {
                return eventObj.Guid === eventData.Guid;
              });
              if (isRendered.length > 0 && isRendered[0].MoreIndicator || isSpanned.length > 0 && isSpanned[0].MoreIndicator) {
                var moreIndex = this_1.parent.activeViewOptions.orientation === "Horizontal" ? row : dayIndex2;
                this_1.renderMoreIndicator(eventWrapper, moreIndicatorCount, dayStart, moreIndex, leftValue, rightValue, groupIndex);
                return "continue";
              } else if (isRendered.length > 0 || isSpanned.length > 0) {
                return "continue";
              }
            }
            var enableAppRender = this_1.maxOrIndicator || overlapIndex < eventsPerRow || this_1.cellHeight > availedHeight;
            if (this_1.parent.rowAutoHeight || enableAppRender || this_1.cellHeight > availedHeight) {
              this_1.renderEvent(eventWrapper, eventData, row, leftValue, rightValue, monthStart, dayIndex2);
              if (this_1.parent.rowAutoHeight || this_1.cellHeight > availedHeight) {
                this_1.updateCellHeight(rowTd, availedHeight);
              }
              isSpannedCollection.push(eventData);
            } else {
              var moreIndex = this_1.parent.activeViewOptions.orientation === "Horizontal" ? row : dayIndex2;
              this_1.renderMoreIndicator(eventWrapper, moreIndicatorCount, dayStart, moreIndex, leftValue, rightValue, groupIndex);
              if (this_1.parent.activeViewOptions.orientation === "Horizontal") {
                eventData.MoreIndicator = true;
                this_1.renderedEvents.push(eventData);
                isSpannedCollection.push(eventData);
              }
            }
          };
          var this_1 = this;
          for (var index = 0, count = dayEvents.length; index < count; index++) {
            _loop_1(index, count);
          }
          monthStart = addDays(new Date(monthStart.getTime()), 1);
          if (this.parent.activeViewOptions.orientation === "Vertical") {
            dayIndex2++;
            this.renderedEvents = [];
          }
        }
      }
      if (this.parent.rowAutoHeight && this.parent.activeViewOptions.orientation === "Vertical") {
        var appContainer = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_CONTAINER_CLASS));
        var tr_1 = [].slice.call(this.parent.element.querySelectorAll("." + CONTENT_TABLE_CLASS + " tbody tr"));
        appContainer.forEach(function(ele, index2) {
          var app = [].slice.call(ele.querySelectorAll("." + APPOINTMENT_CLASS));
          var appTop = tr_1[parseInt(index2.toString(), 10)].offsetTop + _this.cellHeader + EVENT_GAP3;
          app.forEach(function(app2) {
            var overlap = parseInt(app2.getAttribute("data-index"), 10);
            app2.style.top = appTop + overlap * _this.eventHeight + "px";
            app2.removeAttribute("data-index");
          });
        });
      }
    };
    YearEvent2.prototype.updateSpannedEvents = function(eventObj, dayStart, dayEnd) {
      var isLeftRightResize = this.isResource && this.parent.activeViewOptions.orientation === "Vertical" || !this.isResource && this.parent.activeViewOptions.orientation === "Horizontal";
      var data = { isLeft: true, isRight: true, isBottom: true, isTop: true };
      if (dayStart.getTime() <= eventObj[this.fields.startTime].getTime()) {
        if (isLeftRightResize) {
          data.isLeft = false;
        } else {
          data.isTop = false;
        }
      }
      if (dayEnd.getTime() >= eventObj[this.fields.endTime].getTime() || isLeftRightResize && !this.isResource && addDays(dayEnd, -1).getMonth() === eventObj[this.fields.endTime].getMonth() || isLeftRightResize && this.isResource && dayEnd.getTime() <= eventObj[this.fields.endTime].getTime()) {
        if (isLeftRightResize) {
          data.isRight = false;
        } else {
          data.isBottom = false;
        }
      }
      eventObj.data = data;
    };
    YearEvent2.prototype.timelineResourceEvents = function() {
      var _this = this;
      var contentTable = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
      var isVerticalScrollbarAvail = contentTable.offsetWidth > contentTable.clientWidth;
      var workCell = this.parent.element.querySelector("." + WORK_CELLS_CLASS);
      this.cellWidth = this.parent.getElementWidth(workCell);
      this.cellHeader = 0;
      var eventTable = this.parent.element.querySelector("." + EVENT_TABLE_CLASS);
      this.eventHeight = this.parent.getElementHeightFromClass(eventTable, APPOINTMENT_CLASS);
      var selector = "." + MONTH_HEADER_WRAPPER + " tbody tr,." + RESOURCE_COLUMN_TABLE_CLASS + " tbody tr,." + CONTENT_TABLE_CLASS + " tbody tr";
      this.addCellHeight(selector, this.eventHeight, EVENT_GAP3, this.cellHeader, this.moreIndicatorHeight);
      var wrapperCollection = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_CONTAINER_CLASS));
      var resources = this.parent.uiStateValues.isGroupAdaptive ? [this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex]] : this.parent.activeViewOptions.allowVirtualScrolling ? this.parent.resourceBase.renderedResources : this.parent.resourceBase.lastResourceLevel;
      var months = this.getMonths();
      if (this.parent.activeViewOptions.orientation === "Horizontal") {
        for (var month = 0; month < months.length; month++) {
          var monthStart = new Date(this.parent.selectedDate.getFullYear(), months[parseInt(month.toString(), 10)], 1);
          for (var i = 0, len = resources.length; i < len; i++) {
            this.renderedEvents = [];
            this.renderResourceEvent(wrapperCollection[parseInt(month.toString(), 10)], resources[parseInt(i.toString(), 10)], month, i, monthStart);
          }
        }
      } else {
        for (var i = 0, len = resources.length; i < len; i++) {
          this.renderedEvents = [];
          for (var month = 0; month < months.length; month++) {
            var monthStart = new Date(this.parent.selectedDate.getFullYear(), months[parseInt(month.toString(), 10)], 1);
            this.renderResourceEvent(wrapperCollection[parseInt(i.toString(), 10)], resources[parseInt(i.toString(), 10)], month, i, monthStart);
          }
        }
      }
      if (this.parent.rowAutoHeight && !isVerticalScrollbarAvail && contentTable.offsetWidth > contentTable.clientWidth) {
        var appointments = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_CLASS));
        appointments.forEach(function(ele) {
          ele.style.removeProperty("left");
          ele.style.removeProperty("right");
        });
        var appContainer = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_CONTAINER_CLASS));
        var conTable_1 = this.parent.element.querySelector("." + CONTENT_TABLE_CLASS);
        var tr_2 = [].slice.call(conTable_1.querySelectorAll("tbody tr"));
        appContainer.forEach(function(ele, index) {
          var appWrapper = [].slice.call(ele.children);
          var row = tr_2[parseInt(index.toString(), 10)];
          appWrapper.forEach(function(appWrap, cellIndex) {
            var td = row.querySelector("td:nth-child(" + (cellIndex + 1) + ")");
            var app = [].slice.call(appWrap.children);
            var width = _this.parent.getElementWidth(td);
            var left = td.offsetLeft;
            if (_this.parent.enableRtl) {
              var right_1 = conTable_1.offsetWidth - left - td.offsetWidth;
              app.forEach(function(app2) {
                app2.style.width = Math.floor(parseInt(app2.style.width, 10) / width) * width + "px";
                app2.style.right = right_1 + "px";
              });
            } else {
              app.forEach(function(app2) {
                app2.style.width = Math.floor(parseInt(app2.style.width, 10) / width) * width + "px";
                app2.style.left = left + "px";
              });
            }
          });
        });
      }
    };
    YearEvent2.prototype.renderResourceEvent = function(wrapper, resource, month, index, monthStart) {
      var eventWrapper = createElement("div", { className: APPOINTMENT_WRAPPER_CLASS });
      wrapper.appendChild(eventWrapper);
      var monthEnd = addDays(lastDateOfMonth(new Date(monthStart.getTime())), 1);
      var eventDatas = this.parent.eventBase.filterEvents(monthStart, monthEnd, void 0, resource);
      var rowIndex = this.parent.activeViewOptions.orientation === "Vertical" ? index : month;
      var td = this.parent.element.querySelector(".e-content-wrap tr:nth-child(" + (rowIndex + 1) + ") td");
      this.cellHeight = td.offsetHeight;
      this.groupOrder = resource.groupOrder;
      var isSpannedCollection = [];
      var _loop_2 = function(a2) {
        var data = eventDatas[parseInt(a2.toString(), 10)];
        var overlapIndex = void 0;
        var eventData = extend({}, data, null, true);
        if (this_2.parent.activeViewOptions.group.resources.length > 0) {
          var eventObj = this_2.isSpannedEvent(eventData, monthStart);
          overlapIndex = this_2.getIndex(eventObj[this_2.fields.startTime]);
          eventData.Index = overlapIndex;
        } else {
          overlapIndex = this_2.getIndex(eventData[this_2.fields.startTime]);
          eventData.Index = overlapIndex;
        }
        var availedHeight = this_2.cellHeader + this_2.eventHeight * (a2 + 1) + EVENT_GAP3 + this_2.moreIndicatorHeight;
        var leftValue = this_2.parent.activeViewOptions.orientation === "Vertical" ? month * this_2.cellWidth : index * this_2.cellWidth;
        if (!this_2.parent.isMinMaxDate(eventData[this_2.fields.startTime])) {
          return { value: void 0 };
        }
        if (this_2.parent.activeViewOptions.orientation === "Vertical" && this_2.parent.activeViewOptions.group.resources.length > 0) {
          var isRendered = this_2.renderedEvents.filter(function(eventObj2) {
            return eventObj2.Guid === eventData.Guid;
          });
          var isSpanned = isSpannedCollection.filter(function(eventObj2) {
            return eventObj2.Guid === eventData.Guid;
          });
          if (isRendered.length > 0 || isSpanned.length > 0) {
            return "continue";
          }
        }
        if (this_2.parent.rowAutoHeight || this_2.cellHeight > availedHeight) {
          this_2.renderEvent(eventWrapper, eventData, month, leftValue, leftValue, monthStart, index);
          this_2.updateCellHeight(td, availedHeight);
          isSpannedCollection.push(eventData);
        } else {
          var moreIndex = this_2.parent.activeViewOptions.orientation === "Horizontal" ? month : index;
          this_2.renderMoreIndicator(eventWrapper, eventDatas.length - a2, monthStart, moreIndex, leftValue, leftValue, index);
          if (this_2.parent.activeViewOptions.orientation === "Horizontal") {
            for (var i = index; i < eventDatas.length; i++) {
              this_2.renderedEvents.push(extend({}, eventDatas[parseInt(i.toString(), 10)], { Index: overlapIndex + i }, true));
            }
          }
          return "break";
        }
      };
      var this_2 = this;
      for (var a = 0; a < eventDatas.length; a++) {
        var state_1 = _loop_2(a);
        if (typeof state_1 === "object")
          return state_1.value;
        if (state_1 === "break")
          break;
      }
    };
    YearEvent2.prototype.renderEvent = function(wrapper, eventData, row, left, right, monthDate, rowIndex) {
      var _this = this;
      var eventObj = this.isSpannedEvent(eventData, monthDate);
      var wrap = this.createEventElement(eventObj);
      var width;
      var index;
      if (eventObj.isSpanned.count === 1) {
        var endTime = addDays(eventObj[this.fields.endTime], -1);
        eventObj[this.fields.endTime] = endTime > eventObj[this.fields.startTime] ? endTime : eventObj[this.fields.endTime];
      }
      if (eventObj[this.fields.startTime] > eventObj[this.fields.endTime]) {
        return;
      }
      if (this.parent.activeViewOptions.orientation === "Horizontal") {
        index = row + 1;
        if (eventObj[this.fields.startTime].getTime() === eventObj[this.fields.endTime].getTime()) {
          eventObj.isSpanned.count = 1;
        }
        width = eventObj.isSpanned.count * this.cellWidth;
      } else {
        index = rowIndex + 1;
        width = this.isResource ? eventObj.isSpanned.count * this.cellWidth : this.cellWidth;
      }
      var rowTd = this.parent.element.querySelector(".e-content-wrap tr:nth-child(" + index + ") td");
      var top = rowTd.offsetTop + this.cellHeader + this.eventHeight * eventObj.Index + EVENT_GAP3;
      setStyleAttribute(wrap, {
        "width": width + "px",
        "height": this.eventHeight + "px",
        "left": left + "px",
        "right": right + "px",
        "top": top + "px"
      });
      if (!this.isResource && this.parent.rowAutoHeight && this.parent.activeViewOptions.orientation === "Vertical") {
        wrap.setAttribute("data-index", eventObj.Index.toString());
      }
      var args = { data: eventObj, element: wrap, cancel: false, type: "event" };
      this.parent.trigger(eventRendered, args, function(eventArgs) {
        if (!eventArgs.cancel) {
          wrapper.appendChild(wrap);
          _this.wireAppointmentEvents(wrap, eventObj);
          if (_this.parent.activeViewOptions.group.resources.length > 0) {
            _this.renderedEvents.push(extend({}, eventObj, null, true));
          } else if (_this.parent.activeViewOptions.orientation === "Vertical") {
            _this.renderedEvents.push(extend({}, eventObj, null, true));
          } else if ((eventObj.isSpanned.isRight || eventObj.isSpanned.isLeft) && _this.parent.activeViewOptions.orientation === "Horizontal" || !eventObj.isSpanned.isRight) {
            _this.renderedEvents.push(extend({}, eventObj, null, true));
          }
        }
      });
    };
    YearEvent2.prototype.renderMoreIndicator = function(wrapper, count, startDate, row, left, right, index) {
      if (this.parent.activeViewOptions.group.resources.length === 0 && wrapper.querySelector('[data-start-date="' + startDate.getTime() + '"]')) {
        return;
      }
      var endDate;
      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        endDate = addDays(lastDateOfMonth(new Date(startDate.getTime())), 1);
      } else {
        endDate = addDays(new Date(startDate.getTime()), 1);
      }
      var moreIndicator = this.getMoreIndicatorElement(count, startDate, endDate);
      var rowTr = this.parent.element.querySelector(".e-content-wrap tr:nth-child(" + (row + 1) + ")");
      var top = rowTr.offsetTop + (this.cellHeight - this.moreIndicatorHeight);
      left = Math.floor(left / this.cellWidth) * this.cellWidth;
      right = Math.floor(right / this.cellWidth) * this.cellWidth;
      setStyleAttribute(moreIndicator, { "width": this.cellWidth + "px", "left": left + "px", "right": right + "px", "top": top + "px" });
      if (!isNullOrUndefined(index)) {
        moreIndicator.setAttribute("data-group-index", index.toString());
      }
      wrapper.appendChild(moreIndicator);
      EventHandler.add(moreIndicator, "click", this.moreIndicatorClick, this);
    };
    YearEvent2.prototype.createEventElement = function(record) {
      var eventSubject = record[this.fields.subject] || this.parent.eventSettings.fields.subject.default || this.parent.localeObj.getConstant("addTitle");
      var eventWrapper = createElement("div", {
        className: APPOINTMENT_CLASS,
        attrs: {
          "data-id": "Appointment_" + record[this.fields.id],
          "data-guid": record.Guid,
          "role": "button",
          "tabindex": "0",
          "aria-disabled": this.parent.eventBase.getReadonlyAttribute(record),
          "aria-label": this.parent.getAnnouncementString(record)
        }
      });
      if (this.cssClass) {
        addClass([eventWrapper], this.cssClass);
      }
      if (record[this.fields.isReadonly]) {
        addClass([eventWrapper], READ_ONLY);
      }
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        var resIndex = this.getGroupIndexFromEvent(record);
        eventWrapper.setAttribute("data-group-index", resIndex.toString());
      }
      var templateElement = [];
      var eventObj = extend({}, record, null, true);
      if (this.parent.activeViewOptions.eventTemplate) {
        var templateId = this.parent.element.id + "_" + this.parent.activeViewOptions.eventTemplateName + "eventTemplate";
        templateElement = this.parent.getAppointmentTemplate()(eventObj, this.parent, "eventTemplate", templateId, false, void 0, void 0, this.parent.root);
      } else {
        var locationEle = record[this.fields.location] || this.parent.eventSettings.fields.location.default || "";
        var subjectEle = createElement("div", {
          className: SUBJECT_CLASS,
          innerHTML: eventSubject + (locationEle ? ";&nbsp" + locationEle : "")
        });
        var startTimeEle = createElement("div", {
          className: APPOINTMENT_TIME + (this.parent.isAdaptive ? " " + DISABLE_CLASS : ""),
          innerHTML: this.parent.getTimeString(eventObj[this.fields.startTime])
        });
        var endTimeEle = createElement("div", {
          className: APPOINTMENT_TIME + (this.parent.isAdaptive ? " " + DISABLE_CLASS : ""),
          innerHTML: this.parent.getTimeString(eventObj[this.fields.endTime])
        });
        addClass([subjectEle], "e-text-center");
        if (record[this.fields.isAllDay]) {
          templateElement = [subjectEle];
        } else if (!eventObj.isLeft && !eventObj.isRight) {
          templateElement = [startTimeEle, subjectEle, endTimeEle];
        } else {
          if (!eventObj.isLeft) {
            templateElement.push(startTimeEle);
          }
          templateElement.push(subjectEle);
          if (!eventObj.isRight) {
            templateElement.push(endTimeEle);
          }
        }
      }
      var appointmentDetails = createElement("div", { className: APPOINTMENT_DETAILS });
      append(templateElement, appointmentDetails);
      eventWrapper.appendChild(appointmentDetails);
      this.parent.eventBase.renderSpannedIcon(eventWrapper, record.isSpanned);
      this.renderResizeHandler(eventWrapper, record.data, record[this.fields.isReadonly]);
      this.applyResourceColor(eventWrapper, eventObj, "backgroundColor", this.groupOrder);
      return eventWrapper;
    };
    YearEvent2.prototype.isSpannedEvent = function(eventObj, monthDate) {
      var monthStart = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);
      var monthEnd = addDays(new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0), 1);
      var eventData = extend({}, eventObj, null, true);
      var eventStart = eventData[this.fields.startTime];
      var eventEnd = eventData[this.fields.endTime];
      var isSpanned = { isLeft: false, isRight: false, count: 1 };
      var yearStart = new Date(this.parent.selectedDate.getFullYear(), this.parent.firstMonthOfYear, 1);
      var yearEnd = addMonths(yearStart, this.parent.monthsCount);
      if (this.isResource) {
        this.updateSpannedEvents(eventObj, monthStart, monthEnd);
      }
      if (this.parent.activeViewOptions.orientation === "Vertical" && this.parent.activeViewOptions.group.resources.length > 0) {
        this.updateSpannedEventDetails(eventStart, eventEnd, yearStart, yearEnd, eventData, isSpanned);
        var originalStartTime = eventData[this.fields.startTime];
        var originalEndTime = new Date(eventData[this.fields.endTime] - 1);
        isSpanned.count = originalEndTime.getMonth() - originalStartTime.getMonth() + this.parent.monthsCount * (originalEndTime.getFullYear() - originalStartTime.getFullYear()) + 1;
      } else {
        this.updateSpannedEventDetails(eventStart, eventEnd, monthStart, monthEnd, eventData, isSpanned);
        if (this.parent.activeViewOptions.group.resources.length === 0 || this.parent.uiStateValues.isGroupAdaptive) {
          var end = resetTime(eventData[this.fields.endTime]).getTime();
          var start = resetTime(eventData[this.fields.startTime]).getTime();
          if (eventObj[this.fields.isAllDay] && end === eventObj[this.fields.endTime].getTime() || isSpanned.isRight) {
            end = addDays(new Date(end), -1).getTime();
          }
          isSpanned.count = Math.ceil((end - start) / MS_PER_DAY) + 1;
        }
      }
      eventData.isSpanned = isSpanned;
      if (resetTime(eventStart).getTime() < resetTime(this.parent.minDate).getTime()) {
        eventData[this.fields.startTime] = this.parent.minDate;
      }
      if (resetTime(eventEnd).getTime() > resetTime(this.parent.maxDate).getTime()) {
        eventData[this.fields.endTime] = this.parent.maxDate;
      }
      return eventData;
    };
    YearEvent2.prototype.updateSpannedEventDetails = function(eventStart, eventEnd, viewStart, viewEnd, eventObj, isSpanned) {
      if (eventStart.getTime() < viewStart.getTime()) {
        eventObj[this.fields.startTime] = viewStart;
        isSpanned.isLeft = true;
      }
      if (eventEnd.getTime() > viewEnd.getTime()) {
        eventObj[this.fields.endTime] = viewEnd;
        isSpanned.isRight = true;
      }
    };
    YearEvent2.prototype.getOverlapEvents = function(date, appointments) {
      var appointmentsList = [];
      var dateStart;
      var dateEnd;
      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        var monthStart = this.parent.calendarUtil.getMonthStartDate(new Date(date.getTime()));
        var monthEnd = addDays(this.parent.calendarUtil.getMonthEndDate(new Date(date.getTime())), -1);
        dateStart = resetTime(new Date(monthStart.getTime())).getTime();
        dateEnd = resetTime(new Date(monthEnd.getTime())).getTime();
      } else {
        if (this.parent.rowAutoHeight) {
          dateStart = resetTime(new Date(date.getTime())).getTime();
          dateEnd = addDays(resetTime(new Date(date.getTime())), 1).getTime();
        } else {
          dateStart = dateEnd = resetTime(new Date(date.getTime())).getTime();
        }
      }
      for (var _i = 0, appointments_1 = appointments; _i < appointments_1.length; _i++) {
        var app = appointments_1[_i];
        var appStart = new Date(app[this.fields.startTime].getTime());
        var appEnd = new Date(app[this.fields.endTime].getTime());
        var timeCondition = app[this.fields.isAllDay] ? resetTime(appEnd).getTime() > dateStart : resetTime(appEnd).getTime() >= dateStart;
        if (resetTime(appStart).getTime() <= dateStart && timeCondition || resetTime(appStart).getTime() >= dateStart && resetTime(appEnd).getTime() <= dateEnd) {
          appointmentsList.push(app);
        } else if (this.parent.activeViewOptions.orientation === "Vertical") {
          if (resetTime(appStart).getTime() >= dateStart && resetTime(appEnd).getTime() >= dateEnd) {
            appointmentsList.push(app);
          }
        }
      }
      return appointmentsList;
    };
    YearEvent2.prototype.getMonths = function() {
      var _this = this;
      return Array.apply(null, { length: this.parent.monthsCount }).map(function(value, index) {
        return _this.parent.firstMonthOfYear + index;
      });
    };
    YearEvent2.prototype.removeCellHeight = function() {
      var elementSelector = "." + MONTH_HEADER_WRAPPER + " tbody tr,." + RESOURCE_COLUMN_TABLE_CLASS + " tbody tr,." + CONTENT_TABLE_CLASS + " tbody tr";
      var rows = [].slice.call(this.element.querySelectorAll(elementSelector));
      for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
        var row = rows_1[_i];
        row.firstElementChild.style.height = "";
      }
    };
    YearEvent2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      this.parent = null;
    };
    return YearEvent2;
  }(TimelineEvent)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/actions/drag.js
var __extends18 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var MINUTES_PER_DAY = 1440;
var DragAndDrop = (
  /** @class */
  function(_super) {
    __extends18(DragAndDrop2, _super);
    function DragAndDrop2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.widthUptoCursorPoint = 0;
      _this.heightUptoCursorPoint = 0;
      _this.cursorPointIndex = 0;
      _this.isHeaderRows = false;
      _this.isTimelineDayProcess = false;
      _this.widthPerMinute = 0;
      _this.heightPerMinute = 0;
      _this.minDiff = 0;
      _this.isStepDragging = false;
      _this.isMorePopupOpened = false;
      _this.isAllDayDrag = false;
      _this.isMultiSelect = false;
      _this.multiData = [];
      _this.updatedData = [];
      _this.swagData = [];
      _this.startTime = 0;
      _this.isAllDayTarget = false;
      _this.targetTd = null;
      _this.isCursorAhead = false;
      _this.enableCurrentViewDrag = false;
      _this.isPreventMultiDrag = false;
      return _this;
    }
    DragAndDrop2.prototype.wireDragEvent = function(element) {
      new Draggable(element, {
        abort: "." + EVENT_RESIZE_CLASS,
        clone: true,
        isDragScroll: true,
        enableTailMode: this.parent.eventDragArea ? true : false,
        cursorAt: this.parent.eventDragArea ? { left: -20, top: -20 } : { left: 0, top: 0 },
        dragArea: this.dragArea,
        dragStart: this.dragStart.bind(this),
        drag: this.drag.bind(this),
        dragStop: this.dragStop.bind(this),
        enableAutoScroll: false,
        helper: this.dragHelper.bind(this),
        queryPositionInfo: this.dragPosition.bind(this)
      });
    };
    DragAndDrop2.prototype.setDragArea = function() {
      var dragElement = document.querySelector(this.parent.eventDragArea);
      this.dragArea = this.parent.eventDragArea && dragElement ? dragElement : this.parent.element.querySelector("." + CONTENT_TABLE_CLASS);
    };
    DragAndDrop2.prototype.dragHelper = function(e) {
      var _this = this;
      if (e.sender && e.sender.type === "touchmove" && (!this.parent.uiStateValues.isTapHold || !e.element.classList.contains(APPOINTMENT_BORDER))) {
        return null;
      }
      this.setDragActionDefaultValues();
      this.actionObj.element = e.element;
      this.actionObj.action = "drag";
      var elements = [];
      if (!this.parent.allowMultiDrag || isNullOrUndefined(this.parent.selectedElements) || this.parent.selectedElements.length === 0 || this.parent.selectedElements.length > 0 && this.parent.selectedElements.indexOf(this.actionObj.element) === -1) {
        elements = [e.element];
      } else {
        elements = this.parent.selectedElements;
        this.isMultiSelect = true;
      }
      elements.forEach(function(ele) {
        var cloneElement = _this.createCloneElement(ele);
        if (ele.getAttribute("data-guid") === _this.actionObj.element.getAttribute("data-guid")) {
          _this.actionObj.clone = cloneElement;
          if (!_this.parent.eventDragArea && _this.parent.currentView !== "Month" && _this.parent.activeViewOptions.timeScale.enable && !_this.parent.activeView.isTimelineView() && !_this.actionObj.element.classList.contains(ALLDAY_APPOINTMENT_CLASS)) {
            setStyleAttribute(_this.actionObj.clone, { cursor: "move", left: "0%", right: "0%", width: "100%" });
          }
          _this.actionObj.clone.style.top = formatUnit(_this.actionObj.element.offsetTop);
        }
        _this.actionObj.cloneElement.push(cloneElement);
        _this.actionObj.originalElement.push(ele);
      });
      return this.actionObj.clone;
    };
    DragAndDrop2.prototype.dragPosition = function(e) {
      if (this.parent.eventDragArea) {
        return { left: e.left, top: e.top };
      }
      var cellHeight = this.actionObj.cellHeight / this.actionObj.slotInterval * this.actionObj.interval;
      var leftValue = formatUnit(0);
      if (this.parent.currentView === "Month") {
        leftValue = e.left;
      }
      var cloneRight;
      if (this.isStepDragging) {
        cloneRight = Math.ceil(this.actionObj.clone.getBoundingClientRect().right) + this.actionObj.interval;
      } else {
        cloneRight = this.actionObj.clone.getBoundingClientRect().right;
      }
      var dragArea = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
      var contentWrapRight = dragArea.getBoundingClientRect().right;
      if (this.parent.activeView.isTimelineView() && this.parent.currentView !== "TimelineYear" && !this.parent.enableRtl && this.actionObj.pageX > cloneRight && !this.isMorePopupOpened && !(this.actionObj.pageX > contentWrapRight)) {
        this.isCursorAhead = true;
      }
      if (this.parent.activeView.isTimelineView()) {
        leftValue = formatUnit(this.actionObj.clone.offsetLeft);
      }
      var topValue;
      if (this.parent.activeView.isTimelineView() || !this.parent.timeScale.enable || !isNullOrUndefined(this.actionObj.clone.offsetParent) && this.actionObj.clone.offsetParent.classList.contains(MORE_EVENT_POPUP_CLASS)) {
        topValue = formatUnit(this.actionObj.clone.offsetTop);
      } else if (this.parent.currentView === "Month") {
        topValue = formatUnit(0);
      } else if (this.actionObj.clone.classList.contains(ALLDAY_APPOINTMENT_CLASS)) {
        topValue = formatUnit(this.parent.element.querySelector("." + ALLDAY_ROW_CLASS).offsetTop);
        setStyleAttribute(this.actionObj.clone, {
          width: formatUnit(Math.ceil(this.actionObj.clone.offsetWidth / this.actionObj.cellWidth) * this.actionObj.cellWidth),
          right: this.parent.enableRtl && formatUnit(0)
        });
      } else {
        if (this.actionObj.element.classList.contains(ALLDAY_APPOINTMENT_CLASS) && !this.actionObj.clone.classList.contains(ALLDAY_APPOINTMENT_CLASS)) {
          setStyleAttribute(this.actionObj.clone, {
            height: formatUnit(this.actionObj.cellHeight),
            width: formatUnit(this.actionObj.cellWidth - 1),
            pointerEvents: "none"
          });
        }
        var top_1 = parseInt(e.top, 10);
        top_1 = top_1 < 0 ? 0 : top_1;
        topValue = formatUnit(Math.floor(top_1 / cellHeight) * cellHeight);
        var scrollHeight = this.parent.element.querySelector(".e-content-wrap").scrollHeight;
        var cloneBottom = parseInt(topValue, 10) + this.actionObj.clone.offsetHeight;
        if (cloneBottom > scrollHeight) {
          topValue = parseInt(topValue, 10) - (cloneBottom - scrollHeight) + "px";
        }
        if (this.isPreventMultiDrag) {
          topValue = formatUnit(this.actionObj.clone.offsetTop);
        }
      }
      return { left: leftValue, top: topValue };
    };
    DragAndDrop2.prototype.setDragActionDefaultValues = function() {
      this.actionObj.action = "drag";
      this.actionObj.isAllDay = null;
      this.actionObj.slotInterval = this.parent.activeViewOptions.timeScale.interval / this.parent.activeViewOptions.timeScale.slotCount;
      this.actionObj.interval = this.actionObj.slotInterval;
      var workCell = this.parent.element.querySelector("." + WORK_CELLS_CLASS);
      this.actionObj.cellWidth = workCell.offsetWidth;
      this.actionObj.cellHeight = workCell.offsetHeight;
    };
    DragAndDrop2.prototype.dragStart = function(e) {
      var _this = this;
      var eventGuid = this.actionObj.element.getAttribute("data-guid");
      this.actionObj.event = this.parent.eventBase.getEventByGuid(eventGuid);
      var eventObj = extend({}, this.actionObj.event, null, true);
      if (!isNullOrUndefined(eventObj)) {
        this.startTime = eventObj[this.parent.eventFields.startTime].getTime();
      }
      var dragArgs = {
        cancel: false,
        data: eventObj,
        selectedData: this.getSelectedData(),
        event: e,
        excludeSelectors: null,
        element: this.actionObj.element,
        interval: this.actionObj.interval,
        navigation: { enable: false, timeDelay: 2e3 },
        scroll: { enable: true, scrollBy: 30, timeDelay: 100 }
      };
      this.parent.trigger(dragStart, dragArgs, function(dragEventArgs) {
        if (dragEventArgs.cancel || !isNullOrUndefined(_this.actionObj.element) && isNullOrUndefined(_this.actionObj.element.parentElement)) {
          var dragObj = _this.actionObj.element.ej2_instances[0];
          if (!isNullOrUndefined(dragObj)) {
            dragObj.intDestroy(e.event);
          }
          _this.actionObj.action = "";
          _this.removeCloneElementClasses();
          _this.removeCloneElement();
          return;
        }
        _this.actionClass("addClass");
        _this.parent.uiStateValues.action = true;
        _this.actionObj.start = eventObj[_this.parent.eventFields.startTime];
        _this.actionObj.end = eventObj[_this.parent.eventFields.endTime];
        _this.actionObj.groupIndex = parseInt(_this.actionObj.element.getAttribute("data-group-index") || "0", 10);
        _this.actionObj.interval = dragEventArgs.interval;
        _this.actionObj.navigation = dragEventArgs.navigation;
        _this.actionObj.scroll = dragEventArgs.scroll;
        _this.enableCurrentViewDrag = dragArgs.dragWithinRange && !dragArgs.navigation.enable && _this.parent.allowMultiDrag;
        _this.actionObj.excludeSelectors = dragEventArgs.excludeSelectors;
        var viewElement = _this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
        _this.scrollArgs = { element: viewElement, width: viewElement.scrollWidth, height: viewElement.scrollHeight };
        _this.widthPerMinute = _this.actionObj.cellWidth / _this.actionObj.slotInterval * _this.actionObj.interval;
        _this.heightPerMinute = _this.actionObj.cellHeight / _this.actionObj.slotInterval * _this.actionObj.interval;
        _this.widthUptoCursorPoint = 0;
        _this.heightUptoCursorPoint = 0;
        _this.cursorPointIndex = -1;
        _this.isHeaderRows = false;
        _this.isTimelineDayProcess = false;
        _this.minDiff = 0;
        _this.isMorePopupOpened = false;
        _this.daysVariation = -1;
        _this.isAllDayTarget = _this.actionObj.clone.classList.contains(ALLDAY_APPOINTMENT_CLASS);
        if ((_this.parent.activeView.isTimelineView() || !_this.parent.timeScale.enable) && _this.parent.currentView !== "TimelineYear") {
          if (!isNullOrUndefined(_this.actionObj.clone.offsetParent) && _this.actionObj.clone.offsetParent.classList.contains(MORE_EVENT_POPUP_CLASS)) {
            _this.isMorePopupOpened = true;
          }
          _this.actionObj.pageX = e.event.pageX;
          var rows = _this.parent.activeViewOptions.headerRows;
          _this.isHeaderRows = rows.length > 0 && rows[rows.length - 1].option !== "Hour" && rows[rows.length - 1].option !== "Date";
          _this.isTimelineDayProcess = !_this.parent.activeViewOptions.timeScale.enable || _this.isHeaderRows || _this.parent.currentView === "TimelineMonth" || rows.length > 0 && rows[rows.length - 1].option === "Date";
          _this.isStepDragging = !_this.isTimelineDayProcess && _this.actionObj.slotInterval !== _this.actionObj.interval;
          if (_this.isTimelineDayProcess) {
            _this.timelineEventModule = new TimelineEvent(_this.parent, "day");
          } else {
            _this.timelineEventModule = new TimelineEvent(_this.parent, "hour");
          }
        }
        if (_this.parent.currentView === "TimelineYear") {
          _this.yearEvent = new YearEvent(_this.parent);
        }
        if (_this.parent.currentView === "Month") {
          _this.startTime = resetTime(new Date(_this.startTime)).getTime();
          _this.updateOriginalElement(_this.actionObj.clone);
          _this.monthEvent = new MonthEvent(_this.parent);
        }
        if (_this.parent.currentView === "Day" || _this.parent.currentView === "Week" || _this.parent.currentView === "WorkWeek") {
          _this.verticalEvent = new VerticalEvent(_this.parent);
          _this.verticalEvent.initializeValues();
          var splitEvents = _this.splitEvent(_this.actionObj.event);
          splitEvents.forEach(function(event) {
            var query = '.e-day-wrapper[data-date="' + resetTime(event[_this.parent.eventFields.startTime]).getTime() + '"]';
            if (_this.parent.activeViewOptions.group.resources.length > 0) {
              query = query.concat('[data-group-index = "' + _this.actionObj.groupIndex + '"]');
            }
            var appWrap = _this.parent.element.querySelector(query);
            if (appWrap) {
              var appEle = appWrap.querySelector('[data-id="' + _this.actionObj.clone.getAttribute("data-id") + '"]');
              if (appEle) {
                addClass([appEle], EVENT_ACTION_CLASS);
              }
            }
          });
        }
      });
    };
    DragAndDrop2.prototype.getSelectedData = function() {
      if (this.isMultiSelect && this.multiData.length === 0 && this.parent.selectedElements.length > 0) {
        for (var _i = 0, _a = this.parent.selectedElements; _i < _a.length; _i++) {
          var element = _a[_i];
          var eventGuid = element.getAttribute("data-guid");
          var data = this.parent.eventBase.getEventByGuid(eventGuid);
          this.multiData.push(extend({}, data, null, true));
        }
      }
      return this.multiData;
    };
    DragAndDrop2.prototype.drag = function(e) {
      if (e.event && e.event.type === "touchmove") {
        e.event.preventDefault();
      }
      if (this.parent.quickPopup) {
        this.parent.quickPopup.quickPopupHide(true);
      }
      if (!isNullOrUndefined(e.target) && e.target.classList && e.target.classList.contains(DISABLE_DATES)) {
        return;
      }
      var eventObj = extend({}, this.actionObj.event, null, true);
      var eventArgs = this.parent.eventBase.getPageCoordinates(e);
      this.actionObj.Y = this.actionObj.pageY = eventArgs.pageY;
      this.actionObj.X = this.actionObj.pageX = eventArgs.pageX;
      this.actionObj.target = e.target;
      this.widthUptoCursorPoint = this.widthUptoCursorPoint === 0 ? Math.ceil(Math.abs(this.actionObj.clone.getBoundingClientRect().left - this.actionObj.X) / this.widthPerMinute) * this.widthPerMinute : this.widthUptoCursorPoint;
      this.widthUptoCursorPoint = this.isMorePopupOpened ? this.actionObj.cellWidth : this.widthUptoCursorPoint;
      this.heightUptoCursorPoint = this.heightUptoCursorPoint === 0 ? Math.ceil(Math.abs(this.actionObj.clone.getBoundingClientRect().top - this.actionObj.Y) / this.heightPerMinute) * this.heightPerMinute : this.heightUptoCursorPoint;
      this.isAllDayDrag = this.parent.activeViewOptions.timeScale.enable ? this.actionObj.clone.classList.contains(ALLDAY_APPOINTMENT_CLASS) : this.actionObj.event[this.parent.eventFields.isAllDay];
      if (this.isStepDragging && this.minDiff === 0) {
        this.calculateMinutesDiff(eventObj);
      }
      if ((this.parent.currentView === "Month" || this.isAllDayDrag) && this.daysVariation < 0) {
        var date = this.parent.getDateFromElement(this.actionObj.target);
        if (!isNullOrUndefined(date)) {
          var currentDate = resetTime(date);
          var startDate = resetTime(new Date(eventObj[this.parent.eventFields.startTime].getTime()));
          this.daysVariation = (currentDate.getTime() - startDate.getTime()) / MS_PER_DAY;
        } else {
          this.daysVariation = 0;
        }
      } else {
        this.daysVariation = 0;
      }
      if (this.parent.eventDragArea) {
        var targetElement = eventArgs.target;
        this.actionObj.clone.style.top = formatUnit(targetElement.offsetTop);
        this.actionObj.clone.style.left = formatUnit(targetElement.offsetLeft);
        var currentTarget = closest(targetElement, "." + ROOT);
        if (!currentTarget) {
          this.actionObj.clone.style.height = "";
          this.actionObj.clone.style.width = "";
        } else {
          if (!(this.parent.currentView === "Week" || this.parent.currentView === "WorkWeek" || this.parent.currentView === "Day")) {
            this.actionObj.clone.style.width = formatUnit(this.actionObj.element.offsetWidth);
          }
        }
      }
      this.updateScrollPosition(e);
      this.updateNavigatingPosition(e);
      this.updateDraggingDateTime(e);
      var dragArgs = {
        data: eventObj,
        event: e,
        element: this.actionObj.element,
        startTime: this.actionObj.start,
        endTime: this.actionObj.end,
        selectedData: this.updatedData
      };
      if (this.parent.group.resources.length > 0) {
        dragArgs.groupIndex = this.actionObj.groupIndex;
      }
      this.parent.trigger(drag, dragArgs);
    };
    DragAndDrop2.prototype.calculateMinutesDiff = function(eventObj) {
      if (this.parent.enableRtl) {
        this.minDiff = (this.actionObj.clone.offsetWidth - this.widthUptoCursorPoint) / this.widthPerMinute * this.actionObj.interval;
      } else {
        this.minDiff = this.widthUptoCursorPoint / this.widthPerMinute * this.actionObj.interval;
      }
      var startDate = eventObj[this.parent.eventFields.startTime];
      var startTime = this.parent.activeView.renderDates[0];
      var startEndHours = getStartEndHours(startTime, this.parent.activeView.getStartHour(), this.parent.activeView.getEndHour());
      if (startEndHours.startHour.getTime() > startDate.getTime()) {
        this.minDiff = this.minDiff + (startEndHours.startHour.getTime() - startDate.getTime()) / MS_PER_MINUTE;
      }
    };
    DragAndDrop2.prototype.dragStop = function(e) {
      var _this = this;
      this.isCursorAhead = false;
      this.isPreventMultiDrag = false;
      this.removeCloneElementClasses();
      this.removeCloneElement();
      clearInterval(this.actionObj.navigationInterval);
      this.actionObj.navigationInterval = null;
      clearInterval(this.actionObj.scrollInterval);
      this.actionObj.scrollInterval = null;
      this.actionClass("removeClass");
      this.parent.uiStateValues.action = this.parent.uiStateValues.isTapHold = false;
      if (this.isAllowDrop(e)) {
        return;
      }
      var target = e.target.classList && (!e.target.classList.contains("e-work-cells") && this.parent.cellTemplate) ? closest(e.target, ".e-work-cells") : e.target;
      var dragArgs = {
        cancel: false,
        data: this.getChangedData(this.updatedData),
        selectedData: this.updatedData,
        event: e,
        element: this.actionObj.element,
        target
      };
      this.actionObj.action = null;
      this.parent.trigger(dragStop, dragArgs, function(dragEventArgs) {
        if (dragEventArgs.cancel) {
          return;
        }
        if (_this.parent.isSpecificResourceEvents()) {
          _this.parent.crudModule.crudObj.isCrudAction = true;
          _this.parent.crudModule.crudObj.sourceEvent = [_this.parent.resourceBase.lastResourceLevel[parseInt(dragArgs.element.getAttribute("data-group-index"), 10)]];
          var currentGroupIndex = parseInt(dragArgs.target.getAttribute("data-group-index"), 10) || _this.actionObj.groupIndex;
          _this.parent.crudModule.crudObj.targetEvent = [_this.parent.resourceBase.lastResourceLevel[parseInt(currentGroupIndex.toString(), 10)]];
        }
        _this.saveChangedData(dragEventArgs, _this.isMultiSelect);
      });
      this.updatedData = [];
      this.multiData = [];
      this.isMultiSelect = false;
      this.parent.selectedElements = [];
    };
    DragAndDrop2.prototype.updateNavigatingPosition = function(e) {
      var _this = this;
      if (this.actionObj.navigation.enable) {
        var currentDate_1 = this.parent.getCurrentTime();
        if (isNullOrUndefined(this.actionObj.navigationInterval)) {
          this.actionObj.navigationInterval = window.setInterval(function() {
            if (currentDate_1) {
              var crtDate = _this.parent.getCurrentTime();
              var end = crtDate.getSeconds();
              var start = currentDate_1.getSeconds() + _this.actionObj.navigation.timeDelay / 1e3;
              start = start >= 60 ? start - 60 : start;
              if (start === end) {
                currentDate_1 = _this.parent.getCurrentTime();
                _this.viewNavigation(e);
                _this.updateDraggingDateTime(e);
              }
            }
          }, this.actionObj.navigation.timeDelay);
        }
      }
    };
    DragAndDrop2.prototype.updateDraggingDateTime = function(e) {
      if (!isNullOrUndefined(this.actionObj.clone.offsetParent) && this.actionObj.clone.offsetParent.classList.contains(MORE_EVENT_POPUP_CLASS)) {
        this.morePopupEventDragging(e);
      } else if (this.parent.activeView.isTimelineView() && this.parent.currentView !== "TimelineYear") {
        this.timelineEventModule.dateRender = this.parent.activeView.renderDates;
        this.timelineEventModule.cellWidth = this.actionObj.cellWidth;
        this.timelineEventModule.getSlotDates();
        this.actionObj.cellWidth = this.isHeaderRows ? this.timelineEventModule.cellWidth : this.parent.getElementWidth(this.parent.element.querySelector("." + WORK_CELLS_CLASS));
        this.calculateTimelineTime(e);
      } else {
        if (this.parent.currentView === "Month" || this.parent.currentView === "TimelineYear") {
          this.calculateVerticalDate(e);
        } else {
          this.calculateVerticalTime(e);
        }
      }
    };
    DragAndDrop2.prototype.navigationWrapper = function() {
      if (!this.parent.activeView.isTimelineView()) {
        if (this.parent.currentView === "Month" || !this.parent.timeScale.enable) {
          var outerWrapperCls = [].slice.call(this.parent.element.querySelectorAll("." + WORK_CELLS_CLASS));
          this.actionObj.index = this.parent.activeView.renderDates.length < this.actionObj.index ? this.parent.activeView.renderDates.length - 1 : this.actionObj.index;
          var targetWrapper = outerWrapperCls[this.actionObj.index].querySelector("." + APPOINTMENT_WRAPPER_CLASS);
          if (!targetWrapper) {
            targetWrapper = createElement("div", { className: APPOINTMENT_WRAPPER_CLASS });
            outerWrapperCls[this.actionObj.index].appendChild(targetWrapper);
          }
          targetWrapper.appendChild(this.actionObj.clone);
        } else {
          var wrapperClass = this.actionObj.clone.classList.contains(ALLDAY_APPOINTMENT_CLASS) ? "." + ALLDAY_APPOINTMENT_WRAPPER_CLASS : "." + APPOINTMENT_WRAPPER_CLASS;
          this.parent.element.querySelectorAll(wrapperClass).item(this.actionObj.index).appendChild(this.actionObj.clone);
          if (wrapperClass === "." + ALLDAY_APPOINTMENT_WRAPPER_CLASS) {
            var elementHeight = this.getAllDayEventHeight();
            var event_2 = [].slice.call(this.parent.element.querySelectorAll("." + ALLDAY_CELLS_CLASS + ":first-child"));
            if (event_2[0].offsetHeight < elementHeight) {
              for (var _i = 0, event_1 = event_2; _i < event_1.length; _i++) {
                var e = event_1[_i];
                e.style.height = (elementHeight + 2) / 12 + "em";
              }
            }
            this.actionObj.clone.style.height = formatUnit(elementHeight);
          }
          this.actionObj.height = parseInt(this.actionObj.clone.style.height, 10);
        }
      } else {
        var outWrapper = void 0;
        if (this.parent.activeViewOptions.group.resources.length > 0) {
          outWrapper = this.parent.element.querySelectorAll(".e-appointment-container:not(.e-hidden)").item(this.actionObj.index);
        } else {
          outWrapper = this.parent.element.querySelector("." + APPOINTMENT_CONTAINER_CLASS);
        }
        if (!isNullOrUndefined(outWrapper)) {
          var tarWrapper_1 = outWrapper.querySelector("." + APPOINTMENT_WRAPPER_CLASS);
          if (!tarWrapper_1) {
            tarWrapper_1 = createElement("div", { className: APPOINTMENT_WRAPPER_CLASS });
            outWrapper.appendChild(tarWrapper_1);
          }
          this.actionObj.cloneElement.forEach(function(ele) {
            tarWrapper_1.appendChild(ele);
          });
        }
      }
    };
    DragAndDrop2.prototype.viewNavigation = function(e) {
      var navigationType;
      var dragArea = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
      if (dragArea && (!this.scrollEdges.top && !this.scrollEdges.bottom || closest(this.actionObj.clone, "." + ALLDAY_APPOINTMENT_WRAPPER_CLASS))) {
        if (dragArea.scrollLeft === 0 && Math.round(this.actionObj.X) <= Math.round(dragArea.getBoundingClientRect().left + this.actionObj.cellWidth + window.pageXOffset)) {
          navigationType = this.parent.enableRtl ? "next" : "previous";
        } else if (Math.round(dragArea.scrollLeft) + dragArea.clientWidth === dragArea.scrollWidth && Math.round(this.actionObj.X) >= Math.round(dragArea.getBoundingClientRect().right - this.actionObj.cellWidth + window.pageXOffset)) {
          navigationType = this.parent.enableRtl ? "previous" : "next";
        }
        if (navigationType) {
          this.parent.changeDate(this.parent.activeView.getNextPreviousDate(navigationType));
        }
      }
    };
    DragAndDrop2.prototype.morePopupEventDragging = function(e) {
      if (isNullOrUndefined(e.target) || e.target && isNullOrUndefined(closest(e.target, "td"))) {
        return;
      }
      var eventObj = extend({}, this.actionObj.event, null, true);
      var eventDuration = eventObj[this.parent.eventFields.endTime].getTime() - eventObj[this.parent.eventFields.startTime].getTime();
      var td = closest(e.target, "td");
      if (this.parent.currentView === "TimelineYear" && (!td.classList.contains(WORK_CELLS_CLASS) || td.classList.contains(OTHERMONTH_CLASS))) {
        return;
      }
      var dragStart2 = this.parent.getDateFromElement(td);
      var dragEnd = new Date(dragStart2.getTime());
      dragEnd.setMilliseconds(eventDuration);
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        this.actionObj.groupIndex = parseInt(td.getAttribute("data-group-index"), 10);
      }
      this.actionObj.start = new Date(dragStart2.getTime());
      this.actionObj.end = new Date(dragEnd.getTime());
      this.actionObj.clone.style.top = formatUnit(td.offsetParent.offsetTop);
      this.actionObj.clone.style.left = formatUnit(td.offsetLeft);
      this.actionObj.clone.style.width = formatUnit(td.offsetWidth);
      var eventContainer = td;
      var eventWrapper;
      if (this.parent.activeView.isTimelineView()) {
        var rowIndex = closest(td, "tr").rowIndex;
        eventContainer = this.parent.element.querySelectorAll(".e-appointment-container").item(rowIndex);
      }
      eventWrapper = eventContainer.querySelector("." + APPOINTMENT_WRAPPER_CLASS);
      if (!eventWrapper) {
        eventWrapper = createElement("div", { className: APPOINTMENT_WRAPPER_CLASS });
        eventContainer.appendChild(eventWrapper);
      }
      this.appendCloneElement(eventWrapper);
    };
    DragAndDrop2.prototype.calculateVerticalTime = function(e) {
      var _this = this;
      if (isNullOrUndefined(this.actionObj.target) || this.actionObj.target && isNullOrUndefined(closest(this.actionObj.target, "tr")) || !isNullOrUndefined(closest(this.actionObj.target, "td")) && !closest(this.actionObj.target, "td").classList.contains(WORK_CELLS_CLASS) && !closest(this.actionObj.target, "td").classList.contains(ALLDAY_CELLS_CLASS)) {
        return;
      }
      if (this.parent.activeViewOptions.timeScale.enable) {
        this.swapDragging(e);
      }
      var dragArea = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
      var eventObj = extend({}, this.actionObj.event, null, true);
      var eventStart = eventObj[this.parent.eventFields.startTime];
      var eventEnd = eventObj[this.parent.eventFields.endTime];
      var eventDuration = getUniversalTime(eventEnd) - getUniversalTime(eventStart);
      var offsetTop = Math.floor(parseInt(this.actionObj.clone.style.top, 10) / this.actionObj.cellHeight) * this.actionObj.cellHeight;
      offsetTop = offsetTop < 0 ? 0 : offsetTop;
      if (this.scrollEdges.top || this.scrollEdges.bottom) {
        offsetTop = this.scrollEdges.top ? dragArea.scrollTop - this.heightUptoCursorPoint + this.actionObj.cellHeight + window.pageYOffset : dragArea.scrollTop + dragArea.offsetHeight - this.actionObj.clone.offsetHeight + window.pageYOffset + (this.actionObj.clone.offsetHeight - this.heightUptoCursorPoint);
        offsetTop = Math.round(offsetTop / this.actionObj.cellHeight) * this.actionObj.cellHeight;
        if (dragArea.scrollTop > 0) {
          this.actionObj.clone.style.top = formatUnit(offsetTop);
        }
      }
      var rowIndex = this.parent.activeViewOptions.timeScale.enable ? offsetTop / this.actionObj.cellHeight : 0;
      var heightPerMinute = this.actionObj.cellHeight / this.actionObj.slotInterval;
      var diffInMinutes = parseInt(this.actionObj.clone.style.top, 10) - offsetTop;
      var tr;
      if (this.isAllDayDrag) {
        tr = this.parent.element.querySelector("." + ALLDAY_ROW_CLASS);
      } else {
        var trCollections = [].slice.call(this.parent.getContentTable().querySelectorAll("tr"));
        tr = trCollections[parseInt(rowIndex.toString(), 10)];
      }
      var index;
      if (!isNullOrUndefined(closest(this.actionObj.target, "td")) && (closest(this.actionObj.target, "td").classList.contains(WORK_CELLS_CLASS) || closest(this.actionObj.target, "td").classList.contains(ALLDAY_CELLS_CLASS))) {
        index = closest(this.actionObj.target, "td").cellIndex;
      }
      var colIndex = isNullOrUndefined(index) ? closest(this.actionObj.clone, "td").cellIndex : index;
      this.actionObj.index = colIndex;
      if (isNullOrUndefined(tr)) {
        return;
      }
      var td = tr.children[parseInt(colIndex.toString(), 10)];
      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        this.actionObj.groupIndex = parseInt(td.getAttribute("data-group-index"), 10);
      }
      var dragStart2;
      var dragEnd;
      if (this.parent.activeViewOptions.timeScale.enable && !this.isAllDayDrag) {
        if (!this.enableCurrentViewDrag || this.multiData.length === 0) {
          this.appendCloneElement(this.getEventWrapper(colIndex));
        }
        dragStart2 = this.parent.getDateFromElement(td);
        dragStart2.setMinutes(dragStart2.getMinutes() + diffInMinutes / heightPerMinute);
        dragEnd = new Date(dragStart2.getTime());
        if (this.actionObj.element.classList.contains(ALLDAY_APPOINTMENT_CLASS)) {
          dragEnd.setMinutes(dragEnd.getMinutes() + this.actionObj.slotInterval);
        } else {
          dragEnd.setMilliseconds(eventDuration);
        }
      } else {
        dragStart2 = this.parent.getDateFromElement(td);
        dragStart2.setDate(dragStart2.getDate() - this.daysVariation);
        dragStart2.setHours(eventStart.getHours(), eventStart.getMinutes(), eventStart.getSeconds());
        dragEnd = new Date(dragStart2.getTime());
        dragEnd.setMilliseconds(eventDuration);
        if (!this.actionObj.element.classList.contains(ALLDAY_APPOINTMENT_CLASS) && this.actionObj.clone.classList.contains(ALLDAY_APPOINTMENT_CLASS)) {
          dragEnd = addDays(resetTime(dragEnd), 1);
        }
        var index_1 = this.parent.activeViewOptions.group.byDate || this.parent.virtualScrollModule && !this.parent.activeViewOptions.timeScale.enable ? colIndex : void 0;
        this.updateAllDayEvents(dragStart2, dragEnd, index_1);
      }
      this.actionObj.start = /* @__PURE__ */ new Date(+dragStart2);
      this.actionObj.end = /* @__PURE__ */ new Date(+dragEnd);
      var event = this.getUpdatedEvent(this.actionObj.start, this.actionObj.end, this.actionObj.event);
      var dynamicWrappers = [].slice.call(this.parent.element.querySelectorAll(".e-dynamic-clone"));
      for (var _i = 0, dynamicWrappers_1 = dynamicWrappers; _i < dynamicWrappers_1.length; _i++) {
        var wrapper = dynamicWrappers_1[_i];
        remove(wrapper);
      }
      if (this.multiData.length > 0) {
        if (this.isAllDayTarget && this.isAllDayDrag && !isNullOrUndefined(this.actionObj.isAllDay) && !this.actionObj.isAllDay) {
          var targetCellTime_1 = parseInt(closest(this.actionObj.target, "td").getAttribute("data-date"), 10);
          this.multiData.forEach(function(data) {
            _this.swagData.push(extend({}, data, null, true));
            if (data[_this.parent.eventFields.isAllDay]) {
              data[_this.parent.eventFields.startTime] = new Date(data[_this.parent.eventFields.startTime].getTime() + (targetCellTime_1 - _this.startTime));
              var startTime2 = new Date(data[_this.parent.eventFields.startTime]);
              var endTime = new Date(startTime2.setMinutes(startTime2.getMinutes() + _this.actionObj.slotInterval));
              data[_this.parent.eventFields.endTime] = endTime;
              data[_this.parent.eventFields.isAllDay] = false;
            }
          });
          this.startTime = targetCellTime_1;
        }
        if (this.isAllDayTarget && this.isAllDayDrag && !isNullOrUndefined(this.actionObj.isAllDay) && this.actionObj.isAllDay && this.swagData.length > 0) {
          this.multiData = this.swagData;
          this.swagData = [];
          var eventObj_1 = extend({}, this.actionObj.event, null, true);
          this.startTime = eventObj_1[this.parent.eventFields.startTime].getTime();
        }
        var startTimeDiff = event[this.parent.eventFields.startTime].getTime() - this.startTime;
        if (this.enableCurrentViewDrag) {
          var renderDates = this.getRenderedDates();
          for (var i = 0; i < this.multiData.length; i++) {
            var eventObj_2 = extend({}, this.multiData[parseInt(i.toString(), 10)], null, true);
            var startTime = new Date(eventObj_2[this.parent.eventFields.startTime].getTime() + startTimeDiff);
            var dayIndex2 = this.parent.getIndexOfDate(renderDates, resetTime(startTime));
            if (dayIndex2 < 0) {
              this.isPreventMultiDrag = true;
              break;
            }
            this.isPreventMultiDrag = false;
          }
        }
        if (!this.isPreventMultiDrag) {
          for (var index_2 = 0; index_2 < this.multiData.length; index_2++) {
            this.updatedData[parseInt(index_2.toString(), 10)] = this.updateMultipleData(this.multiData[parseInt(index_2.toString(), 10)], startTimeDiff);
            var dayIndex2 = this.getDayIndex(this.updatedData[parseInt(index_2.toString(), 10)]);
            if (dayIndex2 >= 0) {
              var isAllDay = this.updatedData[parseInt(index_2.toString(), 10)][this.parent.eventFields.isAllDay];
              var wrapper = this.getEventWrapper(dayIndex2, isAllDay);
              this.appendCloneElement(wrapper, this.actionObj.cloneElement[parseInt(index_2.toString(), 10)]);
              this.updateEventHeight(this.updatedData[parseInt(index_2.toString(), 10)], index_2, dayIndex2);
            } else {
              if (!isNullOrUndefined(this.actionObj.cloneElement[parseInt(index_2.toString(), 10)].parentNode)) {
                remove(this.actionObj.cloneElement[parseInt(index_2.toString(), 10)]);
              }
            }
          }
        }
      } else {
        this.updateEventHeight(event);
      }
      this.updateTimePosition(this.actionObj.start, this.updatedData);
    };
    DragAndDrop2.prototype.splitEvent = function(event) {
      var eventFields = this.parent.eventFields;
      var eventData = [];
      var startTime = event[eventFields.startTime];
      var endTime = event[eventFields.endTime];
      if (resetTime(new Date(startTime.getTime())) < resetTime(new Date(endTime.getTime()))) {
        var startReferenceDate = resetTime(new Date(startTime.getTime()));
        var endReferenceDate = new Date(startReferenceDate.getTime());
        for (var i = 0; startReferenceDate < new Date(endTime.getTime()); i++) {
          endReferenceDate = new Date(endReferenceDate.setDate(startReferenceDate.getDate() + 1));
          var eventObj = extend({}, event, null, true);
          eventObj[eventFields.startTime] = new Date(startReferenceDate);
          eventObj[eventFields.endTime] = new Date(endReferenceDate);
          startReferenceDate = new Date(startReferenceDate.setDate(startReferenceDate.getDate() + 1));
          eventData.push(eventObj);
        }
        var index = eventData.length - 1;
        eventData[0][eventFields.startTime] = startTime;
        eventData[parseInt(index.toString(), 10)][eventFields.endTime] = endTime;
      } else {
        eventData.push(event);
      }
      return eventData;
    };
    DragAndDrop2.prototype.updateMultipleData = function(data, timeDifference) {
      var eventObj = extend({}, data, null, true);
      if (!isNullOrUndefined(this.actionObj.isAllDay) && this.parent.activeViewOptions.timeScale.enable && (this.isAllDayTarget && eventObj[this.parent.eventFields.isAllDay] || !this.isAllDayTarget && !eventObj[this.parent.eventFields.isAllDay])) {
        eventObj[this.parent.eventFields.isAllDay] = this.actionObj.isAllDay;
      }
      var endTimeDiff = eventObj[this.parent.eventFields.endTime].getTime() - eventObj[this.parent.eventFields.startTime].getTime();
      if (eventObj[this.parent.eventFields.isAllDay]) {
        var differInDays = Math.ceil(timeDifference / (1e3 * 3600 * 24));
        var day = Math.ceil(endTimeDiff / (1e3 * 3600 * 24));
        var startTime = new Date(eventObj[this.parent.eventFields.startTime]);
        eventObj[this.parent.eventFields.startTime] = resetTime(new Date(startTime.setDate(startTime.getDate() + differInDays)));
        eventObj[this.parent.eventFields.endTime] = addDays(eventObj[this.parent.eventFields.startTime], day);
      } else {
        eventObj[this.parent.eventFields.startTime] = new Date(eventObj[this.parent.eventFields.startTime].getTime() + timeDifference);
        eventObj[this.parent.eventFields.endTime] = new Date(eventObj[this.parent.eventFields.startTime].getTime() + endTimeDiff);
      }
      return eventObj;
    };
    DragAndDrop2.prototype.getDayIndex = function(event) {
      var eventObj = extend({}, event, null, true);
      var startDate = resetTime(eventObj[this.parent.eventFields.startTime]);
      if (this.parent.activeViewOptions.timeScale.enable && !eventObj[this.parent.eventFields.isAllDay]) {
        var startHour = this.parent.activeView.getStartHour();
        startDate.setMilliseconds(startHour.getTime() - resetTime(startHour).getTime());
      }
      var startTime = startDate.getTime();
      var query = "";
      var wrapper = DAY_WRAPPER_CLASS;
      if (this.parent.activeViewOptions.timeScale.enable && eventObj[this.parent.eventFields.isAllDay]) {
        wrapper = ALLDAY_APPOINTMENT_WRAPPER_CLASS;
      } else {
        wrapper = WORK_CELLS_CLASS;
      }
      query = "." + wrapper + '[data-date="' + startTime + '"]';
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        query = query + '[data-group-index="' + this.actionObj.groupIndex + '"]';
      }
      this.targetTd = this.parent.element.querySelector(query);
      if (isNullOrUndefined(this.targetTd)) {
        return -1;
      }
      return this.targetTd.cellIndex;
    };
    DragAndDrop2.prototype.updateEventHeight = function(event, index, colIndex) {
      this.verticalEvent.initializeValues();
      var datesCount = this.verticalEvent.getStartCount();
      if (!this.parent.uiStateValues.isGroupAdaptive) {
        for (var i = 0; i < this.actionObj.groupIndex; i++) {
          if (this.verticalEvent.dateRender[parseInt(i.toString(), 10)]) {
            datesCount = datesCount + this.verticalEvent.dateRender[parseInt(i.toString(), 10)].length;
          }
        }
      }
      var indexGroup = this.parent.uiStateValues.isGroupAdaptive ? datesCount : this.actionObj.groupIndex;
      var target = this.parent.activeViewOptions.group.byDate && !isNullOrUndefined(this.parent.getDateFromElement(this.actionObj.target)) ? true : false;
      if (target || !this.parent.activeViewOptions.group.byDate) {
        var dynamicIndex = -1;
        var dayIndex2 = !this.parent.activeViewOptions.group.byDate ? isNullOrUndefined(index) ? this.actionObj.index - datesCount : colIndex - datesCount : this.parent.getIndexOfDate(this.verticalEvent.dateRender[parseInt(indexGroup.toString(), 10)], resetTime(
          // eslint-disable-next-line max-len
          this.parent.getDateFromElement(isNullOrUndefined(index) ? this.actionObj.target : this.targetTd)
        ));
        var splitEvents = this.splitEvent(event);
        var events_1 = this.parent.eventBase.isAllDayAppointment(event) || splitEvents.length > 2 || this.parent.eventSettings.spannedEventPlacement !== "TimeSlot" ? [event] : splitEvents;
        for (var i = 0; i < events_1.length; i++) {
          if (i > 0) {
            var filterQuery = '.e-day-wrapper[data-date="' + resetTime(events_1[parseInt(i.toString(), 10)][this.parent.eventFields.startTime]).getTime() + '"]';
            if (this.parent.activeViewOptions.group.resources.length > 0) {
              filterQuery = filterQuery.concat('[data-group-index = "' + this.actionObj.groupIndex + '"]');
            }
            var appWrap = this.parent.element.querySelector(filterQuery);
            if (appWrap) {
              dayIndex2 = dayIndex2 + 1;
              dynamicIndex = appWrap.cellIndex;
            } else {
              dayIndex2 = -1;
            }
          }
          if (dayIndex2 >= 0) {
            var record = this.verticalEvent.isSpannedEvent(events_1[parseInt(i.toString(), 10)], dayIndex2, indexGroup);
            var eStart = record[this.verticalEvent.fields.startTime];
            var eEnd = record[this.verticalEvent.fields.endTime];
            var appHeight = this.parent.activeViewOptions.timeScale.enable ? this.verticalEvent.getHeight(eStart, eEnd) : this.actionObj.element.offsetHeight;
            var topValue = this.parent.activeViewOptions.timeScale.enable ? this.verticalEvent.getTopValue(eStart, dayIndex2, indexGroup) : this.actionObj.element.offsetTop;
            if (isNullOrUndefined(index)) {
              if (i === 0) {
                this.actionObj.clone.style.top = formatUnit(topValue);
                this.actionObj.clone.style.height = formatUnit(appHeight);
              } else {
                this.renderSpannedEvents(record, dynamicIndex, topValue, appHeight);
              }
            } else {
              var appWidth = this.actionObj.cellWidth;
              if (event[this.parent.eventFields.isAllDay]) {
                topValue = this.parent.element.querySelector("." + ALLDAY_ROW_CLASS).offsetTop;
                appHeight = this.getAllDayEventHeight();
                var timeDiff = event[this.parent.eventFields.endTime].getTime() - event[this.parent.eventFields.startTime].getTime();
                var allDayDifference = Math.ceil(timeDiff / (1e3 * 3600 * 24));
                if (allDayDifference >= 0) {
                  appWidth = allDayDifference * this.actionObj.cellWidth;
                }
              }
              if (this.actionObj.cloneElement[parseInt(index.toString(), 10)]) {
                if (i === 0) {
                  this.actionObj.cloneElement[parseInt(index.toString(), 10)].style.top = formatUnit(topValue);
                  this.actionObj.cloneElement[parseInt(index.toString(), 10)].style.height = formatUnit(appHeight);
                  this.actionObj.cloneElement[parseInt(index.toString(), 10)].style.width = formatUnit(appWidth);
                  this.actionObj.cloneElement[parseInt(index.toString(), 10)].style.left = formatUnit(0);
                } else {
                  this.renderSpannedEvents(record, dynamicIndex, topValue, appHeight);
                }
              }
            }
          }
        }
      }
    };
    DragAndDrop2.prototype.renderSpannedEvents = function(record, index, top, height) {
      var startTime = record[this.parent.eventFields.startTime].getTime();
      var endTime = record[this.parent.eventFields.endTime].getTime();
      if (startTime !== endTime) {
        var appointmentElement = this.verticalEvent.createAppointmentElement(record, false, record.isSpanned, this.actionObj.groupIndex);
        addClass([appointmentElement], [CLONE_ELEMENT_CLASS, "e-dynamic-clone"]);
        setStyleAttribute(appointmentElement, {
          "width": "100%",
          "height": height + "px",
          "top": top + "px",
          "border": "0px"
        });
        var appointmentWrap = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_WRAPPER_CLASS));
        appointmentWrap[parseInt(index.toString(), 10)].appendChild(appointmentElement);
      }
    };
    DragAndDrop2.prototype.getRenderedDates = function() {
      var _this = this;
      var _a, _b;
      var renderDates = this.parent.activeView.renderDates;
      (_a = this.parent.eventBase.slots).push.apply(_a, this.parent.activeView.renderDates.map(function(date) {
        return +date;
      }));
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        this.parent.eventBase.slots = [];
        var resources = this.parent.resourceBase.lastResourceLevel.filter(function(res) {
          return res.groupIndex === _this.actionObj.groupIndex;
        });
        renderDates = resources[0].renderDates;
        (_b = this.parent.eventBase.slots).push.apply(_b, renderDates.map(function(date) {
          return +date;
        }));
      }
      return renderDates;
    };
    DragAndDrop2.prototype.updateAllDayEvents = function(startDate, endDate, colIndex) {
      this.parent.eventBase.slots = [];
      var event = this.getUpdatedEvent(startDate, endDate, this.actionObj.event);
      var renderDates = this.getRenderedDates();
      var events = this.parent.eventBase.splitEvent(event, renderDates);
      var query = '.e-all-day-cells[data-date="' + events[0][this.parent.eventFields.startTime].getTime() + '"]';
      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        query = query.concat('[data-group-index = "' + this.actionObj.groupIndex + '"]');
      }
      var cell = [].slice.call(this.parent.element.querySelectorAll(query));
      if (cell.length > 0 || !isNullOrUndefined(colIndex)) {
        var cellIndex = !isNullOrUndefined(colIndex) ? colIndex : cell[0].cellIndex;
        this.appendCloneElement(this.getEventWrapper(cellIndex));
        this.actionObj.clone.style.width = formatUnit(events[0].data.count * this.actionObj.cellWidth);
      }
    };
    DragAndDrop2.prototype.swapDragging = function(e) {
      if (this.isPreventMultiDrag) {
        return;
      }
      var colIndex = !isNullOrUndefined(closest(this.actionObj.target, "td")) && closest(this.actionObj.target, "td").cellIndex;
      if (closest(this.actionObj.target, "." + DATE_HEADER_WRAP_CLASS) && !closest(this.actionObj.clone, "." + ALLDAY_APPOINTMENT_WRAPPER_CLASS)) {
        addClass([this.actionObj.clone], ALLDAY_APPOINTMENT_CLASS);
        this.appendCloneElement(this.getEventWrapper(colIndex));
        this.actionObj.isAllDay = true;
        var eventHeight = this.getAllDayEventHeight();
        var allDayElement = [].slice.call(this.parent.element.querySelectorAll("." + ALLDAY_CELLS_CLASS + ":first-child"));
        if (allDayElement[0].offsetHeight < eventHeight) {
          for (var _i = 0, allDayElement_1 = allDayElement; _i < allDayElement_1.length; _i++) {
            var element = allDayElement_1[_i];
            element.style.height = (eventHeight + 2) / 12 + "em";
          }
        }
        setStyleAttribute(this.actionObj.clone, {
          width: formatUnit(this.actionObj.cellWidth),
          height: formatUnit(eventHeight),
          top: formatUnit(this.parent.element.querySelector("." + ALLDAY_ROW_CLASS).offsetTop)
        });
      }
      if (closest(this.actionObj.target, "." + WORK_CELLS_CLASS) && !closest(this.actionObj.clone, "." + DAY_WRAPPER_CLASS)) {
        removeClass([this.actionObj.clone], ALLDAY_APPOINTMENT_CLASS);
        this.appendCloneElement(this.getEventWrapper(colIndex));
        this.actionObj.isAllDay = false;
        var height = this.actionObj.element.offsetHeight === 0 ? this.actionObj.height : this.actionObj.element.offsetHeight;
        setStyleAttribute(this.actionObj.clone, {
          left: formatUnit(0),
          height: formatUnit(height),
          width: formatUnit(this.actionObj.cellWidth)
        });
      }
    };
    DragAndDrop2.prototype.calculateVerticalDate = function(e) {
      if (isNullOrUndefined(e.target) || e.target && isNullOrUndefined(closest(e.target, "tr")) || e.target && e.target.tagName === "DIV") {
        return;
      }
      var eventObj = extend({}, this.actionObj.event, null, true);
      if (isNullOrUndefined(this.parent.eventDragArea)) {
        this.removeCloneElement();
      }
      var eventDuration = getUniversalTime(eventObj[this.parent.eventFields.endTime]) - getUniversalTime(eventObj[this.parent.eventFields.startTime]);
      var td = closest(this.actionObj.target, "td");
      if (!isNullOrUndefined(td)) {
        var tr = td.parentElement;
        this.actionObj.index = tr.rowIndex * tr.children.length + td.cellIndex;
        var workCells = [].slice.call(this.parent.element.querySelectorAll("." + WORK_CELLS_CLASS));
        td = workCells[this.actionObj.index];
        var currentDate = this.parent.getDateFromElement(td);
        if (!isNullOrUndefined(currentDate)) {
          if (this.parent.activeViewOptions.group.resources.length > 0) {
            this.actionObj.groupIndex = parseInt(td.getAttribute("data-group-index"), 10);
          }
          var timeString = new Date(currentDate.setDate(currentDate.getDate() - this.daysVariation));
          var dragStart2 = new Date(timeString.getTime());
          var startTimeDiff = getUniversalTime(eventObj[this.parent.eventFields.startTime]) - getUniversalTime(resetTime(/* @__PURE__ */ new Date(+eventObj[this.parent.eventFields.startTime])));
          dragStart2.setMilliseconds(startTimeDiff);
          var dragEnd = new Date(dragStart2.getTime());
          dragEnd.setMilliseconds(eventDuration);
          this.actionObj.start = new Date(dragStart2.getTime());
          this.actionObj.end = new Date(dragEnd.getTime());
        }
      }
      var event = this.getUpdatedEvent(this.actionObj.start, this.actionObj.end, this.actionObj.event);
      if (isNullOrUndefined(this.parent.eventDragArea)) {
        var eventWrappers = [].slice.call(this.parent.element.querySelectorAll("." + CLONE_ELEMENT_CLASS));
        for (var _i = 0, eventWrappers_1 = eventWrappers; _i < eventWrappers_1.length; _i++) {
          var wrapper = eventWrappers_1[_i];
          remove(wrapper);
        }
      }
      if (this.multiData && this.multiData.length > 0) {
        var startTime = resetTime(new Date(event[this.parent.eventFields.startTime]));
        var startTimeDiff = startTime.getTime() - this.startTime;
        if (this.parent.currentView === "TimelineYear" && this.parent.group.resources.length > 0) {
          startTimeDiff = (startTime.getFullYear() - new Date(this.startTime).getFullYear()) * 12;
          startTimeDiff -= new Date(this.startTime).getMonth();
          startTimeDiff += startTime.getMonth();
        }
        for (var index = 0; index < this.multiData.length; index++) {
          this.updatedData[parseInt(index.toString(), 10)] = this.updateMultipleVerticalDate(this.multiData[parseInt(index.toString(), 10)], startTimeDiff);
          if (this.parent.currentView === "TimelineYear") {
            this.dynamicYearlyEventsRendering(this.updatedData[parseInt(index.toString(), 10)]);
          } else {
            this.dynamicEventsRendering(this.updatedData[parseInt(index.toString(), 10)]);
          }
        }
      } else {
        if (this.parent.currentView === "TimelineYear") {
          this.dynamicYearlyEventsRendering(event);
        } else {
          this.dynamicEventsRendering(event);
        }
      }
    };
    DragAndDrop2.prototype.updateMultipleVerticalDate = function(data, timeDifference) {
      var eventObj = extend({}, data, null, true);
      var eventDuration = eventObj[this.parent.eventFields.endTime].getTime() - eventObj[this.parent.eventFields.startTime].getTime();
      var startDate = new Date(eventObj[this.parent.eventFields.startTime]);
      if (this.parent.currentView === "TimelineYear" && this.parent.group.resources.length > 0) {
        eventObj[this.parent.eventFields.startTime] = new Date(startDate.setMonth(startDate.getMonth() + timeDifference));
      } else {
        var differInDays = Math.ceil(timeDifference / MS_PER_DAY);
        eventObj[this.parent.eventFields.startTime] = new Date(startDate.setDate(startDate.getDate() + differInDays));
      }
      eventObj[this.parent.eventFields.endTime] = new Date(eventObj[this.parent.eventFields.startTime].getTime() + eventDuration);
      return eventObj;
    };
    DragAndDrop2.prototype.calculateTimelineTime = function(e) {
      var eventObj = extend({}, this.actionObj.event, null, true);
      var eventDuration = getUniversalTime(eventObj[this.parent.eventFields.endTime]) - getUniversalTime(eventObj[this.parent.eventFields.startTime]);
      var offsetLeft = this.parent.enableRtl ? Math.abs(this.actionObj.clone.offsetLeft) - this.actionObj.clone.offsetWidth : parseInt(this.actionObj.clone.style.left, 10);
      offsetLeft = Math.round(offsetLeft / this.actionObj.cellWidth) * this.actionObj.cellWidth;
      var rightOffset;
      if (this.parent.enableRtl) {
        rightOffset = Math.abs(parseInt(this.actionObj.clone.style.right, 10));
        this.actionObj.clone.style.right = formatUnit(rightOffset);
      }
      offsetLeft = this.getOffsetValue(offsetLeft, rightOffset);
      var colIndex = this.getColumnIndex(offsetLeft);
      var dragArea = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
      var contentWrapRight = dragArea.getBoundingClientRect().right;
      var cursorDrag = this.parent.activeView.isTimelineView() && !this.parent.enableRtl && this.actionObj.pageX > this.actionObj.clone.getBoundingClientRect().right && !this.isMorePopupOpened && !(this.actionObj.pageX > contentWrapRight);
      var leftVal = this.parent.eventDragArea ? dragArea.scrollLeft - dragArea.offsetLeft : 0;
      if ((this.isCursorAhead || cursorDrag) && !this.isStepDragging) {
        this.isCursorAhead = true;
      }
      var cloneIndex = Math.floor((this.actionObj.pageX - this.actionObj.clone.getBoundingClientRect().left + leftVal) / this.actionObj.cellWidth);
      if (this.parent.enableRtl) {
        cloneIndex = Math.abs(Math.floor((this.actionObj.pageX - this.actionObj.clone.getBoundingClientRect().right) / this.actionObj.cellWidth)) - 1;
      }
      if (this.cursorPointIndex < 0) {
        this.cursorIndex(e, eventObj, offsetLeft, cloneIndex);
      }
      var tr = this.parent.getContentTable().querySelector("tr");
      var index = this.getCursorCurrentIndex(colIndex, cloneIndex, tr);
      index = index < 0 ? 0 : index;
      var eventStart = this.isHeaderRows ? new Date(this.timelineEventModule.dateRender[parseInt(index.toString(), 10)].getTime()) : this.parent.getDateFromElement(tr.children[parseInt(index.toString(), 10)]);
      if (this.isStepDragging) {
        var widthDiff = this.getWidthDiff(tr, index);
        if (widthDiff !== 0) {
          var timeDiff = Math.ceil(widthDiff / this.widthPerMinute);
          eventStart.setMinutes(eventStart.getMinutes() + timeDiff * this.actionObj.interval);
          if (this.isCursorAhead || cursorDrag) {
            eventStart.setMilliseconds(-eventDuration);
          } else {
            eventStart.setMinutes(eventStart.getMinutes() - this.minDiff);
            var intervalInMS = this.actionObj.interval * MS_PER_MINUTE;
            timeDiff = Math.abs(eventStart.getTime() - this.actionObj.start.getTime()) / intervalInMS;
            var roundTimeDiff = Math.trunc(timeDiff);
            if (roundTimeDiff !== timeDiff) {
              timeDiff = roundTimeDiff * intervalInMS * (eventStart > this.actionObj.start ? 1 : -1);
              eventStart = new Date(this.actionObj.start.getTime() + timeDiff);
            }
          }
        } else {
          eventStart = this.actionObj.start;
        }
      } else {
        if (this.isCursorAhead || cursorDrag) {
          var minutes = this.isTimelineDayProcess ? MINUTES_PER_DAY : this.actionObj.slotInterval;
          eventStart.setMinutes(eventStart.getMinutes() + minutes);
          eventStart.setMilliseconds(-eventDuration);
          if (eventStart.getTime() === resetTime(eventStart).getTime() && eventStart.getMinutes() === 0 && eventDuration === 0) {
            eventStart.setMinutes(-minutes);
          }
        } else {
          eventStart.setMinutes(eventStart.getMinutes() - this.cursorPointIndex * (this.isTimelineDayProcess ? MINUTES_PER_DAY : this.actionObj.slotInterval));
        }
      }
      if (!this.isStepDragging) {
        eventStart = this.calculateIntervalTime(eventStart);
      }
      if (this.isTimelineDayProcess) {
        var eventSrt = eventObj[this.parent.eventFields.startTime];
        eventStart.setHours(eventSrt.getHours(), eventSrt.getMinutes(), eventSrt.getSeconds());
      }
      if (this.parent.eventDragArea) {
        var targetDate = this.parent.getDateFromElement(e.target);
        if (!isNullOrUndefined(targetDate)) {
          if (!this.parent.activeViewOptions.timeScale.enable || this.parent.currentView === "TimelineMonth") {
            var eventSrt = eventObj[this.parent.eventFields.startTime];
            eventStart = new Date(targetDate.setHours(eventSrt.getHours(), eventSrt.getMinutes(), eventSrt.getSeconds()));
          } else {
            eventStart = targetDate;
          }
        }
      }
      var eventEnd = new Date(eventStart.getTime());
      eventEnd.setMilliseconds(eventDuration);
      var eventsData = [this.getUpdatedEvent(eventStart, eventEnd, this.actionObj.event)];
      if (this.multiData.length > 0) {
        var startTimeDiff = eventsData[0][this.parent.eventFields.startTime].getTime() - this.startTime;
        for (var i = 0; i < this.multiData.length; i++) {
          this.updatedData[parseInt(i.toString(), 10)] = this.updateMultipleData(this.multiData[parseInt(i.toString(), 10)], startTimeDiff);
        }
        eventsData = this.updatedData;
      }
      for (var dataIndex = 0; dataIndex < eventsData.length; dataIndex++) {
        var cloneElement = this.multiData.length > 0 ? this.actionObj.cloneElement[parseInt(dataIndex.toString(), 10)] : this.actionObj.clone;
        if (isNullOrUndefined(this.parent.eventDragArea)) {
          var events_2 = this.timelineEventModule.splitEvent(eventsData[parseInt(dataIndex.toString(), 10)], this.timelineEventModule.dateRender);
          var eventData = events_2[0].data;
          var startTime = this.timelineEventModule.getStartTime(events_2[0], eventData);
          var endTime = this.timelineEventModule.getEndTime(events_2[0], eventData);
          var width = this.timelineEventModule.getEventWidth(startTime, endTime, eventObj[this.parent.eventFields.isAllDay], eventData.count);
          var day = this.parent.getIndexOfDate(this.timelineEventModule.dateRender, resetTime(new Date(startTime.getTime())));
          day = day < 0 ? 0 : day;
          var left = this.timelineEventModule.getPosition(startTime, endTime, eventObj[this.parent.eventFields.isAllDay], day);
          if (this.parent.enableRtl) {
            cloneElement.style.right = formatUnit(left);
          } else {
            cloneElement.style.left = formatUnit(left);
          }
          if (!this.isMorePopupOpened) {
            cloneElement.style.width = formatUnit(width);
          }
        }
        if (this.parent.activeViewOptions.group.resources.length > 0) {
          this.calculateResourceGroupingPosition(e, cloneElement);
        }
        this.actionObj.start = new Date(eventStart.getTime());
        this.actionObj.end = new Date(eventEnd.getTime());
        this.updateTimePosition(this.actionObj.start, this.updatedData);
      }
    };
    DragAndDrop2.prototype.getOffsetValue = function(offsetLeft, rightOffset) {
      if (this.scrollEdges.left || this.scrollEdges.right) {
        var viewEle = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
        if (this.parent.enableRtl) {
          rightOffset = viewEle.offsetWidth - viewEle.scrollLeft;
          if (this.scrollEdges.right) {
            rightOffset = rightOffset - viewEle.offsetWidth + this.actionObj.clone.offsetWidth - (this.actionObj.clone.offsetWidth - this.widthUptoCursorPoint);
          } else {
            rightOffset = rightOffset + this.widthUptoCursorPoint;
            if (rightOffset - this.widthUptoCursorPoint >= viewEle.scrollWidth) {
              this.actionObj.clone.style.width = formatUnit(this.actionObj.clone.offsetWidth - this.widthUptoCursorPoint + this.actionObj.cellWidth);
              rightOffset = viewEle.scrollLeft - viewEle.scrollWidth;
            }
          }
          if (isNullOrUndefined(this.parent.eventDragArea)) {
            this.actionObj.clone.style.left = formatUnit(rightOffset);
          }
        } else {
          if (this.scrollEdges.left) {
            offsetLeft = viewEle.scrollLeft - this.widthUptoCursorPoint + this.actionObj.cellWidth;
            if (viewEle.scrollLeft + viewEle.offsetWidth >= viewEle.offsetWidth) {
              viewEle.scrollLeft = viewEle.scrollLeft - 1;
            } else if (this.actionObj.clone.offsetLeft === 0) {
              offsetLeft = viewEle.scrollLeft;
            }
          } else {
            offsetLeft = viewEle.scrollLeft + viewEle.offsetWidth - this.actionObj.clone.offsetWidth + (this.actionObj.clone.offsetWidth - this.widthUptoCursorPoint);
          }
          offsetLeft = offsetLeft < 0 ? 0 : offsetLeft;
          if (isNullOrUndefined(this.parent.eventDragArea)) {
            this.actionObj.clone.style.left = formatUnit(offsetLeft);
          }
        }
      }
      return offsetLeft;
    };
    DragAndDrop2.prototype.getWidthDiff = function(tr, index) {
      var pages = this.scrollArgs.element.getBoundingClientRect();
      if (pages.left <= this.actionObj.pageX && pages.right >= this.actionObj.pageX) {
        var targetLeft = tr.children[parseInt(index.toString(), 10)].offsetLeft;
        var pageX = this.actionObj.pageX - pages.left;
        if (this.parent.enableRtl) {
          return targetLeft + this.actionObj.cellWidth - (this.scrollArgs.element.scrollLeft + pageX);
        } else {
          return this.scrollArgs.element.scrollLeft + pageX - targetLeft;
        }
      }
      return 0;
    };
    DragAndDrop2.prototype.getColumnIndex = function(offsetLeft) {
      var index = Math.round(offsetLeft / this.actionObj.cellWidth);
      if (this.isHeaderRows) {
        return index;
      }
      return this.getIndex(index);
    };
    DragAndDrop2.prototype.getCursorCurrentIndex = function(colIndex, cloneIndex, tr) {
      var index = colIndex + cloneIndex;
      if (this.isHeaderRows) {
        var dateLength = Math.floor(tr.offsetWidth / this.actionObj.cellWidth);
        return index > dateLength - 1 ? dateLength - 1 : index;
      }
      return index > tr.children.length - 1 ? tr.children.length - 1 : index;
    };
    DragAndDrop2.prototype.cursorIndex = function(e, event, left, index) {
      var td = closest(e.target, ".e-work-cells");
      if (!isNullOrUndefined(td) && !this.isMorePopupOpened) {
        var targetDate = this.parent.getDateFromElement(td);
        if (this.isHeaderRows) {
          var currentIndex = Math.floor(left / this.actionObj.cellWidth);
          targetDate = new Date(this.timelineEventModule.dateRender[currentIndex + index].getTime());
        }
        var timeDiff = targetDate.getTime() - event[this.parent.eventFields.startTime].getTime();
        if (this.isTimelineDayProcess) {
          this.cursorPointIndex = Math.abs(Math.ceil(timeDiff / MS_PER_DAY));
        } else {
          var widthDiff = Math.floor(timeDiff / MS_PER_MINUTE / (this.actionObj.slotInterval / this.actionObj.cellWidth));
          this.cursorPointIndex = Math.floor(widthDiff / this.actionObj.cellWidth);
          this.cursorPointIndex = this.cursorPointIndex < 0 ? 0 : this.cursorPointIndex;
        }
      } else {
        this.cursorPointIndex = 0;
      }
    };
    DragAndDrop2.prototype.calculateResourceGroupingPosition = function(e, cloneElement) {
      var dragArea = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
      var trCollection = [].slice.call(this.parent.element.querySelectorAll(".e-content-wrap .e-content-table tr:not(.e-hidden)"));
      var translateY = getTranslateY(dragArea.querySelector("table"));
      translateY = isNullOrUndefined(translateY) ? 0 : translateY;
      var rowHeight = this.parent.rowAutoHeight ? ~~(dragArea.querySelector("table").offsetHeight / trCollection.length) : this.actionObj.cellHeight;
      var rowIndex = Math.floor(Math.floor(this.actionObj.Y + (dragArea.scrollTop - translateY - (window.scrollY || window.pageYOffset)) - getElementTop(dragArea, this.parent.uiStateValues.isTransformed)) / rowHeight);
      rowIndex = rowIndex < 0 ? 0 : rowIndex > trCollection.length - 1 ? trCollection.length - 1 : rowIndex;
      this.actionObj.index = rowIndex;
      var eventContainer = this.parent.element.querySelectorAll(".e-appointment-container:not(.e-hidden)").item(rowIndex);
      var eventWrapper = eventContainer.querySelector("." + APPOINTMENT_WRAPPER_CLASS);
      if (!eventWrapper) {
        eventWrapper = createElement("div", { className: APPOINTMENT_WRAPPER_CLASS });
        eventContainer.appendChild(eventWrapper);
      }
      this.appendCloneElement(eventWrapper, cloneElement);
      var td = closest(this.actionObj.target, "td");
      this.actionObj.groupIndex = td && !isNaN(parseInt(td.getAttribute("data-group-index"), 10)) ? parseInt(td.getAttribute("data-group-index"), 10) : this.actionObj.groupIndex;
      if (!isNullOrUndefined(this.parent.eventDragArea)) {
        return;
      }
      var top = this.parent.getElementHeight(trCollection[parseInt(rowIndex.toString(), 10)]) * rowIndex;
      if (this.parent.rowAutoHeight) {
        var cursorElement = this.getCursorElement(e);
        if (cursorElement) {
          top = cursorElement.classList.contains(WORK_CELLS_CLASS) ? cursorElement.offsetTop : cursorElement.offsetParent && cursorElement.offsetParent.classList.contains(APPOINTMENT_CLASS) ? cursorElement.offsetParent.offsetTop : top;
        }
      }
      cloneElement.style.top = formatUnit(top);
    };
    DragAndDrop2.prototype.appendCloneElement = function(element, cloneElement) {
      if (cloneElement === void 0) {
        cloneElement = null;
      }
      cloneElement = isNullOrUndefined(cloneElement) ? this.actionObj.clone : cloneElement;
      var dragElement = document.querySelector(this.parent.eventDragArea);
      if (this.parent.eventDragArea && dragElement) {
        dragElement.appendChild(cloneElement);
      } else {
        element.appendChild(cloneElement);
      }
    };
    DragAndDrop2.prototype.getEventWrapper = function(index, isAllDayDrag) {
      var eventWrapper;
      if (isNullOrUndefined(isAllDayDrag)) {
        isAllDayDrag = this.actionObj.clone.classList.contains(ALLDAY_APPOINTMENT_CLASS);
      }
      if (this.parent.activeViewOptions.timeScale.enable) {
        var wrapperClass = isAllDayDrag ? "." + ALLDAY_APPOINTMENT_WRAPPER_CLASS : "." + APPOINTMENT_WRAPPER_CLASS;
        eventWrapper = this.parent.element.querySelectorAll(wrapperClass).item(index);
      } else {
        var targetWrapper = this.parent.element.querySelectorAll("." + WORK_CELLS_CLASS).item(index);
        eventWrapper = targetWrapper.querySelector("." + APPOINTMENT_WRAPPER_CLASS);
        if (!eventWrapper) {
          eventWrapper = createElement("div", { className: APPOINTMENT_WRAPPER_CLASS });
          targetWrapper.appendChild(eventWrapper);
        }
      }
      return eventWrapper;
    };
    DragAndDrop2.prototype.getAllDayEventHeight = function() {
      var eventWrapper = createElement("div", { className: APPOINTMENT_CLASS });
      this.parent.element.querySelector("." + ALLDAY_APPOINTMENT_WRAPPER_CLASS).appendChild(eventWrapper);
      var eventHeight = eventWrapper.offsetHeight;
      remove(eventWrapper);
      return eventHeight;
    };
    DragAndDrop2.prototype.isAllowDrop = function(e) {
      if (!this.actionObj.excludeSelectors) {
        return false;
      }
      var dropSelectors = this.actionObj.excludeSelectors.split(",");
      var isAllowDrop = false;
      for (var _i = 0, dropSelectors_1 = dropSelectors; _i < dropSelectors_1.length; _i++) {
        var selector = dropSelectors_1[_i];
        if (e.target.classList.contains(selector)) {
          isAllowDrop = true;
          break;
        }
      }
      return isAllowDrop;
    };
    DragAndDrop2.prototype.getModuleName = function() {
      return "dragAndDrop";
    };
    return DragAndDrop2;
  }(ActionBase)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/renderer/view-base.js
var ViewBase = (
  /** @class */
  function() {
    function ViewBase2(parent) {
      this.previousNextAction = "next";
      this.parent = parent;
    }
    ViewBase2.prototype.isTimelineView = function() {
      return this.parent.currentView.indexOf("Timeline") !== -1;
    };
    ViewBase2.prototype.getContentRows = function() {
      return [];
    };
    ViewBase2.prototype.refreshHeader = function() {
    };
    ViewBase2.prototype.refreshResourceHeader = function() {
      var resTbl = this.element.querySelector("." + RESOURCE_COLUMN_TABLE_CLASS);
      var resourceTd = Array.from(resTbl.querySelectorAll("." + RESOURCE_CELLS_CLASS));
      resourceTd.forEach(function(currentElement) {
        var children = Array.from(currentElement.children);
        children.forEach(function(child) {
          if (!child.classList.contains(RESOURCE_EXPAND_CLASS) && !child.classList.contains(RESOURCE_COLLAPSE_CLASS)) {
            remove(child);
          }
        });
      });
      var rendereData = this.parent.resourceBase.renderedResources;
      if (!isNullOrUndefined(rendereData) && rendereData.length > 0) {
        for (var i = 0; i < resourceTd.length; i++) {
          var element = resourceTd[parseInt(i.toString(), 10)];
          var data = rendereData[parseInt(i.toString(), 10)];
          if (this.parent.activeView && !isNullOrUndefined(element) && !isNullOrUndefined(data) && parseInt(element.getAttribute("data-group-index"), 10) === data.groupIndex) {
            this.parent.activeView.setResourceHeaderContent(element, data, RESOURCE_TEXT_CLASS);
          }
        }
      }
      this.parent.renderTemplates();
      this.parent.notify(contentReady, {});
    };
    ViewBase2.prototype.getDayName = function(date) {
      return this.parent.getDayNames("abbreviated")[date.getDay()];
    };
    ViewBase2.prototype.getDate = function(date) {
      return this.parent.globalize.formatDate(date, { format: "d", calendar: this.parent.getCalendarMode() });
    };
    ViewBase2.prototype.getTime = function(date) {
      if (this.parent.isAdaptive) {
        if (this.parent.activeViewOptions.timeFormat === "HH:mm" || this.parent.activeViewOptions.timeFormat === "HH.mm") {
          return this.parent.globalize.formatDate(date, { format: "H", calendar: this.parent.getCalendarMode() });
        }
        return this.parent.globalize.formatDate(date, { skeleton: "h", calendar: this.parent.getCalendarMode() });
      }
      return this.parent.getTimeString(date);
    };
    ViewBase2.prototype.getTimelineDate = function(date) {
      var text = this.parent.globalize.formatDate(date, { skeleton: "MMMd", calendar: this.parent.getCalendarMode() }) + ", " + this.parent.getDayNames("wide")[date.getDay()];
      return capitalizeFirstWord(text, "multiple");
    };
    ViewBase2.prototype.createEventTable = function(trCount) {
      var eventTable = createElement("div", { className: EVENT_TABLE_CLASS });
      append(this.getEventRows(trCount), eventTable);
      return eventTable;
    };
    ViewBase2.prototype.getEventRows = function(trCount) {
      var eventRows = [];
      var eventContainer;
      for (var row = 0; row < trCount; row++) {
        eventContainer = createElement("div", { className: APPOINTMENT_CONTAINER_CLASS });
        if (this.parent.resourceBase && !this.parent.uiStateValues.isGroupAdaptive && this.parent.resourceBase.renderedResources) {
          eventContainer.setAttribute("data-group-index", this.parent.resourceBase.renderedResources[parseInt(row.toString(), 10)].groupIndex.toString());
        }
        eventRows.push(eventContainer);
      }
      return eventRows;
    };
    ViewBase2.prototype.collapseRows = function(wrap) {
      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        this.parent.resourceBase.hideResourceRows(wrap.querySelector("tbody"));
        this.parent.resourceBase.hideResourceRows(wrap.querySelector("." + EVENT_TABLE_CLASS));
      }
    };
    ViewBase2.prototype.createTableLayout = function(className) {
      var clsName = className || "";
      var table = createElement("table", { className: SCHEDULE_TABLE_CLASS + " " + clsName });
      var tbody = createElement("tbody");
      table.appendChild(tbody);
      return table;
    };
    ViewBase2.prototype.setAriaAttributes = function(table) {
      table.setAttribute("role", "grid");
      if (this.parent.currentView !== "Year") {
        table.setAttribute("id", this.parent.element.id + "_table");
      }
      table.setAttribute("aria-label", this.getLabelText(this.parent.currentView));
    };
    ViewBase2.prototype.createColGroup = function(table, lastRow) {
      if (isNullOrUndefined(lastRow)) {
        return;
      }
      var length = lastRow.length;
      if (lastRow[0] && lastRow[0].colSpan) {
        length = lastRow.map(function(value) {
          return value.colSpan;
        }).reduce(function(prev, next) {
          return prev + next;
        });
      }
      var colGroupEle = createElement("colgroup");
      for (var i = 0; i < length; i++) {
        colGroupEle.appendChild(createElement("col"));
      }
      prepend([colGroupEle], table);
    };
    ViewBase2.prototype.getScrollXIndent = function(content) {
      return content.offsetHeight - content.clientHeight > 0 ? getScrollBarWidth() : 0;
    };
    ViewBase2.prototype.scrollTopPanel = function(target) {
      this.getDatesHeaderElement().firstElementChild.scrollLeft = target.scrollLeft;
    };
    ViewBase2.prototype.scrollHeaderLabels = function(target) {
      var headerTable = this.element.querySelector(".e-date-header-wrap table");
      var colWidth = headerTable.offsetWidth / headerTable.querySelectorAll("colgroup col").length;
      var applyLeft = function(headerCells2, isRtl) {
        var currentCell;
        var tdLeft = 0;
        var colSpan = 0;
        var hiddenLeft = isRtl ? -target.scrollLeft : target.scrollLeft;
        for (var _i2 = 0, headerCells_2 = headerCells2; _i2 < headerCells_2.length; _i2++) {
          var cell = headerCells_2[_i2];
          colSpan += parseInt(cell.getAttribute("colSpan"), 10);
          if (colSpan > Math.floor(hiddenLeft / colWidth)) {
            currentCell = cell;
            break;
          }
          tdLeft += cell.offsetWidth;
        }
        if (!isNullOrUndefined(currentCell)) {
          currentCell.children[0].style[isRtl ? "right" : "left"] = hiddenLeft - tdLeft + "px";
        }
      };
      var classNames = [".e-header-year-cell", ".e-header-month-cell", ".e-header-week-cell", ".e-header-cells"];
      for (var _i = 0, classNames_1 = classNames; _i < classNames_1.length; _i++) {
        var className = classNames_1[_i];
        var headerCells = [].slice.call(this.element.querySelectorAll(className));
        if (headerCells.length > 0) {
          for (var _a = 0, headerCells_1 = headerCells; _a < headerCells_1.length; _a++) {
            var element = headerCells_1[_a];
            element.children[0].style[this.parent.enableRtl ? "right" : "left"] = "";
          }
          applyLeft(headerCells, this.parent.enableRtl);
        }
      }
    };
    ViewBase2.prototype.addAttributes = function(td, element) {
      if (td.template) {
        append(td.template, element);
      }
      if (td.colSpan) {
        element.setAttribute("colspan", td.colSpan.toString());
      }
      if (td.className) {
        addClass([element], td.className);
      }
    };
    ViewBase2.prototype.getHeaderBarHeight = function() {
      var headerBarHeight = 2;
      if (this.parent.headerModule) {
        headerBarHeight += getOuterHeight(this.parent.headerModule.getHeaderElement());
      }
      if (this.parent.uiStateValues.isGroupAdaptive) {
        var resHeader = this.parent.element.querySelector("." + RESOURCE_HEADER_TOOLBAR);
        if (resHeader) {
          headerBarHeight += resHeader.offsetHeight;
        }
      }
      return headerBarHeight;
    };
    ViewBase2.prototype.renderPanel = function(type) {
      if (type === PREVIOUS_PANEL_CLASS) {
        prepend([this.element], this.parent.element.querySelector("." + TABLE_CONTAINER_CLASS));
      } else {
        this.parent.element.querySelector("." + TABLE_CONTAINER_CLASS).appendChild(this.element);
      }
    };
    ViewBase2.prototype.setPanel = function(panel) {
      this.element = panel;
    };
    ViewBase2.prototype.getPanel = function() {
      return this.element;
    };
    ViewBase2.prototype.getDatesHeaderElement = function() {
      return this.element.querySelector("." + DATE_HEADER_CONTAINER_CLASS);
    };
    ViewBase2.prototype.getDateSlots = function(renderDates, workDays) {
      return [];
    };
    ViewBase2.prototype.generateColumnLevels = function() {
      return [];
    };
    ViewBase2.prototype.getColumnLevels = function() {
      return this.colLevels;
    };
    ViewBase2.prototype.highlightCurrentTime = function() {
    };
    ViewBase2.prototype.getStartDate = function() {
      return this.renderDates[0];
    };
    ViewBase2.prototype.getEndDate = function() {
      return this.renderDates[this.renderDates.length - 1];
    };
    ViewBase2.prototype.startDate = function() {
      return this.renderDates[0];
    };
    ViewBase2.prototype.endDate = function() {
      return addDays(this.renderDates[this.renderDates.length - 1], 1);
    };
    ViewBase2.prototype.getStartHour = function() {
      var startHour = this.parent.getStartEndTime(this.parent.activeViewOptions.startHour);
      if (isNullOrUndefined(startHour)) {
        startHour = new Date(2e3, 0, 0, 0);
      }
      return startHour;
    };
    ViewBase2.prototype.getEndHour = function() {
      var endHour = this.parent.getStartEndTime(this.parent.activeViewOptions.endHour);
      if (isNullOrUndefined(endHour)) {
        endHour = new Date(2e3, 0, 0, 0);
      }
      return endHour;
    };
    ViewBase2.prototype.isCurrentDate = function(date) {
      return date.setHours(0, 0, 0, 0) === new Date(this.parent.currentTimezoneDate).setHours(0, 0, 0, 0);
    };
    ViewBase2.prototype.isCurrentMonth = function(date) {
      if (this.parent.activeViewOptions.displayDate || this.parent.activeViewOptions.numberOfWeeks > 0) {
        return this.parent.activeView.getStartDate().getTime() <= this.parent.getCurrentTime().getTime() && this.parent.activeView.getEndDate().getTime() >= this.parent.getCurrentTime().getTime();
      }
      return date.getFullYear() === this.parent.getCurrentTime().getFullYear() && date.getMonth() === this.parent.getCurrentTime().getMonth();
    };
    ViewBase2.prototype.isWorkDay = function(date, workDays) {
      if (workDays === void 0) {
        workDays = this.parent.activeViewOptions.workDays;
      }
      if (!isNullOrUndefined(workDays) && workDays.indexOf(date.getDay()) >= 0) {
        return true;
      }
      return false;
    };
    ViewBase2.prototype.isWorkHour = function(date, startHour, endHour, workDays) {
      if (isNullOrUndefined(startHour) || isNullOrUndefined(endHour)) {
        return false;
      }
      startHour.setMilliseconds(0);
      endHour.setMilliseconds(0);
      return !(getDateInMs(date) < getDateInMs(startHour) || getDateInMs(date) >= getDateInMs(endHour) || !this.isWorkDay(date, workDays));
    };
    ViewBase2.prototype.getRenderDates = function(workDays) {
      var renderDates = [];
      if (this.parent.currentView === "Week" || this.parent.currentView === "TimelineWeek") {
        var selectedDate = resetTime(this.parent.selectedDate);
        var start = getWeekFirstDate(selectedDate, this.parent.activeViewOptions.firstDayOfWeek);
        for (var i = 0, length_1 = WEEK_LENGTH * this.parent.activeViewOptions.interval; i < length_1; i++) {
          if (this.parent.activeViewOptions.showWeekend) {
            renderDates.push(start);
          } else {
            if (this.isWorkDay(start, workDays)) {
              renderDates.push(start);
            }
          }
          start = addDays(start, 1);
        }
      } else if (this.parent.currentView === "WorkWeek" || this.parent.currentView === "TimelineWorkWeek") {
        var start = getWeekFirstDate(resetTime(this.parent.selectedDate), this.parent.activeViewOptions.firstDayOfWeek);
        for (var i = 0, length_2 = WEEK_LENGTH * this.parent.activeViewOptions.interval; i < length_2; i++) {
          if (this.isWorkDay(start, workDays)) {
            renderDates.push(start);
          }
          start = addDays(start, 1);
        }
      } else {
        var dayCount = this.parent.currentView === "Agenda" ? this.parent.agendaDaysCount : this.parent.activeViewOptions.interval;
        var start = resetTime(this.parent.selectedDate);
        do {
          if (this.parent.activeViewOptions.showWeekend) {
            renderDates.push(start);
          } else {
            if (this.isWorkDay(start, workDays)) {
              renderDates.push(start);
            }
          }
          start = addDays(start, 1);
        } while (dayCount !== renderDates.length);
      }
      if (!workDays) {
        this.renderDates = renderDates;
      }
      if (this.parent.headerModule) {
        this.parent.headerModule.previousNextIconHandler();
      }
      return renderDates;
    };
    ViewBase2.prototype.getNextPreviousDate = function(type) {
      this.previousNextAction = type;
      if (this.parent.currentView === "Day" || this.parent.currentView === "TimelineDay") {
        if (this.parent.activeViewOptions.showWeekend) {
          var daysCount = this.parent.activeViewOptions.interval;
          return addDays(this.parent.selectedDate, type === "next" ? daysCount : -daysCount);
        } else {
          var date = void 0;
          if (type === "next") {
            date = addDays(this.renderDates.slice(-1)[0], 1);
            while (!this.isWorkDay(date)) {
              date = addDays(date, 1);
            }
          } else {
            date = addDays(this.renderDates[0], -1);
            var count = 0;
            do {
              if (this.isWorkDay(date)) {
                count += 1;
              }
              if (this.parent.activeViewOptions.interval !== count) {
                date = addDays(date, -1);
              }
            } while (this.parent.activeViewOptions.interval !== count);
          }
          return date;
        }
      }
      var weekLength = type === "next" ? WEEK_LENGTH : -WEEK_LENGTH;
      return addDays(this.parent.selectedDate, weekLength * this.parent.activeViewOptions.interval);
    };
    ViewBase2.prototype.formatViewLabel = function(view, startDate, endDate) {
      var formatOptions = { type: "date", skeleton: "full", calendar: this.parent.getCalendarMode() };
      return this.parent.localeObj.getConstant(view) + " " + this.parent.localeObj.getConstant("start") + " " + this.parent.globalize.formatDate(startDate, formatOptions) + " " + this.parent.localeObj.getConstant("endAt") + " " + this.parent.globalize.formatDate(endDate, formatOptions);
    };
    ViewBase2.prototype.getLabelText = function(view) {
      var viewStr = view.charAt(0).toLowerCase() + view.substring(1);
      if (view === "Year" || view === "TimelineYear") {
        return this.formatViewLabel(viewStr, this.parent.activeView.getStartDate(), this.parent.activeView.getEndDate());
      } else {
        if (this.renderDates.length > 0) {
          if (this.parent.currentView === "Day" || this.parent.currentView === "TimelineDay") {
            return this.parent.localeObj.getConstant(viewStr) + " of " + capitalizeFirstWord(this.parent.globalize.formatDate(this.parent.selectedDate, { type: "date", skeleton: "full", calendar: this.parent.getCalendarMode() }), "single");
          } else {
            return this.formatViewLabel(viewStr, this.renderDates[0], this.renderDates[this.renderDates.length - 1]);
          }
        } else {
          return "";
        }
      }
    };
    ViewBase2.prototype.getDateRangeText = function() {
      if (this.parent.isAdaptive) {
        var formatDate = this.parent.activeViewOptions.dateFormat ? this.parent.activeViewOptions.dateFormat : "MMMM y";
        return capitalizeFirstWord(this.parent.globalize.formatDate(this.parent.selectedDate, { format: formatDate, calendar: this.parent.getCalendarMode() }), "single");
      }
      return this.formatDateRange(this.renderDates[0], this.renderDates[this.renderDates.length - 1]);
    };
    ViewBase2.prototype.formatDateRange = function(startDate, endDate) {
      var globalize = this.parent.globalize;
      var mode = this.parent.getCalendarMode();
      if (startDate === endDate) {
        endDate = null;
      }
      if (!isNullOrUndefined(this.parent.activeViewOptions.dateFormat)) {
        var text = "";
        if (!endDate) {
          text = globalize.formatDate(startDate, { format: this.parent.activeViewOptions.dateFormat, calendar: mode });
          return capitalizeFirstWord(text, "multiple");
        }
        text = globalize.formatDate(startDate, { format: this.parent.activeViewOptions.dateFormat, calendar: mode }) + " - " + globalize.formatDate(endDate, { format: this.parent.activeViewOptions.dateFormat, calendar: mode });
        return capitalizeFirstWord(text, "multiple");
      }
      var formattedStr;
      var longDateFormat;
      if (isNullOrUndefined(this.parent.locale) || this.parent.locale === "en" || this.parent.locale === "en-US") {
        longDateFormat = getValue("dateFormats.long", getDefaultDateObject(mode));
      } else {
        longDateFormat = getValue("main." + this.parent.locale + ".dates.calendars." + mode + ".dateFormats.long", cldrData);
      }
      if (!endDate) {
        return capitalizeFirstWord(globalize.formatDate(startDate, { format: longDateFormat, calendar: mode }), "single");
      }
      var dateFormat = longDateFormat.trim().toLocaleLowerCase();
      if (dateFormat.substr(0, 1) === "d") {
        if (startDate.getFullYear() === endDate.getFullYear()) {
          if (startDate.getMonth() === endDate.getMonth()) {
            formattedStr = globalize.formatDate(startDate, { format: "dd", calendar: mode }) + " - " + globalize.formatDate(endDate, { format: "dd MMMM yyyy", calendar: mode });
          } else {
            formattedStr = globalize.formatDate(startDate, { format: "dd MMM", calendar: mode }) + " - " + globalize.formatDate(endDate, { format: "dd MMM yyyy", calendar: mode });
          }
        } else {
          formattedStr = globalize.formatDate(startDate, { format: "dd MMM yyyy", calendar: mode }) + " - " + globalize.formatDate(endDate, { format: "dd MMM yyyy", calendar: mode });
        }
      } else if (dateFormat.substr(0, 1) === "m") {
        if (startDate.getFullYear() === endDate.getFullYear()) {
          if (startDate.getMonth() === endDate.getMonth()) {
            formattedStr = globalize.formatDate(startDate, { format: "MMMM dd", calendar: mode }) + " - " + globalize.formatDate(endDate, { format: "dd, yyyy", calendar: mode });
          } else {
            formattedStr = globalize.formatDate(startDate, { format: "MMM dd", calendar: mode }) + " - " + globalize.formatDate(endDate, { format: "MMM dd, yyyy", calendar: mode });
          }
        } else {
          formattedStr = globalize.formatDate(startDate, { format: "MMM dd, yyyy", calendar: mode }) + " - " + globalize.formatDate(endDate, { format: "MMM dd, yyyy", calendar: mode });
        }
      } else {
        formattedStr = globalize.formatDate(startDate, { format: longDateFormat, calendar: mode }) + " - " + globalize.formatDate(endDate, { format: longDateFormat, calendar: mode });
      }
      return capitalizeFirstWord(formattedStr, "multiple");
    };
    ViewBase2.prototype.getMobileDateElement = function(date, className) {
      var wrap = createElement("div", {
        className,
        innerHTML: '<div class="e-m-date">' + this.parent.globalize.formatDate(date, { format: "d", calendar: this.parent.getCalendarMode() }) + '</div><div class="e-m-day">' + capitalizeFirstWord(this.parent.globalize.formatDate(date, { format: "E", calendar: this.parent.getCalendarMode() }), "single") + "</div>"
      });
      return wrap;
    };
    ViewBase2.prototype.setResourceHeaderContent = function(tdElement, tdData, className) {
      if (className === void 0) {
        className = TEXT_ELLIPSIS;
      }
      if (this.parent.activeViewOptions.resourceHeaderTemplate) {
        var data = { resource: tdData.resource, resourceData: tdData.resourceData };
        var scheduleId = this.parent.element.id + "_";
        var viewName = this.parent.activeViewOptions.resourceHeaderTemplateName;
        var templateId = scheduleId + viewName + "resourceHeaderTemplate";
        var quickTemplate = [].slice.call(this.parent.getResourceHeaderTemplate()(data, this.parent, "resourceHeaderTemplate", templateId, false, void 0, void 0, this.parent.root));
        append(quickTemplate, tdElement);
      } else {
        var resourceText = createElement("div", { className });
        this.parent.sanitize(tdData.resourceData[tdData.resource.textField], resourceText);
        tdElement.appendChild(resourceText);
      }
    };
    ViewBase2.prototype.renderResourceMobileLayout = function() {
      if (this.parent.resourceBase.lastResourceLevel && this.parent.resourceBase.lastResourceLevel.length <= 0) {
        return;
      }
      this.parent.resourceBase.renderResourceHeader();
      this.parent.resourceBase.renderResourceTree();
    };
    ViewBase2.prototype.addAutoHeightClass = function(element) {
      if (!this.parent.uiStateValues.isGroupAdaptive && this.parent.rowAutoHeight && this.isTimelineView() && this.parent.activeViewOptions.group.resources.length > 0) {
        addClass([element], AUTO_HEIGHT);
      }
    };
    ViewBase2.prototype.getColElements = function() {
      return [].slice.call(this.element.querySelectorAll("." + CONTENT_WRAP_CLASS + " col, ." + DATE_HEADER_WRAP_CLASS + " col"));
    };
    ViewBase2.prototype.setColWidth = function(content) {
      if (this.isTimelineView()) {
        var colElements = this.getColElements();
        var contentBody = this.element.querySelector("." + CONTENT_TABLE_CLASS + " tbody");
        var colWidth_1 = this.parent.getElementWidth(contentBody) / (colElements.length / 2);
        if (content.offsetHeight !== content.clientHeight) {
          var resourceColumn = this.parent.element.querySelector("." + RESOURCE_COLUMN_WRAP_CLASS);
          if (!isNullOrUndefined(resourceColumn) && resourceColumn.offsetHeight !== content.clientHeight) {
            setStyleAttribute(resourceColumn, { "height": formatUnit(content.clientHeight) });
          }
        }
        var cssClass = "." + HEADER_CELLS_CLASS + ",." + TIME_SLOT_CLASS + ",." + HEADER_WEEK_CELLS_CLASS + ",." + HEADER_MONTH_CELLS_CLASS + ",." + HEADER_YEAR_CELLS_CLASS;
        var headerCellElements = [].slice.call(this.element.querySelectorAll(cssClass));
        headerCellElements.forEach(function(ele) {
          var colSpan = isNullOrUndefined(ele.getAttribute("colspan")) ? "1" : ele.getAttribute("colspan");
          var headerCellColSpan = parseInt(colSpan, 10);
          setStyleAttribute(ele, { "width": formatUnit(colWidth_1 * headerCellColSpan) });
        });
      }
    };
    ViewBase2.prototype.resetColWidth = function() {
      var colElements = this.getColElements();
      for (var _i = 0, colElements_1 = colElements; _i < colElements_1.length; _i++) {
        var col = colElements_1[_i];
        col.style.width = "";
      }
    };
    ViewBase2.prototype.getContentAreaElement = function() {
      return this.element.querySelector("." + CONTENT_WRAP_CLASS);
    };
    ViewBase2.prototype.wireExpandCollapseIconEvents = function() {
      if (this.parent.resourceBase && this.parent.resourceBase.resourceCollection.length > 1) {
        var treeIcons = [].slice.call(this.element.querySelectorAll("." + RESOURCE_TREE_ICON_CLASS));
        for (var _i = 0, treeIcons_1 = treeIcons; _i < treeIcons_1.length; _i++) {
          var icon = treeIcons_1[_i];
          EventHandler.clearEvents(icon);
          EventHandler.add(icon, "click", this.parent.resourceBase.onTreeIconClick, this.parent.resourceBase);
        }
      }
    };
    ViewBase2.prototype.scrollToDate = function(scrollDate) {
      if (["Month", "TimelineMonth"].indexOf(this.parent.currentView) === -1 || isNullOrUndefined(scrollDate)) {
        return;
      }
      var scrollWrap = this.getContentAreaElement();
      var tdDate = new Date(resetTime(/* @__PURE__ */ new Date(+scrollDate)).getTime()).getTime();
      var dateElement = scrollWrap.querySelector("." + WORK_CELLS_CLASS + '[data-date="' + tdDate + '"]');
      if (this.parent.currentView === "Month" && dateElement) {
        if (scrollWrap.scrollWidth > scrollWrap.clientWidth) {
          if (!this.parent.enableRtl) {
            scrollWrap.scrollLeft = dateElement.offsetLeft;
          } else {
            scrollWrap.scrollLeft = -(this.parent.getContentTable().offsetWidth - dateElement.offsetLeft - dateElement.offsetWidth);
          }
        }
        scrollWrap.scrollTop = dateElement.offsetTop;
      }
      if (this.parent.currentView === "TimelineMonth" && dateElement) {
        if (!this.parent.enableRtl) {
          scrollWrap.scrollLeft = dateElement.offsetLeft;
        } else {
          scrollWrap.scrollLeft = -(this.parent.getContentTable().offsetWidth - dateElement.offsetLeft - dateElement.offsetWidth);
        }
      }
    };
    ViewBase2.prototype.setPersistence = function() {
      if (this.parent.enablePersistence) {
        var contentWrap = this.element.querySelector(".e-content-wrap");
        if (!isNullOrUndefined(contentWrap)) {
          this.parent.scrollLeft = contentWrap.scrollLeft;
          this.parent.scrollTop = contentWrap.scrollTop;
        }
      }
    };
    ViewBase2.prototype.retainScrollPosition = function() {
      if (this.parent.enablePersistence) {
        var conWrap = this.parent.element.querySelector(".e-content-wrap");
        if (!isNullOrUndefined(conWrap) && !isNullOrUndefined(this.parent.scrollLeft) && !isNullOrUndefined(this.parent.scrollTop)) {
          conWrap.scrollTop = this.parent.scrollTop;
          conWrap.scrollLeft = this.parent.scrollLeft;
        }
      }
    };
    ViewBase2.prototype.getViewStartDate = function() {
      var startDate = this.renderDates[0];
      if (this.parent.activeViewOptions.group.resources.length > 0 && this.parent.resourceBase.lastResourceLevel.length > 0) {
        startDate = this.parent.resourceBase.getResourceRenderDates()[0];
      }
      return startDate;
    };
    ViewBase2.prototype.getViewEndDate = function() {
      var endDate = addDays(this.renderDates[this.renderDates.length - 1], 1);
      if (this.parent.activeViewOptions.group.resources.length > 0 && this.parent.resourceBase.lastResourceLevel.length > 0) {
        endDate = addDays(this.parent.resourceBase.getResourceRenderDates().slice(-1)[0], 1);
      }
      return endDate;
    };
    ViewBase2.prototype.getAdjustedDate = function(startTime) {
      if (!this.parent.activeViewOptions.timeScale.enable || this.parent.currentView === "Month" || this.parent.currentView === "TimelineYear" && this.parent.activeViewOptions.group.resources.length === 0) {
        return new Date(startTime.setHours(0, 0, 0, 0));
      } else if (this.parent.currentView === "TimelineYear" && this.parent.activeViewOptions.group.resources.length > 0) {
        startTime.setHours(0, 0, 0, 0);
        return new Date(startTime.setDate(1));
      }
      return null;
    };
    ViewBase2.prototype.resetColLevels = function() {
      this.parent.resourceBase.expandedResources = [];
      var renderedCount = this.parent.virtualScrollModule.getRenderedCount();
      var lastLevel = this.parent.activeViewOptions.group.byDate ? this.colLevels[0] : this.parent.resourceBase.renderedResources;
      var index = 0;
      for (var i = 0; i < lastLevel.length; i++) {
        if (index >= renderedCount) {
          break;
        }
        index += lastLevel[parseInt(i.toString(), 10)].colSpan;
        this.parent.resourceBase.expandedResources.push(lastLevel[parseInt(i.toString(), 10)]);
      }
      if (this.parent.activeViewOptions.group.byDate) {
        this.colLevels[0] = this.parent.resourceBase.expandedResources;
        this.parent.virtualScrollModule.setRenderedDates(this.parent.resourceBase.expandedResources);
      } else {
        this.colLevels[this.colLevels.length - 2] = this.parent.resourceBase.expandedResources;
        this.parent.resourceBase.renderedResources = this.parent.resourceBase.expandedResources;
      }
      if (this.parent.currentView !== "Month") {
        this.colLevels[this.colLevels.length - 1] = this.colLevels[this.colLevels.length - 1].slice(0, index);
        this.parent.resourceBase.expandedResources = this.colLevels[this.colLevels.length - 1];
      }
    };
    ViewBase2.prototype.destroy = function() {
      if (this.element && this.element.parentNode) {
        remove(this.element);
      }
      this.element = null;
      this.renderDates = null;
      this.colLevels = null;
    };
    return ViewBase2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/renderer/vertical-view.js
var __extends19 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var VerticalView = (
  /** @class */
  function(_super) {
    __extends19(VerticalView2, _super);
    function VerticalView2(parent) {
      var _this = _super.call(this, parent) || this;
      _this.viewClass = "e-day-view";
      _this.isInverseTableSelect = true;
      _this.baseCssClass = "e-vertical-view";
      _this.appointment = null;
      return _this;
    }
    VerticalView2.prototype.getModuleName = function() {
      return "verticalView";
    };
    VerticalView2.prototype.addEventListener = function() {
      this.parent.on(scrollUiUpdate, this.scrollUiUpdate, this);
      this.parent.on(dataReady, this.renderEvents, this);
    };
    VerticalView2.prototype.removeEventListener = function() {
      if (this.parent) {
        this.parent.off(scrollUiUpdate, this.scrollUiUpdate);
        this.parent.off(dataReady, this.renderEvents);
      }
    };
    VerticalView2.prototype.renderEvents = function() {
      this.appointment = this.parent.activeViewOptions.timeScale.enable ? new VerticalEvent(this.parent) : new MonthEvent(this.parent);
      this.appointment.renderAppointments();
      this.parent.notify(eventsLoaded, {});
    };
    VerticalView2.prototype.onContentScroll = function(e) {
      this.parent.removeNewEventElement();
      var target = e.target;
      this.parent.notify(virtualScroll, e);
      this.scrollLeftPanel(target);
      this.scrollTopPanel(target);
      if (!this.parent.isAdaptive) {
        this.parent.uiStateValues.top = target.scrollTop;
      }
      this.parent.uiStateValues.left = target.scrollLeft;
      if (!isNullOrUndefined(this.parent.quickPopup) && !this.parent.uiStateValues.isTapHold) {
        this.parent.quickPopup.quickPopupHide();
      }
      this.setPersistence();
    };
    VerticalView2.prototype.onAdaptiveMove = function(e) {
      if (this.parent.uiStateValues.action) {
        e.preventDefault();
      }
    };
    VerticalView2.prototype.onAdaptiveScroll = function(e) {
      if (this.parent && !this.parent.isDestroyed) {
        this.parent.removeNewEventElement();
        this.parent.uiStateValues.top = e.target.scrollTop;
      }
    };
    VerticalView2.prototype.scrollLeftPanel = function(target) {
      var leftPanel = this.getLeftPanelElement();
      if (!isNullOrUndefined(leftPanel)) {
        leftPanel.scrollTop = target.scrollTop;
      }
    };
    VerticalView2.prototype.scrollUiUpdate = function(args) {
      if (!this.parent) {
        return;
      }
      var dateHeader = this.parent.element.querySelector("." + DATE_HEADER_WRAP_CLASS);
      var headerBarHeight = this.getHeaderBarHeight();
      var timeCells = this.getLeftPanelElement();
      var content = this.getScrollableElement();
      var header = this.getDatesHeaderElement();
      var scrollerHeight = this.parent.element.offsetHeight - headerBarHeight - header.offsetHeight;
      this.setContentHeight(content, timeCells, scrollerHeight);
      this.setColWidth(content);
      var scrollBarWidth = getScrollBarWidth();
      header.firstElementChild.style[args.cssProperties.rtlBorder] = "";
      header.style[args.cssProperties.rtlPadding] = "";
      var isDateHeaderScroll = this.parent.enableAllDayScroll ? !(content.offsetWidth - content.clientWidth <= dateHeader.offsetWidth - dateHeader.clientWidth && dateHeader.classList.contains("e-all-day-scroll")) : true;
      if (content.offsetWidth - content.clientWidth > 0 && isDateHeaderScroll) {
        header.firstElementChild.style[args.cssProperties.border] = scrollBarWidth > 0 ? "1px" : "0px";
        header.style[args.cssProperties.padding] = scrollBarWidth > 0 ? scrollBarWidth - 1 + "px" : "0px";
      } else {
        header.firstElementChild.style[args.cssProperties.border] = "";
        header.style[args.cssProperties.padding] = "";
      }
      if (!args.isPreventScrollUpdate) {
        if (this.parent.uiStateValues.isInitial) {
          if (this.parent.currentView.indexOf("Timeline") > -1) {
            content.scrollTop = this.parent.uiStateValues.top;
          }
          this.scrollToWorkHour();
          this.parent.uiStateValues.isInitial = false;
        } else {
          if (timeCells) {
            timeCells.scrollTop = this.parent.uiStateValues.top;
          }
          content.scrollTop = this.parent.uiStateValues.top;
          content.scrollLeft = this.parent.uiStateValues.left;
        }
      }
      if (this.parent.activeViewOptions.timeScale.enable) {
        this.highlightCurrentTime();
      }
      this.retainScrollPosition();
      if (!isNullOrUndefined(timeCells) && !isNullOrUndefined(content) && timeCells.scrollTop !== content.scrollTop) {
        timeCells.scrollTop = content.scrollTop;
      }
    };
    VerticalView2.prototype.setContentHeight = function(element, leftPanelElement, height) {
      if (this.parent.isAdaptive && !this.isTimelineView()) {
        element.style.height = this.parent.height === "auto" ? "auto" : formatUnit(height);
      } else {
        if (!isNullOrUndefined(leftPanelElement)) {
          leftPanelElement.style.height = this.parent.height === "auto" ? "auto" : formatUnit(height - this.getScrollXIndent(element));
        }
        element.style.height = this.parent.height === "auto" ? "auto" : formatUnit(height);
      }
    };
    VerticalView2.prototype.scrollToWorkHour = function() {
      if (this.parent.workHours.highlight) {
        var firstWorkHourCell = this.element.querySelector("." + WORK_HOURS_CLASS);
        if (firstWorkHourCell) {
          this.getScrollableElement().scrollTop = firstWorkHourCell.offsetTop;
          this.parent.uiStateValues.top = firstWorkHourCell.offsetTop;
          this.parent.uiStateValues.left = 0;
        }
      }
    };
    VerticalView2.prototype.scrollToHour = function(hour, scrollDate) {
      var date = this.parent.getStartEndTime(hour);
      if (!isNullOrUndefined(scrollDate)) {
        var headerElement = this.element.querySelector("." + HEADER_CELLS_CLASS + '[data-date="' + new Date(resetTime(scrollDate)).getTime() + '"]');
        if (headerElement) {
          if (this.parent.enableRtl) {
            var conWrap = this.element.querySelector("." + CONTENT_TABLE_CLASS);
            this.getScrollableElement().scrollLeft = -(conWrap.offsetWidth - headerElement.offsetLeft - headerElement.offsetWidth);
          } else {
            this.getScrollableElement().scrollLeft = headerElement.offsetLeft;
          }
        }
      }
      if (isNullOrUndefined(date)) {
        return;
      }
      this.getScrollableElement().scrollTop = this.getTopFromDateTime(date);
    };
    VerticalView2.prototype.scrollToDate = function(scrollDate) {
      this.scrollToHour(null, scrollDate);
    };
    VerticalView2.prototype.generateColumnLevels = function() {
      var level = this.getDateSlots(this.renderDates, this.parent.activeViewOptions.workDays);
      var columnLevels = [];
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        columnLevels = this.parent.resourceBase.generateResourceLevels(level);
        if (this.parent.activeViewOptions.group.hideNonWorkingDays) {
          while (columnLevels[0].length === 0) {
            this.parent.setProperties({ selectedDate: this.parent.activeView.getNextPreviousDate(this.previousNextAction) }, true);
            this.parent.activeView.getRenderDates();
            if (this.parent.headerModule) {
              this.parent.headerModule.setCalendarDate(this.parent.selectedDate);
              this.parent.headerModule.updateDateRange();
            }
            level = this.getDateSlots(this.renderDates, this.parent.activeViewOptions.workDays);
            columnLevels = this.parent.resourceBase.generateResourceLevels(level);
          }
        }
        if (this.parent.uiStateValues.isGroupAdaptive && this.parent.resourceBase.lastResourceLevel.length > 0) {
          var resourceLevel = this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex];
          var resStartHour = resourceLevel.resourceData[resourceLevel.resource.startHourField];
          var resEndHour = resourceLevel.resourceData[resourceLevel.resource.endHourField];
          var dateSlots = this.getDateSlots(resourceLevel.renderDates, resourceLevel.workDays, resStartHour, resEndHour);
          columnLevels = [dateSlots];
        }
      } else {
        columnLevels.push(level);
      }
      this.colLevels = columnLevels;
      return columnLevels;
    };
    VerticalView2.prototype.getDateSlots = function(renderDates, workDays, workStartHour, workEndHour) {
      if (workStartHour === void 0) {
        workStartHour = this.parent.workHours.start;
      }
      if (workEndHour === void 0) {
        workEndHour = this.parent.workHours.end;
      }
      var dateCol = [];
      var start = this.parent.getStartEndTime(workStartHour);
      var end = this.parent.getStartEndTime(workEndHour);
      for (var _i = 0, renderDates_1 = renderDates; _i < renderDates_1.length; _i++) {
        var col = renderDates_1[_i];
        var classList2 = [HEADER_CELLS_CLASS];
        if (this.isCurrentDate(col)) {
          classList2.push(CURRENT_DAY_CLASS);
        }
        dateCol.push({
          date: col,
          type: "dateHeader",
          className: classList2,
          colSpan: 1,
          workDays,
          startHour: /* @__PURE__ */ new Date(+start),
          endHour: /* @__PURE__ */ new Date(+end)
        });
      }
      return dateCol;
    };
    VerticalView2.prototype.isWorkHourRange = function(date) {
      return this.getStartHour().getTime() <= date.getTime() && this.getEndHour().getTime() >= date.getTime();
    };
    VerticalView2.prototype.highlightCurrentTime = function() {
      var _this = this;
      if (this.parent.activeViewOptions.headerRows.length > 0 && this.parent.activeViewOptions.headerRows.slice(-1)[0].option !== "Hour") {
        return;
      }
      var currentDate = this.parent.getCurrentTime();
      if (this.parent.showTimeIndicator && this.isWorkHourRange(currentDate)) {
        var currentDateIndex = this.getCurrentTimeIndicatorIndex();
        if (currentDateIndex.length > 0 && !isNullOrUndefined(this.element.querySelector("." + WORK_CELLS_CLASS))) {
          this.changeCurrentTimePosition();
          if (isNullOrUndefined(this.currentTimeIndicatorTimer)) {
            var interval = MS_PER_MINUTE - (currentDate.getSeconds() * 1e3 + currentDate.getMilliseconds());
            if (interval <= MS_PER_MINUTE - 1e3) {
              window.setTimeout(function() {
                if (!isNullOrUndefined(_this.currentTimeIndicatorTimer)) {
                  _this.clearCurrentTimeIndicatorTimer();
                  _this.changeCurrentTimePosition();
                  _this.updateCurrentTimeIndicatorTimer();
                }
              }, interval);
            }
            this.updateCurrentTimeIndicatorTimer();
          }
        } else {
          this.clearCurrentTimeIndicatorTimer();
        }
      } else {
        this.clearCurrentTimeIndicatorTimer();
      }
    };
    VerticalView2.prototype.getCurrentTimeIndicatorIndex = function() {
      var currentDateIndex = [];
      if (!isNullOrUndefined(this.parent.resourceBase) && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        var count = 0;
        var currentDate = resetTime(this.parent.getCurrentTime());
        if (this.parent.virtualScrollModule && this.parent.activeViewOptions.allowVirtualScrolling && this.parent.activeViewOptions.group.byDate) {
          for (var _i = 0, _a = this.parent.resourceBase.expandedResources; _i < _a.length; _i++) {
            var resource = _a[_i];
            if (resetTime(resource.date).getTime() === currentDate.getTime()) {
              currentDateIndex.push(count);
            }
            count += 1;
          }
        } else {
          for (var _b = 0, _c = this.parent.resourceBase.renderedResources; _b < _c.length; _b++) {
            var resource = _c[_b];
            var index = this.parent.getIndexOfDate(resource.renderDates, currentDate);
            if (index >= 0) {
              var resIndex = this.parent.activeViewOptions.group.byDate ? this.parent.resourceBase.lastResourceLevel.length * index + count : count + index;
              currentDateIndex.push(resIndex);
            }
            count += this.parent.activeViewOptions.group.byDate ? 1 : resource.renderDates.length;
          }
        }
      } else {
        var renderDates = this.parent.uiStateValues.isGroupAdaptive && this.parent.resourceBase.lastResourceLevel.length > 0 ? this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex].renderDates : this.renderDates;
        var index = this.parent.getIndexOfDate(renderDates, resetTime(this.parent.getCurrentTime()));
        if (index >= 0) {
          currentDateIndex.push(index);
        }
      }
      return currentDateIndex;
    };
    VerticalView2.prototype.clearCurrentTimeIndicatorTimer = function() {
      if (!isNullOrUndefined(this.currentTimeIndicatorTimer)) {
        window.clearInterval(this.currentTimeIndicatorTimer);
        this.currentTimeIndicatorTimer = null;
        this.removeCurrentTimeIndicatorElements();
      }
    };
    VerticalView2.prototype.updateCurrentTimeIndicatorTimer = function() {
      var _this = this;
      this.currentTimeIndicatorTimer = window.setInterval(function() {
        _this.changeCurrentTimePosition();
      }, MS_PER_MINUTE);
    };
    VerticalView2.prototype.removeCurrentTimeIndicatorElements = function() {
      var queryString = "." + PREVIOUS_TIMELINE_CLASS + ",." + CURRENT_TIMELINE_CLASS + ",." + CURRENT_TIME_CLASS;
      var timeIndicator = [].slice.call(this.element.querySelectorAll(queryString));
      for (var _i = 0, timeIndicator_1 = timeIndicator; _i < timeIndicator_1.length; _i++) {
        var indicator = timeIndicator_1[_i];
        remove(indicator);
      }
    };
    VerticalView2.prototype.changeCurrentTimePosition = function() {
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
      this.removeCurrentTimeIndicatorElements();
      var currentDateIndex = this.getCurrentTimeIndicatorIndex();
      var firstRow = this.parent.getContentTable().rows[0];
      var top = this.getTopFromDateTime(this.parent.getCurrentTime());
      var topInPx = formatUnit(top);
      var rowIndex = Math.floor(top / firstRow.cells[0].offsetHeight);
      var timeCellsWrap = this.getLeftPanelElement();
      var timeTrs = [].slice.call(timeCellsWrap.querySelectorAll("tr"));
      if (isNullOrUndefined(rowIndex) || isNaN(rowIndex) || rowIndex === timeTrs.length) {
        return;
      }
      var curTimeWrap = [].slice.call(this.element.querySelectorAll("." + TIMELINE_WRAPPER_CLASS));
      for (var i = 0, length_1 = currentDateIndex[0]; i < length_1; i++) {
        curTimeWrap[parseInt(i.toString(), 10)].appendChild(createElement("div", { className: PREVIOUS_TIMELINE_CLASS, styles: "top:" + topInPx }));
      }
      for (var _i = 0, currentDateIndex_1 = currentDateIndex; _i < currentDateIndex_1.length; _i++) {
        var day = currentDateIndex_1[_i];
        if (curTimeWrap.length > day) {
          curTimeWrap[parseInt(day.toString(), 10)].appendChild(createElement("div", {
            className: CURRENT_TIMELINE_CLASS,
            styles: "top:" + topInPx
          }));
        }
      }
      var currentTimeEle = createElement("div", {
        innerHTML: this.parent.getTimeString(this.parent.getCurrentTime()),
        className: CURRENT_TIME_CLASS,
        styles: "top:" + topInPx
      });
      if (rowIndex <= timeTrs.length) {
        removeClass(timeCellsWrap.querySelectorAll("." + HIDE_CHILDS_CLASS), HIDE_CHILDS_CLASS);
        if (timeTrs[parseInt(rowIndex.toString(), 10)]) {
          addClass([timeTrs[parseInt(rowIndex.toString(), 10)].lastElementChild], HIDE_CHILDS_CLASS);
        }
        prepend([currentTimeEle], timeCellsWrap);
        currentTimeEle.style.top = formatUnit(currentTimeEle.offsetTop - currentTimeEle.offsetHeight / 2);
      }
    };
    VerticalView2.prototype.getTopFromDateTime = function(date) {
      var startHour = this.getStartHour();
      var diffInMinutes = (date.getHours() - startHour.getHours()) * 60 + (date.getMinutes() - startHour.getMinutes());
      return diffInMinutes * this.getWorkCellHeight() * this.parent.activeViewOptions.timeScale.slotCount / this.parent.activeViewOptions.timeScale.interval;
    };
    VerticalView2.prototype.getWorkCellHeight = function() {
      return parseFloat(this.parent.getElementHeight(this.element.querySelector("." + WORK_CELLS_CLASS)).toFixed(2));
    };
    VerticalView2.prototype.getTdContent = function(date, type, groupIndex) {
      var cntEle;
      var wrapper = createElement("div");
      var templateName = "";
      var templateId = this.parent.element.id + "_";
      switch (type) {
        case "dateHeader":
          if (this.parent.activeViewOptions.dateHeaderTemplate) {
            templateName = "dateHeaderTemplate";
            var args = { date, type };
            var viewName = this.parent.activeViewOptions.dateHeaderTemplateName;
            cntEle = [].slice.call(this.parent.getDateHeaderTemplate()(args, this.parent, templateName, templateId + viewName + templateName, false, void 0, void 0, this.parent.root));
          } else {
            wrapper.innerHTML = this.parent.activeView.isTimelineView() ? '<span class="e-header-date e-navigate">' + this.getTimelineDate(date) + "</span>" : '<div class="e-header-day">' + capitalizeFirstWord(this.getDayName(date), "single") + "</div>" + ('<div class="e-header-date e-navigate" role="link">' + this.getDate(date) + "</div>");
            cntEle = [].slice.call(wrapper.childNodes);
          }
          break;
        case "majorSlot":
          if (this.parent.activeViewOptions.timeScale.majorSlotTemplate) {
            templateName = "majorSlotTemplate";
            var args = { date, type };
            cntEle = [].slice.call(this.parent.getMajorSlotTemplate()(args, this.parent, templateName, templateId + templateName, false, void 0, void 0, this.parent.root));
          } else {
            wrapper.innerHTML = "<span>" + this.getTime(date) + "</span>";
            cntEle = [].slice.call(wrapper.childNodes);
          }
          break;
        case "minorSlot":
          if (this.parent.activeViewOptions.timeScale.minorSlotTemplate) {
            templateName = "minorSlotTemplate";
            var args = { date, type };
            cntEle = [].slice.call(this.parent.getMinorSlotTemplate()(args, this.parent, templateName, templateId + templateName, false, void 0, void 0, this.parent.root));
          } else {
            cntEle = [].slice.call(wrapper.childNodes);
          }
          break;
        case "alldayCells":
          if (this.parent.activeViewOptions.cellTemplate) {
            var viewName = this.parent.activeViewOptions.cellTemplateName;
            templateName = "cellTemplate";
            var args = { date, type, groupIndex };
            cntEle = [].slice.call(this.parent.getCellTemplate()(args, this.parent, templateName, templateId + viewName + templateName, false, void 0, void 0, this.parent.root));
          }
          break;
      }
      return cntEle;
    };
    VerticalView2.prototype.refreshHeader = function() {
      remove(this.element.querySelector("tbody tr"));
      this.renderHeader();
      this.parent.notify(contentReady, {});
      var dateHeader = this.element.querySelector("." + DATE_HEADER_WRAP_CLASS);
      if (dateHeader) {
        dateHeader.scrollLeft = this.parent.uiStateValues.left;
      }
    };
    VerticalView2.prototype.renderLayout = function(type) {
      this.setPanel(createElement("div", { className: TABLE_WRAP_CLASS }));
      var clsList = [this.baseCssClass, this.viewClass];
      clsList.push(type);
      if (this.parent.activeViewOptions.group.byDate) {
        clsList.push("e-by-date");
      }
      if (!this.parent.activeViewOptions.timeScale.enable) {
        addClass([this.element], [TIMESCALE_DISABLE, this.viewClass]);
      }
      if (this.parent.activeViewOptions.allowVirtualScrolling && !this.parent.uiStateValues.isGroupAdaptive) {
        clsList.push(VIRTUAL_SCROLL_CLASS);
      }
      if (this.parent.rowAutoHeight && this.parent.eventSettings.ignoreWhitespace) {
        clsList.push(IGNORE_WHITESPACE);
      }
      this.renderPanel(type);
      addClass([this.element], clsList);
      this.element.appendChild(this.createTableLayout(OUTER_TABLE_CLASS));
      this.element.querySelector("table").setAttribute("role", "presentation");
      this.colLevels = this.generateColumnLevels();
      this.renderHeader();
      this.renderContent();
      if (this.parent.uiStateValues.isGroupAdaptive && !this.parent.element.querySelector("." + RESOURCE_TOOLBAR_CONTAINER)) {
        this.renderResourceMobileLayout();
      }
      this.parent.notify(contentReady, {});
    };
    VerticalView2.prototype.renderHeader = function() {
      var tr = createElement("tr");
      var dateTd = createElement("td");
      dateTd.appendChild(this.renderDatesHeader());
      if (this.parent.activeViewOptions.timeScale.enable) {
        var indentTd = createElement("td", { className: LEFT_INDENT_CLASS });
        indentTd.appendChild(this.renderLeftIndent());
        tr.appendChild(indentTd);
      }
      tr.appendChild(dateTd);
      prepend([tr], this.element.querySelector("tbody"));
    };
    VerticalView2.prototype.renderContent = function() {
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        this.parent.resourceBase.renderedResources = extend([], this.parent.resourceBase.lastResourceLevel, null, true);
      }
      var tr = createElement("tr");
      var workTd = createElement("td");
      if (this.parent.isAdaptive) {
        workTd.setAttribute("colspan", this.parent.activeViewOptions.timeScale.enable ? "2" : "1");
        var scrollContainer = createElement("div", { className: SCROLL_CONTAINER_CLASS });
        if (this.parent.activeViewOptions.timeScale.enable) {
          scrollContainer.appendChild(this.renderTimeCells());
        }
        scrollContainer.appendChild(this.renderContentArea());
        workTd.appendChild(scrollContainer);
        EventHandler.add(scrollContainer, "scroll", this.onAdaptiveScroll, this);
        EventHandler.add(scrollContainer, Browser.touchMoveEvent, this.onAdaptiveMove, this);
        tr.appendChild(workTd);
      } else {
        var levels = this.colLevels.slice(0);
        if (this.parent.virtualScrollModule) {
          this.resetColLevels();
        }
        var wrap = this.renderContentArea();
        workTd.appendChild(wrap);
        if (this.parent.activeViewOptions.timeScale.enable) {
          var timesTd = createElement("td");
          timesTd.appendChild(this.renderTimeCells());
          tr.appendChild(timesTd);
        }
        tr.appendChild(workTd);
        if (this.parent.virtualScrollModule) {
          this.colLevels = levels;
          this.parent.virtualScrollModule.renderVirtualTrack(wrap);
        }
      }
      this.element.querySelector("tbody").appendChild(tr);
    };
    VerticalView2.prototype.renderLeftIndent = function() {
      var wrap = createElement("div", { className: LEFT_INDENT_WRAP_CLASS });
      var tbl = this.createTableLayout();
      var trEle = createElement("tr");
      var rowCount = this.colLevels.length;
      var nth;
      for (var i = 0; i < rowCount; i++) {
        var ntr_1 = trEle.cloneNode();
        var data_1 = { className: [this.colLevels[parseInt(i.toString(), 10)][0] && this.colLevels[parseInt(i.toString(), 10)][0].className[0]], type: "emptyCells" };
        if (this.parent.activeViewOptions.showWeekNumber && data_1.className.indexOf(HEADER_CELLS_CLASS) !== -1) {
          data_1.className.push(WEEK_NUMBER_CLASS);
          var weekNo = this.parent.getWeekNumberContent(this.renderDates);
          data_1.template = [createElement("span", {
            innerHTML: "" + weekNo,
            attrs: { title: this.parent.localeObj.getConstant("week") + " " + weekNo }
          })];
        }
        nth = this.createTd(data_1);
        this.parent.renderHeaderIndentTemplate(data_1, nth);
        ntr_1.appendChild(nth);
        tbl.querySelector("tbody").appendChild(ntr_1);
      }
      var ntr = trEle.cloneNode();
      var appointmentExpandCollapse = createElement("div", {
        attrs: {
          "tabindex": "0",
          "role": "list",
          title: this.parent.localeObj.getConstant("expandAllDaySection"),
          "aria-disabled": "false",
          "aria-label": this.parent.localeObj.getConstant("expandAllDaySection")
        },
        className: ALLDAY_APPOINTMENT_SECTION_CLASS + " " + APPOINTMENT_ROW_EXPAND_CLASS + " " + ICON + " " + DISABLE_CLASS
      });
      var data = { className: [ALLDAY_CELLS_CLASS], type: "emptyCells" };
      nth = this.createTd(data);
      nth.appendChild(appointmentExpandCollapse);
      this.parent.renderHeaderIndentTemplate(data, nth);
      ntr.appendChild(nth);
      tbl.querySelector("tbody").appendChild(ntr);
      wrap.appendChild(tbl);
      return wrap;
    };
    VerticalView2.prototype.renderDatesHeader = function() {
      var container = createElement("div", { className: DATE_HEADER_CONTAINER_CLASS });
      var wrap = createElement("div", { className: DATE_HEADER_WRAP_CLASS });
      container.appendChild(wrap);
      var tbl = this.createTableLayout();
      var trEle = createElement("tr", { className: HEADER_ROW_CLASS });
      var rowCount = this.colLevels.length;
      var lastLevel = this.colLevels[rowCount - 1];
      for (var i = 0; i < rowCount; i++) {
        var ntr = trEle.cloneNode();
        var level = this.colLevels[parseInt(i.toString(), 10)];
        for (var j = 0; j < level.length; j++) {
          ntr.appendChild(this.createTd(level[parseInt(j.toString(), 10)]));
        }
        tbl.querySelector("tbody").appendChild(ntr);
      }
      this.createAllDayRow(tbl, lastLevel);
      this.createColGroup(tbl, lastLevel);
      wrap.appendChild(tbl);
      return container;
    };
    VerticalView2.prototype.createAllDayRow = function(table, tdData) {
      var ntr = createElement("tr", { className: ALLDAY_ROW_CLASS });
      for (var j = 0; j < tdData.length; j++) {
        var td = extend({}, tdData[parseInt(j.toString(), 10)]);
        td.className = [ALLDAY_CELLS_CLASS];
        td.type = "alldayCells";
        var ntd = this.createTd(td);
        ntd.setAttribute("data-date", td.date.getTime().toString());
        if (!isNullOrUndefined(td.groupIndex)) {
          ntd.setAttribute("data-group-index", "" + td.groupIndex);
        } else if (this.parent.uiStateValues.isGroupAdaptive) {
          ntd.setAttribute("data-group-index", "" + this.parent.uiStateValues.groupIndex);
        }
        this.wireCellEvents(ntd);
        ntr.appendChild(ntd);
      }
      table.querySelector("tbody").appendChild(ntr);
      var thead = createElement("thead");
      thead.appendChild(this.parent.eventBase.createEventWrapper("allDay"));
      prepend([thead], table);
    };
    VerticalView2.prototype.createTd = function(td) {
      var tdEle = createElement("td");
      this.addAttributes(td, tdEle);
      if (td.date && td.type) {
        var ele = this.getTdContent(td.date, td.type, td.groupIndex);
        if (ele && ele.length) {
          append(ele, tdEle);
        }
      }
      if (!this.parent.isMinMaxDate(resetTime(/* @__PURE__ */ new Date("" + td.date)))) {
        addClass([tdEle], DISABLE_DATES);
      }
      if (td.type === "resourceHeader") {
        this.setResourceHeaderContent(tdEle, td);
      }
      if (td.type === "dateHeader" && td.className.indexOf(HEADER_CELLS_CLASS) >= 0) {
        tdEle.setAttribute("data-date", td.date.getTime().toString());
        if (!isNullOrUndefined(td.groupIndex)) {
          tdEle.setAttribute("data-group-index", "" + td.groupIndex);
        }
        this.wireMouseEvents(tdEle);
      }
      var args = { elementType: td.type, element: tdEle, date: td.date, groupIndex: td.groupIndex };
      this.parent.trigger(renderCell, args);
      return tdEle;
    };
    VerticalView2.prototype.wireCellEvents = function(element) {
      EventHandler.add(element, "mousedown", this.parent.workCellAction.cellMouseDown, this.parent.workCellAction);
      this.wireMouseEvents(element);
    };
    VerticalView2.prototype.wireMouseEvents = function(element) {
      EventHandler.add(element, "click", this.parent.workCellAction.cellClick, this.parent.workCellAction);
      if (!this.parent.isAdaptive) {
        EventHandler.add(element, "dblclick", this.parent.workCellAction.cellDblClick, this.parent.workCellAction);
      }
    };
    VerticalView2.prototype.renderTimeCells = function() {
      var _this = this;
      var wrap = createElement("div", { className: TIME_CELLS_WRAP_CLASS });
      var tbl = this.createTableLayout();
      var trEle = createElement("tr");
      var handler = function(r) {
        r.type = r.first ? "majorSlot" : "minorSlot";
        r.className = r.last ? [TIME_CELLS_CLASS, TIME_SLOT_CLASS] : [TIME_SLOT_CLASS];
        var ntr = trEle.cloneNode();
        var data = { date: r.date, type: r.type, className: r.className };
        ntr.appendChild(_this.createTd(data));
        tbl.querySelector("tbody").appendChild(ntr);
        return r;
      };
      this.getTimeSlotRows(handler);
      wrap.appendChild(tbl);
      return wrap;
    };
    VerticalView2.prototype.renderContentArea = function() {
      var wrap = createElement("div", { className: CONTENT_WRAP_CLASS });
      var tbl = this.createTableLayout(CONTENT_TABLE_CLASS);
      this.setAriaAttributes(tbl);
      this.addAutoHeightClass(tbl);
      this.renderContentTable(tbl);
      this.createColGroup(tbl, this.colLevels.slice(-1)[0]);
      wrap.appendChild(tbl);
      this.wireCellEvents(tbl.querySelector("tbody"));
      EventHandler.add(wrap, "scroll", this.onContentScroll, this);
      EventHandler.add(wrap, Browser.touchMoveEvent, this.onAdaptiveMove, this);
      return wrap;
    };
    VerticalView2.prototype.renderContentTable = function(table) {
      var tBody = table.querySelector("tbody");
      append(this.getContentRows(), tBody);
      this.renderContentTableHeader(table);
    };
    VerticalView2.prototype.getContentRows = function() {
      var _this = this;
      var rows = [];
      var tr = createElement("tr");
      var td = createElement("td", { attrs: { "aria-selected": "false" } });
      var existingGroupIndices = /* @__PURE__ */ new Set();
      if (this.parent.virtualScrollModule && this.parent.activeViewOptions.group.resources.length > 0 && this.parent.virtualScrollModule.existingDataCollection.length > 0) {
        existingGroupIndices = new Set(this.parent.virtualScrollModule.existingDataCollection.map(function(data) {
          return data.groupIndex;
        }));
      }
      var handler = function(r) {
        var ntr = tr.cloneNode();
        for (var _i = 0, _a = _this.colLevels[_this.colLevels.length - 1]; _i < _a.length; _i++) {
          var tdData = _a[_i];
          var isAllowTdCreation = true;
          if (_this.parent.virtualScrollModule && _this.parent.activeViewOptions.group.resources.length > 0) {
            if (existingGroupIndices.has(tdData.groupIndex)) {
              isAllowTdCreation = false;
            }
          }
          if (isAllowTdCreation) {
            var ntd = _this.createContentTd(tdData, r, td);
            ntr.appendChild(ntd);
          }
        }
        rows.push(ntr);
        return r;
      };
      this.getTimeSlotRows(handler);
      return rows;
    };
    VerticalView2.prototype.createContentTd = function(tdData, r, td) {
      var ntd = td.cloneNode();
      if (tdData.colSpan) {
        ntd.setAttribute("colspan", tdData.colSpan.toString());
      }
      var clsName = this.getContentTdClass(r);
      var cellDate = resetTime(tdData.date);
      if (!this.parent.isMinMaxDate(cellDate)) {
        clsName.push(DISABLE_DATES);
      }
      cellDate = new Date(cellDate.setHours(r.date.getHours(), r.date.getMinutes(), r.date.getSeconds(), r.date.getMilliseconds()));
      var type = "workCells";
      if (tdData.className.indexOf(RESOURCE_PARENT_CLASS) !== -1) {
        clsName.push(RESOURCE_GROUP_CELLS_CLASS);
        type = "resourceGroupCells";
      }
      if (this.parent.workHours.highlight && (this.parent.activeViewOptions.timeScale.enable && this.isWorkHour(cellDate, tdData.startHour, tdData.endHour, tdData.workDays) || !this.parent.activeViewOptions.timeScale.enable && this.isWorkDay(cellDate, tdData.workDays))) {
        clsName.push(WORK_HOURS_CLASS);
      }
      addClass([ntd], clsName);
      if (this.parent.activeViewOptions.cellTemplate) {
        var args_1 = { date: cellDate, type, groupIndex: tdData.groupIndex };
        var scheduleId = this.parent.element.id + "_";
        var viewName = this.parent.activeViewOptions.cellTemplateName;
        var templateId = scheduleId + viewName + "cellTemplate";
        var tooltipTemplate = [].slice.call(this.parent.getCellTemplate()(args_1, this.parent, "cellTemplate", templateId, false, void 0, void 0, this.parent.root));
        append(tooltipTemplate, ntd);
      }
      ntd.setAttribute("data-date", cellDate.getTime().toString());
      var skeleton = "full";
      if (!this.parent.activeViewOptions.timeScale.enable) {
        var announcementText = this.parent.globalize.formatDate(tdData.date, { skeleton, calendar: this.parent.getCalendarMode() });
        ntd.setAttribute("aria-label", announcementText);
      } else {
        var startDateText = this.parent.globalize.formatDate(cellDate, {
          type: "dateTime",
          skeleton,
          calendar: this.parent.getCalendarMode()
        });
        var endDateText = this.parent.globalize.formatDate(this.getEndDateFromStartDate(cellDate), {
          type: "dateTime",
          skeleton,
          calendar: this.parent.getCalendarMode()
        });
        ntd.setAttribute("aria-label", startDateText + " " + this.parent.localeObj.getConstant("endAt") + " " + endDateText);
      }
      if (!isNullOrUndefined(tdData.groupIndex) || this.parent.uiStateValues.isGroupAdaptive) {
        var groupIndex = this.parent.uiStateValues.isGroupAdaptive ? this.parent.uiStateValues.groupIndex : tdData.groupIndex;
        ntd.setAttribute("data-group-index", "" + groupIndex);
      }
      var args = { elementType: type, element: ntd, date: cellDate, groupIndex: tdData.groupIndex };
      this.parent.trigger(renderCell, args);
      return ntd;
    };
    VerticalView2.prototype.getContentTdClass = function(r) {
      return r.last ? [WORK_CELLS_CLASS] : [WORK_CELLS_CLASS, ALTERNATE_CELLS_CLASS];
    };
    VerticalView2.prototype.renderContentTableHeader = function(table) {
      var thead = createElement("thead");
      thead.appendChild(this.parent.eventBase.createEventWrapper());
      if (this.parent.activeViewOptions.timeScale.enable) {
        thead.appendChild(this.parent.eventBase.createEventWrapper("timeIndicator"));
      }
      prepend([thead], table);
    };
    VerticalView2.prototype.getScrollableElement = function() {
      if (this.parent.isAdaptive && !this.isTimelineView()) {
        return this.element.querySelector("." + SCROLL_CONTAINER_CLASS);
      } else {
        return this.getContentAreaElement();
      }
    };
    VerticalView2.prototype.getLeftPanelElement = function() {
      return this.element.querySelector("." + TIME_CELLS_WRAP_CLASS);
    };
    VerticalView2.prototype.getEndDateFromStartDate = function(start) {
      var msMajorInterval = this.parent.activeViewOptions.timeScale.interval * MS_PER_MINUTE;
      var msInterval = msMajorInterval / this.parent.activeViewOptions.timeScale.slotCount;
      var end = new Date(start.getTime());
      end.setMilliseconds(end.getMilliseconds() + msInterval);
      return end;
    };
    VerticalView2.prototype.getStartEndHours = function(startEndTime) {
      if (!isNullOrUndefined(startEndTime) && startEndTime !== "") {
        var startEndDate = new Date(2e3, 0, 0, 0);
        var timeString = startEndTime.split(":");
        if (timeString.length === 2) {
          startEndDate.setHours(parseInt(timeString[0], 10), parseInt(timeString[1], 10), 0);
        }
        return startEndDate;
      }
      return new Date(2e3, 0, 0, 0);
    };
    VerticalView2.prototype.getTimeSlotRows = function(handler) {
      var rows = [];
      var startHour = this.getStartEndHours(this.parent.activeViewOptions.startHour);
      var endHour = this.getStartEndHours(this.parent.activeViewOptions.endHour);
      var msMajorInterval = this.parent.activeViewOptions.timeScale.interval * MS_PER_MINUTE;
      var msInterval = msMajorInterval / this.parent.activeViewOptions.timeScale.slotCount;
      var length = Math.round(MS_PER_DAY / msInterval);
      var msStartHour = startHour.getTime();
      var msEndHour = endHour.getTime();
      if (msStartHour !== msEndHour) {
        var milliSeconds = startHour.getTimezoneOffset() !== endHour.getTimezoneOffset() ? msEndHour - msStartHour - 36e5 : msEndHour - msStartHour;
        length = Math.round(milliSeconds / msInterval);
      }
      if (!this.parent.activeViewOptions.timeScale.enable) {
        length = 1;
      }
      var start = this.parent.getStartEndTime(this.parent.workHours.start);
      var end = this.parent.getStartEndTime(this.parent.workHours.end);
      for (var i = 0; i < length; i++) {
        var dt = new Date(msStartHour + msInterval * i);
        if (isDaylightSavingTime(dt) || new Date(msStartHour).getTimezoneOffset() !== dt.getTimezoneOffset()) {
          var timeOffset = new Date(msStartHour).getTimezoneOffset() - dt.getTimezoneOffset();
          dt = new Date(dt.getTime() - 1e3 * 60 * timeOffset);
        }
        var majorTickDivider = i % (msMajorInterval / msInterval);
        var row = {
          date: /* @__PURE__ */ new Date("" + dt),
          startHour: start,
          endHour: end,
          first: majorTickDivider === 0,
          middle: majorTickDivider < this.parent.activeViewOptions.timeScale.slotCount - 1,
          last: majorTickDivider === this.parent.activeViewOptions.timeScale.slotCount - 1,
          type: ""
        };
        if (handler) {
          handler(row);
        }
        rows.push(row);
      }
      return rows;
    };
    VerticalView2.prototype.getAdjustedDate = function(startTime) {
      if (!this.parent.activeViewOptions.timeScale.enable) {
        return new Date(startTime.setHours(0, 0, 0, 0));
      } else {
        var timeSlots = this.getTimeSlotRows();
        var startDate = new Date(new Date(timeSlots[0].date.getTime()).setHours(startTime.getHours(), startTime.getMinutes(), startTime.getMilliseconds()));
        for (var i = 0; i < timeSlots.length; i++) {
          if (timeSlots[parseInt(i.toString(), 10)].date.getTime() > startDate.getTime()) {
            startTime.setHours(timeSlots[i - 1].date.getHours(), timeSlots[i - 1].date.getMinutes(), timeSlots[i - 1].date.getMilliseconds());
            return new Date(startTime);
          }
        }
      }
      return null;
    };
    VerticalView2.prototype.destroy = function() {
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
      this.clearCurrentTimeIndicatorTimer();
      if (this.element) {
        if (this.appointment) {
          this.appointment.destroy();
          this.appointment = null;
        }
        var contentScrollableEle = this.getContentAreaElement();
        if (contentScrollableEle) {
          EventHandler.remove(contentScrollableEle, "scroll", this.onContentScroll);
          EventHandler.remove(contentScrollableEle, Browser.touchMoveEvent, this.onAdaptiveMove);
        }
        if (this.parent.resourceBase) {
          this.parent.resourceBase.destroy();
        }
        if (this.parent.scheduleTouchModule) {
          this.parent.scheduleTouchModule.resetValues();
        }
        _super.prototype.destroy.call(this);
      }
    };
    return VerticalView2;
  }(ViewBase)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/renderer/day.js
var __extends20 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Day = (
  /** @class */
  function(_super) {
    __extends20(Day2, _super);
    function Day2(parent) {
      var _this = _super.call(this, parent) || this;
      _this.viewClass = "e-day-view";
      return _this;
    }
    Day2.prototype.getModuleName = function() {
      return "day";
    };
    return Day2;
  }(VerticalView)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/renderer/week.js
var __extends21 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Week = (
  /** @class */
  function(_super) {
    __extends21(Week2, _super);
    function Week2(parent) {
      var _this = _super.call(this, parent) || this;
      _this.viewClass = "e-week-view";
      return _this;
    }
    Week2.prototype.startDate = function() {
      return this.getViewStartDate();
    };
    Week2.prototype.endDate = function() {
      return this.getViewEndDate();
    };
    Week2.prototype.getModuleName = function() {
      return "week";
    };
    return Week2;
  }(VerticalView)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/renderer/work-week.js
var __extends22 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var WorkWeek = (
  /** @class */
  function(_super) {
    __extends22(WorkWeek2, _super);
    function WorkWeek2(parent) {
      var _this = _super.call(this, parent) || this;
      _this.viewClass = "e-work-week-view";
      return _this;
    }
    WorkWeek2.prototype.startDate = function() {
      return this.getViewStartDate();
    };
    WorkWeek2.prototype.endDate = function() {
      return this.getViewEndDate();
    };
    WorkWeek2.prototype.getModuleName = function() {
      return "workWeek";
    };
    return WorkWeek2;
  }(VerticalView)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/renderer/month.js
var __extends23 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Month = (
  /** @class */
  function(_super) {
    __extends23(Month2, _super);
    function Month2(parent) {
      var _this = _super.call(this, parent) || this;
      _this.dayNameFormat = "wide";
      _this.viewClass = "e-month-view";
      _this.isInverseTableSelect = false;
      _this.monthEvent = null;
      _this.monthDates = {};
      return _this;
    }
    Month2.prototype.addEventListener = function() {
      this.parent.on(scrollUiUpdate, this.onScrollUIUpdate, this);
      this.parent.on(dataReady, this.onDataReady, this);
      this.parent.on(cellClick, this.onCellClick, this);
    };
    Month2.prototype.removeEventListener = function() {
      if (this.parent) {
        this.parent.off(scrollUiUpdate, this.onScrollUIUpdate);
        this.parent.off(dataReady, this.onDataReady);
        this.parent.off(cellClick, this.onCellClick);
      }
    };
    Month2.prototype.onDataReady = function(args) {
      this.monthEvent = new MonthEvent(this.parent);
      this.monthEvent.renderAppointments();
      this.parent.notify(eventsLoaded, {});
    };
    Month2.prototype.onCellClick = function(event) {
    };
    Month2.prototype.onContentScroll = function(e) {
      this.parent.removeNewEventElement();
      this.parent.notify(virtualScroll, e);
      this.scrollTopPanel(e.target);
      this.scrollLeftPanel(e.target);
      this.parent.uiStateValues.top = e.target.scrollTop;
      this.parent.uiStateValues.left = e.target.scrollLeft;
      this.setPersistence();
    };
    Month2.prototype.scrollLeftPanel = function(target) {
      var leftPanel = this.getLeftPanelElement();
      if (leftPanel) {
        leftPanel.scrollTop = target.scrollTop;
      }
    };
    Month2.prototype.getLeftPanelElement = function() {
      return this.element.querySelector("." + WEEK_NUMBER_WRAPPER_CLASS);
    };
    Month2.prototype.onScrollUIUpdate = function(args) {
      var headerHeight = this.getHeaderBarHeight();
      var header = this.getDatesHeaderElement();
      var content = this.getContentAreaElement();
      var height = this.parent.element.offsetHeight - headerHeight - header.offsetHeight;
      var leftPanel = this.getLeftPanelElement();
      if (this.parent.height !== "auto") {
        this.setContentHeight(content, leftPanel, height);
      }
      var scrollBarWidth = getScrollBarWidth();
      header.firstElementChild.style[args.cssProperties.rtlBorder] = "";
      header.style[args.cssProperties.rtlPadding] = "";
      if (content.offsetWidth - content.clientWidth > 0) {
        header.firstElementChild.style[args.cssProperties.border] = scrollBarWidth > 0 ? "1px" : "0px";
        header.style[args.cssProperties.padding] = scrollBarWidth > 0 ? scrollBarWidth - 1 + "px" : "0px";
      } else {
        header.firstElementChild.style[args.cssProperties.border] = "";
        header.style[args.cssProperties.padding] = "";
      }
      this.setColWidth(content);
      if (args.scrollPosition || !args.isPreventScrollUpdate && this.parent.currentView === "TimelineMonth") {
        var top_1 = this.parent.currentView === "TimelineMonth" ? this.parent.uiStateValues.top : args.scrollPosition.top;
        if (leftPanel) {
          leftPanel.scrollTop = top_1;
        }
        content.scrollTop = top_1;
        if (this.parent.uiStateValues.isInitial) {
          this.scrollToSelectedDate();
          this.parent.uiStateValues.isInitial = false;
        } else {
          content.scrollLeft = this.parent.currentView === "TimelineMonth" ? this.parent.uiStateValues.left : args.scrollPosition.left;
        }
      } else {
        this.scrollToSelectedDate();
      }
      this.retainScrollPosition();
    };
    Month2.prototype.scrollToSelectedDate = function() {
      var headerCell = this.element.querySelector("." + HEADER_CELLS_CLASS + '[data-date="' + this.parent.selectedDate.getTime().toString() + '"]');
      var content = this.getContentAreaElement();
      if (!isNullOrUndefined(headerCell)) {
        content.scrollLeft = !this.parent.enableRtl ? headerCell.offsetLeft : -(this.parent.getContentTable().offsetWidth - headerCell.offsetLeft - headerCell.offsetWidth);
      } else {
        content.scrollLeft = 0;
      }
      if (content.scrollLeft === 0 && this.parent.uiStateValues.isInitial) {
        this.parent.uiStateValues.left = 0;
      }
    };
    Month2.prototype.setContentHeight = function(content, leftPanelElement, height) {
      content.style.height = "auto";
      if (this.parent.currentView === "Month") {
        content.style.height = formatUnit(height);
      }
      if (leftPanelElement) {
        if (this.parent.currentView === "MonthAgenda") {
          height = this.parent.activeViewOptions.interval > 1 ? this.getContentAreaElement().firstElementChild.offsetHeight : this.element.querySelector("." + CONTENT_TABLE_CLASS).offsetHeight;
        }
        leftPanelElement.style.height = "auto";
        leftPanelElement.style.height = formatUnit(height - this.getScrollXIndent(content));
      }
    };
    Month2.prototype.generateColumnLevels = function() {
      var colLevels = [];
      var level = this.getDateSlots(this.renderDates, this.parent.activeViewOptions.workDays);
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        colLevels = this.parent.resourceBase.generateResourceLevels(level);
        if (this.parent.currentView === "MonthAgenda") {
          colLevels = [level];
        }
        if (this.parent.uiStateValues.isGroupAdaptive && this.parent.resourceBase.lastResourceLevel.length > 0) {
          var resourceLevel = this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex];
          var levels_1 = this.getDateSlots(resourceLevel.renderDates, resourceLevel.workDays);
          if (this.parent.activeViewOptions.group.byDate && this.parent.activeViewOptions.group.hideNonWorkingDays) {
            var index = levels_1.findIndex(function(x, index2) {
              return index2 !== 0 && x.date.getDay() === levels_1[0].date.getDay();
            });
            levels_1 = index > -1 ? levels_1.slice(0, index) : levels_1;
          }
          colLevels = [levels_1];
        }
      } else {
        colLevels.push(level);
      }
      this.colLevels = colLevels;
      return colLevels;
    };
    Month2.prototype.getDateSlots = function(renderDates, workDays) {
      var count = this.parent.activeViewOptions.showWeekend ? WEEK_LENGTH : workDays.length;
      var dateSlots = [];
      var isCurrentMonth = this.isCurrentMonth(this.parent.selectedDate);
      for (var col = 0; col < count; col++) {
        var classList2 = [HEADER_CELLS_CLASS];
        var currentDateIndex = renderDates.slice(0, count).map(function(date) {
          return date.getDay();
        });
        if (isCurrentMonth && currentDateIndex.indexOf(this.parent.currentTimezoneDate.getDay()) === col) {
          classList2.push(CURRENT_DAY_CLASS);
        }
        dateSlots.push({ date: renderDates[parseInt(col.toString(), 10)], type: "monthDay", className: classList2, colSpan: 1, workDays });
      }
      return dateSlots;
    };
    Month2.prototype.getDayNameFormat = function() {
      if (this.parent.isAdaptive || this.parent.activeViewOptions.group.resources.length > 0) {
        return "abbreviated";
      }
      return "wide";
    };
    Month2.prototype.renderLayout = function(type) {
      this.dayNameFormat = this.getDayNameFormat();
      this.setPanel(createElement("div", { className: TABLE_WRAP_CLASS }));
      var clsList = [this.viewClass];
      clsList.push(type);
      if (this.parent.activeViewOptions.group.byDate) {
        clsList.push("e-by-date");
        if (this.parent.currentView !== "Month") {
          this.parent.activeViewOptions.group.hideNonWorkingDays = false;
        }
      }
      if (this.parent.activeViewOptions.allowVirtualScrolling && !this.parent.uiStateValues.isGroupAdaptive) {
        clsList.push(VIRTUAL_SCROLL_CLASS);
      }
      if (this.parent.rowAutoHeight && this.parent.eventSettings.ignoreWhitespace) {
        clsList.push(IGNORE_WHITESPACE);
      }
      addClass([this.element], clsList);
      this.renderPanel(type);
      this.element.appendChild(this.createTableLayout(OUTER_TABLE_CLASS));
      this.element.querySelector("table").setAttribute("role", "presentation");
      this.colLevels = this.generateColumnLevels();
      this.renderHeader();
      this.renderContent();
      var target = this.parent.currentView === "MonthAgenda" ? this.parent.activeView.getPanel() : this.parent.element;
      if (this.parent.uiStateValues.isGroupAdaptive && !target.querySelector("." + RESOURCE_TOOLBAR_CONTAINER)) {
        this.renderResourceMobileLayout();
      }
      this.parent.notify(contentReady, {});
      if (this.parent.uiStateValues.isCustomMonth) {
        this.parent.uiStateValues.isCustomMonth = false;
      }
    };
    Month2.prototype.refreshHeader = function() {
      remove(this.element.querySelector("tbody tr"));
      this.renderHeader();
      this.parent.notify(contentReady, {});
      var dateHeader = this.element.querySelector("." + DATE_HEADER_WRAP_CLASS);
      var contentWrapper = this.element.querySelector("." + CONTENT_WRAP_CLASS);
      if (dateHeader) {
        dateHeader.scrollLeft = this.parent.uiStateValues.left;
      }
      if (contentWrapper) {
        contentWrapper.scrollLeft = this.parent.uiStateValues.left;
      }
    };
    Month2.prototype.wireCellEvents = function(element) {
      EventHandler.add(element, "mousedown", this.parent.workCellAction.cellMouseDown, this.parent.workCellAction);
      EventHandler.add(element, "click", this.parent.workCellAction.cellClick, this.parent.workCellAction);
      if (!this.parent.isAdaptive) {
        EventHandler.add(element, "dblclick", this.parent.workCellAction.cellDblClick, this.parent.workCellAction);
      }
    };
    Month2.prototype.renderHeader = function() {
      var tr = createElement("tr");
      this.renderLeftIndent(tr);
      var dateTd = createElement("td");
      dateTd.appendChild(this.renderDatesHeader());
      tr.appendChild(dateTd);
      prepend([tr], this.element.querySelector("tbody"));
    };
    Month2.prototype.renderLeftIndent = function(tr) {
      if (this.parent.activeViewOptions.showWeekNumber) {
        tr.appendChild(createElement("td", { className: "e-left-indent" }));
      }
    };
    Month2.prototype.renderContent = function() {
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        this.parent.resourceBase.renderedResources = extend([], this.parent.resourceBase.lastResourceLevel, null, true);
      }
      var tr = createElement("tr");
      if (this.parent.activeViewOptions.showWeekNumber) {
        tr.appendChild(this.renderWeekNumberContent());
      }
      var workTd = createElement("td");
      var levels = this.colLevels.slice(0);
      if (this.parent.virtualScrollModule) {
        this.resetColLevels();
      }
      var wrap = createElement("div", { className: CONTENT_WRAP_CLASS });
      var contentArea = this.renderContentArea();
      if (this.parent.currentView === "Month") {
        wrap.appendChild(contentArea);
      } else {
        var monthAgendaWrapper = createElement("div", { className: TABLE_CONTAINER_CLASS });
        monthAgendaWrapper.appendChild(contentArea);
        wrap.appendChild(monthAgendaWrapper);
      }
      EventHandler.add(wrap, "scroll", this.onContentScroll, this);
      workTd.appendChild(wrap);
      tr.appendChild(workTd);
      if (this.parent.virtualScrollModule) {
        this.colLevels = levels;
        this.parent.virtualScrollModule.renderVirtualTrack(wrap);
      }
      this.element.querySelector("tbody").appendChild(tr);
      this.renderAppointmentContainer();
    };
    Month2.prototype.renderWeekNumberContent = function() {
      var dateCol = this.renderDates.map(function(date) {
        return /* @__PURE__ */ new Date(+date);
      });
      var td = createElement("td");
      var contentWrapper = createElement("div", { className: WEEK_NUMBER_WRAPPER_CLASS });
      td.appendChild(contentWrapper);
      var contentWrapTable = this.createTableLayout();
      contentWrapper.appendChild(contentWrapTable);
      var noOfDays = this.parent.activeViewOptions.showWeekend ? WEEK_LENGTH : this.parent.activeViewOptions.workDays.length;
      for (var i = 0, length_1 = this.renderDates.length / noOfDays; i < length_1; i++) {
        var dates = dateCol.splice(0, noOfDays);
        var weekNumber = this.parent.getWeekNumberContent(dates);
        contentWrapTable.querySelector("tbody").appendChild(this.createWeekNumberElement(weekNumber));
      }
      return td;
    };
    Month2.prototype.renderAppointmentContainer = function() {
    };
    Month2.prototype.renderDatesHeader = function() {
      var container = createElement("div", { className: DATE_HEADER_CONTAINER_CLASS });
      var wrap = createElement("div", { className: DATE_HEADER_WRAP_CLASS });
      container.appendChild(wrap);
      var table = this.createTableLayout();
      if (this.parent.currentView === "Month") {
        var thead = createElement("thead");
        thead.appendChild(createElement("tr"));
        prepend([thead], table);
      }
      this.createColGroup(table, this.colLevels[this.colLevels.length - 1]);
      var trEle = createElement("tr");
      for (var i = 0; i < this.colLevels.length; i++) {
        var level = this.colLevels[parseInt(i.toString(), 10)];
        var ntr = trEle.cloneNode();
        for (var j = 0; j < level.length; j++) {
          var td = level[parseInt(j.toString(), 10)];
          ntr.appendChild(this.createHeaderCell(td));
        }
        table.querySelector("tbody").appendChild(ntr);
      }
      wrap.appendChild(table);
      return container;
    };
    Month2.prototype.createHeaderCell = function(td) {
      var tdEle = createElement("td");
      this.addAttributes(td, tdEle);
      if (td.type === "monthDay") {
        var ele = createElement("span", { innerHTML: capitalizeFirstWord(this.parent.getDayNames(this.dayNameFormat)[td.date.getDay()], "single") });
        tdEle.appendChild(ele);
      }
      if (td.type === "resourceHeader") {
        this.setResourceHeaderContent(tdEle, td);
      }
      if (td.type === "dateHeader") {
        addClass([tdEle], DATE_HEADER_CLASS);
        tdEle.setAttribute("data-date", td.date.getTime().toString());
        if (this.parent.activeViewOptions.dateHeaderTemplate) {
          var cellArgs = { date: td.date, type: td.type };
          var elementId = this.parent.element.id + "_";
          var viewName = this.parent.activeViewOptions.dateHeaderTemplateName;
          var templateId = elementId + viewName + "dateHeaderTemplate";
          var dateTemplate = [].slice.call(this.parent.getDateHeaderTemplate()(cellArgs, this.parent, "dateHeaderTemplate", templateId, false, void 0, void 0, this.parent.root));
          if (dateTemplate && dateTemplate.length) {
            append(dateTemplate, tdEle);
          }
        } else {
          var ele = createElement("span", { className: NAVIGATE_CLASS });
          var skeleton = "full";
          var title = this.parent.globalize.formatDate(td.date, { skeleton, calendar: this.parent.getCalendarMode() });
          ele.setAttribute("title", capitalizeFirstWord(title, "multiple"));
          var innerText = this.parent.calendarUtil.isMonthStart(td.date) && !this.isCurrentDate(td.date) && !this.parent.isAdaptive ? this.parent.globalize.formatDate(td.date, { format: "MMM d", calendar: this.parent.getCalendarMode() }) : this.parent.globalize.formatDate(td.date, { skeleton: "d", calendar: this.parent.getCalendarMode() });
          ele.innerHTML = capitalizeFirstWord(innerText, "single");
          tdEle.appendChild(ele);
        }
        this.wireCellEvents(tdEle);
      }
      var args = { elementType: td.type, element: tdEle, date: td.date, groupIndex: td.groupIndex };
      this.parent.trigger(renderCell, args);
      return tdEle;
    };
    Month2.prototype.getContentSlots = function() {
      if (!(this.colLevels[this.colLevels.length - 1] && this.colLevels[this.colLevels.length - 1][0])) {
        return [];
      }
      var slotDatas = [];
      var prepareSlots = function(rowIndex, renderDate, resData, classList2) {
        var data = {
          date: /* @__PURE__ */ new Date(+renderDate),
          groupIndex: resData.groupIndex,
          workDays: resData.workDays,
          type: "monthCells",
          className: classList2 || [WORK_CELLS_CLASS]
        };
        if (!slotDatas[parseInt(rowIndex.toString(), 10)]) {
          slotDatas[parseInt(rowIndex.toString(), 10)] = [];
        }
        slotDatas[parseInt(rowIndex.toString(), 10)].push(data);
      };
      var includeResource = this.parent.currentView !== "MonthAgenda" && this.parent.activeViewOptions.group.resources.length > 0;
      if (includeResource && !this.parent.uiStateValues.isGroupAdaptive && !this.parent.activeViewOptions.group.byDate) {
        for (var _i = 0, _a = this.colLevels[this.colLevels.length - 2]; _i < _a.length; _i++) {
          var res = _a[_i];
          var dates = res.renderDates.map(function(date) {
            return /* @__PURE__ */ new Date(+date);
          });
          var count = this.parent.activeViewOptions.showWeekend ? WEEK_LENGTH : res.workDays.length;
          for (var i = 0; i < res.renderDates.length / count; i++) {
            var colDates = dates.splice(0, count);
            for (var _b = 0, colDates_1 = colDates; _b < colDates_1.length; _b++) {
              var colDate = colDates_1[_b];
              prepareSlots(i, colDate, res);
            }
          }
        }
      } else {
        var dates = this.renderDates.map(function(date) {
          return /* @__PURE__ */ new Date(+date);
        });
        var count = this.parent.activeViewOptions.showWeekend ? WEEK_LENGTH : this.parent.activeViewOptions.workDays.length;
        var level = this.colLevels.slice(0, 1)[0];
        var startIndex = this.renderDates.map(Number).indexOf(+level[0].date);
        for (var i = 0; i < this.renderDates.length / count; i++) {
          var colDates = dates.splice(0, count);
          var k = startIndex;
          var _loop_1 = function(j2) {
            var colDate2 = colDates[parseInt(k.toString(), 10)];
            k++;
            if (includeResource) {
              var lastRow = this_1.colLevels[this_1.colLevels.length - 1];
              var rowCount = lastRow.length / count;
              var resourcesTd = lastRow.slice(0, rowCount);
              if (this_1.parent.activeViewOptions.group.hideNonWorkingDays) {
                resourcesTd = lastRow.filter(function(x) {
                  return x.date.getDay() === colDate2.getDay();
                });
                if (resourcesTd.length === 0) {
                  j2 = j2 - 1;
                  return out_j_1 = j2, "continue";
                }
              }
              for (var resIndex = 0; resIndex < resourcesTd.length; resIndex++) {
                var clsList = void 0;
                if (resIndex !== 0) {
                  clsList = [WORK_CELLS_CLASS, DISABLE_DATE];
                }
                prepareSlots(i, colDate2, resourcesTd[parseInt(resIndex.toString(), 10)], clsList);
              }
            } else {
              prepareSlots(i, colDate2, this_1.colLevels[this_1.colLevels.length - 1][0]);
            }
            out_j_1 = j2;
          };
          var this_1 = this, out_j_1;
          for (var j = startIndex; j < this.colLevels[0].length + startIndex && j < colDates.length; j++) {
            _loop_1(j);
            j = out_j_1;
          }
        }
      }
      return slotDatas;
    };
    Month2.prototype.updateClassList = function(data) {
      if (!this.isCustomMonth() && this.isOtherMonth(data.date)) {
        data.className.push(OTHERMONTH_CLASS);
      }
      if (!this.parent.isMinMaxDate(data.date)) {
        data.className.push(DISABLE_DATES);
      }
      this.updateSelectedCellClass(data);
    };
    Month2.prototype.updateSelectedCellClass = function(data) {
      return;
    };
    Month2.prototype.isOtherMonth = function(date) {
      return date.getTime() < this.monthDates.start.getTime() || date.getTime() > this.monthDates.end.getTime();
    };
    Month2.prototype.renderContentArea = function() {
      var tbl = this.createTableLayout(CONTENT_TABLE_CLASS);
      this.setAriaAttributes(tbl);
      this.addAutoHeightClass(tbl);
      if (this.parent.currentView === "TimelineMonth") {
        this.createColGroup(tbl, this.colLevels[this.colLevels.length - 1]);
      }
      var monthDate = new Date(this.parent.selectedDate.getTime());
      this.monthDates = {
        start: this.parent.calendarUtil.firstDateOfMonth(monthDate),
        end: this.parent.calendarUtil.lastDateOfMonth(addMonths(monthDate, this.parent.activeViewOptions.interval - 1))
      };
      var tBody = tbl.querySelector("tbody");
      append(this.getContentRows(), tBody);
      this.wireCellEvents(tBody);
      return tbl;
    };
    Month2.prototype.getContentRows = function() {
      var trows = [];
      var tr = createElement("tr");
      var td = createElement("td", { attrs: { "aria-selected": "false" } });
      var slotDatas = this.getContentSlots();
      for (var row = 0; row < slotDatas.length; row++) {
        var ntr = tr.cloneNode();
        for (var col = 0; col < slotDatas[parseInt(row.toString(), 10)].length; col++) {
          var ntd = this.createContentTd(slotDatas[parseInt(row.toString(), 10)][parseInt(col.toString(), 10)], td);
          ntr.appendChild(ntd);
        }
        trows.push(ntr);
      }
      return trows;
    };
    Month2.prototype.createContentTd = function(data, td) {
      var ntd = td.cloneNode();
      if (data.colSpan) {
        ntd.setAttribute("colspan", data.colSpan.toString());
      }
      this.updateClassList(data);
      var type = data.type;
      if (data.className.indexOf(RESOURCE_PARENT_CLASS) !== -1) {
        data.className.push(RESOURCE_GROUP_CELLS_CLASS);
        type = "resourceGroupCells";
      }
      if (this.parent.workHours.highlight && this.isWorkDay(data.date, data.workDays)) {
        data.className.push(WORKDAY_CLASS);
      }
      if (this.isCurrentDate(data.date)) {
        data.className.push(CURRENTDATE_CLASS);
      }
      addClass([ntd], data.className);
      ntd.setAttribute("data-date", data.date.getTime().toString());
      if (!isNullOrUndefined(data.groupIndex) || this.parent.uiStateValues.isGroupAdaptive) {
        var groupIndex = this.parent.uiStateValues.isGroupAdaptive ? this.parent.uiStateValues.groupIndex : data.groupIndex;
        ntd.setAttribute("data-group-index", "" + groupIndex);
      }
      this.renderDateHeaderElement(data, ntd);
      if (this.parent.activeViewOptions.cellTemplate) {
        var args_1 = { date: data.date, type, groupIndex: data.groupIndex };
        var scheduleId = this.parent.element.id + "_";
        var viewName = this.parent.activeViewOptions.cellTemplateName;
        var templateId = scheduleId + viewName + "cellTemplate";
        var cellTemplate = [].slice.call(this.parent.getCellTemplate()(args_1, this.parent, "cellTemplate", templateId, false, void 0, void 0, this.parent.root));
        append(cellTemplate, ntd);
      }
      var args = { elementType: type, element: ntd, date: data.date, groupIndex: data.groupIndex };
      this.parent.trigger(renderCell, args);
      return ntd;
    };
    Month2.prototype.renderDateHeaderElement = function(data, ntd) {
      if (this.parent.currentView === "TimelineMonth") {
        return;
      }
      var dateHeader = createElement("div", { className: DATE_HEADER_CLASS });
      if (this.parent.activeViewOptions.cellHeaderTemplate) {
        var args = { date: data.date, type: data.type, groupIndex: data.groupIndex };
        var scheduleId = this.parent.element.id + "_";
        var viewName = this.parent.activeViewOptions.cellHeaderTemplateName;
        var templateId = scheduleId + viewName + "cellHeaderTemplate";
        var cellHeaderTemplate = [].slice.call(this.parent.getCellHeaderTemplate()(args, this.parent, "cellHeaderTemplate", templateId, false, void 0, void 0, this.parent.root));
        append(cellHeaderTemplate, dateHeader);
      } else {
        var innerText = this.parent.calendarUtil.isMonthStart(data.date) && !this.isCurrentDate(data.date) && !this.parent.isAdaptive ? this.parent.globalize.formatDate(data.date, { format: "MMM d", calendar: this.parent.getCalendarMode() }) : this.parent.globalize.formatDate(data.date, { skeleton: "d", calendar: this.parent.getCalendarMode() });
        dateHeader.innerHTML = capitalizeFirstWord(innerText, "single");
      }
      ntd.appendChild(dateHeader);
      if (this.getModuleName() === "month") {
        addClass([dateHeader], NAVIGATE_CLASS);
        var skeleton = "full";
        var announcementText = this.parent.globalize.formatDate(data.date, { skeleton, calendar: this.parent.getCalendarMode() });
        ntd.setAttribute("aria-label", announcementText);
      }
    };
    Month2.prototype.getMonthStart = function(currentDate) {
      var useDisplayDate = this.parent.currentView === "Month" && !isNullOrUndefined(this.parent.activeViewOptions.displayDate) && (this.parent.uiStateValues.isCustomMonth || this.isCustomRange());
      var date = useDisplayDate ? this.parent.activeViewOptions.displayDate : !(this.parent.uiStateValues.isCustomMonth || this.isCustomRange()) && this.isCustomMonth() ? currentDate : this.parent.calendarUtil.firstDateOfMonth(currentDate);
      var monthStart = getWeekFirstDate(date, this.parent.activeViewOptions.firstDayOfWeek);
      return new Date(monthStart.getFullYear(), monthStart.getMonth(), monthStart.getDate());
    };
    Month2.prototype.getMonthEnd = function(currentDate) {
      if (this.isCustomMonth()) {
        var start = this.getMonthStart(currentDate);
        var numberOfDays = WEEK_LENGTH * (this.parent.activeViewOptions.numberOfWeeks > 0 ? this.parent.activeViewOptions.numberOfWeeks : DEFAULT_WEEKS);
        return addDays(start, numberOfDays - 1);
      } else {
        var endDate = addMonths(currentDate, this.parent.activeViewOptions.interval - 1);
        var lastWeekOfMonth = getWeekFirstDate(this.parent.calendarUtil.lastDateOfMonth(endDate), this.parent.activeViewOptions.firstDayOfWeek);
        return addDays(lastWeekOfMonth, WEEK_LENGTH - 1);
      }
    };
    Month2.prototype.isCustomRange = function() {
      var dates = this.parent.getCurrentViewDates();
      if (dates && dates.length > 0) {
        var selectedTime = resetTime(this.parent.selectedDate).getTime();
        var weekFirstDate = getWeekFirstDate(dates[dates.length - 1], this.parent.activeViewOptions.firstDayOfWeek);
        return !(selectedTime >= getWeekFirstDate(dates[0], this.parent.activeViewOptions.firstDayOfWeek).getTime() && selectedTime <= addDays(weekFirstDate, 6).getTime());
      }
      return false;
    };
    Month2.prototype.getRenderDates = function(workDays) {
      var renderDates = [];
      var currentDate = resetTime(this.parent.selectedDate);
      var start = this.getMonthStart(currentDate);
      var monthEnd = this.getMonthEnd(currentDate);
      do {
        if (this.parent.activeViewOptions.showWeekend) {
          renderDates.push(start);
        } else {
          if (this.isWorkDay(start, workDays)) {
            renderDates.push(start);
          }
        }
        start = addDays(start, 1);
        if (start.getHours() > 0) {
          start = resetTime(start);
        }
      } while (start.getTime() <= monthEnd.getTime());
      if (!workDays) {
        this.renderDates = renderDates;
      }
      if (this.parent.headerModule) {
        this.parent.headerModule.previousNextIconHandler();
      }
      return renderDates;
    };
    Month2.prototype.getNextPreviousDate = function(type) {
      if (this.isCustomMonth()) {
        var dates = this.parent.getCurrentViewDates();
        var date = getWeekFirstDate(type === "next" ? dates[dates.length - 1] : dates[0], this.parent.activeViewOptions.firstDayOfWeek);
        return addDays(date, type === "next" ? WEEK_LENGTH : -(this.parent.activeViewOptions.numberOfWeeks > 0 ? this.parent.activeViewOptions.numberOfWeeks : DEFAULT_WEEKS) * WEEK_LENGTH);
      } else {
        return addMonths(this.parent.selectedDate, (type === "next" ? 1 : -1) * this.parent.activeViewOptions.interval);
      }
    };
    Month2.prototype.getStartDate = function() {
      return this.getMonthStart(this.parent.selectedDate);
    };
    Month2.prototype.getEndDate = function() {
      return this.getMonthEnd(this.parent.selectedDate);
    };
    Month2.prototype.getEndDateFromStartDate = function(start) {
      return addDays(new Date(start.getTime()), 1);
    };
    Month2.prototype.getDateRangeText = function() {
      if (this.parent.isAdaptive || isNullOrUndefined(this.parent.activeViewOptions.dateFormat)) {
        var startDate = this.parent.selectedDate;
        var endDate = void 0;
        var updateCustomRange = false;
        if (this.isCustomMonth()) {
          var dates = this.parent.getCurrentViewDates();
          updateCustomRange = dates[0].getMonth() !== dates[dates.length - 1].getMonth() || dates[0].getFullYear() !== dates[dates.length - 1].getFullYear();
          if (updateCustomRange) {
            startDate = dates[0];
            endDate = dates[dates.length - 1];
          }
        }
        var isUpdateDateRange = this.parent.currentView !== "Month" || !this.isCustomMonth();
        if (this.parent.activeViewOptions.interval > 1 && isUpdateDateRange || updateCustomRange) {
          endDate = endDate ? endDate : addMonths(lastDateOfMonth(startDate), this.parent.activeViewOptions.interval - 1);
          if (startDate.getFullYear() === endDate.getFullYear()) {
            var monthNames = this.parent.globalize.formatDate(startDate, { format: "MMMM", calendar: this.parent.getCalendarMode() }) + " - " + this.parent.globalize.formatDate(endDate, { format: "MMMM ", calendar: this.parent.getCalendarMode() }) + this.parent.globalize.formatDate(endDate, { skeleton: "y", calendar: this.parent.getCalendarMode() });
            return capitalizeFirstWord(monthNames, "single");
          }
          var text = this.parent.globalize.formatDate(startDate, { format: "MMMM", calendar: this.parent.getCalendarMode() }) + " " + startDate.getFullYear() + " - " + this.parent.globalize.formatDate(endDate, { format: "MMMM ", calendar: this.parent.getCalendarMode() }) + this.parent.globalize.formatDate(endDate, { skeleton: "y", calendar: this.parent.getCalendarMode() });
          return capitalizeFirstWord(text, "single");
        }
        var format = this.parent.activeViewOptions.dateFormat ? this.parent.activeViewOptions.dateFormat : "MMMM y";
        return capitalizeFirstWord(this.parent.globalize.formatDate(startDate, { format, calendar: this.parent.getCalendarMode() }), "single");
      }
      return this.formatDateRange(this.parent.selectedDate);
    };
    Month2.prototype.getLabelText = function(view) {
      var viewStr = view.charAt(0).toLowerCase() + view.substring(1);
      return this.formatViewLabel(viewStr, this.getStartDate(), this.getEndDate());
    };
    Month2.prototype.createWeekNumberElement = function(text) {
      var tr = createElement("tr");
      var td = createElement("td", {
        className: WEEK_NUMBER_CLASS,
        attrs: { "title": text ? this.parent.localeObj.getConstant("week") + " " + text : "" },
        innerHTML: text || ""
      });
      tr.appendChild(td);
      var args = { elementType: "weekNumberCell", element: td };
      this.parent.trigger(renderCell, args);
      return tr;
    };
    Month2.prototype.unWireEvents = function() {
      var contentScrollableEle = this.element.querySelector("." + CONTENT_WRAP_CLASS);
      if (contentScrollableEle) {
        EventHandler.remove(contentScrollableEle, "scroll", this.onContentScroll);
      }
    };
    Month2.prototype.isCustomMonth = function() {
      return this.parent.currentView === "Month" && (!isNullOrUndefined(this.parent.activeViewOptions.displayDate) || this.parent.activeViewOptions.numberOfWeeks > 0);
    };
    Month2.prototype.getModuleName = function() {
      return "month";
    };
    Month2.prototype.destroy = function() {
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
      if (this.element) {
        if (this.monthEvent) {
          this.monthEvent.destroy();
          this.monthEvent = null;
        }
        this.unWireEvents();
        if (this.parent.resourceBase) {
          this.parent.resourceBase.destroy();
        }
        if (this.parent.scheduleTouchModule) {
          this.parent.scheduleTouchModule.resetValues();
        }
        _super.prototype.destroy.call(this);
      }
    };
    return Month2;
  }(ViewBase)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/renderer/year.js
var __extends24 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Year = (
  /** @class */
  function(_super) {
    __extends24(Year2, _super);
    function Year2(parent) {
      var _this = _super.call(this, parent) || this;
      _this.viewClass = "e-year-view";
      _this.isInverseTableSelect = false;
      _this.yearEventModule = null;
      return _this;
    }
    Year2.prototype.getModuleName = function() {
      return "year";
    };
    Year2.prototype.renderLayout = function(className) {
      if (this.parent.resourceBase) {
        this.parent.resourceBase.generateResourceLevels([{ renderDates: this.parent.activeView.renderDates }]);
      }
      this.setPanel(createElement("div", { className: TABLE_WRAP_CLASS }));
      var viewTypeClass = this.parent.activeViewOptions.orientation === "Horizontal" ? "e-horizontal" : "e-vertical";
      addClass([this.element], [this.viewClass, viewTypeClass, className]);
      this.renderPanel(className);
      if (this.parent.activeViewOptions.allowVirtualScrolling) {
        addClass([this.element], [VIRTUAL_SCROLL_CLASS]);
      }
      var calendarTable = this.createTableLayout(OUTER_TABLE_CLASS);
      this.element.appendChild(calendarTable);
      this.element.querySelector("table").setAttribute("role", "presentation");
      var calendarTBody = calendarTable.querySelector("tbody");
      this.rowCount = this.getRowColumnCount("row");
      this.columnCount = this.getRowColumnCount("column");
      this.renderHeader(calendarTBody);
      this.renderContent(calendarTBody);
      if (this.parent.currentView !== "Year" && this.parent.uiStateValues.isGroupAdaptive) {
        this.generateColumnLevels();
        this.renderResourceMobileLayout();
      }
      EventHandler.add(this.element.querySelector("." + CONTENT_WRAP_CLASS), "scroll", this.onContentScroll, this);
      this.parent.notify(contentReady, {});
    };
    Year2.prototype.renderHeader = function(headerWrapper) {
    };
    Year2.prototype.renderContent = function(content) {
      var tr = createElement("tr");
      content.appendChild(tr);
      var td = createElement("td");
      tr.appendChild(td);
      this.element.querySelector("tbody").appendChild(tr);
      var contentWrapper = createElement("div", { className: CONTENT_WRAP_CLASS });
      td.appendChild(contentWrapper);
      var calendarTable = this.createTableLayout("e-calendar-table");
      contentWrapper.appendChild(calendarTable);
      var cTr = createElement("tr");
      calendarTable.querySelector("tbody").appendChild(cTr);
      var cTd = createElement("td");
      cTr.appendChild(cTd);
      var calendarWrapper = createElement("div", { className: "e-calendar-wrapper" });
      cTd.appendChild(calendarWrapper);
      var months = this.getMonths();
      for (var _i = 0, months_1 = months; _i < months_1.length; _i++) {
        var month = months_1[_i];
        var currentMonth = new Date(this.parent.selectedDate.getFullYear(), month, 1);
        var calendarElement = createElement("div", {
          className: "e-month-calendar e-calendar",
          attrs: { "data-role": "calendar" }
        });
        calendarElement.appendChild(this.renderCalendarHeader(currentMonth));
        calendarElement.appendChild(this.renderCalendarContent(currentMonth));
        calendarWrapper.appendChild(calendarElement);
      }
      this.renderDates.splice(0, 1);
    };
    Year2.prototype.renderCalendarHeader = function(currentDate) {
      var headerWrapper = createElement("div", { className: "e-header e-month" });
      var headerContent = createElement("div", { className: "e-day e-title" });
      if (this.parent.activeViewOptions.monthHeaderTemplate) {
        var args = { date: currentDate, type: "monthHeader" };
        this.renderTemplates(this.parent.getMonthHeaderTemplate(), args, "monthHeaderTemplate", this.parent.activeViewOptions.monthHeaderTemplateName, headerContent);
      } else {
        headerContent.innerHTML = this.getMonthName(currentDate);
      }
      headerWrapper.appendChild(headerContent);
      this.parent.trigger(renderCell, { elementType: "headerCells", element: headerContent, date: currentDate });
      return headerWrapper;
    };
    Year2.prototype.renderCalendarContent = function(currentDate) {
      var dateCollection = this.getMonthDates(currentDate);
      var contentWrapper = createElement("div", { className: "e-content e-month" });
      var contentTable = this.createTableLayout("e-calendar-table " + CONTENT_TABLE_CLASS);
      contentWrapper.appendChild(contentTable);
      this.setAriaAttributes(contentTable);
      var thead = createElement("thead", { className: "e-week-header" });
      var tr = createElement("tr");
      var currentWeek = getWeekFirstDate(firstDateOfMonth(currentDate), this.parent.firstDayOfWeek);
      if (this.parent.activeViewOptions.showWeekNumber) {
        tr.appendChild(createElement("th"));
      }
      for (var i = 0; i < WEEK_LENGTH; i++) {
        if (this.parent.activeViewOptions.dayHeaderTemplate) {
          var th = createElement("th");
          var args = { date: currentWeek, type: "dayHeader" };
          this.renderTemplates(this.parent.getDayHeaderTemplate(), args, "dayHeaderTemplate", this.parent.activeViewOptions.dayHeaderTemplateName, th);
          tr.appendChild(th);
        } else {
          tr.appendChild(createElement("th", { innerHTML: this.parent.getDayNames("narrow")[currentWeek.getDay()] }));
        }
        var nextDay = new Date(currentWeek.getTime() + MS_PER_DAY);
        currentWeek = nextDay.getDate() === currentWeek.getDate() ? addDays(nextDay, 1) : nextDay;
      }
      thead.appendChild(tr);
      prepend([thead], contentTable);
      var tbody = contentTable.querySelector("tbody");
      while (dateCollection.length > 0) {
        var weekDates = dateCollection.splice(0, WEEK_LENGTH);
        var tr_1 = createElement("tr");
        if (this.parent.activeViewOptions.showWeekNumber) {
          var weekNumber = this.parent.getWeekNumberContent(weekDates);
          var td = createElement("td", {
            className: "e-week-number",
            attrs: { "title": this.parent.localeObj.getConstant("week") + " " + weekNumber },
            innerHTML: weekNumber
          });
          tr_1.appendChild(td);
          this.parent.trigger(renderCell, { elementType: "weekNumberCells", element: td });
        }
        for (var _i = 0, weekDates_1 = weekDates; _i < weekDates_1.length; _i++) {
          var date = weekDates_1[_i];
          var td = createElement("td", {
            className: "e-cell " + WORK_CELLS_CLASS,
            attrs: { "data-date": date.getTime().toString() }
          });
          if (this.parent.activeViewOptions.cellHeaderTemplate) {
            var args = { date, type: "monthCells" };
            this.renderTemplates(this.parent.getCellHeaderTemplate(), args, "cellHeaderTemplate", this.parent.activeViewOptions.cellHeaderTemplateName, td);
          } else {
            var span = createElement("span", {
              className: "e-day",
              innerHTML: this.parent.globalize.formatDate(date, { skeleton: "d", calendar: this.parent.getCalendarMode() }),
              attrs: { title: this.parent.globalize.formatDate(date, { type: "date", skeleton: "full" }) }
            });
            td.appendChild(span);
          }
          if (this.parent.activeViewOptions.cellTemplate) {
            var args = { date, type: "monthCells" };
            this.renderTemplates(this.parent.getCellTemplate(), args, "cellTemplate", this.parent.activeViewOptions.cellTemplateName, td);
          }
          var classList2 = [];
          if (currentDate.getMonth() !== date.getMonth()) {
            classList2.push(OTHERMONTH_CLASS);
            if (td.firstElementChild && !this.parent.activeViewOptions.cellTemplate) {
              td.firstElementChild.setAttribute("aria-disabled", "true");
            }
          }
          if (this.isCurrentDate(date) && currentDate.getMonth() === date.getMonth()) {
            classList2 = classList2.concat(["e-today", "e-selected"]);
          }
          if (classList2.length > 0) {
            addClass([td], classList2);
          }
          tr_1.appendChild(td);
          if (currentDate.getMonth() === date.getMonth()) {
            this.renderDates.push(new Date(date));
          }
          if (!this.parent.isMinMaxDate(date)) {
            addClass([td], DISABLE_DATES);
          } else {
            EventHandler.add(td, "click", this.onCellClick, this);
            if (!this.parent.isAdaptive) {
              EventHandler.add(td, "dblclick", this.parent.workCellAction.cellDblClick, this.parent.workCellAction);
            }
          }
          this.parent.trigger(renderCell, { elementType: "workCells", element: td, date });
        }
        tbody.appendChild(tr_1);
      }
      return contentWrapper;
    };
    Year2.prototype.createTableColGroup = function(count) {
      var colGroupEle = createElement("colgroup");
      for (var i = 0; i < count; i++) {
        colGroupEle.appendChild(createElement("col"));
      }
      return colGroupEle;
    };
    Year2.prototype.getMonthName = function(date) {
      var month = this.parent.globalize.formatDate(date, {
        format: this.parent.activeViewOptions.dateFormat || "MMMM y",
        calendar: this.parent.getCalendarMode()
      });
      return capitalizeFirstWord(month, "multiple");
    };
    Year2.prototype.generateColumnLevels = function() {
      var colLevels = [];
      var level = this.getDateSlots([this.parent.selectedDate], this.parent.activeViewOptions.workDays);
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        colLevels = this.parent.resourceBase.generateResourceLevels(level);
        if (this.parent.uiStateValues.isGroupAdaptive) {
          var resourceLevel = this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex];
          colLevels = [this.getDateSlots([this.parent.selectedDate], resourceLevel.workDays)];
        }
      } else {
        colLevels.push(level);
      }
      colLevels.pop();
      this.colLevels = colLevels;
      return colLevels;
    };
    Year2.prototype.getDateSlots = function(renderDates, workDays, startHour, endHour) {
      if (startHour === void 0) {
        startHour = this.parent.workHours.start;
      }
      if (endHour === void 0) {
        endHour = this.parent.workHours.end;
      }
      var dateCol = [{
        date: renderDates[0],
        type: "dateHeader",
        className: [HEADER_CELLS_CLASS],
        colSpan: 1,
        workDays,
        startHour: /* @__PURE__ */ new Date(+this.parent.globalize.parseDate(startHour, { skeleton: "Hm" })),
        endHour: /* @__PURE__ */ new Date(+this.parent.globalize.parseDate(endHour, { skeleton: "Hm" }))
      }];
      return dateCol;
    };
    Year2.prototype.getMonthDates = function(date) {
      var startDate = getWeekFirstDate(firstDateOfMonth(date), this.parent.firstDayOfWeek);
      var endDate = addDays(/* @__PURE__ */ new Date(+startDate), 6 * WEEK_LENGTH);
      var dateCollection = [];
      for (var start = startDate; start.getTime() < endDate.getTime(); start = addDays(start, 1)) {
        dateCollection.push(resetTime(new Date(start)));
      }
      return dateCollection;
    };
    Year2.prototype.getRowColumnCount = function(type) {
      var months = this.getMonths();
      var year = this.parent.selectedDate.getFullYear();
      var monthDaysCount = [];
      for (var _i = 0, months_2 = months; _i < months_2.length; _i++) {
        var month = months_2[_i];
        monthDaysCount.push(new Date(year, month, 1).getDay() + new Date(year, month + 1, 0).getDate());
      }
      var maxCount = Math.max.apply(Math, monthDaysCount);
      var count;
      if (type === "row") {
        count = this.parent.activeViewOptions.orientation === "Horizontal" ? months.length : maxCount;
      } else {
        count = this.parent.activeViewOptions.orientation === "Horizontal" ? maxCount : months.length;
      }
      return count;
    };
    Year2.prototype.isCurrentDate = function(date) {
      return resetTime(/* @__PURE__ */ new Date()).getTime() === resetTime(new Date(date.getTime())).getTime();
    };
    Year2.prototype.getMonths = function() {
      var _this = this;
      return Array.apply(null, { length: this.parent.activeViewOptions.monthsCount }).map(function(value, index) {
        return _this.parent.firstMonthOfYear + index;
      });
    };
    Year2.prototype.renderTemplates = function(fn, args, tName, vName, ele) {
      var templateId = this.parent.element.id + "_" + vName + tName;
      var template = [].slice.call(fn(args, this.parent, tName, templateId, false, void 0, void 0, this.parent.root));
      append(template, ele);
    };
    Year2.prototype.onCellClick = function(e) {
      var target = closest(e.target, "." + WORK_CELLS_CLASS);
      var startDate = this.parent.getDateFromElement(target);
      this.parent.activeCellsData = this.parent.getCellDetails(target);
      var isPrevious = startDate.getTime() < this.getStartDate().getTime();
      if (isPrevious || startDate.getTime() > this.getEndDate().getTime()) {
        this.parent.changeDate(this.parent.activeView.getNextPreviousDate(isPrevious ? "previous" : "next"), e);
        var activeDate = this.parent.activeCellsData.startTime.getTime();
        var inRange = activeDate >= this.getStartDate().getTime() && activeDate <= this.getEndDate().getTime();
        var dateAttr = inRange ? activeDate : (isPrevious ? this.getEndDate() : this.getStartDate()).getTime();
        var selectedCell = this.parent.element.querySelector(":not(." + OTHERMONTH_CLASS + ')[data-date="' + dateAttr + '"]');
        this.parent.selectCell(selectedCell);
        this.parent.activeCellsData = this.parent.getCellDetails(selectedCell);
      } else {
        var endDate = addDays(new Date(startDate.getTime()), 1);
        var filteredEvents = this.parent.eventBase.filterEvents(startDate, endDate);
        var moreEventArgs = { date: startDate, event: filteredEvents, element: e.target };
        if (target.classList.contains(OTHERMONTH_CLASS)) {
          target = this.parent.element.querySelector(":not(." + OTHERMONTH_CLASS + ')[data-date="' + target.getAttribute("data-date") + '"]');
        }
        this.parent.activeCellsData = this.parent.getCellDetails(target);
        var args = extend(this.parent.activeCellsData, { cancel: false, event: e, name: "cellClick" });
        this.parent.trigger(cellClick, args);
        this.parent.quickPopup.moreEventClick(moreEventArgs, endDate);
      }
    };
    Year2.prototype.onContentScroll = function(e) {
      var target = e.target;
      var headerWrapper = this.getDatesHeaderElement();
      this.parent.notify(virtualScroll, e);
      if (headerWrapper) {
        headerWrapper.firstElementChild.scrollLeft = target.scrollLeft;
      }
      var scrollTopSelector = "." + MONTH_HEADER_WRAPPER + ",." + RESOURCE_COLUMN_WRAP_CLASS;
      var scrollTopElement = this.element.querySelector(scrollTopSelector);
      if (scrollTopElement) {
        scrollTopElement.scrollTop = target.scrollTop;
      }
      if (!this.parent.isAdaptive) {
        this.parent.uiStateValues.top = e.target.scrollTop;
      }
      this.parent.uiStateValues.left = e.target.scrollLeft;
      this.setPersistence();
    };
    Year2.prototype.onScrollUiUpdate = function(args) {
      var height = this.parent.element.offsetHeight - this.getHeaderBarHeight();
      var headerWrapper = this.element.querySelector("." + DATE_HEADER_CONTAINER_CLASS);
      if (headerWrapper) {
        height -= headerWrapper.offsetHeight;
      }
      var contentWrapper = this.element.querySelector("." + CONTENT_WRAP_CLASS);
      if (contentWrapper) {
        contentWrapper.style.height = formatUnit(height);
      }
      if (!this.parent.isAdaptive && headerWrapper) {
        var scrollBarWidth = getScrollBarWidth();
        if (contentWrapper.offsetWidth - contentWrapper.clientWidth > 0) {
          headerWrapper.firstElementChild.style[args.cssProperties.border] = scrollBarWidth > 0 ? "1px" : "0px";
          headerWrapper.style[args.cssProperties.padding] = scrollBarWidth > 0 ? scrollBarWidth - 1 + "px" : "0px";
        } else {
          headerWrapper.firstElementChild.style[args.cssProperties.border] = "";
          headerWrapper.style[args.cssProperties.padding] = "";
        }
      }
      this.setColWidth(this.getContentAreaElement());
      var leftPanelSelector = "." + MONTH_HEADER_WRAPPER + ",." + RESOURCE_COLUMN_WRAP_CLASS;
      var leftPanelElement = this.element.querySelector(leftPanelSelector);
      if (leftPanelElement) {
        var isYScroll = contentWrapper.scrollWidth > contentWrapper.clientWidth;
        leftPanelElement.style.height = formatUnit(height - (isYScroll ? 17 : 0));
      }
      if (!args.isPreventScrollUpdate) {
        if (this.parent.uiStateValues.isInitial) {
          this.parent.uiStateValues.isInitial = false;
          this.parent.uiStateValues.top = this.parent.uiStateValues.left = 0;
        } else {
          if (leftPanelElement) {
            leftPanelElement.scrollTop = this.parent.uiStateValues.top;
          }
          contentWrapper.scrollTop = this.parent.uiStateValues.top;
          contentWrapper.scrollLeft = this.parent.uiStateValues.left;
        }
      }
      this.retainScrollPosition();
    };
    Year2.prototype.getStartDate = function() {
      return new Date(this.parent.selectedDate.getFullYear(), this.parent.firstMonthOfYear % 12, 1);
    };
    Year2.prototype.getEndDate = function() {
      return addDays(addMonths(this.getStartDate(), this.parent.monthsCount), -1);
    };
    Year2.prototype.startDate = function() {
      return this.parent.currentView === "Year" ? getWeekFirstDate(this.getStartDate(), this.parent.firstDayOfWeek) : this.getStartDate();
    };
    Year2.prototype.endDate = function() {
      return this.parent.currentView === "Year" ? addDays(getWeekLastDate(this.getEndDate(), this.parent.firstDayOfWeek), 1) : addDays(this.getEndDate(), 1);
    };
    Year2.prototype.getEndDateFromStartDate = function(start) {
      var date = new Date(start.getTime());
      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        date = lastDateOfMonth(date);
      }
      return addDays(new Date(date.getTime()), 1);
    };
    Year2.prototype.getNextPreviousDate = function(type) {
      return addYears(this.parent.selectedDate, type === "next" ? 1 : -1);
    };
    Year2.prototype.getDateRangeText = function() {
      var startDate = this.getStartDate();
      var endDate = this.getEndDate();
      if (startDate.getFullYear() !== endDate.getFullYear()) {
        return this.parent.globalize.formatDate(startDate, { skeleton: "yMMM" }) + " - " + this.parent.globalize.formatDate(endDate, { skeleton: "yMMM" });
      } else {
        return this.parent.globalize.formatDate(this.parent.selectedDate, { skeleton: "y" });
      }
    };
    Year2.prototype.addEventListener = function() {
      this.parent.on(scrollUiUpdate, this.onScrollUiUpdate, this);
      this.parent.on(dataReady, this.onDataReady, this);
    };
    Year2.prototype.removeEventListener = function() {
      if (this.parent) {
        this.parent.off(scrollUiUpdate, this.onScrollUiUpdate);
        this.parent.off(dataReady, this.onDataReady);
      }
    };
    Year2.prototype.onDataReady = function(args) {
      this.yearEventModule = new YearEvent(this.parent);
      this.yearEventModule.renderAppointments();
      this.parent.notify(eventsLoaded, args);
    };
    Year2.prototype.scrollToDate = function(scrollDate) {
      var date = +new Date(resetTime(scrollDate));
      var element = this.element.querySelector("." + WORK_CELLS_CLASS + ":not(." + OTHERMONTH_CLASS + ')[data-date="' + date + '"]');
      if (element) {
        element = closest(element, ".e-month-calendar");
        this.getContentAreaElement().scrollTop = element.offsetTop;
      }
    };
    Year2.prototype.destroy = function() {
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
      if (this.element) {
        var contentScroll = this.element.querySelector("." + CONTENT_WRAP_CLASS);
        if (contentScroll) {
          EventHandler.remove(contentScroll, "scroll", this.onContentScroll);
        }
        if (this.yearEventModule) {
          this.yearEventModule.destroy();
          this.yearEventModule = null;
        }
        if (this.parent.resourceBase) {
          this.parent.resourceBase.destroy();
        }
        _super.prototype.destroy.call(this);
      }
    };
    return Year2;
  }(ViewBase)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/event-renderer/agenda-base.js
var __extends25 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AgendaBase = (
  /** @class */
  function(_super) {
    __extends25(AgendaBase2, _super);
    function AgendaBase2(parent) {
      return _super.call(this, parent) || this;
    }
    AgendaBase2.prototype.createAgendaContentElement = function(type, listData, aTd, groupOrder, groupIndex) {
      var _this = this;
      var listElement;
      var fieldMapping = this.parent.eventFields;
      if (type === "noEvents") {
        var noEvents = [{ "subject": this.parent.localeObj.getConstant("noEvents") }];
        listElement = ListBase.createList(this.parent.createElement, noEvents, {
          moduleName: "agenda",
          listClass: this.parent.activeView.viewClass,
          itemClass: this.parent.activeView.viewClass,
          template: '<div class="' + AGENDA_NO_EVENT_CLASS + '">' + this.parent.localeObj.getConstant("noEvents") + "</div>"
        });
        if (listElement.querySelector(".e-agenda-item").children.length === 0) {
          listElement.firstElementChild.appendChild(createElement("div", { className: AGENDA_NO_EVENT_CLASS, innerHTML: this.parent.localeObj.getConstant("noEvents") }));
        }
      } else {
        listElement = ListBase.createList(this.parent.createElement, listData, {
          moduleName: "agenda",
          listClass: this.parent.activeView.viewClass,
          itemClass: this.parent.activeView.viewClass
        });
        var listElements = [].slice.call(listElement.children);
        listElements.forEach(function(element, li) {
          var appWrapper = createElement("div", {
            className: APPOINTMENT_CLASS,
            attrs: {
              "data-id": "Appointment_" + listData[parseInt(li.toString(), 10)]["" + _this.parent.eventFields.id],
              "data-guid": listData[parseInt(li.toString(), 10)].Guid,
              "role": "button",
              "tabindex": "0",
              "aria-disabled": _this.parent.eventBase.getReadonlyAttribute(listData[parseInt(li.toString(), 10)]),
              "aria-label": _this.parent.getAnnouncementString(listData[parseInt(li.toString(), 10)])
            }
          });
          if (!isNullOrUndefined(groupIndex)) {
            appWrapper.setAttribute("data-group-index", groupIndex.toString());
          }
          _this.parent.eventBase.applyResourceColor(appWrapper, listData[parseInt(li.toString(), 10)], "borderColor", groupOrder);
          var templateEle;
          if (!isNullOrUndefined(_this.parent.activeViewOptions.eventTemplate)) {
            addClass([appWrapper], EVENT_TEMPLATE);
            var scheduleId = _this.parent.element.id + "_";
            var viewName = _this.parent.activeViewOptions.eventTemplateName;
            var templateId = scheduleId + viewName + "eventTemplate";
            templateEle = _this.parent.getAppointmentTemplate()(listData[parseInt(li.toString(), 10)], _this.parent, "eventTemplate", templateId, false, void 0, void 0, _this.parent.root);
            if (!isNullOrUndefined(listData[parseInt(li.toString(), 10)][fieldMapping.recurrenceRule])) {
              var iconClass = listData[parseInt(li.toString(), 10)][fieldMapping.id] === listData[parseInt(li.toString(), 10)][fieldMapping.recurrenceID] ? EVENT_RECURRENCE_ICON_CLASS : EVENT_RECURRENCE_EDIT_ICON_CLASS;
              appWrapper.appendChild(createElement("div", { className: ICON + " " + iconClass }));
            }
          } else {
            templateEle = _this.createAppointment(listData[parseInt(li.toString(), 10)]);
          }
          append([].slice.call(templateEle), appWrapper);
          removeChildren(element);
          element.appendChild(appWrapper);
          var args = {
            data: extend({}, listData[parseInt(li.toString(), 10)], null, true),
            element,
            cancel: false
          };
          _this.parent.trigger(eventRendered, args, function(eventArgs) {
            if (eventArgs.cancel) {
              remove(element);
            }
          });
        });
      }
      aTd.appendChild(listElement);
      if (this.parent.currentView === "MonthAgenda" && this.parent.activeViewOptions.group.resources.length > 0 || this.parent.currentView === "Agenda") {
        addClass([aTd], AGENDA_DAY_BORDER_CLASS);
      }
      this.parent.renderTemplates();
      return aTd;
    };
    AgendaBase2.prototype.createAppointment = function(event) {
      var fieldMapping = this.parent.eventFields;
      var eventSubject = event[fieldMapping.subject] || this.parent.eventSettings.fields.subject.default || this.parent.localeObj.getConstant("addTitle");
      var eventLocation = event[fieldMapping.location] || this.parent.eventSettings.fields.location.default;
      var appSubjectWrap = createElement("div", { className: SUBJECT_WRAP });
      if (!isNullOrUndefined(eventLocation) && eventLocation !== "") {
        eventSubject += ",";
      }
      var appSubjectText = createElement("div", { className: SUBJECT_CLASS });
      this.parent.sanitize(eventSubject, appSubjectText);
      appSubjectWrap.appendChild(appSubjectText);
      if (!isNullOrUndefined(eventLocation) && eventLocation !== "") {
        var appLocation = createElement("div", { className: LOCATION_CLASS });
        this.parent.sanitize(eventLocation, appLocation);
        appSubjectWrap.appendChild(appLocation);
      }
      if (!isNullOrUndefined(event[fieldMapping.recurrenceRule])) {
        var iconClass = event[fieldMapping.id] === event[fieldMapping.recurrenceID] ? EVENT_RECURRENCE_ICON_CLASS : EVENT_RECURRENCE_EDIT_ICON_CLASS;
        appSubjectWrap.appendChild(createElement("div", { className: ICON + " " + iconClass }));
      }
      var strDate = event[fieldMapping.startTime];
      var endDate = event[fieldMapping.endTime];
      var isAllDay = event[fieldMapping.isAllDay];
      var allDayStr = this.parent.localeObj.getConstant("allDay");
      var timeStr = this.parent.getTimeString(strDate) + " - " + this.parent.getTimeString(endDate);
      if (!isNullOrUndefined(event.data)) {
        var milliSeconds = endDate.getTimezoneOffset() !== strDate.getTimezoneOffset() ? endDate.getTime() - strDate.getTime() + 36e5 : endDate.getTime() - strDate.getTime();
        var eventString = milliSeconds / MS_PER_DAY >= 1 ? allDayStr : timeStr;
        allDayStr = eventString + " (" + this.parent.localeObj.getConstant("day") + " " + event.data.index + "/" + event.data.count + ")";
      }
      var displayStr = !isNullOrUndefined(event.data) || isAllDay ? allDayStr : timeStr;
      var appDateTime = createElement("div", { className: DATE_TIME_CLASS, innerHTML: displayStr });
      return [appSubjectWrap, appDateTime];
    };
    AgendaBase2.prototype.processAgendaEvents = function(events) {
      var eventsProcessed = [];
      if (isNullOrUndefined(events)) {
        return eventsProcessed;
      }
      for (var _i = 0, events_1 = events; _i < events_1.length; _i++) {
        var event_1 = events_1[_i];
        var spanned = this.parent.eventBase.splitEventByDay(event_1);
        eventsProcessed = eventsProcessed.concat(spanned.length > 1 ? spanned : event_1);
      }
      return eventsProcessed;
    };
    AgendaBase2.prototype.wireEventActions = function() {
      var eventElement = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_CLASS));
      for (var _i = 0, eventElement_1 = eventElement; _i < eventElement_1.length; _i++) {
        var element = eventElement_1[_i];
        this.parent.eventBase.wireAppointmentEvents(element, this.parent.getEventDetails(element), true);
      }
      var dateHeaderElement = [].slice.call(this.parent.element.querySelectorAll(".e-m-date"));
      for (var _a = 0, dateHeaderElement_1 = dateHeaderElement; _a < dateHeaderElement_1.length; _a++) {
        var element = dateHeaderElement_1[_a];
        EventHandler.add(element, "click", this.parent.agendaModule.dayNavigationClick, this);
      }
    };
    AgendaBase2.prototype.calculateResourceTableElement = function(tBody, noOfDays, agendaDate, agendaEnd) {
      if (agendaEnd === void 0) {
        agendaEnd = null;
      }
      if (isNullOrUndefined(this.parent.resourceBase.lastResourceLevel)) {
        var level = this.getDateSlots(this.renderDates, this.parent.activeViewOptions.workDays);
        this.parent.resourceBase.generateResourceLevels(level);
      }
      var agendaLastDate = addDays(new Date(agendaDate.getTime()), noOfDays);
      var days = this.parent.activeViewOptions.group.byDate || this.parent.currentView === "MonthAgenda" ? noOfDays : 1;
      var resColl = this.parent.resourceBase.resourceCollection;
      var resData = this.parent.resourceBase.lastResourceLevel;
      var agendaStart = agendaDate;
      var initialDate = agendaDate;
      var showWeekend = this.parent.activeViewOptions.showWeekend;
      for (var i = 0; i < days; i++) {
        var lastLevelInfo = [];
        var tempLastLevelInfo = [];
        var tempIndex = 0;
        var eventObj = void 0;
        var dateObj = void 0;
        var firstDate = addDays(initialDate, i);
        if (this.parent.currentView === "Agenda" && this.parent.activeViewOptions.group.byDate && this.parent.activeViewOptions.allowVirtualScrolling && !showWeekend && !this.isWorkDay(firstDate)) {
          do {
            firstDate = addDays(firstDate, 1);
            if (firstDate >= agendaEnd) {
              break;
            }
          } while (!this.isWorkDay(firstDate) || this.parent.eventBase.filterEvents(firstDate, addDays(firstDate, 1)).length < 1);
          if (firstDate >= agendaEnd) {
            break;
          }
          initialDate = addDays(firstDate, -i);
          agendaLastDate = addDays(firstDate, 1);
        }
        var finalDate = this.parent.activeViewOptions.group.byDate || this.parent.currentView === "MonthAgenda" ? addDays(firstDate, 1) : agendaLastDate;
        var agendaCollection = this.parent.eventBase.filterEvents(firstDate, finalDate);
        if (agendaCollection.length > 0 || !this.parent.hideEmptyAgendaDays || this.parent.currentView === "MonthAgenda") {
          for (var res = 0; res < resData.length; res++) {
            noOfDays = !this.parent.activeViewOptions.group.byDate || this.parent.currentView === "MonthAgenda" ? noOfDays : 1;
            var data = [];
            agendaDate = firstDate;
            var resDataCollection = this.parent.eventBase.filterEvents(agendaDate, agendaLastDate, agendaCollection, resData[parseInt(res.toString(), 10)]);
            if (resDataCollection.length > 0 || !this.parent.hideEmptyAgendaDays || this.parent.currentView === "MonthAgenda") {
              for (var r = 0; r < noOfDays; r++) {
                var resDayCollection = this.parent.eventBase.filterEvents(agendaDate, addDays(agendaDate, 1), resDataCollection, void 0);
                if ((showWeekend || !showWeekend && (this.parent.group.byDate ? this.isWorkDay(agendaDate) : this.isWorkDay(agendaDate, resData[parseInt(res.toString(), 10)].workDays))) && (resDayCollection.length > 0 || !this.parent.hideEmptyAgendaDays) || this.parent.currentView === "MonthAgenda") {
                  data.push(resDayCollection[0]);
                  eventObj = {
                    rowSpan: 1,
                    type: "eventColumn",
                    resource: resColl[resColl.length - 1],
                    groupIndex: resData[parseInt(res.toString(), 10)].groupIndex,
                    groupOrder: resData[parseInt(res.toString(), 10)].groupOrder,
                    resourceData: resData[parseInt(res.toString(), 10)].resourceData,
                    eventData: resDayCollection,
                    date: agendaDate
                  };
                  dateObj = {
                    rowSpan: 1,
                    type: "dateColumn",
                    resource: resColl[parseInt((resColl.length - 1).toString(), 10)],
                    groupOrder: resData[parseInt(res.toString(), 10)].groupOrder,
                    resourceData: resData[parseInt(res.toString(), 10)].resourceData,
                    date: agendaDate
                  };
                  if (!lastLevelInfo[parseInt(tempIndex.toString(), 10)]) {
                    lastLevelInfo[parseInt(tempIndex.toString(), 10)] = [];
                  }
                  lastLevelInfo[parseInt(tempIndex.toString(), 10)].push(eventObj);
                  lastLevelInfo[parseInt(tempIndex.toString(), 10)].push(dateObj);
                  tempIndex++;
                }
                agendaDate = addDays(agendaDate, 1);
                if (agendaDate.getTime() >= agendaLastDate.getTime() || this.parent.activeViewOptions.group.byDate || this.parent.currentView === "MonthAgenda") {
                  if (data.length > 0) {
                    lastLevelInfo[lastLevelInfo.length - 1][1].cssClass = AGENDA_DAY_BORDER_CLASS;
                    var tempObj = {
                      rowSpan: data.length,
                      type: "resourceColumn",
                      resource: resColl[parseInt((resColl.length - 1).toString(), 10)],
                      groupOrder: resData[parseInt(res.toString(), 10)].groupOrder.slice(0, -1),
                      resourceData: resData[parseInt(res.toString(), 10)].resourceData,
                      groupIndex: lastLevelInfo.length - data.length,
                      className: [RESOURCE_NAME],
                      date: agendaDate
                    };
                    lastLevelInfo[parseInt((lastLevelInfo.length - data.length).toString(), 10)].push(tempObj);
                    tempLastLevelInfo.push(extend({}, tempObj, null, true));
                  }
                  break;
                }
              }
            }
          }
          var topResources = resColl.slice(0, -1);
          var tempGroupedData = [];
          var totalRowSpan = 0;
          for (var y = 0; y < topResources.length; y++) {
            var data = topResources[topResources.length - (y + 1)].dataSource;
            for (var x = 0; x < data.length; x++) {
              var z = 0;
              for (var u = 0; u < tempLastLevelInfo.length; u++) {
                if (tempLastLevelInfo[parseInt(u.toString(), 10)].groupOrder[topResources.length - (y + 1)] === data[parseInt(x.toString(), 10)][topResources[topResources.length - (y + 1)].idField]) {
                  totalRowSpan = totalRowSpan + tempLastLevelInfo[parseInt(u.toString(), 10)].rowSpan;
                  tempGroupedData.push(extend({}, tempLastLevelInfo[parseInt(u.toString(), 10)], null, true));
                }
                if (++z === tempLastLevelInfo.length && tempGroupedData.length > 0) {
                  tempGroupedData[0].rowSpan = totalRowSpan;
                  tempGroupedData[0].type = "parentColumnLevel_" + (y + 1);
                  tempGroupedData[0].resource = topResources[topResources.length - (y + 1)];
                  tempGroupedData[0].resourceData = data[parseInt(x.toString(), 10)];
                  tempGroupedData[0].date = agendaDate;
                  lastLevelInfo[tempGroupedData[0].groupIndex].push(tempGroupedData[0]);
                  tempGroupedData = [];
                  totalRowSpan = 0;
                }
              }
            }
          }
          this.createResourceTableRow(lastLevelInfo, tBody);
        }
      }
      var totalCollection = this.parent.eventBase.filterEvents(agendaStart, agendaLastDate);
      if (totalCollection.length === 0 && !this.parent.activeViewOptions.allowVirtualScrolling && this.parent.hideEmptyAgendaDays) {
        this.renderEmptyContent(tBody, agendaStart);
      }
    };
    AgendaBase2.prototype.createResourceTableRow = function(tContent, tBody) {
      var tr = createElement("tr");
      var ntr;
      var td = createElement("td");
      var tempData;
      var rowSpan = 0;
      var level;
      if (this.parent.activeViewOptions.group.byDate || this.parent.currentView === "MonthAgenda") {
        var tContentCollection = [];
        var parentCollection = this.parent.resourceBase.resourceCollection.slice(0, -1);
        for (var w = 0; w < tContent.length; w++) {
          tContentCollection = tContentCollection.concat(tContent[parseInt(w.toString(), 10)]);
        }
        level = parentCollection.length > 0 ? "parentColumnLevel_" + parentCollection.length : "resourceColumn";
        var rowSpanCollection = tContentCollection.filter(function(data2) {
          return data2.type === level;
        });
        for (var x = 0; x < rowSpanCollection.length; x++) {
          rowSpan = rowSpan + rowSpanCollection[parseInt(x.toString(), 10)].rowSpan;
        }
      }
      for (var row = 0; row < tContent.length; row++) {
        ntr = tr.cloneNode();
        for (var col = tContent[parseInt(row.toString(), 10)].length - 1; col >= 0; col--) {
          var data = tContent[parseInt(row.toString(), 10)][parseInt(col.toString(), 10)];
          var ntd = td.cloneNode();
          if (data.type === "dateColumn") {
            if (this.parent.activeViewOptions.group.byDate || this.parent.currentView === "MonthAgenda") {
              tempData = tContent[parseInt(row.toString(), 10)][parseInt(col.toString(), 10)];
              continue;
            }
            ntd.setAttribute("data-date", data.date.getTime().toString());
            ntd.appendChild(this.createDateHeaderElement(data.date));
            var className = [AGENDA_CELLS_CLASS, AGENDA_DATE_CLASS];
            if (data.cssClass) {
              className.push(data.cssClass);
            }
            addClass([ntd], className);
            if (this.isCurrentDate(new Date(data.date.getTime()))) {
              addClass(ntd.childNodes, AGENDA_CURRENT_DAY_CLASS);
            }
            ntr.appendChild(ntd);
          } else if (data.type === "eventColumn") {
            var elementType = data.eventData.length === 0 ? "noEvents" : "data";
            ntd = this.createAgendaContentElement(elementType, data.eventData, ntd, data.groupOrder, data.groupIndex);
            ntd.setAttribute("data-date", data.date.getTime().toString());
            if (this.parent.activeViewOptions.group.byDate || this.parent.currentView === "MonthAgenda") {
              addClass([ntd], [AGENDA_CELLS_CLASS, AGENDA_DAY_PADDING_CLASS]);
            }
            ntr.appendChild(ntd);
          } else {
            ntd.setAttribute("rowspan", data.rowSpan.toString());
            addClass([ntd], AGENDA_RESOURCE_CLASS);
            this.setResourceHeaderContent(ntd, data, data.className[0]);
            ntr.appendChild(ntd);
          }
        }
        if (this.parent.activeViewOptions.group.byDate && row === 0 && this.parent.currentView !== "MonthAgenda") {
          var ntd = td.cloneNode();
          ntd.setAttribute("data-date", tempData.date.getTime().toString());
          ntd.setAttribute("rowspan", rowSpan.toString());
          ntd.appendChild(this.createDateHeaderElement(tempData.date));
          addClass([ntd], [AGENDA_CELLS_CLASS, AGENDA_DATE_CLASS, DATE_BORDER_CLASS]);
          var daysCount = getDaysCount(this.parent.selectedDate.getTime(), tempData.date.getTime());
          ntr.setAttribute("data-row-index", daysCount.toString());
          if (this.parent.element.querySelector('.e-agenda-view tr[data-row-index="' + daysCount + '"]')) {
            break;
          }
          ntr.insertBefore(ntd, ntr.childNodes[0]);
        }
        tBody.appendChild(ntr);
      }
    };
    AgendaBase2.prototype.createDateHeaderElement = function(date) {
      var dateHeader;
      if (this.parent.activeViewOptions.dateHeaderTemplate) {
        dateHeader = createElement("div", { className: AGENDA_HEADER_CLASS });
        var args = { date, type: "dateHeader" };
        var scheduleId = this.parent.element.id + "_";
        var viewName = this.parent.activeViewOptions.dateHeaderTemplateName;
        var templateId = scheduleId + viewName + "dateHeaderTemplate";
        var dateTemplate = [].slice.call(this.parent.getDateHeaderTemplate()(args, this.parent, "dateHeaderTemplate", templateId, false, void 0, void 0, this.parent.root));
        append(dateTemplate, dateHeader);
      } else {
        dateHeader = this.getMobileDateElement(date, AGENDA_HEADER_CLASS);
      }
      return dateHeader;
    };
    AgendaBase2.prototype.renderEmptyContent = function(tBody, agendaDate) {
      var eTr = this.createTableRowElement(agendaDate, "noEvents");
      var eTd = eTr.children[0];
      var noEvents = createElement("div", {
        className: AGENDA_EMPTY_EVENT_CLASS,
        innerHTML: this.parent.localeObj.getConstant("noEvents")
      });
      eTd.appendChild(noEvents);
      tBody.appendChild(eTr);
    };
    AgendaBase2.prototype.createTableRowElement = function(date, type) {
      var daysCount = getDaysCount(this.parent.selectedDate.getTime(), date.getTime());
      var tr = createElement("tr", { attrs: { "data-row-index": daysCount.toString() } });
      var td = createElement("td", {
        attrs: {
          "class": type === "monthHeader" ? MONTH_HEADER_CLASS : AGENDA_CELLS_CLASS,
          "aria-selected": "false",
          "data-column-index": daysCount.toString(),
          "data-date": date.getTime().toString()
        }
      });
      var dTd = td.cloneNode();
      var aTd = td.cloneNode();
      tr.appendChild(dTd);
      if (type !== "noEvents") {
        tr.appendChild(aTd);
      }
      return tr;
    };
    AgendaBase2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
    };
    return AgendaBase2;
  }(ViewBase)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/renderer/agenda.js
var __extends26 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Agenda = (
  /** @class */
  function(_super) {
    __extends26(Agenda2, _super);
    function Agenda2(parent) {
      var _this = _super.call(this, parent) || this;
      _this.viewClass = "e-agenda-view";
      _this.isInverseTableSelect = false;
      _this.agendaDates = {};
      _this.virtualScrollTop = 1;
      return _this;
    }
    Agenda2.prototype.getModuleName = function() {
      return "agenda";
    };
    Agenda2.prototype.renderLayout = function() {
      this.agendaDates = {};
      this.element = createElement("div", { className: TABLE_WRAP_CLASS });
      addClass([this.element], this.viewClass);
      this.element.appendChild(this.createTableLayout(OUTER_TABLE_CLASS));
      this.element.querySelector("table").setAttribute("role", "presentation");
      this.parent.element.querySelector("." + TABLE_CONTAINER_CLASS).appendChild(this.element);
      var eTr = createElement("tr");
      this.element.querySelector("tbody").appendChild(eTr);
      var workTd = createElement("td");
      eTr.appendChild(workTd);
      var wrap = createElement("div", { className: CONTENT_WRAP_CLASS });
      workTd.appendChild(wrap);
      var tbl = this.createTableLayout(CONTENT_TABLE_CLASS);
      this.setAriaAttributes(tbl);
      wrap.appendChild(tbl);
      var tBody = tbl.querySelector("tbody");
      var agendaDate = resetTime(this.parent.selectedDate);
      this.renderEmptyContent(tBody, agendaDate);
      this.wireEvents();
      if (this.parent.resourceBase) {
        this.parent.resourceBase.generateResourceLevels([{ renderDates: this.parent.activeView.renderDates }]);
      }
      if (this.parent.uiStateValues.isGroupAdaptive && !this.parent.element.querySelector("." + RESOURCE_TOOLBAR_CONTAINER)) {
        this.renderResourceMobileLayout();
      }
      this.parent.notify(contentReady, {});
    };
    Agenda2.prototype.eventLoad = function(args) {
      this.dataSource = extend([], this.parent.eventsData, null, true);
      for (var _i = 0, _a = this.parent.eventsData; _i < _a.length; _i++) {
        var event_1 = _a[_i];
        delete event_1.generatedDates;
      }
      var eventCollection = this.parent.activeViewOptions.allowVirtualScrolling ? args.processedData : this.parent.eventsProcessed;
      if (this.parent.uiStateValues.isGroupAdaptive) {
        var resource = this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex];
        this.dataSource = this.parent.eventBase.filterEventsByResource(resource, this.dataSource);
        eventCollection = this.parent.eventBase.filterEventsByResource(resource, eventCollection);
      }
      this.parent.eventsProcessed = this.processAgendaEvents(eventCollection);
      var agendaDate = resetTime(this.parent.selectedDate);
      var tBody = this.element.querySelector("." + CONTENT_TABLE_CLASS + " tbody");
      removeChildren(tBody);
      this.renderInitialContent(tBody, agendaDate);
      this.wireEventActions();
      var contentArea = closest(tBody, "." + CONTENT_WRAP_CLASS);
      contentArea.scrollTop = 1;
      this.parent.notify(eventsLoaded, {});
      if (!this.parent.activeViewOptions.allowVirtualScrolling) {
        this.retainScrollPosition();
      }
    };
    Agenda2.prototype.refreshEvent = function(refreshDate) {
      var processedData = [];
      var fields = this.parent.eventFields;
      for (var _i = 0, _a = this.dataSource; _i < _a.length; _i++) {
        var data = _a[_i];
        if (isNullOrUndefined(data[fields.recurrenceID]) && !isNullOrUndefined(data[fields.recurrenceRule]) && !isNullOrUndefined(data.generatedDates) && refreshDate >= data.generatedDates.end) {
          processedData = processedData.concat(this.parent.eventBase.generateOccurrence(data, refreshDate));
        }
      }
      this.parent.eventsProcessed = this.parent.eventsProcessed.concat(this.processAgendaEvents(processedData));
    };
    Agenda2.prototype.refreshHeader = function() {
      var tBody = this.element.querySelector("." + CONTENT_TABLE_CLASS + " tbody");
      if (this.parent.activeViewOptions.group.byDate) {
        removeChildren(tBody);
      } else {
        remove(tBody.firstElementChild);
      }
      var agendaDate = resetTime(this.parent.selectedDate);
      var emptyTBody = createElement("tbody");
      var firstDate = new Date(agendaDate.getTime());
      var lastDate = this.parent.activeViewOptions.allowVirtualScrolling && this.parent.hideEmptyAgendaDays ? this.getEndDateFromStartDate(firstDate) : addDays(firstDate, this.parent.agendaDaysCount);
      this.renderContent(emptyTBody, firstDate, lastDate);
      append([].slice.call(emptyTBody.childNodes), tBody);
    };
    Agenda2.prototype.renderInitialContent = function(tBody, agendaDate) {
      var emptyTBody = createElement("tbody");
      var firstDate = new Date(agendaDate.getTime());
      var lastDate = this.parent.activeViewOptions.allowVirtualScrolling && this.parent.hideEmptyAgendaDays ? this.getEndDateFromStartDate(firstDate) : addDays(firstDate, this.parent.agendaDaysCount);
      this.renderContent(emptyTBody, firstDate, lastDate);
      append([].slice.call(emptyTBody.childNodes), tBody);
      if (this.parent.activeViewOptions.allowVirtualScrolling && this.parent.hideEmptyAgendaDays && this.parent.eventsData.length > 0) {
        var contentArea = this.getContentAreaElement();
        var contentChild = contentArea.querySelector(".e-content-table");
        while (contentArea.offsetWidth <= contentArea.clientWidth) {
          if (this.parent.isAdaptive && contentChild.offsetHeight >= contentArea.clientHeight) {
            break;
          }
          var emptyTBody_1 = createElement("tbody");
          lastDate = firstDate;
          firstDate = addDays(lastDate, -this.parent.agendaDaysCount);
          this.renderContent(emptyTBody_1, firstDate, lastDate);
          prepend([].slice.call(emptyTBody_1.childNodes), tBody);
          if (firstDate <= this.parent.minDate) {
            break;
          }
        }
      }
      if (tBody.childNodes.length <= 0) {
        this.renderEmptyContent(tBody, agendaDate);
      }
    };
    Agenda2.prototype.renderContent = function(tBody, agendaDate, lastDate) {
      var fieldMapping = this.parent.eventFields;
      var firstDate = new Date(agendaDate.getTime());
      var isObject = this.appointmentFiltering(firstDate, lastDate);
      if (isObject.length > 0 && this.parent.activeViewOptions.allowVirtualScrolling && this.parent.hideEmptyAgendaDays) {
        if (!this.parent.activeViewOptions.showWeekend && !this.isAgendaWorkDay(isObject[0][fieldMapping.startTime])) {
          for (var _i = 0, isObject_1 = isObject; _i < isObject_1.length; _i++) {
            var event_2 = isObject_1[_i];
            if (this.isAgendaWorkDay(event_2[fieldMapping.startTime])) {
              agendaDate = new Date(new Date(event_2[fieldMapping.startTime].getTime()).setHours(0, 0, 0, 0));
              this.updateHeaderText(event_2[fieldMapping.startTime]);
              break;
            }
          }
        } else {
          agendaDate = new Date(new Date(isObject[0][fieldMapping.startTime].getTime()).setHours(0, 0, 0, 0));
          this.updateHeaderText(isObject[0][fieldMapping.startTime]);
        }
      }
      var endDate;
      if (!this.parent.hideEmptyAgendaDays || this.parent.agendaDaysCount > 0 && isObject.length > 0) {
        if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
          var date = agendaDate;
          if (!this.parent.activeViewOptions.group.byDate) {
            this.parent.activeViewOptions.allowVirtualScrolling = false;
            date = firstDate;
            if (this.parent.headerModule) {
              this.parent.headerModule.updateDateRange();
              this.parent.headerModule.updateHeaderItems("remove");
            }
          }
          this.calculateResourceTableElement(tBody, this.parent.agendaDaysCount, date, lastDate);
        } else {
          for (var day = 0; day < this.parent.agendaDaysCount; day++) {
            var nTr = this.createTableRowElement(agendaDate, "data");
            var virtualContent = this.element.querySelector('tr[data-row-index="' + +nTr.dataset.rowIndex + '"]');
            if (virtualContent || !this.parent.activeViewOptions.showWeekend && !this.isAgendaWorkDay(agendaDate)) {
              agendaDate = addDays(agendaDate, 1);
              if (!virtualContent && this.parent.activeViewOptions.allowVirtualScrolling) {
                day--;
              }
              if (agendaDate.getTime() > lastDate.getTime()) {
                break;
              }
              continue;
            }
            var dTd = nTr.children[0];
            var aTd = nTr.children[1];
            var filterData = this.appointmentFiltering(agendaDate);
            if (filterData.length > 0 || !this.parent.hideEmptyAgendaDays && filterData.length === 0) {
              var elementType = !this.parent.hideEmptyAgendaDays && filterData.length === 0 ? "noEvents" : "data";
              dTd.appendChild(this.createDateHeaderElement(agendaDate));
              nTr.appendChild(dTd);
              var cTd = this.createAgendaContentElement(elementType, filterData, aTd);
              nTr.appendChild(cTd);
              if (cTd.querySelectorAll("li").length > 0) {
                tBody.appendChild(nTr);
              }
            } else if (this.parent.activeViewOptions.allowVirtualScrolling) {
              day--;
            }
            if (this.isCurrentDate(new Date(agendaDate.getTime()))) {
              addClass(dTd.childNodes, AGENDA_CURRENT_DAY_CLASS);
            }
            agendaDate = addDays(agendaDate, 1);
            if (agendaDate.getTime() > lastDate.getTime()) {
              break;
            }
          }
        }
        endDate = new Date(agendaDate.getTime() - MS_PER_DAY);
      }
      this.agendaDates = { start: firstDate, end: endDate };
    };
    Agenda2.prototype.isAgendaWorkDay = function(date) {
      if (this.parent.uiStateValues.isGroupAdaptive && !this.parent.group.byDate) {
        return this.isWorkDay(date, this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex].workDays);
      } else {
        return this.isWorkDay(date);
      }
    };
    Agenda2.prototype.agendaScrolling = function(event) {
      if (this.parent.quickPopup) {
        this.parent.quickPopup.quickPopupHide();
      }
      if (this.parent.activeViewOptions.allowVirtualScrolling) {
        this.virtualScrolling(event);
      }
      if (!this.parent.activeViewOptions.allowVirtualScrolling) {
        this.setPersistence();
      }
    };
    Agenda2.prototype.virtualScrolling = function(event) {
      var target = event.target;
      var scrollTop = target.scrollTop;
      var scrollHeight = target.scrollHeight;
      var offsetHeight = target.clientHeight;
      var totalHeight = scrollTop + offsetHeight;
      var direction = this.virtualScrollTop < scrollTop ? "next" : "previous";
      var tBody = target.querySelector("tbody");
      var emptyTBody = createElement("tbody");
      var topElement = this.getElementFromScrollerPosition(event);
      var scrollDate = this.parent.getDateFromElement(topElement);
      var filterDate;
      var filterData;
      if (scrollTop === 0) {
        filterDate = this.getPreviousNextDate(addDays(scrollDate, -1), direction);
        filterData = this.appointmentFiltering(filterDate.start, filterDate.end);
        if (filterData.length > 0 || !this.parent.hideEmptyAgendaDays) {
          this.renderContent(emptyTBody, filterDate.start, filterDate.end);
          prepend([].slice.call(emptyTBody.childNodes), tBody);
          this.wireEventActions();
          for (var s = 0, element = tBody.children; s < element.length; s++) {
            if (element[parseInt(s.toString(), 10)].getAttribute("data-row-index") === topElement.getAttribute("data-column-index")) {
              var scrollToValue = element[parseInt(s.toString(), 10)].offsetTop - this.element.querySelector(".e-agenda-item").offsetHeight;
              target.scrollTop = scrollToValue;
              break;
            }
          }
          this.updateHeaderText(scrollDate);
        }
      } else if (totalHeight >= scrollHeight - 5) {
        filterDate = this.getPreviousNextDate(addDays(scrollDate, 1), direction);
        filterData = this.appointmentFiltering(filterDate.start, filterDate.end);
        if (filterData.length > 0 || !this.parent.hideEmptyAgendaDays) {
          this.renderContent(emptyTBody, filterDate.start, filterDate.end);
          append([].slice.call(emptyTBody.childNodes), tBody);
          this.wireEventActions();
          this.updateHeaderText(scrollDate);
        }
      } else {
        this.updateHeaderText(scrollDate);
      }
      this.virtualScrollTop = scrollTop;
      var selectedElements = this.parent.eventBase.getSelectedAppointments();
      if (selectedElements.length > 0) {
        selectedElements[selectedElements.length - 1].focus();
      }
    };
    Agenda2.prototype.getElementFromScrollerPosition = function(event) {
      var filterElement;
      var target = event.target;
      var scrollTop = target.scrollTop;
      var scrollHeight = target.scrollHeight;
      var offsetHeight = target.clientHeight;
      var totalHeight = scrollTop + offsetHeight;
      var liCollection = [].slice.call(target.querySelectorAll(".e-agenda-item"));
      var li;
      var liDetails;
      if (liCollection.length > 0) {
        if (scrollTop === 0) {
          li = liCollection[0];
          filterElement = closest(li, "." + AGENDA_CELLS_CLASS);
        } else if (totalHeight === scrollHeight) {
          li = liCollection[liCollection.length - 1];
          filterElement = closest(li, "." + AGENDA_CELLS_CLASS);
        } else {
          for (var a = 0, length_1 = liCollection.length; a < length_1; a++) {
            li = liCollection[parseInt(a.toString(), 10)];
            liDetails = li.getBoundingClientRect();
            if (liDetails.top >= 0) {
              filterElement = closest(li, "." + AGENDA_CELLS_CLASS);
              break;
            }
          }
        }
      }
      return filterElement;
    };
    Agenda2.prototype.updateHeaderText = function(date) {
      if (this.parent.showHeaderBar) {
        this.parent.headerModule.updateDateRange(date);
      }
    };
    Agenda2.prototype.getPreviousNextDate = function(date, type) {
      var currentDate = new Date(date.getTime());
      var firstDate = this.getStartDateFromEndDate(date);
      var lastDate = this.getEndDateFromStartDate(date);
      var daysCount = 0;
      do {
        if (this.parent.activeViewOptions.showWeekend || !this.parent.activeViewOptions.showWeekend && this.isAgendaWorkDay(currentDate)) {
          var filterData = this.appointmentFiltering(currentDate);
          if (filterData.length > 0 || !this.parent.hideEmptyAgendaDays) {
            daysCount++;
          }
        }
        currentDate = addDays(currentDate, type === "next" ? 1 : -1);
        if (currentDate < firstDate || currentDate > lastDate) {
          break;
        }
      } while (daysCount !== this.parent.agendaDaysCount);
      var endDate = addDays(currentDate, type === "next" ? -1 : 1);
      return type === "next" ? { start: date, end: addDays(endDate, 1) } : { start: endDate, end: addDays(date, 1) };
    };
    Agenda2.prototype.appointmentFiltering = function(startDate, endDate) {
      var dateStart;
      var dateEnd;
      if (!isNullOrUndefined(startDate) && isNullOrUndefined(endDate)) {
        dateStart = resetTime(new Date(startDate.getTime()));
        dateEnd = setTime(new Date(dateStart.getTime()), MS_PER_DAY);
      } else {
        dateStart = new Date(startDate.getTime());
        dateEnd = new Date(endDate.getTime());
      }
      var filterData = this.parent.eventBase.filterEvents(dateStart, dateEnd);
      if (filterData.length === 0) {
        this.refreshEvent(startDate);
        filterData = this.parent.eventBase.filterEvents(dateStart, dateEnd);
      }
      return filterData;
    };
    Agenda2.prototype.getStartDateFromEndDate = function(endDate) {
      var filterDate;
      var fields = this.parent.eventFields;
      if (this.parent.eventsProcessed.length > 0) {
        var firstDate = Math.min.apply(Math, this.parent.eventsProcessed.map(function(a) {
          return a[fields.startTime].getTime();
        }));
        filterDate = this.parent.hideEmptyAgendaDays ? new Date(firstDate) : this.parent.minDate;
      } else {
        filterDate = this.parent.hideEmptyAgendaDays ? addMonths(endDate, -1) : this.parent.minDate;
      }
      return resetTime(filterDate);
    };
    Agenda2.prototype.getEndDateFromStartDate = function(startDate) {
      var filterDate;
      var fieldMapping = this.parent.eventFields;
      if (this.parent.eventsProcessed.length > 0) {
        var lastDate = Math.max.apply(Math, this.parent.eventsProcessed.map(function(a) {
          return a[fieldMapping.endTime].getTime();
        }));
        filterDate = this.parent.hideEmptyAgendaDays ? new Date(lastDate) : this.parent.maxDate;
      } else {
        filterDate = this.parent.hideEmptyAgendaDays ? addMonths(startDate, 1) : this.parent.maxDate;
      }
      return resetTime(addDays(filterDate, 1));
    };
    Agenda2.prototype.getNextPreviousDate = function(type) {
      var noOfDays = type === "next" ? 1 : -1;
      return addDays(this.parent.selectedDate, noOfDays);
    };
    Agenda2.prototype.startDate = function() {
      return resetTime(this.parent.selectedDate);
    };
    Agenda2.prototype.endDate = function() {
      if (this.parent.activeViewOptions.allowVirtualScrolling) {
        return this.getEndDateFromStartDate(this.startDate());
      } else {
        return addDays(this.startDate(), this.parent.agendaDaysCount);
      }
    };
    Agenda2.prototype.getDateRangeText = function(date) {
      var formatDate = this.parent.activeViewOptions.dateFormat ? this.parent.activeViewOptions.dateFormat : "MMMM y";
      if (this.parent.activeViewOptions.allowVirtualScrolling || this.parent.isAdaptive) {
        var currentDate = isNullOrUndefined(date) ? this.parent.selectedDate : date;
        return capitalizeFirstWord(this.parent.globalize.formatDate(currentDate, { format: formatDate, calendar: this.parent.getCalendarMode() }), "multiple");
      } else {
        var startDate = this.parent.selectedDate;
        var endDate = addDays(startDate, this.parent.agendaDaysCount - 1);
        return this.formatDateRange(startDate, endDate);
      }
    };
    Agenda2.prototype.dayNavigationClick = function(e) {
      var element = closest(e.currentTarget, "." + AGENDA_CELLS_CLASS);
      var date = this.parent.getDateFromElement(element);
      if (!isNullOrUndefined(date) && !this.parent.isAdaptive && this.parent.isMinMaxDate(date)) {
        this.parent.setProperties({ selectedDate: date }, true);
        this.parent.changeView("Day", e);
      }
    };
    Agenda2.prototype.wireEvents = function() {
      EventHandler.add(this.element.querySelector("." + CONTENT_WRAP_CLASS), scroll, this.agendaScrolling, this);
    };
    Agenda2.prototype.unWireEvents = function() {
      EventHandler.remove(this.element.querySelector("." + CONTENT_WRAP_CLASS), scroll, this.agendaScrolling);
      var dateHeaderElement = [].slice.call(this.element.querySelectorAll(".e-m-date"));
      for (var _i = 0, dateHeaderElement_1 = dateHeaderElement; _i < dateHeaderElement_1.length; _i++) {
        var element = dateHeaderElement_1[_i];
        EventHandler.remove(element, "click", this.dayNavigationClick);
      }
    };
    Agenda2.prototype.addEventListener = function() {
      this.parent.on(scrollUiUpdate, this.onAgendaScrollUiUpdate, this);
      this.parent.on(dataReady, this.eventLoad, this);
    };
    Agenda2.prototype.removeEventListener = function() {
      if (this.parent) {
        this.parent.off(scrollUiUpdate, this.onAgendaScrollUiUpdate);
        this.parent.off(dataReady, this.eventLoad);
      }
    };
    Agenda2.prototype.onAgendaScrollUiUpdate = function() {
      var headerHeight = this.getHeaderBarHeight();
      if (this.parent.headerModule) {
        if (this.parent.activeViewOptions.allowVirtualScrolling) {
          this.parent.headerModule.updateHeaderItems("add");
        } else {
          this.parent.headerModule.updateHeaderItems("remove");
        }
      }
      var contentArea = this.element.querySelector("." + CONTENT_WRAP_CLASS);
      if (this.parent.height !== "auto") {
        contentArea.style.height = formatUnit(this.parent.element.offsetHeight - headerHeight);
      }
    };
    Agenda2.prototype.scrollToDate = function(scrollDate) {
      var date = /* @__PURE__ */ new Date(+resetTime(scrollDate));
      if (this.parent.activeViewOptions.allowVirtualScrolling) {
        if (!this.parent.hideEmptyAgendaDays || this.parent.getEvents(date, addDays(date, 1), true).length > 0) {
          this.parent.changeDate(date);
        }
      } else {
        var dateElement = this.element.querySelector("." + AGENDA_CELLS_CLASS + '[data-date="' + date.getTime() + '"]');
        if (dateElement) {
          this.getContentAreaElement().scrollTop = dateElement.offsetTop;
        }
      }
    };
    Agenda2.prototype.destroy = function() {
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
      if (this.element) {
        this.unWireEvents();
        if (this.parent.resourceBase) {
          this.parent.resourceBase.destroy();
        }
        if (this.parent.headerModule && this.parent.activeViewOptions.allowVirtualScrolling) {
          this.parent.headerModule.updateHeaderItems("remove");
        }
        _super.prototype.destroy.call(this);
      }
    };
    return Agenda2;
  }(AgendaBase)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/renderer/month-agenda.js
var __extends27 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var MonthAgenda = (
  /** @class */
  function(_super) {
    __extends27(MonthAgenda2, _super);
    function MonthAgenda2(parent) {
      var _this = _super.call(this, parent) || this;
      _this.dayNameFormat = "narrow";
      _this.viewClass = "e-month-agenda-view";
      _this.monthAgendaDate = /* @__PURE__ */ new Date("" + parent.selectedDate);
      return _this;
    }
    MonthAgenda2.prototype.getModuleName = function() {
      return "monthAgenda";
    };
    MonthAgenda2.prototype.renderAppointmentContainer = function() {
      var contentArea = this.getContentAreaElement();
      var wrapperContainer = createElement("div", { className: WRAPPER_CONTAINER_CLASS });
      contentArea.appendChild(wrapperContainer);
      var appWrap = createElement("div", { className: APPOINTMENT_WRAP_CLASS });
      wrapperContainer.appendChild(appWrap);
      this.appendAppContainer(appWrap);
      this.setEventWrapperHeight();
    };
    MonthAgenda2.prototype.getDayNameFormat = function() {
      if (this.parent.isAdaptive) {
        return "narrow";
      }
      return "abbreviated";
    };
    MonthAgenda2.prototype.updateSelectedCellClass = function(data) {
      if (resetTime(data.date).getTime() === resetTime(this.monthAgendaDate).getTime()) {
        data.className.push(SELECTED_CELL_CLASS);
      }
    };
    MonthAgenda2.prototype.setEventWrapperHeight = function() {
      var headerHeight = (this.parent.headerModule ? this.parent.headerModule.getHeaderElement().offsetHeight : 0) + 2;
      var resourceWrapper = this.parent.element.querySelector("." + RESOURCE_HEADER_TOOLBAR);
      if (resourceWrapper) {
        headerHeight += resourceWrapper.offsetHeight;
      }
      var contentArea = this.getContentAreaElement().firstElementChild;
      var dateHeader = this.element.querySelector("." + DATE_HEADER_WRAP_CLASS);
      var availHeight = this.parent.element.offsetHeight - headerHeight - dateHeader.offsetHeight;
      var contentAreaHeight = this.parent.activeViewOptions.interval > 1 ? Math.round(availHeight * 0.8) : contentArea.offsetHeight;
      var appContainerHeight = availHeight - contentAreaHeight;
      var wrapperContainer = this.element.querySelector("." + WRAPPER_CONTAINER_CLASS);
      var eventWrapper = this.element.querySelector("." + APPOINTMENT_WRAP_CLASS);
      if (this.parent.height !== "auto") {
        if (this.parent.activeViewOptions.interval > 1) {
          contentArea.style.height = formatUnit(contentAreaHeight);
          EventHandler.add(contentArea, "scroll", this.onContentScroll, this);
        }
        wrapperContainer.style.height = eventWrapper.style.height = formatUnit(appContainerHeight);
      }
    };
    MonthAgenda2.prototype.onDataReady = function(args) {
      this.setEventWrapperHeight();
      this.clearElements();
      var eventCollection = args.processedData;
      if (this.parent.uiStateValues.isGroupAdaptive) {
        var resource = this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex];
        eventCollection = this.parent.eventBase.filterEventsByResource(resource, eventCollection);
      }
      this.agendaBase = this.getAgendaBase();
      this.parent.eventsProcessed = this.agendaBase.processAgendaEvents(eventCollection);
      var count = 0;
      for (var _i = 0, _a = this.renderDates; _i < _a.length; _i++) {
        var date = _a[_i];
        var filterData = this.appointmentFiltering(date);
        var workCell = this.element.querySelectorAll("." + WORK_CELLS_CLASS)[parseInt(count.toString(), 10)];
        if (filterData.length > 0) {
          if (!workCell.querySelector("." + APPOINTMENT_INDICATOR_CLASS)) {
            workCell.appendChild(createElement("div", { className: APPOINTMENT_INDICATOR_CLASS }));
          }
          if (date.getTime() === resetTime(new Date(this.monthAgendaDate.getTime())).getTime()) {
            this.onEventRender(filterData, date);
          }
        }
        count++;
      }
      this.parent.notify(eventsLoaded, {});
    };
    MonthAgenda2.prototype.onCellClick = function(event) {
      if (this.parent.quickPopup) {
        this.parent.quickPopup.quickPopupHide();
      }
      var filterData = this.appointmentFiltering(event.startTime);
      this.onEventRender(filterData, event.startTime);
      this.parent.notify(eventsLoaded, {});
      this.monthAgendaDate = /* @__PURE__ */ new Date("" + event.startTime);
    };
    MonthAgenda2.prototype.onEventRender = function(events, date) {
      this.agendaBase = this.getAgendaBase();
      var appWrap = this.element.querySelector("." + APPOINTMENT_WRAP_CLASS);
      removeChildren(appWrap);
      if (this.parent.activeViewOptions.group.resources.length === 0 || this.parent.uiStateValues.isGroupAdaptive) {
        if (events.length > 0) {
          var appContainer = createElement("div", { className: APPOINTMENT_CONTAINER_CLASS });
          appWrap.appendChild(this.agendaBase.createAgendaContentElement("data", events, appContainer));
        } else {
          this.appendAppContainer(appWrap);
        }
      } else {
        if (events.length > 0) {
          var table = this.createTableLayout();
          var tBody = table.querySelector("tbody");
          this.agendaBase.calculateResourceTableElement(tBody, 1, date);
          table.appendChild(tBody);
          appWrap.appendChild(table);
        } else {
          this.appendAppContainer(appWrap);
        }
      }
      this.agendaBase.wireEventActions();
    };
    MonthAgenda2.prototype.appointmentFiltering = function(date) {
      var dateStart = resetTime(new Date(date.getTime()));
      var dateEnd = setTime(new Date(dateStart.getTime()), MS_PER_DAY);
      return this.parent.eventBase.filterEvents(dateStart, dateEnd);
    };
    MonthAgenda2.prototype.clearElements = function() {
      var appointmentIndicators = [].slice.call(this.element.querySelectorAll("." + APPOINTMENT_INDICATOR_CLASS));
      for (var _i = 0, appointmentIndicators_1 = appointmentIndicators; _i < appointmentIndicators_1.length; _i++) {
        var appointmentIndicator = appointmentIndicators_1[_i];
        remove(appointmentIndicator);
      }
      this.appendAppContainer(this.element.querySelector("." + APPOINTMENT_WRAP_CLASS));
    };
    MonthAgenda2.prototype.appendAppContainer = function(appWrap) {
      var app = createElement("div", { className: APPOINTMENT_CONTAINER_CLASS });
      addClass([app], AGENDA_NO_EVENT_CLASS);
      app.innerHTML = this.parent.localeObj.getConstant("noEvents");
      removeChildren(appWrap);
      appWrap.appendChild(app);
    };
    MonthAgenda2.prototype.getNextPreviousDate = function(type) {
      var selectedDate = this.parent.selectedDate;
      var interval = type === "next" ? this.parent.activeViewOptions.interval : -this.parent.activeViewOptions.interval;
      var navigateDate = addMonths(this.parent.selectedDate, interval);
      var month = type === "next" ? 2 : 0;
      var lastDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth() + month, 0).getDate();
      var date = lastDate >= this.monthAgendaDate.getDate() ? this.monthAgendaDate.getDate() : lastDate;
      this.monthAgendaDate = new Date(navigateDate.getFullYear(), navigateDate.getMonth(), date);
      return this.monthAgendaDate;
    };
    MonthAgenda2.prototype.getAgendaBase = function() {
      return this.agendaBase || new AgendaBase(this.parent);
    };
    MonthAgenda2.prototype.destroy = function() {
      if (this.agendaBase) {
        this.agendaBase.destroy();
        this.agendaBase = null;
      }
      _super.prototype.destroy.call(this);
    };
    return MonthAgenda2;
  }(Month)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/renderer/timeline-header-row.js
var TimelineHeaderRow = (
  /** @class */
  function() {
    function TimelineHeaderRow2(parent, renderDates) {
      this.parent = parent;
      this.renderDates = renderDates;
    }
    TimelineHeaderRow2.prototype.groupByYear = function(dates) {
      var result = {};
      for (var _i = 0, dates_1 = dates; _i < dates_1.length; _i++) {
        var d = dates_1[_i];
        var key = d.getFullYear();
        result[parseInt(key.toString(), 10)] = result[parseInt(key.toString(), 10)] || [];
        result[parseInt(key.toString(), 10)].push(d);
      }
      return result;
    };
    TimelineHeaderRow2.prototype.groupByMonth = function(dates) {
      var result = {};
      for (var _i = 0, dates_2 = dates; _i < dates_2.length; _i++) {
        var d = dates_2[_i];
        var key = (d.getFullYear() - 1970) * 12 + d.getMonth();
        result[parseInt(key.toString(), 10)] = result[parseInt(key.toString(), 10)] || [];
        result[parseInt(key.toString(), 10)].push(d);
      }
      return result;
    };
    TimelineHeaderRow2.prototype.groupByWeek = function(dates) {
      var result = {};
      for (var _i = 0, dates_3 = dates; _i < dates_3.length; _i++) {
        var d = dates_3[_i];
        var jsDate = +new Date(1970, 0, 1);
        var tzOffsetDiff = d.getTimezoneOffset() - new Date(1970, 0, 1).getTimezoneOffset();
        var key = Math.ceil(((+d - jsDate - tzOffsetDiff * 60 * 1e3) / MS_PER_DAY + new Date(jsDate).getDay() + 1) / 7);
        if (this.parent.firstDayOfWeek && this.parent.firstDayOfWeek > (/* @__PURE__ */ new Date(+d)).getDay()) {
          key = key - 1;
        }
        result[parseInt(key.toString(), 10)] = result[parseInt(key.toString(), 10)] || [];
        result[parseInt(key.toString(), 10)].push(d);
      }
      return result;
    };
    TimelineHeaderRow2.prototype.generateSlots = function(data, colspan, row, cls, type) {
      var _this = this;
      var dateParser = function(date, format) {
        return _this.parent.globalize.formatDate(date, { format, calendar: _this.parent.getCalendarMode() });
      };
      var tdDatas = [];
      var keys = Object.keys(data);
      for (var i = 0; i < keys.length; i++) {
        var dates = data[keys[parseInt(i.toString(), 10)]];
        var htmlCol = void 0;
        if (row.template) {
          var args = { date: dates[0], type };
          var templateId = this.parent.element.id + "_headerRowTemplate";
          htmlCol = [].slice.call(this.parent.templateParser(row.template)(args, this.parent, "template", templateId, false));
        } else {
          var viewTemplate = void 0;
          switch (row.option) {
            case "Year":
              viewTemplate = '<span class="e-header-year">' + dateParser(dates[0], "y") + "</span>";
              break;
            case "Month":
              viewTemplate = '<span class="e-header-month">' + capitalizeFirstWord(dateParser(dates[0], "MMMM"), "single") + "</span>";
              break;
            case "Week":
              viewTemplate = '<span class="e-header-week">' + this.parent.getWeekNumberContent(dates) + "</span>";
          }
          var headerWrapper = createElement("div", { innerHTML: viewTemplate });
          htmlCol = [].slice.call(headerWrapper.childNodes);
        }
        tdDatas.push({ date: dates[0], type, className: [cls], colSpan: dates.length * colspan, template: htmlCol });
      }
      return tdDatas;
    };
    TimelineHeaderRow2.prototype.generateColumnLevels = function(dateSlots, hourSlots) {
      var levels = [];
      var rows = this.parent.activeViewOptions.headerRows;
      var lastLevelColspan = 1;
      if (rows[rows.length - 1].option === "Hour" && hourSlots.length > 0) {
        lastLevelColspan = hourSlots.length / dateSlots.length;
      }
      var tdDatas = [];
      var byYear;
      var byMonth;
      var byWeek;
      for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
        var row = rows_1[_i];
        switch (row.option) {
          case "Year":
            byYear = this.groupByYear(this.renderDates);
            tdDatas = this.generateSlots(byYear, lastLevelColspan, row, "e-header-year-cell", "yearHeader");
            levels.push(tdDatas);
            break;
          case "Month":
            byMonth = this.groupByMonth(this.renderDates);
            tdDatas = this.generateSlots(byMonth, lastLevelColspan, row, "e-header-month-cell", "monthHeader");
            levels.push(tdDatas);
            break;
          case "Week":
            byWeek = this.groupByWeek(this.renderDates);
            tdDatas = this.generateSlots(byWeek, lastLevelColspan, row, "e-header-week-cell", "weekHeader");
            levels.push(tdDatas);
            break;
          case "Date":
            tdDatas = dateSlots;
            tdDatas = tdDatas.map(function(value) {
              value.colSpan = lastLevelColspan;
              return value;
            });
            levels.push(tdDatas);
            break;
          case "Hour":
            if (hourSlots.length > 0) {
              levels.push(hourSlots);
            }
            break;
        }
      }
      return levels;
    };
    return TimelineHeaderRow2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/renderer/timeline-view.js
var __extends28 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var TimelineViews = (
  /** @class */
  function(_super) {
    __extends28(TimelineViews2, _super);
    function TimelineViews2(parent) {
      var _this = _super.call(this, parent) || this;
      _this.timelineAppointment = null;
      _this.baseCssClass = "e-timeline-view";
      return _this;
    }
    TimelineViews2.prototype.getModuleName = function() {
      return "timelineViews";
    };
    TimelineViews2.prototype.getLeftPanelElement = function() {
      return this.element.querySelector("." + RESOURCE_COLUMN_WRAP_CLASS);
    };
    TimelineViews2.prototype.scrollTopPanel = function(target) {
      _super.prototype.scrollTopPanel.call(this, target);
      this.scrollHeaderLabels(target);
    };
    TimelineViews2.prototype.scrollToWorkHour = function() {
      var start = this.parent.getStartEndTime(this.parent.workHours.start);
      var currDateTime = this.isWorkDay(this.parent.selectedDate) && this.parent.workHours.highlight && !isNullOrUndefined(start) ? (/* @__PURE__ */ new Date(+this.parent.selectedDate)).setHours(start.getHours(), start.getMinutes(), 0, 0) : (/* @__PURE__ */ new Date(+this.parent.selectedDate)).setHours(0, 0, 0, 0);
      var queryString = '[data-date="' + new Date(currDateTime).getTime().toString() + '"]';
      var firstWorkHourCell = this.element.querySelector(queryString);
      if (firstWorkHourCell) {
        this.getContentAreaElement().scrollLeft = !this.parent.enableRtl ? firstWorkHourCell.offsetLeft : -(this.parent.getContentTable().offsetWidth - firstWorkHourCell.offsetLeft - firstWorkHourCell.offsetWidth);
      }
    };
    TimelineViews2.prototype.scrollToHour = function(hour, scrollDate) {
      var date;
      var index;
      if (scrollDate) {
        index = this.parent.getIndexOfDate(this.renderDates, resetTime(scrollDate));
        if (index >= 0) {
          date = scrollDate;
          if (!isNullOrUndefined(hour)) {
            var timeString = hour.split(":");
            if (timeString.length === 2) {
              date = new Date(scrollDate.setHours(parseInt(timeString[0], 10), parseInt(timeString[1], 10), 0));
            }
          }
        }
      }
      date = isNullOrUndefined(scrollDate) ? this.parent.getStartEndTime(hour) : date;
      if (isNullOrUndefined(date)) {
        return;
      }
      var scrollLeft;
      if (isNullOrUndefined(hour) || !this.parent.activeViewOptions.timeScale.enable) {
        scrollLeft = index * this.parent.getElementWidth(this.element.querySelector(".e-work-cells"));
      } else {
        scrollLeft = isNullOrUndefined(scrollDate) ? this.getLeftFromDateTime(null, date) : this.getLeftFromDateTime([index], date);
      }
      this.getScrollableElement().scrollLeft = !this.parent.enableRtl ? scrollLeft : -scrollLeft;
    };
    TimelineViews2.prototype.generateColumnLevels = function() {
      var levels = [];
      var dateSlots = this.getDateSlots(this.renderDates, this.parent.activeViewOptions.workDays);
      levels.push(dateSlots);
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        this.parent.resourceBase.generateResourceLevels(dateSlots, !this.parent.uiStateValues.isGroupAdaptive);
      }
      var hourSlots = [];
      if (this.parent.activeViewOptions.timeScale.enable) {
        hourSlots = this.generateTimeSlots(levels[levels.length - 1]);
        levels.push(hourSlots);
      }
      if (this.parent.activeViewOptions.headerRows.length > 0) {
        var renderGn = new TimelineHeaderRow(this.parent, this.renderDates);
        levels = renderGn.generateColumnLevels(dateSlots, hourSlots);
      }
      return levels;
    };
    TimelineViews2.prototype.generateTimeSlots = function(dateSlots) {
      var _this = this;
      var handler = function(r) {
        r.type = r.first ? "majorSlot" : "minorSlot";
        r.className = r.first ? [TIME_SLOT_CLASS] : [TIME_SLOT_CLASS, TIME_CELLS_CLASS];
        r.workDays = _this.parent.activeViewOptions.workDays;
        return r;
      };
      var timeSlotData = this.getTimeSlotRows(handler);
      var slots = [];
      for (var _i = 0, dateSlots_1 = dateSlots; _i < dateSlots_1.length; _i++) {
        var data = dateSlots_1[_i];
        data.colSpan = timeSlotData.length;
        var tempTimeSlots = extend([], timeSlotData, null, true);
        for (var _a = 0, tempTimeSlots_1 = tempTimeSlots; _a < tempTimeSlots_1.length; _a++) {
          var slot = tempTimeSlots_1[_a];
          var cellDate = resetTime(/* @__PURE__ */ new Date("" + data.date));
          slot.date = setTime(cellDate, getDateInMs(slot.date));
          slots.push(slot);
        }
      }
      return slots;
    };
    TimelineViews2.prototype.changeCurrentTimePosition = function() {
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
      this.removeCurrentTimeIndicatorElements();
      var currentDateIndex = this.getCurrentTimeIndicatorIndex();
      var left = this.getLeftFromDateTime(currentDateIndex, this.parent.getCurrentTime());
      var height = this.element.querySelector("." + CONTENT_TABLE_CLASS).offsetHeight;
      var headerWrap = this.element.querySelector("." + DATE_HEADER_WRAP_CLASS);
      var contentWrap = this.element.querySelector("." + CONTENT_WRAP_CLASS);
      contentWrap.appendChild(createElement("div", {
        className: CURRENT_TIMELINE_CLASS,
        styles: (this.parent.enableRtl ? "right" : "left") + ":" + formatUnit(left) + "; height:" + formatUnit(height)
      }));
      if (this.parent.virtualScrollModule) {
        var timeIndicator = this.parent.element.querySelector("." + CURRENT_TIMELINE_CLASS);
        var element = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS + " table");
        setStyleAttribute(timeIndicator, {
          transform: element.style.transform
        });
      }
      var currentTimeEle = createElement("div", {
        innerHTML: this.parent.getTimeString(this.parent.getCurrentTime()),
        className: CURRENT_TIME_CLASS
      });
      headerWrap.appendChild(currentTimeEle);
      currentTimeEle.style[this.parent.enableRtl ? "right" : "left"] = formatUnit(left - currentTimeEle.offsetWidth / 2);
    };
    TimelineViews2.prototype.getLeftFromDateTime = function(currentDateIndex, date) {
      var startHour = this.getStartHour();
      var diffInDates = 0;
      var diffInMinutes = (date.getHours() - startHour.getHours()) * 60 + (date.getMinutes() - startHour.getMinutes());
      if (!isNullOrUndefined(currentDateIndex)) {
        if (currentDateIndex[0] !== 0) {
          var index = this.parent.activeView.colLevels.findIndex(function(level) {
            return level[0].type === "dateHeader";
          });
          if (this.parent.activeView.colLevels[parseInt(index.toString(), 10)] && this.parent.activeView.colLevels[parseInt(index.toString(), 10)][0].colSpan) {
            diffInDates = currentDateIndex[0] * this.parent.activeView.colLevels[parseInt(index.toString(), 10)][0].colSpan * this.parent.getElementWidth(this.element.querySelector(".e-work-cells"));
          } else {
            var endHour = this.getEndHour();
            var end = endHour.getHours() === 0 ? 24 : endHour.getHours();
            diffInMinutes = diffInMinutes + currentDateIndex[0] * ((end - startHour.getHours()) * 60 + (endHour.getMinutes() - startHour.getMinutes()));
          }
        }
      }
      return diffInDates + diffInMinutes * this.parent.getElementWidth(this.element.querySelector(".e-work-cells")) * this.parent.activeViewOptions.timeScale.slotCount / this.parent.activeViewOptions.timeScale.interval;
    };
    TimelineViews2.prototype.renderHeader = function() {
      var tr = createElement("tr");
      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        this.parent.resourceBase.renderResourceHeaderIndent(tr);
      }
      var dateTd = createElement("td");
      dateTd.appendChild(this.renderDatesHeader());
      tr.appendChild(dateTd);
      prepend([tr], this.element.querySelector("tbody"));
    };
    TimelineViews2.prototype.createAllDayRow = function(table, tdData) {
    };
    TimelineViews2.prototype.getCurrentTimeIndicatorIndex = function() {
      var currentDateIndex = [];
      var index = this.parent.getIndexOfDate(this.renderDates, resetTime(this.parent.getCurrentTime()));
      if (index >= 0) {
        currentDateIndex.push(index);
      }
      return currentDateIndex;
    };
    TimelineViews2.prototype.renderContent = function() {
      var tr = createElement("tr");
      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        var resTd = createElement("td");
        resTd.appendChild(this.parent.resourceBase.createResourceColumn());
        tr.appendChild(resTd);
      }
      var workTd = createElement("td");
      var wrap = this.renderContentArea();
      wrap.appendChild(this.createEventTable(this.getRowCount()));
      this.collapseRows(wrap);
      workTd.appendChild(wrap);
      tr.appendChild(workTd);
      if (this.parent.virtualScrollModule) {
        this.parent.virtualScrollModule.renderVirtualTrack(wrap);
      }
      this.element.querySelector("tbody").appendChild(tr);
    };
    TimelineViews2.prototype.getRowCount = function() {
      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        return this.parent.resourceBase.renderedResources.length;
      }
      return 1;
    };
    TimelineViews2.prototype.getResourceTdData = function(i, tdData) {
      var resLevel = this.parent.resourceBase.renderedResources[parseInt(i.toString(), 10)];
      var resSHr = resLevel.resourceData[resLevel.resource.startHourField] || this.parent.workHours.start;
      var resEHr = resLevel.resourceData[resLevel.resource.endHourField] || this.parent.workHours.end;
      tdData.startHour = this.parent.getStartEndTime(resSHr);
      tdData.endHour = this.parent.getStartEndTime(resEHr);
      tdData.workDays = resLevel.resourceData[resLevel.resource.workDaysField] || this.parent.workDays;
      tdData.className = resLevel.className;
      tdData.groupIndex = resLevel.groupIndex;
      tdData.groupOrder = resLevel.groupOrder;
      return tdData;
    };
    TimelineViews2.prototype.renderContentTable = function(table) {
      var tBody = table.querySelector("tbody");
      append(this.getContentRows(), tBody);
    };
    TimelineViews2.prototype.getContentRows = function() {
      var rows = [];
      var tr = createElement("tr");
      var td = createElement("td", { attrs: { "aria-selected": "false" } });
      var trCount = this.getRowCount();
      for (var i = 0; i < trCount; i++) {
        var ntr = tr.cloneNode();
        for (var _i = 0, _a = this.colLevels[this.colLevels.length - 1]; _i < _a.length; _i++) {
          var tdData = _a[_i];
          if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
            tdData = this.getResourceTdData(i, tdData);
          }
          var ntd = this.createContentTd(tdData, tdData, td);
          ntr.appendChild(ntd);
        }
        rows.push(ntr);
      }
      return rows;
    };
    TimelineViews2.prototype.getContentTdClass = function(r) {
      return r.first || !this.parent.activeViewOptions.timeScale.enable ? [WORK_CELLS_CLASS] : [WORK_CELLS_CLASS, ALTERNATE_CELLS_CLASS];
    };
    TimelineViews2.prototype.renderEvents = function() {
      this.timelineAppointment = new TimelineEvent(this.parent, this.parent.activeViewOptions.timeScale.enable ? "hour" : "day");
      this.timelineAppointment.renderAppointments();
      this.parent.notify(eventsLoaded, {});
    };
    TimelineViews2.prototype.getAdjustedDate = function(date) {
      if (!this.parent.activeViewOptions.timeScale.enable) {
        return new Date(date.setHours(0, 0, 0, 0));
      } else {
        var timeSlots = this.colLevels[this.colLevels.length - 1];
        for (var i = 0; i < timeSlots.length; i++) {
          if (timeSlots[parseInt(i.toString(), 10)].date.getTime() > date.getTime()) {
            return timeSlots[i - 1].date;
          }
        }
      }
      return null;
    };
    TimelineViews2.prototype.destroy = function() {
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
      if (this.timelineAppointment) {
        this.timelineAppointment.destroy();
        this.timelineAppointment = null;
      }
      _super.prototype.destroy.call(this);
    };
    return TimelineViews2;
  }(VerticalView)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/renderer/timeline-month.js
var __extends29 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var TimelineMonth = (
  /** @class */
  function(_super) {
    __extends29(TimelineMonth2, _super);
    function TimelineMonth2(parent) {
      var _this = _super.call(this, parent) || this;
      _this.viewClass = "e-timeline-month-view";
      _this.isInverseTableSelect = true;
      _this.appointment = null;
      return _this;
    }
    TimelineMonth2.prototype.getModuleName = function() {
      return "timelineMonth";
    };
    TimelineMonth2.prototype.onDataReady = function() {
      this.appointment = new TimelineEvent(this.parent, "day");
      this.appointment.renderAppointments();
      this.parent.notify(eventsLoaded, {});
    };
    TimelineMonth2.prototype.getLeftPanelElement = function() {
      return this.element.querySelector("." + RESOURCE_COLUMN_WRAP_CLASS);
    };
    TimelineMonth2.prototype.scrollTopPanel = function(target) {
      _super.prototype.scrollTopPanel.call(this, target);
      this.scrollHeaderLabels(target);
    };
    TimelineMonth2.prototype.setContentHeight = function(content, leftPanelElement, height) {
      if (leftPanelElement) {
        leftPanelElement.style.height = formatUnit(height - this.getScrollXIndent(content));
      }
      content.style.height = formatUnit(height);
    };
    TimelineMonth2.prototype.getDateSlots = function(renderDates, workDays) {
      var dateSlots = [];
      for (var _i = 0, renderDates_1 = renderDates; _i < renderDates_1.length; _i++) {
        var col = renderDates_1[_i];
        var classList2 = [HEADER_CELLS_CLASS];
        if (this.isCurrentDate(col)) {
          classList2.push(CURRENT_DAY_CLASS);
        }
        dateSlots.push({ date: col, type: "dateHeader", className: classList2, colSpan: 1, workDays });
      }
      return dateSlots;
    };
    TimelineMonth2.prototype.renderLeftIndent = function(tr) {
      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        this.parent.resourceBase.renderResourceHeaderIndent(tr);
      }
    };
    TimelineMonth2.prototype.renderContent = function() {
      var contentTr = createElement("tr");
      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        var resTd = createElement("td");
        resTd.appendChild(this.parent.resourceBase.createResourceColumn());
        contentTr.appendChild(resTd);
      }
      var contentTd = createElement("td");
      this.element.querySelector("tbody").appendChild(contentTr);
      var wrap = createElement("div", { className: CONTENT_WRAP_CLASS });
      wrap.appendChild(this.renderContentArea());
      wrap.appendChild(this.createEventTable(this.getRowCount()));
      this.collapseRows(wrap);
      EventHandler.add(wrap, "scroll", this.onContentScroll, this);
      contentTd.appendChild(wrap);
      if (this.parent.virtualScrollModule) {
        this.parent.virtualScrollModule.renderVirtualTrack(wrap);
      }
      contentTr.appendChild(contentTd);
    };
    TimelineMonth2.prototype.getRowCount = function() {
      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        return this.parent.resourceBase.renderedResources.length;
      }
      return 1;
    };
    TimelineMonth2.prototype.getContentSlots = function() {
      var slotDatas = [];
      for (var row = 0; row < this.getRowCount(); row++) {
        for (var _i = 0, _a = this.colLevels[this.colLevels.length - 1]; _i < _a.length; _i++) {
          var data = _a[_i];
          data.className = [WORK_CELLS_CLASS];
          if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
            var resLevel = this.parent.resourceBase.renderedResources[parseInt(row.toString(), 10)];
            data.workDays = resLevel.resourceData[resLevel.resource.workDaysField] || this.parent.workDays;
            data.className = data.className.concat(resLevel.className);
            data.groupIndex = resLevel.groupIndex;
            data.groupOrder = resLevel.groupOrder;
          }
          var slotData = {
            date: /* @__PURE__ */ new Date(+data.date),
            colSpan: data.colSpan,
            groupIndex: data.groupIndex,
            workDays: data.workDays,
            type: "monthCells",
            className: data.className
          };
          if (!slotDatas[parseInt(row.toString(), 10)]) {
            slotDatas[parseInt(row.toString(), 10)] = [];
          }
          slotDatas[parseInt(row.toString(), 10)].push(slotData);
        }
      }
      return slotDatas;
    };
    TimelineMonth2.prototype.updateClassList = function(data) {
      if (!this.parent.isMinMaxDate(data.date)) {
        data.className.push(DISABLE_DATES);
      }
    };
    TimelineMonth2.prototype.unWireEvents = function() {
      EventHandler.remove(this.getContentAreaElement(), "scroll", this.onContentScroll);
    };
    TimelineMonth2.prototype.getMonthStart = function(currentDate) {
      var monthStart = this.parent.calendarUtil.firstDateOfMonth(resetTime(currentDate));
      return new Date(monthStart.getFullYear(), monthStart.getMonth(), monthStart.getDate());
    };
    TimelineMonth2.prototype.getMonthEnd = function(currentDate) {
      var monthStart = this.parent.calendarUtil.firstDateOfMonth(resetTime(currentDate));
      return this.parent.calendarUtil.lastDateOfMonth(addMonths(/* @__PURE__ */ new Date(+monthStart), this.parent.activeViewOptions.interval - 1));
    };
    TimelineMonth2.prototype.generateColumnLevels = function() {
      var colLevels = [];
      var level = this.getDateSlots(this.renderDates, this.parent.activeViewOptions.workDays);
      colLevels.push(level);
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        this.parent.resourceBase.generateResourceLevels(level, !this.parent.uiStateValues.isGroupAdaptive);
      }
      var hourSlots = [];
      if (this.parent.activeViewOptions.headerRows.length > 0) {
        var renderGn = new TimelineHeaderRow(this.parent, this.renderDates);
        colLevels = renderGn.generateColumnLevels(level, hourSlots);
      }
      this.colLevels = colLevels;
      return colLevels;
    };
    TimelineMonth2.prototype.getAdjustedDate = function(startTime) {
      var timeSlots = this.colLevels[this.colLevels.length - 1];
      for (var i = 0; i < timeSlots.length; i++) {
        if (timeSlots[parseInt(i.toString(), 10)].date.getTime() > startTime.getTime()) {
          return timeSlots[i - 1].date;
        }
      }
      return null;
    };
    TimelineMonth2.prototype.destroy = function() {
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
      if (this.element) {
        var contentScrollableEle = this.element.querySelector("." + CONTENT_WRAP_CLASS);
        if (contentScrollableEle) {
          EventHandler.remove(contentScrollableEle, "scroll", this.onContentScroll);
        }
      }
      if (this.appointment) {
        this.appointment.destroy();
        this.appointment = null;
      }
      _super.prototype.destroy.call(this);
    };
    return TimelineMonth2;
  }(Month)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/renderer/timeline-year.js
var __extends30 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var TimelineYear = (
  /** @class */
  function(_super) {
    __extends30(TimelineYear2, _super);
    function TimelineYear2(parent) {
      var _this = _super.call(this, parent) || this;
      _this.viewClass = "e-timeline-year-view";
      _this.isInverseTableSelect = true;
      return _this;
    }
    TimelineYear2.prototype.getModuleName = function() {
      return "timelineYear";
    };
    TimelineYear2.prototype.renderHeader = function(headerWrapper) {
      var tr = createElement("tr");
      headerWrapper.appendChild(tr);
      if (this.parent.activeViewOptions.orientation === "Vertical" && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        this.parent.resourceBase.renderResourceHeaderIndent(tr);
      } else {
        var leftHeaderCells = createElement("td", { className: LEFT_INDENT_CLASS });
        tr.appendChild(leftHeaderCells);
        leftHeaderCells.appendChild(this.renderResourceHeader(LEFT_INDENT_WRAP_CLASS));
      }
      var isHorizontal = this.parent.activeViewOptions.orientation === "Horizontal";
      var isGroup = this.parent.activeViewOptions.group.resources.length > 0;
      this.isInverseTableSelect = isHorizontal && !isGroup ? false : true;
      var td = createElement("td");
      tr.appendChild(td);
      var container = createElement("div", { className: DATE_HEADER_CONTAINER_CLASS });
      td.appendChild(container);
      if (this.parent.activeViewOptions.orientation === "Horizontal" && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        container.appendChild(this.renderResourceHeader(DATE_HEADER_WRAP_CLASS));
        this.columnCount = this.colLevels.slice(-1)[0].length;
      } else {
        var wrapper = createElement("div", { className: DATE_HEADER_WRAP_CLASS });
        container.appendChild(wrapper);
        var table = this.createTableLayout();
        wrapper.appendChild(table);
        table.appendChild(this.createTableColGroup(this.columnCount));
        var innerTr = createElement("tr");
        table.querySelector("tbody").appendChild(innerTr);
        var months = this.getMonths();
        var dayHeaderDates = this.getMonthDates(new Date(this.parent.selectedDate.getFullYear(), months[0], 1));
        for (var column = 0; column < this.columnCount; column++) {
          var date = new Date(this.parent.selectedDate.getFullYear(), months[parseInt(column.toString(), 10)], 1);
          var innerTd = createElement("td", { className: HEADER_CELLS_CLASS });
          if (this.parent.activeViewOptions.orientation === "Horizontal") {
            if (this.parent.dayHeaderTemplate) {
              append(this.renderDayMonthHeaderTemplate(dayHeaderDates[parseInt(column.toString(), 10)], column, "dayHeaderTemplate"), innerTd);
            } else {
              innerTd.innerHTML = "<span>" + this.parent.getDayNames("abbreviated")[column % 7] + "</span>";
            }
          } else {
            if (this.parent.monthHeaderTemplate) {
              append(this.renderDayMonthHeaderTemplate(date, months[parseInt(column.toString(), 10)], "monthHeaderTemplate"), innerTd);
            } else {
              innerTd.innerHTML = "<span>" + this.getMonthName(date) + "</span>";
            }
            innerTd.setAttribute("data-date", date.getTime().toString());
          }
          innerTr.appendChild(innerTd);
          this.parent.trigger(renderCell, { elementType: "headerCells", element: innerTd });
        }
      }
    };
    TimelineYear2.prototype.renderResourceHeader = function(className) {
      var wrap = createElement("div", { className });
      var tbl = this.createTableLayout();
      wrap.appendChild(tbl);
      var trEle = createElement("tr");
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        this.colLevels = this.generateColumnLevels();
      } else {
        var colData = [{ className: [HEADER_CELLS_CLASS], type: "headerCell" }];
        this.colLevels = [colData];
      }
      for (var _i = 0, _a = this.colLevels; _i < _a.length; _i++) {
        var col = _a[_i];
        var ntr = trEle.cloneNode();
        var count = className === DATE_HEADER_WRAP_CLASS ? col : [col[0]];
        for (var _b = 0, count_1 = count; _b < count_1.length; _b++) {
          var c = count_1[_b];
          var tdEle = createElement("td");
          if (c.className) {
            addClass([tdEle], c.className);
          }
          if (className === DATE_HEADER_WRAP_CLASS) {
            if (c.template) {
              append(c.template, tdEle);
            }
            if (c.colSpan) {
              tdEle.setAttribute("colspan", c.colSpan.toString());
            }
            if (c.groupIndex > -1) {
              tdEle.setAttribute("data-group-index", c.groupIndex.toString());
            }
            this.setResourceHeaderContent(tdEle, c);
          }
          if (className === LEFT_INDENT_WRAP_CLASS) {
            this.parent.renderHeaderIndentTemplate(c, tdEle);
          }
          var args = { elementType: c.type, element: tdEle, date: c.date, groupIndex: c.groupIndex };
          this.parent.trigger(renderCell, args);
          ntr.appendChild(tdEle);
        }
        tbl.querySelector("tbody").appendChild(ntr);
      }
      if (className === DATE_HEADER_WRAP_CLASS) {
        tbl.appendChild(this.createTableColGroup(this.colLevels.slice(-1)[0].length));
      }
      return wrap;
    };
    TimelineYear2.prototype.renderContent = function(contentWrapper) {
      var tr = createElement("tr");
      contentWrapper.appendChild(tr);
      var firstTd = createElement("td");
      var lastTd = createElement("td");
      var tdCollection = [];
      var monthTBody;
      if (this.parent.activeViewOptions.orientation === "Vertical" && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        tdCollection.push(firstTd);
        firstTd.appendChild(this.parent.resourceBase.createResourceColumn());
        this.rowCount = this.parent.resourceBase.renderedResources.length;
      } else {
        tdCollection.push(firstTd);
        var monthWrapper = createElement("div", { className: MONTH_HEADER_WRAPPER });
        firstTd.appendChild(monthWrapper);
        monthWrapper.appendChild(this.createTableLayout());
        monthTBody = monthWrapper.querySelector("tbody");
      }
      tdCollection.push(lastTd);
      append(tdCollection, tr);
      var content = createElement("div", { className: CONTENT_WRAP_CLASS });
      lastTd.appendChild(content);
      var contentTable = this.createTableLayout(CONTENT_TABLE_CLASS);
      this.setAriaAttributes(contentTable);
      content.appendChild(contentTable);
      var eventWrapper = createElement("div", { className: EVENT_TABLE_CLASS });
      content.appendChild(eventWrapper);
      if (this.parent.virtualScrollModule) {
        this.parent.virtualScrollModule.renderVirtualTrack(content);
      }
      var contentTBody = contentTable.querySelector("tbody");
      if (this.parent.rowAutoHeight) {
        var addClassTable = [contentTable];
        var monthHeader = this.parent.element.querySelector("." + MONTH_HEADER_WRAPPER + " ." + SCHEDULE_TABLE_CLASS);
        if (monthHeader) {
          addClassTable.push(monthHeader);
        }
        addClass(addClassTable, AUTO_HEIGHT);
      }
      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        var colCount = this.parent.activeViewOptions.orientation === "Horizontal" ? this.colLevels.slice(-1)[0].length : this.columnCount;
        contentTable.appendChild(this.createTableColGroup(colCount));
        this.renderResourceContent(eventWrapper, monthTBody, contentTBody);
      } else {
        contentTable.appendChild(this.createTableColGroup(this.columnCount));
        this.renderDefaultContent(eventWrapper, monthTBody, contentTBody);
      }
    };
    TimelineYear2.prototype.renderDefaultContent = function(wrapper, monthBody, contentBody) {
      var months = this.getMonths();
      var dayHeaderDates = this.getMonthDates(new Date(this.parent.selectedDate.getFullYear(), months[0], 1));
      for (var month = 0; month < this.rowCount; month++) {
        wrapper.appendChild(createElement("div", { className: APPOINTMENT_CONTAINER_CLASS }));
        var monthDate = new Date(this.parent.selectedDate.getFullYear(), months[parseInt(month.toString(), 10)], 1);
        var monthStart = this.parent.calendarUtil.getMonthStartDate(new Date(monthDate.getTime()));
        var monthEnd = this.parent.calendarUtil.getMonthEndDate(new Date(monthDate.getTime()));
        var tr = createElement("tr");
        var monthTr = tr.cloneNode();
        monthBody.appendChild(monthTr);
        var contentTr = tr.cloneNode();
        contentBody.appendChild(contentTr);
        var monthTd = createElement("td", { className: MONTH_HEADER_CLASS });
        if (this.parent.activeViewOptions.orientation === "Horizontal") {
          if (this.parent.monthHeaderTemplate) {
            append(this.renderDayMonthHeaderTemplate(monthStart, month, "monthHeaderTemplate"), monthTd);
          } else {
            monthTd.innerHTML = "<span>" + this.getMonthName(monthDate) + "</span>";
          }
          monthTd.setAttribute("data-date", monthDate.getTime().toString());
        } else {
          if (this.parent.dayHeaderTemplate) {
            append(this.renderDayMonthHeaderTemplate(dayHeaderDates[parseInt(month.toString(), 10)], month, "dayHeaderTemplate"), monthTd);
          } else {
            monthTd.innerHTML = "<span>" + this.parent.getDayNames("abbreviated")[month % 7] + "</span>";
          }
        }
        monthTr.appendChild(monthTd);
        this.parent.trigger(renderCell, { elementType: "leftHeaderCells", element: monthTd });
        var date = new Date(monthStart.getTime());
        for (var column = 0; column < this.columnCount; column++) {
          var isDateAvail = void 0;
          if (this.parent.activeViewOptions.orientation === "Vertical") {
            monthDate = new Date(this.parent.selectedDate.getFullYear(), months[parseInt(column.toString(), 10)], 1);
            monthStart = this.parent.calendarUtil.getMonthStartDate(new Date(monthDate.getTime()));
            monthEnd = this.parent.calendarUtil.getMonthEndDate(new Date(monthDate.getTime()));
            var dayDate = month - monthStart.getDay() + 1;
            date = new Date(this.parent.selectedDate.getFullYear(), months[parseInt(column.toString(), 10)], dayDate);
            isDateAvail = dayDate > 0 && date.getTime() < monthEnd.getTime();
          } else {
            isDateAvail = column >= monthStart.getDay() && date.getTime() < monthEnd.getTime();
          }
          var announcementText = this.parent.globalize.formatDate(date, {
            skeleton: "full",
            calendar: this.parent.getCalendarMode()
          });
          var td = createElement("td", {
            className: WORK_CELLS_CLASS,
            attrs: { "aria-selected": "false", "aria-label": announcementText }
          });
          contentTr.appendChild(td);
          var dateHeader = createElement("div", {
            className: DATE_HEADER_CLASS + " " + NAVIGATE_CLASS,
            innerHTML: isDateAvail ? this.parent.globalize.formatDate(date, { skeleton: "d", calendar: this.parent.getCalendarMode() }) : ""
          });
          if (isDateAvail) {
            var tds = [td];
            var classList2 = [];
            if (this.parent.activeViewOptions.workDays.indexOf(date.getDay()) > -1) {
              classList2.push(WORKDAY_CLASS);
            }
            if (!this.parent.isMinMaxDate(date)) {
              addClass([td], DISABLE_DATES);
            }
            if (this.isCurrentDate(date)) {
              classList2.push(CURRENT_DAY_CLASS);
              if (this.parent.activeViewOptions.orientation === "Horizontal") {
                tds.push(this.element.querySelector("." + HEADER_CELLS_CLASS + (":nth-child(" + (column + 1) + ")")));
              } else {
                tds.push(this.element.querySelectorAll("." + MONTH_HEADER_CLASS).item(month));
              }
            }
            if (classList2.length > 0) {
              addClass(tds, classList2);
            }
          } else {
            addClass([td], OTHERMONTH_CLASS);
            if (!this.parent.isMinMaxDate(date)) {
              addClass([td], DISABLE_DATES);
            }
          }
          if (td.classList.contains(OTHERMONTH_CLASS)) {
            continue;
          } else {
            this.renderDates.push(new Date(date));
          }
          td.appendChild(dateHeader);
          if (isDateAvail) {
            td.setAttribute("data-date", date.getTime().toString());
            this.wireEvents(td);
          }
          this.renderCellTemplate({ date, type: "workCells" }, td);
          this.parent.trigger(renderCell, { elementType: "workCells", element: td, date });
          if (isDateAvail) {
            if (this.parent.activeViewOptions.orientation === "Horizontal") {
              date = addDays(new Date(date.getTime()), 1);
            }
          }
        }
      }
      this.renderDates.splice(0, 1);
    };
    TimelineYear2.prototype.getContentRows = function() {
      var tRow = [];
      var monthCells = this.getMonths();
      for (var row = 0; row < this.parent.resourceBase.renderedResources.length; row++) {
        var tr = createElement("tr");
        tRow.push(tr);
        var resData = void 0;
        if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
          resData = this.parent.resourceBase.renderedResources[parseInt(row.toString(), 10)];
        }
        var monthDate = new Date(this.parent.selectedDate.getFullYear(), monthCells[parseInt(row.toString(), 10)], 1);
        var date = this.parent.calendarUtil.getMonthStartDate(new Date(monthDate.getTime()));
        for (var month = 0; month < this.columnCount; month++) {
          var classList2 = [];
          var groupIndex = resData.groupIndex;
          classList2 = classList2.concat(resData.className);
          if (classList2.indexOf(RESOURCE_PARENT_CLASS) > -1) {
            classList2.push(RESOURCE_GROUP_CELLS_CLASS);
          } else {
            classList2.push(WORKDAY_CLASS);
          }
          monthDate = new Date(this.parent.selectedDate.getFullYear(), monthCells[parseInt(month.toString(), 10)], 1);
          date = this.parent.calendarUtil.getMonthStartDate(new Date(monthDate.getTime()));
          var tdELe = createElement("td", {
            className: WORK_CELLS_CLASS,
            attrs: {
              "aria-selected": "false",
              "data-date": date.getTime().toString()
            }
          });
          addClass([tdELe], classList2);
          tdELe.setAttribute("data-group-index", groupIndex.toString());
          this.renderCellTemplate({ date, type: "resourceGroupCells", groupIndex }, tdELe);
          this.wireEvents(tdELe);
          this.parent.trigger(renderCell, { elementType: "resourceGroupCells", element: tdELe, date });
          tr.appendChild(tdELe);
        }
      }
      return tRow;
    };
    TimelineYear2.prototype.renderResourceContent = function(wrapper, monthBody, contentBody) {
      var months = this.getMonths();
      for (var row = 0; row < this.rowCount; row++) {
        wrapper.appendChild(createElement("div", { className: APPOINTMENT_CONTAINER_CLASS }));
        var tr = createElement("tr");
        contentBody.appendChild(tr);
        var resData = void 0;
        if (this.parent.activeViewOptions.orientation === "Vertical" && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
          resData = this.parent.resourceBase.renderedResources[parseInt(row.toString(), 10)];
        }
        var monthDate = new Date(this.parent.selectedDate.getFullYear(), months[parseInt(row.toString(), 10)], 1);
        var date = this.parent.calendarUtil.getMonthStartDate(new Date(monthDate.getTime()));
        if (this.parent.activeViewOptions.orientation === "Horizontal") {
          var monthTr = tr.cloneNode();
          monthBody.appendChild(monthTr);
          var monthTd = createElement("td", {
            className: MONTH_HEADER_CLASS,
            attrs: { "data-date": date.getTime().toString() }
          });
          if (this.parent.monthHeaderTemplate) {
            append(this.renderDayMonthHeaderTemplate(monthDate, row, "monthHeaderTemplate"), monthTd);
          } else {
            monthTd.innerHTML = "<span>" + this.getMonthName(monthDate) + "</span>";
          }
          monthTr.appendChild(monthTd);
        }
        for (var month = 0; month < this.columnCount; month++) {
          var classList2 = [];
          var groupIndex = void 0;
          if (this.parent.activeViewOptions.orientation === "Vertical") {
            groupIndex = resData.groupIndex;
            classList2 = classList2.concat(resData.className);
            if (classList2.indexOf(RESOURCE_PARENT_CLASS) > -1) {
              classList2.push(RESOURCE_GROUP_CELLS_CLASS);
            } else {
              classList2.push(WORKDAY_CLASS);
            }
            monthDate = new Date(this.parent.selectedDate.getFullYear(), months[parseInt(month.toString(), 10)], 1);
            date = this.parent.calendarUtil.getMonthStartDate(new Date(monthDate.getTime()));
          } else {
            groupIndex = this.colLevels.slice(-1)[0][parseInt(month.toString(), 10)].groupIndex;
            classList2.push(WORKDAY_CLASS);
          }
          var startDateText = this.parent.globalize.formatDate(date, { type: "dateTime", skeleton: "full", calendar: this.parent.getCalendarMode() });
          var endDateText = this.parent.globalize.formatDate(this.parent.calendarUtil.getMonthEndDate(new Date(monthDate.getTime())), { type: "dateTime", skeleton: "full", calendar: this.parent.getCalendarMode() });
          var td = createElement("td", {
            className: WORK_CELLS_CLASS,
            attrs: {
              "aria-selected": "false",
              "data-date": date.getTime().toString(),
              "aria-label": startDateText + " " + this.parent.localeObj.getConstant("endAt") + " " + endDateText
            }
          });
          addClass([td], classList2);
          td.setAttribute("data-group-index", groupIndex.toString());
          this.renderCellTemplate({ date, type: "resourceGroupCells", groupIndex }, td);
          this.wireEvents(td);
          tr.appendChild(td);
          this.parent.trigger(renderCell, { elementType: "resourceGroupCells", element: td, date });
        }
      }
      if (this.parent.activeViewOptions.orientation === "Vertical") {
        this.collapseRows(this.parent.element.querySelector("." + CONTENT_WRAP_CLASS));
      }
    };
    TimelineYear2.prototype.renderDayMonthHeaderTemplate = function(date, column, type) {
      var args = { date, type: type === "dayHeaderTemplate" ? "dayHeader" : "monthHeader" };
      var dayId = "schedule_" + this.parent.activeViewOptions.dayHeaderTemplateName + "dayHeaderTemplate";
      var monthId = "schedule_" + this.parent.activeViewOptions.dayHeaderTemplateName + "monthHeaderTemplate";
      if (type === "dayHeaderTemplate") {
        args.day = this.parent.getDayNames("wide")[column % 7];
        return [].slice.call(this.parent.getDayHeaderTemplate()(args, this.parent, "dayHeaderTemplate", dayId, false, void 0, void 0, this.parent.root));
      } else {
        return [].slice.call(this.parent.getMonthHeaderTemplate()(args, this.parent, "monthHeaderTemplate", monthId, false, void 0, void 0, this.parent.root));
      }
    };
    TimelineYear2.prototype.renderCellTemplate = function(data, td) {
      if (!this.parent.activeViewOptions.cellTemplate || td.classList.contains(OTHERMONTH_CLASS)) {
        return;
      }
      var args = { date: data.date, type: data.type };
      if (data.groupIndex) {
        args.groupIndex = data.groupIndex;
      }
      var scheduleId = this.parent.element.id + "_";
      var viewName = this.parent.activeViewOptions.cellTemplateName;
      var templateId = scheduleId + viewName + "cellTemplate";
      var cellTemplate = [].slice.call(this.parent.getCellTemplate()(args, this.parent, "cellTemplate", templateId, false, void 0, void 0, this.parent.root));
      append(cellTemplate, td);
    };
    TimelineYear2.prototype.scrollToDate = function(scrollDate) {
      var date;
      if (this.parent.activeViewOptions.group.resources !== null && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        date = +new Date(resetTime(firstDateOfMonth(scrollDate)));
      } else {
        date = +new Date(resetTime(scrollDate));
      }
      var element = this.element.querySelector('[data-date="' + date + '"]');
      if (element) {
        var wrap = this.getScrollableElement();
        if (this.parent.enableRtl) {
          var conTable = this.element.querySelector("." + CONTENT_TABLE_CLASS);
          wrap.scrollLeft = -(conTable.offsetWidth - element.offsetLeft - element.offsetWidth);
        } else {
          wrap.scrollLeft = element.offsetLeft;
        }
        wrap.scrollTop = element.offsetTop;
      }
    };
    TimelineYear2.prototype.getScrollableElement = function() {
      if (this.parent.isAdaptive && !this.isTimelineView()) {
        return this.element.querySelector("." + SCROLL_CONTAINER_CLASS);
      } else {
        return this.getContentAreaElement();
      }
    };
    TimelineYear2.prototype.wireEvents = function(element) {
      EventHandler.add(element, "mousedown", this.parent.workCellAction.cellMouseDown, this.parent.workCellAction);
      EventHandler.add(element, "click", this.parent.workCellAction.cellClick, this.parent.workCellAction);
      if (!this.parent.isAdaptive) {
        EventHandler.add(element, "dblclick", this.parent.workCellAction.cellDblClick, this.parent.workCellAction);
      }
    };
    return TimelineYear2;
  }(Year)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/exports/calendar-export.js
var ICalendarExport = (
  /** @class */
  function() {
    function ICalendarExport2(parent) {
      this.parent = parent;
    }
    ICalendarExport2.prototype.initializeCalendarExport = function(fileName, customData) {
      var icsString = this.getCalendarString(fileName, customData);
      this.download(icsString, fileName);
    };
    ICalendarExport2.prototype.getCalendarString = function(fileName, customData) {
      var _this = this;
      var eventsData = customData ? customData : extend([], this.parent.eventsData, null, true);
      eventsData = this.parent.eventBase.sortByTime(eventsData);
      var SEPARATOR = navigator.appVersion.indexOf("Win") !== -1 ? "\r\n" : "\n";
      var iCalendarEvents = [];
      var filterCollection = [];
      var timeZone = this.parent.timezone || this.parent.tzModule.getLocalTimezoneName();
      var fields = this.parent.eventFields;
      eventsData.forEach(function(eventObj) {
        var uId = eventObj[fields.id] || eventObj.Guid || _this.parent.eventBase.generateGuid();
        var editedExDate = [];
        if (eventObj[fields.recurrenceID]) {
          var filter = _this.filterEvents(filterCollection, fields.id, eventObj[fields.recurrenceID]);
          uId = filter.length > 0 ? filter[0].UID : uId;
        }
        if (!eventObj[fields.recurrenceID] && eventObj[fields.recurrenceRule] && eventObj[fields.recurrenceException]) {
          var exDate = eventObj[fields.recurrenceException].split(",");
          var editedObj = _this.filterEvents(eventsData, fields.recurrenceID, eventObj[fields.id]);
          editedObj.forEach(function(edited) {
            editedExDate.push(getRecurrenceStringFromDate(edited[fields.startTime]));
          });
          var exceptionDateList = exDate.filter(function(value) {
            return editedExDate.indexOf(value) === -1;
          });
          eventObj[fields.recurrenceException] = exceptionDateList.length > 0 ? exceptionDateList.join(",") + "," : "";
        }
        var startZone = eventObj[fields.startTimezone] || timeZone;
        var endZone = eventObj[fields.endTimezone] || timeZone;
        var readonly = eventObj[fields.isReadonly] ? eventObj[fields.isReadonly] : false;
        var calendarEvent = [
          "BEGIN:VEVENT",
          "LOCATION:" + (eventObj[fields.location] || ""),
          "SUMMARY:" + (eventObj[fields.subject] || ""),
          "UID:" + uId,
          "DESCRIPTION:" + (eventObj[fields.description] || ""),
          "ISREADONLY:" + readonly,
          "END:VEVENT"
        ];
        if (eventObj[fields.isAllDay]) {
          calendarEvent.splice(4, 0, "DTEND;VALUE=DATE:" + _this.convertDateToString(eventObj[fields.endTime], true));
          calendarEvent.splice(4, 0, "DTSTART;VALUE=DATE:" + _this.convertDateToString(eventObj[fields.startTime], true));
        } else if (!eventObj[fields.isAllDay] && !eventObj[fields.recurrenceRule]) {
          calendarEvent.splice(4, 0, "DTEND:" + _this.convertDateToString(eventObj[fields.endTime]));
          calendarEvent.splice(4, 0, "DTSTART:" + _this.convertDateToString(eventObj[fields.startTime]));
        } else {
          calendarEvent.splice(4, 0, 'DTEND;TZID="' + endZone + '":' + _this.convertDateToString(eventObj[fields.endTime]));
          calendarEvent.splice(4, 0, 'DTSTART;TZID="' + startZone + '":' + _this.convertDateToString(eventObj[fields.startTime]));
        }
        if (eventObj[fields.recurrenceRule]) {
          calendarEvent.splice(4, 0, "RRULE:" + eventObj[fields.recurrenceRule]);
        }
        if (eventObj[fields.recurrenceException]) {
          var exDate = eventObj[fields.recurrenceException].split(",");
          for (var i = 0; i < exDate.length - 1; i++) {
            calendarEvent.splice(5, 0, "EXDATE:" + _this.convertDateToString(getDateFromRecurrenceDateString(exDate[parseInt(i.toString(), 10)]), eventObj[fields.isAllDay]));
          }
        }
        if (eventObj[fields.recurrenceID]) {
          calendarEvent.splice(4, 0, 'RECURRENCE-ID;TZID="' + startZone + '":' + _this.convertDateToString(eventObj[fields.startTime], eventObj[fields.isAllDay]));
        }
        var customFields = _this.customFieldFilter(eventObj, fields);
        if (customFields.length > 0) {
          customFields.forEach(function(customField) {
            return calendarEvent.splice(4, 0, customField + ":" + (eventObj["" + customField] || ""));
          });
        }
        var app = extend({}, eventObj);
        app.UID = uId;
        filterCollection.push(app);
        iCalendarEvents.push(calendarEvent.join(SEPARATOR));
      });
      var iCalendar = [
        "BEGIN:VCALENDAR",
        "PRODID:-//Syncfusion Inc//Scheduler//EN",
        "VERSION:2.0",
        "CALSCALE:GREGORIAN",
        "METHOD:PUBLISH",
        "X-WR-CALNAME:" + (fileName || "Calendar"),
        "X-WR-TIMEZONE:" + timeZone
      ].join(SEPARATOR);
      var icsString = iCalendar + SEPARATOR + iCalendarEvents.join(SEPARATOR) + SEPARATOR + "END:VCALENDAR";
      return icsString;
    };
    ICalendarExport2.prototype.customFieldFilter = function(eventObj, fields) {
      var defaultFields = Object.keys(fields).map(function(key) {
        return fields["" + key];
      });
      var eventFields = Object.keys(eventObj);
      return eventFields.filter(function(value) {
        return defaultFields.indexOf(value) === -1 && value !== "Guid";
      });
    };
    ICalendarExport2.prototype.convertDateToString = function(eventDate, allDay) {
      var year = ("0000" + eventDate.getFullYear().toString()).slice(-4);
      var month = ("00" + (eventDate.getMonth() + 1).toString()).slice(-2);
      var date = ("00" + eventDate.getDate().toString()).slice(-2);
      var hours = ("00" + eventDate.getHours().toString()).slice(-2);
      var minutes = ("00" + eventDate.getMinutes().toString()).slice(-2);
      var seconds = ("00" + eventDate.getSeconds().toString()).slice(-2);
      var timeString = allDay ? year + month + date : year + month + date + "T" + hours + minutes + seconds;
      return timeString;
    };
    ICalendarExport2.prototype.download = function(icsString, fileName) {
      var buffer = new Blob([icsString], { type: "data:text/calendar;charset=utf8" });
      fileName = (fileName || "Calendar") + ".ics";
      if (navigator.msSaveBlob) {
        navigator.msSaveBlob(buffer, fileName);
      } else {
        var downloadLink_1 = document.createElementNS("http://www.w3.org/1999/xhtml", "a");
        downloadLink_1.download = fileName;
        downloadLink_1.href = URL.createObjectURL(buffer);
        var event_1 = document.createEvent("MouseEvent");
        event_1.initEvent("click", true, true);
        downloadLink_1.dispatchEvent(event_1);
        setTimeout(function() {
          URL.revokeObjectURL(downloadLink_1.href);
          downloadLink_1.href = void 0;
        });
      }
    };
    ICalendarExport2.prototype.filterEvents = function(data, field, value) {
      return data.filter(function(e) {
        return e["" + field] === value;
      });
    };
    ICalendarExport2.prototype.getModuleName = function() {
      return "iCalendarExport";
    };
    ICalendarExport2.prototype.destroy = function() {
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
      this.parent = null;
    };
    return ICalendarExport2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/exports/calendar-import.js
var ICalendarImport = (
  /** @class */
  function() {
    function ICalendarImport2(parent) {
      this.allDay = false;
      this.parent = parent;
    }
    ICalendarImport2.prototype.initializeCalendarImport = function(fileContent) {
      var _this = this;
      if (fileContent && fileContent instanceof Blob) {
        var fileReader_1 = new FileReader();
        fileReader_1.onload = function() {
          var iCalString = fileReader_1.result;
          _this.iCalendarParser(iCalString);
        };
        fileReader_1.readAsText(fileContent, "UTF-8");
      } else if (fileContent && typeof fileContent === "string") {
        this.iCalendarParser(fileContent);
      }
    };
    ICalendarImport2.prototype.iCalendarParser = function(iCalString) {
      var iCalData = {
        isEvent: false,
        curEvent: null,
        id: this.parent.eventBase.getEventMaxID(),
        count: 0,
        events: [],
        key: null
      };
      var iStringLength = iCalString.length;
      var lastPosition = iCalString.search(/[^ \t]/);
      var position = lastPosition;
      var iString;
      var newlineOffset;
      do {
        position = iCalString.indexOf("\n", lastPosition) + 1;
        if (position === 0) {
          position = iStringLength;
          newlineOffset = 0;
        } else if (position > 1 && iCalString[position - 2] === "\r") {
          newlineOffset = 2;
        } else {
          newlineOffset = 1;
        }
        var firstChar = iCalString.charAt(lastPosition);
        if (firstChar === " " || firstChar === "\n" || firstChar === "	") {
          iString += iCalString.slice(lastPosition + 1, position - newlineOffset);
        } else {
          if (iString) {
            iCalData = this.updateEventData(iString, iCalData);
          }
          iString = iCalString.slice(lastPosition, position - newlineOffset);
        }
        lastPosition = position;
      } while (position !== iStringLength);
      iString = iString.trim();
      if (iString.length) {
        iCalData = this.updateEventData(iString, iCalData);
      }
      var app = extend([], iCalData.events, null, true);
      this.parent.addEvent(this.processOccurrence(app, iCalData.id));
    };
    ICalendarImport2.prototype.updateEventData = function(iString, iCalData) {
      var fields = this.parent.eventFields;
      var SEPARATOR = "\r\n";
      var id = iCalData.id;
      var events = iCalData.events;
      var isEvent = iCalData.isEvent;
      var count = iCalData.count;
      var curEvent = iCalData.curEvent;
      var key = iCalData.key;
      if (!isEvent && iString === "BEGIN:VEVENT") {
        isEvent = true;
        curEvent = {};
      }
      if (isEvent && iString === "END:VEVENT") {
        isEvent = false;
        events.push(curEvent);
        curEvent = null;
      }
      if (isEvent) {
        var index = iString.indexOf(":");
        var type_1 = iString.substring(0, index).replace(/^\s\s*/, "").replace(/\s\s*$/, "");
        var value = iString.substring(index + 1, iString.length).replace(/^\s\s*/, "").replace(/\s\s*$/, "");
        if (iString.indexOf("SUMMARY") !== -1) {
          type_1 = "SUMMARY";
        }
        if (iString.indexOf("DTSTART") !== -1) {
          curEvent[fields.startTime] = this.dateParsing(iString);
          curEvent[fields.isAllDay] = this.allDay;
          this.allDay = false;
        } else if (iString.indexOf("DTEND") !== -1) {
          curEvent[fields.endTime] = this.dateParsing(iString);
        } else if (iString.indexOf("EXDATE") !== -1) {
          value = getRecurrenceStringFromDate(this.dateParsing(iString));
          curEvent[fields.recurrenceException] = isNullOrUndefined(curEvent[fields.recurrenceException]) ? value : curEvent[fields.recurrenceException] + "," + value;
        } else if (iString.indexOf("RECURRENCE-ID") !== -1) {
          value = getRecurrenceStringFromDate(this.dateParsing(iString));
          curEvent[fields.recurrenceException] = value;
          curEvent[fields.recurrenceID] = value;
        } else {
          key = type_1 || key;
          switch (key) {
            case "BEGIN":
              break;
            case "UID":
              curEvent["" + type_1] = value;
              if (typeof id == "number") {
                curEvent[fields.id] = parseInt(value, 10);
                if (isNaN(curEvent[fields.id])) {
                  curEvent[fields.id] = id + count;
                  count++;
                }
              } else {
                curEvent[fields.id] = value;
              }
              break;
            case "SUMMARY":
              curEvent[fields.subject] = this.getFormattedString(value);
              break;
            case "LOCATION":
              curEvent[fields.location] = this.getFormattedString(value);
              break;
            case "DESCRIPTION":
              if (curEvent[fields.description]) {
                curEvent[fields.description] = this.getFormattedString(curEvent[fields.description] + SEPARATOR + value);
              } else {
                curEvent[fields.description] = this.getFormattedString(value);
              }
              break;
            case "ISREADONLY":
              curEvent[fields.isReadonly] = value.indexOf("true") > -1;
              break;
            case "RRULE":
              curEvent[fields.recurrenceRule] = value;
              break;
            default:
              if (this.parent.resourceCollection.length > 0) {
                var resData = this.parent.resourceCollection.filter(function(data) {
                  return data.field === type_1;
                });
                curEvent["" + type_1] = resData.length > 0 && typeof resData[0].dataSource[0][resData[0].idField] == "number" ? parseInt(value, 10) : value;
              } else {
                curEvent["" + type_1] = value;
              }
          }
        }
      }
      return { isEvent, curEvent, id, count, events, key };
    };
    ICalendarImport2.prototype.processOccurrence = function(app, maxId) {
      var _this = this;
      var appoint = [];
      var uId = "UID";
      var fields = this.parent.eventFields;
      var appointmentIds = [];
      this.parent.eventsData.forEach(function(eventObj) {
        appointmentIds.push(eventObj[fields.id]);
      });
      app.forEach(function(eventObj) {
        var parentObj;
        var id;
        if (!eventObj.hasOwnProperty(fields.recurrenceID)) {
          parentObj = eventObj;
          id = eventObj[fields.id];
        }
        if (appointmentIds.indexOf(eventObj[fields.id]) < 0) {
          var data = app.filter(function(data2) {
            return data2.UID === eventObj["" + uId];
          });
          if (data.length > 1 && isNullOrUndefined(eventObj[fields.recurrenceID])) {
            id = typeof maxId === "number" ? maxId++ : id;
            for (var i = 0; i < data.length; i++) {
              if (data[parseInt(i.toString(), 10)].hasOwnProperty(fields.recurrenceID)) {
                var exdate = data[parseInt(i.toString(), 10)][fields.recurrenceID];
                data[parseInt(i.toString(), 10)][fields.id] = typeof maxId === "number" ? maxId++ : _this.parent.eventBase.generateGuid();
                data[parseInt(i.toString(), 10)][fields.recurrenceID] = id;
                data[parseInt(i.toString(), 10)][fields.recurrenceException] = null;
                parentObj[fields.recurrenceException] = _this.getExcludeDateString(parentObj[fields.recurrenceException], exdate);
                delete data[parseInt(i.toString(), 10)]["" + uId];
                appoint.push(data[parseInt(i.toString(), 10)]);
              }
            }
            delete parentObj["" + uId];
            parentObj[fields.id] = id;
            appoint.push(parentObj);
          } else if (!eventObj.hasOwnProperty(fields.recurrenceID)) {
            delete eventObj["" + uId];
            eventObj[fields.id] = typeof maxId === "number" ? maxId++ : id;
            appoint.push(eventObj);
          }
        }
      });
      return appoint;
    };
    ICalendarImport2.prototype.getExcludeDateString = function(parentException, occurrenceException) {
      if (isNullOrUndefined(parentException)) {
        return occurrenceException;
      } else if (isNullOrUndefined(occurrenceException)) {
        return parentException;
      }
      var parentExDate = parentException.split(",").map(function(x) {
        return x.split("T")[0];
      });
      var childExDate = occurrenceException.split(",").map(function(x) {
        return x.split("T")[0];
      });
      var exDate = parentExDate.filter(function(x) {
        return childExDate.indexOf(x) > -1;
      });
      if (exDate.length > 0) {
        return parentException;
      }
      return parentException + "," + occurrenceException;
    };
    ICalendarImport2.prototype.getFormattedString = function(value) {
      value = value || "";
      return value.replace(/\\\,/g, ",").replace(/\\\;/g, ";").replace(/\\[nN]/g, "\n").replace(/\\\\/g, "\\");
    };
    ICalendarImport2.prototype.dateParsing = function(element) {
      var split = element.split(":");
      var value = split[split.length - 1];
      var newDate = new Date(this.getFormattedString(value));
      if (element && (element.indexOf("VALUE=DATE") > -1 || element.indexOf("RECURRENCE-ID;TZID") > -1)) {
        var data_1 = /^(\d{4})(\d{2})(\d{2})$/.exec(value);
        if (data_1 !== null) {
          newDate = new Date(parseInt(data_1[1], 10), parseInt(data_1[2], 10) - 1, parseInt(data_1[3], 10));
        }
        if (element.indexOf("DTSTART") > -1) {
          this.allDay = true;
        }
      }
      var data = /^(\d{4})(\d{2})(\d{2})T(\d{2})(\d{2})(\d{2})(Z)?$/.exec(value);
      if (data !== null) {
        if (data[7] === "Z") {
          newDate = new Date(Date.UTC(parseInt(data[1], 10), parseInt(data[2], 10) - 1, parseInt(data[3], 10), parseInt(data[4], 10), parseInt(data[5], 10), parseInt(data[6], 10)));
        } else {
          newDate = new Date(parseInt(data[1], 10), parseInt(data[2], 10) - 1, parseInt(data[3], 10), parseInt(data[4], 10), parseInt(data[5], 10), parseInt(data[6], 10));
        }
      }
      return newDate;
    };
    ICalendarImport2.prototype.getModuleName = function() {
      return "iCalendarImport";
    };
    ICalendarImport2.prototype.destroy = function() {
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
    };
    return ICalendarImport2;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/cell-style.js
var CellStyle = (
  /** @class */
  /* @__PURE__ */ function() {
    function CellStyle2() {
      this.numFmtId = 0;
      this.backColor = "none";
      this.fontName = "Calibri";
      this.fontSize = 10.5;
      this.fontColor = "#000000";
      this.italic = false;
      this.bold = false;
      this.underline = false;
      this.strikeThrough = false;
      this.wrapText = false;
      this.hAlign = "general";
      this.vAlign = "bottom";
      this.indent = 0;
      this.rotation = 0;
      this.numberFormat = "GENERAL";
      this.type = "datetime";
      this.borders = new Borders();
      this.isGlobalStyle = false;
    }
    return CellStyle2;
  }()
);
var Font = (
  /** @class */
  /* @__PURE__ */ function() {
    function Font2() {
      this.sz = 10.5;
      this.name = "Calibri";
      this.u = false;
      this.b = false;
      this.i = false;
      this.color = "FF000000";
      this.strike = false;
    }
    return Font2;
  }()
);
var CellXfs = (
  /** @class */
  /* @__PURE__ */ function() {
    function CellXfs2() {
    }
    return CellXfs2;
  }()
);
var Alignment = (
  /** @class */
  /* @__PURE__ */ function() {
    function Alignment2() {
    }
    return Alignment2;
  }()
);
var CellStyleXfs = (
  /** @class */
  /* @__PURE__ */ function() {
    function CellStyleXfs2() {
    }
    return CellStyleXfs2;
  }()
);
var CellStyles = (
  /** @class */
  /* @__PURE__ */ function() {
    function CellStyles2() {
      this.name = "Normal";
      this.xfId = 0;
    }
    return CellStyles2;
  }()
);
var NumFmt = (
  /** @class */
  /* @__PURE__ */ function() {
    function NumFmt2(id, code) {
      this.numFmtId = id;
      this.formatCode = code;
    }
    return NumFmt2;
  }()
);
var Border = (
  /** @class */
  /* @__PURE__ */ function() {
    function Border2(mLine, mColor) {
      this.lineStyle = mLine;
      this.color = mColor;
    }
    return Border2;
  }()
);
var Borders = (
  /** @class */
  /* @__PURE__ */ function() {
    function Borders2() {
      this.left = new Border("none", "#FFFFFF");
      this.right = new Border("none", "#FFFFFF");
      this.top = new Border("none", "#FFFFFF");
      this.bottom = new Border("none", "#FFFFFF");
      this.all = new Border("none", "#FFFFFF");
    }
    return Borders2;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/cell.js
var __extends31 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Cell = (
  /** @class */
  /* @__PURE__ */ function() {
    function Cell2() {
    }
    return Cell2;
  }()
);
var Cells = (
  /** @class */
  function(_super) {
    __extends31(Cells2, _super);
    function Cells2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.add = function(cell) {
        var inserted = false;
        var count = 0;
        for (var _i = 0, _a = _this; _i < _a.length; _i++) {
          var c = _a[_i];
          if (c.index === cell.index) {
            _this[count] = cell;
            inserted = true;
          }
          count++;
        }
        if (!inserted) {
          _this.push(cell);
        }
      };
      return _this;
    }
    return Cells2;
  }(Array)
);

// node_modules/@syncfusion/ej2-excel-export/src/column.js
var Column = (
  /** @class */
  /* @__PURE__ */ function() {
    function Column2() {
    }
    return Column2;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/row.js
var __extends32 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Row = (
  /** @class */
  /* @__PURE__ */ function() {
    function Row2() {
    }
    return Row2;
  }()
);
var Rows = (
  /** @class */
  function(_super) {
    __extends32(Rows2, _super);
    function Rows2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.add = function(row) {
        _this.push(row);
      };
      return _this;
    }
    return Rows2;
  }(Array)
);

// node_modules/@syncfusion/ej2-excel-export/src/worksheets.js
var __extends33 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Worksheets = (
  /** @class */
  function(_super) {
    __extends33(Worksheets2, _super);
    function Worksheets2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    return Worksheets2;
  }(Array)
);

// node_modules/@syncfusion/ej2-excel-export/src/worksheet.js
var __extends34 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Worksheet = (
  /** @class */
  /* @__PURE__ */ function() {
    function Worksheet2() {
      this.isSummaryRowBelow = true;
      this.showGridLines = true;
      this.enableRtl = false;
    }
    return Worksheet2;
  }()
);
var HyperLink = (
  /** @class */
  /* @__PURE__ */ function() {
    function HyperLink2() {
    }
    return HyperLink2;
  }()
);
var Grouping = (
  /** @class */
  /* @__PURE__ */ function() {
    function Grouping2() {
    }
    return Grouping2;
  }()
);
var FreezePane = (
  /** @class */
  /* @__PURE__ */ function() {
    function FreezePane2() {
    }
    return FreezePane2;
  }()
);
var MergeCell = (
  /** @class */
  /* @__PURE__ */ function() {
    function MergeCell2() {
    }
    return MergeCell2;
  }()
);
var MergeCells = (
  /** @class */
  function(_super) {
    __extends34(MergeCells2, _super);
    function MergeCells2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.add = function(mergeCell) {
        var inserted = false;
        var count = 0;
        for (var _i = 0, _a = _this; _i < _a.length; _i++) {
          var mCell = _a[_i];
          if (MergeCells2.isIntersecting(mCell, mergeCell)) {
            var intersectingCell = new MergeCell();
            intersectingCell.x = Math.min(mCell.x, mergeCell.x);
            intersectingCell.y = Math.min(mCell.Y, mergeCell.y);
            intersectingCell.width = Math.max(mCell.Width + mCell.X, mergeCell.width + mergeCell.x);
            intersectingCell.height = Math.max(mCell.Height + mCell.Y, mergeCell.height + mergeCell.y);
            intersectingCell.ref = _this[count].ref.split(":")[0] + ":" + mergeCell.ref.split(":")[1];
            _this[count] = intersectingCell;
            mergeCell = intersectingCell;
            inserted = true;
          }
          count++;
        }
        if (!inserted) {
          _this.push(mergeCell);
        }
        return mergeCell;
      };
      return _this;
    }
    MergeCells2.isIntersecting = function(base, compare) {
      return base.x <= compare.x + compare.width && compare.x <= base.x + base.width && base.y <= compare.y + compare.height && compare.y <= base.y + base.height;
    };
    return MergeCells2;
  }(Array)
);

// node_modules/@syncfusion/ej2-excel-export/src/image.js
var Image = (
  /** @class */
  /* @__PURE__ */ function() {
    function Image2() {
    }
    return Image2;
  }()
);

// node_modules/@syncfusion/ej2-file-utils/src/save.js
var Save = (
  /** @class */
  function() {
    function Save2() {
    }
    Save2.save = function(fileName, buffer) {
      if (fileName === null || fileName === void 0 || fileName === "") {
        throw new Error("ArgumentException: fileName cannot be undefined, null or empty");
      }
      var extension = fileName.substring(fileName.lastIndexOf(".") + 1, fileName.length);
      var mimeType = this.getMimeType(extension);
      if (mimeType !== "") {
        buffer = new Blob([buffer], { type: mimeType });
      }
      if (this.isMicrosoftBrowser) {
        navigator.msSaveBlob(buffer, fileName);
      } else {
        var downloadLink = document.createElementNS("http://www.w3.org/1999/xhtml", "a");
        this.saveInternal(fileName, extension, buffer, downloadLink, "download" in downloadLink);
      }
    };
    Save2.saveInternal = function(fileName, extension, buffer, downloadLink, hasDownloadAttribute) {
      if (hasDownloadAttribute) {
        downloadLink.download = fileName;
        var dataUrl_1 = window.URL.createObjectURL(buffer);
        downloadLink.href = dataUrl_1;
        var event_1 = document.createEvent("MouseEvent");
        event_1.initEvent("click", true, true);
        downloadLink.dispatchEvent(event_1);
        setTimeout(function() {
          window.URL.revokeObjectURL(dataUrl_1);
          dataUrl_1 = void 0;
        });
      } else {
        if (extension !== "docx" && extension !== "xlsx") {
          var url = window.URL.createObjectURL(buffer);
          var isPopupBlocked = window.open(url, "_blank");
          if (!isPopupBlocked) {
            window.location.href = url;
          }
        } else {
          var reader_1 = new FileReader();
          reader_1.onloadend = function() {
            var isPopupBlocked2 = window.open(reader_1.result, "_blank");
            if (!isPopupBlocked2) {
              window.location.href = reader_1.result;
            }
          };
          reader_1.readAsDataURL(buffer);
        }
      }
    };
    Save2.getMimeType = function(extension) {
      var mimeType = "";
      switch (extension) {
        case "html":
          mimeType = "text/html";
          break;
        case "pdf":
          mimeType = "application/pdf";
          break;
        case "docx":
          mimeType = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
          break;
        case "xlsx":
          mimeType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
          break;
        case "txt":
          mimeType = "text/plain";
          break;
      }
      return mimeType;
    };
    return Save2;
  }()
);

// node_modules/@syncfusion/ej2-file-utils/src/xml-writer.js
var XmlWriter = (
  /** @class */
  function() {
    function XmlWriter2() {
      this.contentPos = 0;
      this.bufferText = "";
      this.bufferBlob = new Blob([""], { type: "text/plain" });
      this.currentState = "Initial";
      this.namespaceStack = [];
      this.namespaceStack.push(new Namespace());
      this.namespaceStack[0].set("xmlns", "http://www.w3.org/2000/xmlns/", "Special");
      this.namespaceStack.push(new Namespace());
      this.namespaceStack[1].set("xml", "http://www.w3.org/XML/1998/namespace", "Special");
      this.namespaceStack.push(new Namespace());
      this.namespaceStack[2].set("", "", "Implied");
      this.elementStack = [];
      this.elementStack.push(new XmlElement());
      this.elementStack[0].set("", "", "", this.namespaceStack.length - 1);
      this.attributeStack = [];
      Save.isMicrosoftBrowser = !!navigator.msSaveBlob;
    }
    Object.defineProperty(XmlWriter2.prototype, "buffer", {
      /**
       * Gets the content written to the {XmlWriter} as Blob.
       * @returns {Blob}
       */
      get: function() {
        this.flush();
        return this.bufferBlob;
      },
      enumerable: true,
      configurable: true
    });
    XmlWriter2.prototype.writeProcessingInstruction = function(name, text) {
      if (name === void 0 || name === null || name.length === 0) {
        throw new Error("ArgumentException: name should not be undefined, null or empty");
      }
      this.checkName(name);
      if (text === void 0 || text === null) {
        text = "";
      }
      if (name.length === 3 && name === "xml") {
        if (this.currentState !== "Initial") {
          throw new Error("InvalidArgumentException: Cannot write XML declaration.WriteStartDocument method has already written it");
        }
      }
      if (this.currentState !== "Initial" || this.bufferBlob === void 0) {
        throw new Error("InvalidOperationException: Wrong Token");
      } else {
        this.writeStartDocument();
        this.writeProcessingInstructionInternal(name, text);
      }
    };
    XmlWriter2.prototype.writeStartDocument = function(standalone) {
      if (this.currentState !== "Initial" || this.bufferBlob === void 0) {
        throw new Error("InvalidOperationException: Wrong Token");
      }
      this.currentState = "StartDocument";
      this.rawText('<?xml version="1.0" encoding="utf-8');
      if (standalone !== null && standalone !== void 0) {
        this.rawText('" standalone="');
        this.rawText(standalone ? "yes" : "no");
      }
      this.rawText('"?>');
    };
    XmlWriter2.prototype.writeEndDocument = function() {
      while (this.elementStack.length - 1 > 0) {
        this.writeEndElement();
      }
      this.currentState = "EndDocument";
      this.flush();
    };
    XmlWriter2.prototype.writeStartElement = function(prefix, localName, namespace) {
      if (this.bufferBlob === void 0) {
        throw new Error("InvalidOperationException: Wrong Token");
      }
      if (localName === void 0 || localName === null || localName.length === 0) {
        throw new Error("ArgumentException: localName cannot be undefined, null or empty");
      }
      this.checkName(localName);
      if (this.currentState === "Initial") {
        this.writeStartDocument();
      }
      if (this.currentState === "StartElement") {
        this.startElementContent();
      }
      this.currentState = "StartElement";
      if (prefix === void 0 || prefix === null) {
        if (namespace !== void 0 && namespace !== null) {
          prefix = this.lookupPrefix(namespace);
        }
        if (prefix === void 0 || prefix === null) {
          prefix = "";
        }
      } else if (prefix.length > 0) {
        if (namespace === void 0 || namespace === null) {
          namespace = this.lookupNamespace(prefix);
        }
        if (namespace === void 0 || namespace === null || namespace !== void 0 && namespace.length === 0) {
          throw new Error("ArgumentException: Cannot use a prefix with an empty namespace");
        }
      }
      if (namespace === void 0 || namespace === null) {
        namespace = this.lookupNamespace(prefix);
      }
      this.writeStartElementInternal(prefix, localName, namespace);
    };
    XmlWriter2.prototype.writeEndElement = function() {
      if (this.currentState === "StartElement") {
        this.startElementContent();
        this.currentState = "ElementContent";
      } else if (this.currentState === "ElementContent") {
        this.currentState = "ElementContent";
      }
      this.currentState = "EndElement";
      var top = this.elementStack.length - 1;
      this.writeEndElementInternal(this.elementStack[top].prefix, this.elementStack[top].localName);
      this.namespaceStack.splice(this.elementStack[top].previousTop + 1);
      this.elementStack.splice(top);
      if (this.bufferText.length > 10240) {
        this.flush();
      }
    };
    XmlWriter2.prototype.writeElementString = function(prefix, localName, namespace, value) {
      this.writeStartElement(prefix, localName, namespace);
      if (value !== void 0 && value !== null && value.length !== 0) {
        this.writeString(value);
      }
      this.writeEndElement();
    };
    XmlWriter2.prototype.writeAttributeString = function(prefix, localName, namespace, value) {
      this.writeStartAttribute(prefix, localName, namespace, value);
      this.writeStringInternal(value, true);
      this.writeEndAttribute();
    };
    XmlWriter2.prototype.writeString = function(text) {
      this.writeInternal(text, false);
    };
    XmlWriter2.prototype.writeRaw = function(text) {
      this.writeInternal(text, true);
    };
    XmlWriter2.prototype.writeInternal = function(text, isRawString) {
      if (text === void 0 || text === null) {
        return;
      } else {
        if (this.currentState !== "StartElement" && this.currentState !== "ElementContent") {
          throw new Error("InvalidOperationException: Wrong Token");
        }
        if (this.currentState === "StartElement") {
          this.startElementContent();
        }
        this.currentState = "ElementContent";
        if (isRawString) {
          this.rawText(text);
        } else {
          this.writeStringInternal(text, false);
        }
      }
    };
    XmlWriter2.prototype.save = function(fileName) {
      while (this.elementStack.length - 1 > 0) {
        this.writeEndElement();
      }
      if (this.bufferText !== "") {
        this.flush();
      }
      Save.save(fileName, this.buffer);
    };
    XmlWriter2.prototype.destroy = function() {
      this.bufferBlob = void 0;
      for (var i = 0; i < this.namespaceStack.length; i++) {
        this.namespaceStack[i].destroy();
      }
      this.namespaceStack = [];
      for (var i = 0; i < this.elementStack.length; i++) {
        this.elementStack[i].destroy();
      }
      this.elementStack = [];
      this.bufferText = "";
      this.contentPos = 0;
    };
    XmlWriter2.prototype.flush = function() {
      if (this.bufferBlob === void 0) {
        return;
      }
      this.bufferBlob = new Blob([this.bufferBlob, this.bufferText], { type: "text/plain" });
      this.bufferText = "";
    };
    XmlWriter2.prototype.writeProcessingInstructionInternal = function(name, text) {
      this.bufferText += "<?";
      this.rawText(name);
      if (text.length > 0) {
        this.bufferText += " ";
        text = text.replace(/\?\>/g, "? >");
        this.bufferText += text;
      }
      this.bufferText += "?";
      this.bufferText += ">";
    };
    XmlWriter2.prototype.writeStartAttribute = function(prefix, localName, namespace, value) {
      if (localName === void 0 || localName === null || localName.length === 0) {
        if (prefix === "xmlns") {
          localName = "xmlns";
          prefix = "";
        } else {
          throw new Error("ArgumentException: localName cannot be undefined, null or empty");
        }
      }
      if (this.currentState !== "StartElement") {
        throw new Error("InvalidOperationException: Wrong Token");
      }
      this.checkName(localName);
      this.writeStartAttributePrefixAndNameSpace(prefix, localName, namespace, value);
    };
    XmlWriter2.prototype.writeStartAttributePrefixAndNameSpace = function(prefix, localName, namespace, value) {
      if (prefix === void 0 || prefix === null) {
        if (namespace !== void 0 && namespace !== null) {
          if (!(localName === "xmlns" && namespace === "http://www.w3.org/2000/xmlns/")) {
            prefix = this.lookupPrefix(namespace);
          }
        }
        if (prefix === void 0 || prefix === null) {
          prefix = "";
        }
      }
      if (namespace === void 0 || namespace === null) {
        if (prefix !== void 0 && prefix !== null && prefix.length > 0) {
          namespace = this.lookupNamespace(prefix);
        }
        if (namespace === void 0 || namespace === null) {
          namespace = "";
        }
      }
      this.writeStartAttributeSpecialAttribute(prefix, localName, namespace, value);
    };
    XmlWriter2.prototype.writeStartAttributeSpecialAttribute = function(prefix, localName, namespace, value) {
      if (prefix.length === 0) {
        if (localName[0] === "x" && localName === "xmlns") {
          this.skipPushAndWrite(prefix, localName, namespace);
          this.pushNamespaceExplicit("", value);
          return;
        } else if (namespace.length > 0) {
          prefix = this.lookupPrefix(namespace);
        }
      } else {
        if (prefix[0] === "x") {
          if (prefix === "xmlns") {
            this.skipPushAndWrite(prefix, localName, namespace);
            this.pushNamespaceExplicit(localName, value);
            return;
          } else if (prefix === "xml") {
            if (localName === "space" || localName === "lang") {
              this.skipPushAndWrite(prefix, localName, namespace);
              return;
            }
          }
        }
        if (namespace.length === 0) {
          prefix = "";
        }
      }
      if (prefix !== void 0 && prefix !== null && prefix.length !== 0) {
        this.pushNamespaceImplicit(prefix, namespace);
      }
      this.skipPushAndWrite(prefix, localName, namespace);
    };
    XmlWriter2.prototype.writeEndAttribute = function() {
      this.currentState = "StartElement";
      this.bufferText += '"';
    };
    XmlWriter2.prototype.writeStartElementInternal = function(prefix, localName, namespace) {
      this.bufferText += "<";
      if (prefix.length > 0) {
        this.rawText(prefix);
        this.bufferText += ":";
      }
      this.rawText(localName);
      var top = this.elementStack.length;
      this.elementStack.push(new XmlElement());
      this.elementStack[top].set(prefix, localName, namespace, this.namespaceStack.length - 1);
      this.pushNamespaceImplicit(prefix, namespace);
      for (var i = 0; i < this.attributeStack.length; i++) {
        this.attributeStack[i].destroy();
      }
      this.attributeStack = [];
    };
    XmlWriter2.prototype.writeEndElementInternal = function(prefix, localName) {
      if (this.contentPos !== this.bufferText.length + 1) {
        this.bufferText += "</";
        if (prefix !== void 0 && prefix !== null && prefix.length !== 0) {
          this.rawText(prefix);
          this.bufferText += ":";
        }
        this.rawText(localName);
        this.bufferText += ">";
      } else {
        this.bufferText = this.bufferText.substring(0, this.bufferText.length - 1);
        this.bufferText += " />";
      }
    };
    XmlWriter2.prototype.writeStartAttributeInternal = function(prefix, localName, namespaceName) {
      this.bufferText += " ";
      if (prefix !== void 0 && prefix !== null && prefix.length > 0) {
        this.rawText(prefix);
        this.bufferText += ":";
      }
      this.rawText(localName);
      this.bufferText += "=";
      this.bufferText += '"';
    };
    XmlWriter2.prototype.writeNamespaceDeclaration = function(prefix, namespaceUri) {
      this.writeStartNamespaceDeclaration(prefix);
      this.writeStringInternal(namespaceUri, true);
      this.bufferText += '"';
    };
    XmlWriter2.prototype.writeStartNamespaceDeclaration = function(prefix) {
      if (prefix === void 0 || prefix === null || prefix.length === 0) {
        this.rawText(' xmlns="');
      } else {
        this.rawText(" xmlns:");
        this.rawText(prefix);
        this.bufferText += "=";
        this.bufferText += '"';
      }
    };
    XmlWriter2.prototype.writeStringInternal = function(text, inAttributeValue) {
      if (text === null || text === void 0) {
        text = "";
      }
      var tempText = "";
      text = text.replace(/\&/g, "&amp;");
      text = text.replace(/\</g, "&lt;");
      text = text.replace(/\>/g, "&gt;");
      if (inAttributeValue) {
        text = text.replace(/\"/g, "&quot;");
      }
      this.bufferText += text;
      if (!inAttributeValue) {
        this.contentPos = 0;
      }
    };
    XmlWriter2.prototype.startElementContent = function() {
      var start = this.elementStack[this.elementStack.length - 1].previousTop;
      for (var i = this.namespaceStack.length - 1; i > start; i--) {
        if (this.namespaceStack[i].kind === "NeedToWrite") {
          this.writeNamespaceDeclaration(this.namespaceStack[i].prefix, this.namespaceStack[i].namespaceUri);
        }
      }
      this.bufferText += ">";
      this.contentPos = this.bufferText.length + 1;
    };
    XmlWriter2.prototype.rawText = function(text) {
      this.bufferText += text;
    };
    XmlWriter2.prototype.addNamespace = function(prefix, ns, kind) {
      var top = this.namespaceStack.length;
      this.namespaceStack.push(new Namespace());
      this.namespaceStack[top].set(prefix, ns, kind);
    };
    XmlWriter2.prototype.lookupPrefix = function(namespace) {
      for (var i = this.namespaceStack.length - 1; i >= 0; i--) {
        if (this.namespaceStack[i].namespaceUri === namespace) {
          return this.namespaceStack[i].prefix;
        }
      }
      return void 0;
    };
    XmlWriter2.prototype.lookupNamespace = function(prefix) {
      for (var i = this.namespaceStack.length - 1; i >= 0; i--) {
        if (this.namespaceStack[i].prefix === prefix) {
          return this.namespaceStack[i].namespaceUri;
        }
      }
      return void 0;
    };
    XmlWriter2.prototype.lookupNamespaceIndex = function(prefix) {
      for (var i = this.namespaceStack.length - 1; i >= 0; i--) {
        if (this.namespaceStack[i].prefix === prefix) {
          return i;
        }
      }
      return -1;
    };
    XmlWriter2.prototype.pushNamespaceImplicit = function(prefix, ns) {
      var kind;
      var existingNsIndex = this.lookupNamespaceIndex(prefix);
      if (existingNsIndex !== -1) {
        if (existingNsIndex > this.elementStack[this.elementStack.length - 1].previousTop) {
          if (this.namespaceStack[existingNsIndex].namespaceUri !== ns) {
            throw new Error("XmlException namespace Uri needs to be the same as the one that is already declared");
          }
          return;
        } else {
          if (this.namespaceStack[existingNsIndex].kind === "Special") {
            if (prefix === "xml") {
              if (ns !== this.namespaceStack[existingNsIndex].namespaceUri) {
                throw new Error("InvalidArgumentException: Xml String");
              } else {
                kind = "Implied";
              }
            } else {
              throw new Error('InvalidArgumentException: Prefix "xmlns" is reserved for use by XML.');
            }
          } else {
            kind = this.namespaceStack[existingNsIndex].namespaceUri === ns ? "Implied" : "NeedToWrite";
          }
        }
      } else {
        if (ns === "http://www.w3.org/XML/1998/namespace" && prefix !== "xml" || ns === "http://www.w3.org/2000/xmlns/" && prefix !== "xmlns") {
          throw new Error("InvalidArgumentException");
        }
        kind = "NeedToWrite";
      }
      this.addNamespace(prefix, ns, kind);
    };
    XmlWriter2.prototype.pushNamespaceExplicit = function(prefix, ns) {
      var existingNsIndex = this.lookupNamespaceIndex(prefix);
      if (existingNsIndex !== -1) {
        if (existingNsIndex > this.elementStack[this.elementStack.length - 1].previousTop) {
          this.namespaceStack[existingNsIndex].kind = "Written";
          return;
        }
      }
      this.addNamespace(prefix, ns, "Written");
      return;
    };
    XmlWriter2.prototype.addAttribute = function(prefix, localName, namespaceName) {
      var top = this.attributeStack.length;
      this.attributeStack.push(new XmlAttribute());
      this.attributeStack[top].set(prefix, localName, namespaceName);
      for (var i = 0; i < top; i++) {
        if (this.attributeStack[i].isDuplicate(prefix, localName, namespaceName)) {
          throw new Error("XmlException: duplicate attribute name");
        }
      }
    };
    XmlWriter2.prototype.skipPushAndWrite = function(prefix, localName, namespace) {
      this.addAttribute(prefix, localName, namespace);
      this.writeStartAttributeInternal(prefix, localName, namespace);
    };
    XmlWriter2.prototype.checkName = function(text) {
      var format = /[ !@#$%^&*()+\=\[\]{};':"\\|,<>\/?]/;
      if (format.test(text)) {
        throw new Error("InvalidArgumentException: invalid name character");
      }
    };
    return XmlWriter2;
  }()
);
var Namespace = (
  /** @class */
  function() {
    function Namespace2() {
    }
    Namespace2.prototype.set = function(prefix, namespaceUri, kind) {
      this.prefix = prefix;
      this.namespaceUri = namespaceUri;
      this.kind = kind;
    };
    Namespace2.prototype.destroy = function() {
      this.prefix = void 0;
      this.namespaceUri = void 0;
      this.kind = void 0;
    };
    return Namespace2;
  }()
);
var XmlElement = (
  /** @class */
  function() {
    function XmlElement2() {
    }
    XmlElement2.prototype.set = function(prefix, localName, namespaceUri, previousTop) {
      this.previousTop = previousTop;
      this.prefix = prefix;
      this.namespaceUri = namespaceUri;
      this.localName = localName;
    };
    XmlElement2.prototype.destroy = function() {
      this.previousTop = void 0;
      this.prefix = void 0;
      this.localName = void 0;
      this.namespaceUri = void 0;
    };
    return XmlElement2;
  }()
);
var XmlAttribute = (
  /** @class */
  function() {
    function XmlAttribute2() {
    }
    XmlAttribute2.prototype.set = function(prefix, localName, namespaceUri) {
      this.prefix = prefix;
      this.namespaceUri = namespaceUri;
      this.localName = localName;
    };
    XmlAttribute2.prototype.isDuplicate = function(prefix, localName, namespaceUri) {
      return this.localName === localName && (this.prefix === prefix || this.namespaceUri === namespaceUri);
    };
    XmlAttribute2.prototype.destroy = function() {
      this.prefix = void 0;
      this.namespaceUri = void 0;
      this.localName = void 0;
    };
    return XmlAttribute2;
  }()
);

// node_modules/@syncfusion/ej2-file-utils/src/encoding.js
var Encoding = (
  /** @class */
  function() {
    function Encoding2(includeBom) {
      this.emitBOM = true;
      this.encodingType = "Ansi";
      this.initBOM(includeBom);
    }
    Object.defineProperty(Encoding2.prototype, "includeBom", {
      /**
       * Gets a value indicating whether to write a Unicode byte order mark
       * @returns boolean- true to specify that a Unicode byte order mark is written; otherwise, false
       */
      get: function() {
        return this.emitBOM;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Encoding2.prototype, "type", {
      /**
       * Gets the encoding type.
       * @returns EncodingType
       */
      get: function() {
        return this.encodingType;
      },
      /**
       * Sets the encoding type.
       * @param  {EncodingType} value
       */
      set: function(value) {
        this.encodingType = value;
      },
      enumerable: true,
      configurable: true
    });
    Encoding2.prototype.initBOM = function(includeBom) {
      if (includeBom === void 0 || includeBom === null) {
        this.emitBOM = true;
      } else {
        this.emitBOM = includeBom;
      }
    };
    Encoding2.prototype.getByteCount = function(chars) {
      var byteCount = 0;
      validateNullOrUndefined(chars, "string");
      if (chars === "") {
        var byte = this.utf8Len(chars.charCodeAt(0));
        return byte;
      }
      if (this.type === null || this.type === void 0) {
        this.type = "Ansi";
      }
      return this.getByteCountInternal(chars, 0, chars.length);
    };
    Encoding2.prototype.utf8Len = function(codePoint) {
      var bytes = codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : codePoint <= 2097151 ? 4 : 0;
      return bytes;
    };
    Encoding2.prototype.isHighSurrogate = function(codeUnit) {
      return codeUnit >= 55296 && codeUnit <= 56319;
    };
    Encoding2.prototype.toCodepoint = function(highCodeUnit, lowCodeUnit) {
      highCodeUnit = (1023 & highCodeUnit) << 10;
      var u = highCodeUnit | 1023 & lowCodeUnit;
      return u + 65536;
    };
    Encoding2.prototype.getByteCountInternal = function(chars, charIndex, charCount) {
      var byteCount = 0;
      if (this.encodingType === "Utf8" || this.encodingType === "Unicode") {
        var isUtf8 = this.encodingType === "Utf8";
        for (var i = 0; i < charCount; i++) {
          var charCode = chars.charCodeAt(isUtf8 ? charIndex : charIndex++);
          if (this.isHighSurrogate(charCode)) {
            if (isUtf8) {
              var high = charCode;
              var low = chars.charCodeAt(++charIndex);
              byteCount += this.utf8Len(this.toCodepoint(high, low));
            } else {
              byteCount += 4;
              ++i;
            }
          } else {
            if (isUtf8) {
              byteCount += this.utf8Len(charCode);
            } else {
              byteCount += 2;
            }
          }
          if (isUtf8) {
            charIndex++;
          }
        }
        return byteCount;
      } else {
        byteCount = charCount;
        return byteCount;
      }
    };
    Encoding2.prototype.getBytes = function(s, charIndex, charCount) {
      validateNullOrUndefined(s, "string");
      validateNullOrUndefined(charIndex, "charIndex");
      validateNullOrUndefined(charCount, "charCount");
      if (charIndex < 0 || charCount < 0) {
        throw new RangeError("Argument Out Of Range Exception: charIndex or charCount is less than zero");
      }
      if (s.length - charIndex < charCount) {
        throw new RangeError("Argument Out Of Range Exception: charIndex and charCount do not denote a valid range in string");
      }
      var bytes;
      if (s === "") {
        bytes = new ArrayBuffer(0);
        return bytes;
      }
      if (this.type === null || this.type === void 0) {
        this.type = "Ansi";
      }
      var byteCount = this.getByteCountInternal(s, charIndex, charCount);
      switch (this.type) {
        case "Utf8":
          bytes = this.getBytesOfUtf8Encoding(byteCount, s, charIndex, charCount);
          return bytes;
        case "Unicode":
          bytes = this.getBytesOfUnicodeEncoding(byteCount, s, charIndex, charCount);
          return bytes;
        default:
          bytes = this.getBytesOfAnsiEncoding(byteCount, s, charIndex, charCount);
          return bytes;
      }
    };
    Encoding2.prototype.getString = function(bytes, index, count) {
      validateNullOrUndefined(bytes, "bytes");
      validateNullOrUndefined(index, "index");
      validateNullOrUndefined(count, "count");
      if (index < 0 || count < 0) {
        throw new RangeError("Argument Out Of Range Exception: index or count is less than zero");
      }
      if (bytes.byteLength - index < count) {
        throw new RangeError("Argument Out Of Range Exception: index and count do not denote a valid range in bytes");
      }
      if (bytes.byteLength === 0 || count === 0) {
        return "";
      }
      if (this.type === null || this.type === void 0) {
        this.type = "Ansi";
      }
      var out = "";
      var byteCal = new Uint8Array(bytes);
      switch (this.type) {
        case "Utf8":
          var s = this.getStringOfUtf8Encoding(byteCal, index, count);
          return s;
        case "Unicode":
          var byteUnicode = new Uint16Array(bytes);
          out = this.getStringofUnicodeEncoding(byteUnicode, index, count);
          return out;
        default:
          var j = index;
          for (var i = 0; i < count; i++) {
            var c = byteCal[j];
            out += String.fromCharCode(c);
            j++;
          }
          return out;
      }
    };
    Encoding2.prototype.getBytesOfAnsiEncoding = function(byteCount, s, charIndex, charCount) {
      var bytes = new ArrayBuffer(byteCount);
      var bufview = new Uint8Array(bytes);
      var k = 0;
      for (var i = 0; i < charCount; i++) {
        var charcode = s.charCodeAt(charIndex++);
        if (charcode < 2048) {
          bufview[k] = charcode;
        } else {
          bufview[k] = 63;
        }
        k++;
      }
      return bytes;
    };
    Encoding2.prototype.getBytesOfUtf8Encoding = function(byteCount, s, charIndex, charCount) {
      var bytes = new ArrayBuffer(byteCount);
      var uint = new Uint8Array(bytes);
      var index = charIndex;
      var j = 0;
      for (var i = 0; i < charCount; i++) {
        var charcode = s.charCodeAt(index);
        if (charcode <= 127) {
          uint[j] = charcode;
        } else if (charcode < 2048) {
          uint[j] = 192 | charcode >> 6;
          uint[++j] = 128 | charcode & 63;
        } else if (charcode < 55296 || charcode >= 57344) {
          uint[j] = 224 | charcode >> 12;
          uint[++j] = 128 | charcode >> 6 & 63;
          uint[++j] = 128 | charcode & 63;
        } else {
          uint[j] = 239;
          uint[++j] = 191;
          uint[++j] = 189;
        }
        ++j;
        ++index;
      }
      return bytes;
    };
    Encoding2.prototype.getBytesOfUnicodeEncoding = function(byteCount, s, charIndex, charCount) {
      var bytes = new ArrayBuffer(byteCount);
      var uint16 = new Uint16Array(bytes);
      for (var i = 0; i < charCount; i++) {
        var charcode = s.charCodeAt(i);
        uint16[i] = charcode;
      }
      return bytes;
    };
    Encoding2.prototype.getStringOfUtf8Encoding = function(byteCal, index, count) {
      var j = 0;
      var i = index;
      var s = "";
      for (j; j < count; j++) {
        var c = byteCal[i++];
        while (i > byteCal.length) {
          return s;
        }
        if (c > 127) {
          if (c > 191 && c < 224 && i < count) {
            c = (c & 31) << 6 | byteCal[i] & 63;
          } else if (c > 223 && c < 240 && i < byteCal.byteLength) {
            c = (c & 15) << 12 | (byteCal[i] & 63) << 6 | byteCal[++i] & 63;
          } else if (c > 239 && c < 248 && i < byteCal.byteLength) {
            c = (c & 7) << 18 | (byteCal[i] & 63) << 12 | (byteCal[++i] & 63) << 6 | byteCal[++i] & 63;
          }
          ++i;
        }
        s += String.fromCharCode(c);
      }
      return s;
    };
    Encoding2.prototype.getStringofUnicodeEncoding = function(byteUni, index, count) {
      if (count > byteUni.length) {
        throw new RangeError("ArgumentOutOfRange_Count");
      }
      var byte16 = new Uint16Array(count);
      var out = "";
      for (var i = 0; i < count && i < byteUni.length; i++) {
        byte16[i] = byteUni[index++];
      }
      out = String.fromCharCode.apply(null, byte16);
      return out;
    };
    Encoding2.prototype.destroy = function() {
      this.emitBOM = void 0;
      this.encodingType = void 0;
    };
    return Encoding2;
  }()
);
function validateNullOrUndefined(value, message) {
  if (value === null || value === void 0) {
    throw new Error("ArgumentException: " + message + " cannot be null or undefined");
  }
}

// node_modules/@syncfusion/ej2-file-utils/src/stream-writer.js
var StreamWriter = (
  /** @class */
  function() {
    function StreamWriter2(encoding) {
      this.bufferBlob = new Blob([""]);
      this.bufferText = "";
      this.init(encoding);
      Save.isMicrosoftBrowser = !!navigator.msSaveBlob;
    }
    Object.defineProperty(StreamWriter2.prototype, "buffer", {
      /**
       * Gets the content written to the StreamWriter as Blob.
       * @returns Blob
       */
      get: function() {
        this.flush();
        return this.bufferBlob;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(StreamWriter2.prototype, "encoding", {
      /**
       * Gets the encoding.
       * @returns Encoding
       */
      get: function() {
        return this.enc;
      },
      enumerable: true,
      configurable: true
    });
    StreamWriter2.prototype.init = function(encoding) {
      if (encoding === null || encoding === void 0) {
        this.enc = new Encoding(false);
        this.enc.type = "Utf8";
      } else {
        this.enc = encoding;
        this.setBomByte();
      }
    };
    StreamWriter2.prototype.setBomByte = function() {
      if (this.encoding.includeBom) {
        switch (this.encoding.type) {
          case "Unicode":
            var arrayUnicode = new ArrayBuffer(2);
            var uint8 = new Uint8Array(arrayUnicode);
            uint8[0] = 255;
            uint8[1] = 254;
            this.bufferBlob = new Blob([arrayUnicode]);
            break;
          case "Utf8":
            var arrayUtf8 = new ArrayBuffer(3);
            var utf8 = new Uint8Array(arrayUtf8);
            utf8[0] = 239;
            utf8[1] = 187;
            utf8[2] = 191;
            this.bufferBlob = new Blob([arrayUtf8]);
            break;
          default:
            this.bufferBlob = new Blob([""]);
            break;
        }
      }
    };
    StreamWriter2.prototype.save = function(fileName) {
      if (this.bufferText !== "") {
        this.flush();
      }
      Save.save(fileName, this.buffer);
    };
    StreamWriter2.prototype.write = function(value) {
      if (this.encoding === void 0) {
        throw new Error("Object Disposed Exception: current writer is disposed");
      }
      validateNullOrUndefined(value, "string");
      this.bufferText += value;
      if (this.bufferText.length >= 10240) {
        this.flush();
      }
    };
    StreamWriter2.prototype.flush = function() {
      if (this.bufferText === void 0 || this.bufferText === null || this.bufferText.length === 0) {
        return;
      }
      var bufferArray = this.encoding.getBytes(this.bufferText, 0, this.bufferText.length);
      this.bufferText = "";
      this.bufferBlob = new Blob([this.bufferBlob, bufferArray]);
    };
    StreamWriter2.prototype.writeLine = function(value) {
      if (this.encoding === void 0) {
        throw new Error("Object Disposed Exception: current writer is disposed");
      }
      validateNullOrUndefined(value, "string");
      this.bufferText = this.bufferText + value + "\r\n";
      if (this.bufferText.length >= 10240) {
        this.flush();
      }
    };
    StreamWriter2.prototype.destroy = function() {
      this.bufferBlob = void 0;
      this.bufferText = void 0;
      if (this.enc instanceof Encoding) {
        this.enc.destroy();
      }
      this.enc = void 0;
    };
    return StreamWriter2;
  }()
);

// node_modules/@syncfusion/ej2-compression/src/utils.js
var Utils = (
  /** @class */
  function() {
    function Utils2() {
    }
    Utils2.bitReverse = function(value) {
      return Utils2.reverseBits[value & 15] << 12 | Utils2.reverseBits[value >> 4 & 15] << 8 | Utils2.reverseBits[value >> 8 & 15] << 4 | Utils2.reverseBits[value >> 12];
    };
    Utils2.bitConverterToInt32 = function(value, index) {
      return value[index] | value[index + 1] << 8 | value[index + 2] << 16 | value[index + 3] << 24;
    };
    Utils2.bitConverterToInt16 = function(value, index) {
      return value[index] | value[index + 1] << 8;
    };
    Utils2.bitConverterToUInt32 = function(value) {
      var uint = new Uint32Array(1);
      uint[0] = value;
      return uint[0];
    };
    Utils2.bitConverterToUInt16 = function(value, index) {
      var uint = new Uint16Array(1);
      uint[0] = value[index] | value[index + 1] << 8;
      return uint[0];
    };
    Utils2.bitConverterUintToInt32 = function(value) {
      var uint = new Int32Array(1);
      uint[0] = value;
      return uint[0];
    };
    Utils2.bitConverterInt32ToUint = function(value) {
      var uint = new Uint32Array(1);
      uint[0] = value;
      return uint[0];
    };
    Utils2.bitConverterInt32ToInt16 = function(value) {
      var uint = new Int16Array(1);
      uint[0] = value;
      return uint[0];
    };
    Utils2.byteToString = function(value) {
      var str = "";
      for (var i = 0; i < value.length; i++) {
        str += String.fromCharCode(value[i]);
      }
      return str;
    };
    Utils2.byteIntToString = function(value) {
      var str = "";
      for (var i = 0; i < value.length; i++) {
        str += String.fromCharCode(value[i]);
      }
      return str;
    };
    Utils2.arrayCopy = function(source, sourceIndex, destination, destinationIndex, dataToCopy) {
      var temp = new Uint8Array(source.buffer, sourceIndex);
      var data = temp.subarray(0, dataToCopy);
      destination.set(data, destinationIndex);
    };
    Utils2.mergeArray = function(arrayOne, arrayTwo) {
      var mergedArray = new Uint8Array(arrayOne.length + arrayTwo.length);
      mergedArray.set(arrayOne);
      mergedArray.set(arrayTwo, arrayOne.length);
      return mergedArray;
    };
    Utils2.encodedString = function(input2) {
      var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
      var chr1;
      var chr2;
      var chr3;
      var encode1;
      var encode2;
      var encode3;
      var encode4;
      var count = 0;
      var resultIndex = 0;
      input2 = input2.replace(/[^A-Za-z0-9\+\/\=]/g, "");
      var totalLength = input2.length * 3 / 4;
      if (input2.charAt(input2.length - 1) === keyStr.charAt(64)) {
        totalLength--;
      }
      if (input2.charAt(input2.length - 2) === keyStr.charAt(64)) {
        totalLength--;
      }
      if (totalLength % 1 !== 0) {
        throw new Error("Invalid base64 input, bad content length.");
      }
      var output = new Uint8Array(totalLength | 0);
      while (count < input2.length) {
        encode1 = keyStr.indexOf(input2.charAt(count++));
        encode2 = keyStr.indexOf(input2.charAt(count++));
        encode3 = keyStr.indexOf(input2.charAt(count++));
        encode4 = keyStr.indexOf(input2.charAt(count++));
        chr1 = encode1 << 2 | encode2 >> 4;
        chr2 = (encode2 & 15) << 4 | encode3 >> 2;
        chr3 = (encode3 & 3) << 6 | encode4;
        output[resultIndex++] = chr1;
        if (encode3 !== 64) {
          output[resultIndex++] = chr2;
        }
        if (encode4 !== 64) {
          output[resultIndex++] = chr3;
        }
      }
      return output;
    };
    Utils2.reverseBits = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15];
    Utils2.huffCodeLengthOrders = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
    return Utils2;
  }()
);

// node_modules/@syncfusion/ej2-compression/src/zip-archive.js
var CRC32TABLE = [];
var INT_SIZE = 4;
var SHORT_SIZE = 2;
var CentralDirectoryEndSignature = 101010256;
var CentralDirSizeOffset = 12;
var CentralHeaderSignature = 33639248;
var BufferSize = 4096;
var ZipArchive = (
  /** @class */
  function() {
    function ZipArchive2() {
      if (CRC32TABLE.length === 0) {
        ZipArchive2.initCrc32Table();
      }
      this.files = [];
      this.level = "Normal";
      Save.isMicrosoftBrowser = !!navigator.msSaveBlob;
    }
    Object.defineProperty(ZipArchive2.prototype, "items", {
      get: function() {
        return this.files;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ZipArchive2.prototype, "compressionLevel", {
      /**
       * gets compression level
       */
      get: function() {
        return this.level;
      },
      /**
       * sets compression level
       */
      set: function(level) {
        this.level = level;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ZipArchive2.prototype, "length", {
      /**
       * gets items count
       */
      get: function() {
        if (this.files === void 0) {
          return 0;
        }
        return this.files.length;
      },
      enumerable: true,
      configurable: true
    });
    ZipArchive2.prototype.addItem = function(item) {
      if (item === null || item === void 0) {
        throw new Error("ArgumentException: item cannot be null or undefined");
      }
      for (var i = 0; i < this.files.length; i++) {
        var file = this.files[i];
        if (file instanceof ZipArchiveItem) {
          if (file.name === item.name) {
            throw new Error("item with same name already exist");
          }
        }
      }
      this.files.push(item);
    };
    ZipArchive2.prototype.addDirectory = function(directoryName) {
      if (directoryName === null || directoryName === void 0) {
        throw new Error("ArgumentException: string cannot be null or undefined");
      }
      if (directoryName.length === 0) {
        throw new Error("ArgumentException: string cannot be empty");
      }
      if (directoryName.slice(-1) !== "/") {
        directoryName += "/";
      }
      if (this.files.indexOf(directoryName) !== -1) {
        throw new Error("item with same name already exist");
      }
      this.files.push(directoryName);
    };
    ZipArchive2.prototype.getItem = function(index) {
      if (index >= 0 && index < this.files.length) {
        return this.files[index];
      }
      return void 0;
    };
    ZipArchive2.prototype.contains = function(item) {
      return this.files.indexOf(item) !== -1 ? true : false;
    };
    ZipArchive2.prototype.open = function(base64String) {
      var zipArchive = this;
      var zipByteArray = Utils.encodedString(base64String);
      if (zipByteArray.length == 0)
        throw new DOMException("stream");
      var stream = new Stream(zipByteArray);
      var lCentralDirEndPosition = ZipArchive2.findValueFromEnd(stream, CentralDirectoryEndSignature, 65557);
      if (lCentralDirEndPosition < 0)
        throw new DOMException("Can't locate end of central directory record. Possible wrong file format or archive is corrupt.");
      stream.position = lCentralDirEndPosition + CentralDirSizeOffset;
      var iCentralDirSize = ZipArchive2.ReadInt32(stream);
      var lCentralDirPosition = lCentralDirEndPosition - iCentralDirSize;
      stream.position = lCentralDirPosition;
      this.readCentralDirectoryDataAndExtractItems(stream);
    };
    ZipArchive2.prototype.readCentralDirectoryDataAndExtractItems = function(stream) {
      if (stream == null)
        throw new DOMException("stream");
      var itemHelper;
      while (ZipArchive2.ReadInt32(stream) == CentralHeaderSignature) {
        itemHelper = new ZipArchiveItemHelper();
        itemHelper.readCentralDirectoryData(stream);
        itemHelper;
      }
      itemHelper.readData(stream, itemHelper.checkCrc);
      itemHelper.decompressData();
      this.files.push(new ZipArchiveItem(itemHelper.unCompressedStream.buffer, itemHelper.name));
    };
    ZipArchive2.prototype.save = function(fileName) {
      if (fileName === null || fileName === void 0 || fileName.length === 0) {
        throw new Error("ArgumentException: fileName cannot be null or undefined");
      }
      if (this.files.length === 0) {
        throw new Error("InvalidOperation");
      }
      var zipArchive = this;
      var promise;
      return promise = new Promise(function(resolve, reject) {
        zipArchive.saveInternal(fileName, false).then(function() {
          resolve(zipArchive);
        });
      });
    };
    ZipArchive2.prototype.saveAsBlob = function() {
      var zipArchive = this;
      var promise;
      return promise = new Promise(function(resolve, reject) {
        zipArchive.saveInternal("", true).then(function(blob) {
          resolve(blob);
        });
      });
    };
    ZipArchive2.prototype.saveInternal = function(fileName, skipFileSave) {
      var _this = this;
      var zipArchive = this;
      var promise;
      return promise = new Promise(function(resolve, reject) {
        var zipData = [];
        var dirLength = 0;
        for (var i = 0; i < zipArchive.files.length; i++) {
          var compressedObject = _this.getCompressedData(_this.files[i]);
          compressedObject.then(function(data) {
            dirLength = zipArchive.constructZippedObject(zipData, data, dirLength, data.isDirectory);
            if (zipData.length === zipArchive.files.length) {
              var blob = zipArchive.writeZippedContent(fileName, zipData, dirLength, skipFileSave);
              resolve(blob);
            }
          });
        }
      });
    };
    ZipArchive2.prototype.destroy = function() {
      if (this.files !== void 0 && this.files.length > 0) {
        for (var i = 0; i < this.files.length; i++) {
          var file = this.files[i];
          if (file instanceof ZipArchiveItem) {
            file.destroy();
          }
          file = void 0;
        }
        this.files = [];
      }
      this.files = void 0;
      this.level = void 0;
    };
    ZipArchive2.prototype.getCompressedData = function(item) {
      var zipArchive = this;
      var promise = new Promise(function(resolve, reject) {
        if (item instanceof ZipArchiveItem) {
          var reader_1 = new FileReader();
          reader_1.onload = function() {
            var input2 = new Uint8Array(reader_1.result);
            var data2 = {
              fileName: item.name,
              crc32Value: 0,
              compressedData: [],
              compressedSize: void 0,
              uncompressedDataSize: input2.length,
              compressionType: void 0,
              isDirectory: false
            };
            if (zipArchive.level === "Normal") {
              zipArchive.compressData(input2, data2, CRC32TABLE);
              var length_1 = 0;
              for (var i = 0; i < data2.compressedData.length; i++) {
                length_1 += data2.compressedData[i].length;
              }
              data2.compressedSize = length_1;
              data2.compressionType = "\b\0";
            } else {
              data2.compressedSize = input2.length;
              data2.crc32Value = zipArchive.calculateCrc32Value(0, input2, CRC32TABLE);
              data2.compressionType = "\0\0";
              data2.compressedData.push(input2);
            }
            resolve(data2);
          };
          reader_1.readAsArrayBuffer(item.data);
        } else {
          var data = {
            fileName: item,
            crc32Value: 0,
            compressedData: "",
            compressedSize: 0,
            uncompressedDataSize: 0,
            compressionType: "\0\0",
            isDirectory: true
          };
          resolve(data);
        }
      });
      return promise;
    };
    ZipArchive2.prototype.compressData = function(input2, data, crc32Table) {
      var compressor = new CompressedStreamWriter(true);
      var currentIndex = 0;
      var nextIndex = 0;
      do {
        if (currentIndex >= input2.length) {
          compressor.close();
          break;
        }
        nextIndex = Math.min(input2.length, currentIndex + 16384);
        var subArray = input2.subarray(currentIndex, nextIndex);
        data.crc32Value = this.calculateCrc32Value(data.crc32Value, subArray, crc32Table);
        compressor.write(subArray, 0, nextIndex - currentIndex);
        currentIndex = nextIndex;
      } while (currentIndex <= input2.length);
      data.compressedData = compressor.compressedData;
      compressor.destroy();
    };
    ZipArchive2.prototype.constructZippedObject = function(zipParts, data, dirLength, isDirectory) {
      var extFileAttr = 0;
      var date = /* @__PURE__ */ new Date();
      if (isDirectory) {
        extFileAttr = extFileAttr | 16;
      }
      extFileAttr = extFileAttr | 0 & 63;
      var header = this.writeHeader(data, date);
      var localHeader = "PK" + header + data.fileName;
      var centralDir = this.writeCentralDirectory(data, header, dirLength, extFileAttr);
      zipParts.push({ localHeader, centralDir, compressedData: data });
      return dirLength + localHeader.length + data.compressedSize;
    };
    ZipArchive2.prototype.writeHeader = function(data, date) {
      var zipHeader = "";
      zipHeader += "\n\0\0\0";
      zipHeader += data.compressionType;
      zipHeader += this.getBytes(this.getModifiedTime(date), 2);
      zipHeader += this.getBytes(this.getModifiedDate(date), 2);
      zipHeader += this.getBytes(data.crc32Value, 4);
      zipHeader += this.getBytes(data.compressedSize, 4);
      zipHeader += this.getBytes(data.uncompressedDataSize, 4);
      zipHeader += this.getBytes(data.fileName.length, 2);
      zipHeader += this.getBytes(0, 2);
      return zipHeader;
    };
    ZipArchive2.prototype.writeZippedContent = function(fileName, zipData, localDirLen, skipFileSave) {
      var cenDirLen = 0;
      var buffer = [];
      for (var i = 0; i < zipData.length; i++) {
        var item = zipData[i];
        cenDirLen += item.centralDir.length;
        buffer.push(this.getArrayBuffer(item.localHeader));
        while (item.compressedData.compressedData.length) {
          buffer.push(item.compressedData.compressedData.shift().buffer);
        }
      }
      for (var i = 0; i < zipData.length; i++) {
        buffer.push(this.getArrayBuffer(zipData[i].centralDir));
      }
      buffer.push(this.getArrayBuffer(this.writeFooter(zipData, cenDirLen, localDirLen)));
      var blob = new Blob(buffer, { type: "application/zip" });
      if (!skipFileSave) {
        Save.save(fileName, blob);
      }
      return blob;
    };
    ZipArchive2.prototype.writeCentralDirectory = function(data, localHeader, offset, externalFileAttribute) {
      var directoryHeader = "PK" + this.getBytes(20, 2) + localHeader + // inherit from file header
      this.getBytes(0, 2) + // comment length
      "\0\0\0\0" + // internal file attributes 
      this.getBytes(externalFileAttribute, 4) + // external file attributes
      this.getBytes(offset, 4) + // local fileHeader relative offset
      data.fileName;
      return directoryHeader;
    };
    ZipArchive2.prototype.writeFooter = function(zipData, centralLength, localLength) {
      var dirEnd = "PK\0\0\0\0" + this.getBytes(zipData.length, 2) + this.getBytes(zipData.length, 2) + this.getBytes(centralLength, 4) + this.getBytes(localLength, 4) + this.getBytes(0, 2);
      return dirEnd;
    };
    ZipArchive2.prototype.getArrayBuffer = function(input2) {
      var a = new Uint8Array(input2.length);
      for (var j = 0; j < input2.length; ++j) {
        a[j] = input2.charCodeAt(j) & 255;
      }
      return a.buffer;
    };
    ZipArchive2.prototype.getBytes = function(value, offset) {
      var bytes = "";
      for (var i = 0; i < offset; i++) {
        bytes += String.fromCharCode(value & 255);
        value = value >>> 8;
      }
      return bytes;
    };
    ZipArchive2.prototype.getModifiedTime = function(date) {
      var modTime = date.getHours();
      modTime = modTime << 6;
      modTime = modTime | date.getMinutes();
      modTime = modTime << 5;
      return modTime = modTime | date.getSeconds() / 2;
    };
    ZipArchive2.prototype.getModifiedDate = function(date) {
      var modiDate = date.getFullYear() - 1980;
      modiDate = modiDate << 4;
      modiDate = modiDate | date.getMonth() + 1;
      modiDate = modiDate << 5;
      return modiDate = modiDate | date.getDate();
    };
    ZipArchive2.prototype.calculateCrc32Value = function(crc32Value, input2, crc32Table) {
      crc32Value ^= -1;
      for (var i = 0; i < input2.length; i++) {
        crc32Value = crc32Value >>> 8 ^ crc32Table[(crc32Value ^ input2[i]) & 255];
      }
      return crc32Value ^ -1;
    };
    ZipArchive2.initCrc32Table = function() {
      var i;
      for (var j = 0; j < 256; j++) {
        i = j;
        for (var k = 0; k < 8; k++) {
          i = i & 1 ? 3988292384 ^ i >>> 1 : i >>> 1;
        }
        CRC32TABLE[j] = i;
      }
    };
    ZipArchive2.findValueFromEnd = function(stream, value, maxCount) {
      if (stream == null)
        throw new DOMException("stream");
      var lStreamSize = stream.inputStream.buffer.byteLength;
      if (lStreamSize < 4)
        return -1;
      var arrBuffer = new Uint8Array(4);
      var lLastPos = Math.max(0, lStreamSize - maxCount);
      var lCurrentPosition = lStreamSize - 1 - INT_SIZE;
      stream.position = lCurrentPosition;
      stream.read(arrBuffer, 0, INT_SIZE);
      var uiCurValue = arrBuffer[0];
      var bFound = uiCurValue == value;
      if (!bFound) {
        while (lCurrentPosition > lLastPos) {
          uiCurValue <<= 8;
          lCurrentPosition--;
          stream.position = lCurrentPosition;
          uiCurValue += stream.readByte();
          if (uiCurValue == value) {
            bFound = true;
            break;
          }
        }
      }
      return bFound ? lCurrentPosition : -1;
    };
    ZipArchive2.ReadInt32 = function(stream) {
      var buffer = new Uint8Array(INT_SIZE);
      if (stream.read(buffer, 0, INT_SIZE) != INT_SIZE) {
        throw new DOMException("Unable to read value at the specified position - end of stream was reached.");
      }
      return Utils.bitConverterToInt32(buffer, 0);
    };
    ZipArchive2.ReadInt16 = function(stream) {
      var buffer = new Uint8Array(SHORT_SIZE);
      if (stream.read(buffer, 0, SHORT_SIZE) != SHORT_SIZE) {
        throw new DOMException("Unable to read value at the specified position - end of stream was reached.");
      }
      return Utils.bitConverterToInt16(buffer, 0);
    };
    ZipArchive2.ReadUInt16 = function(stream) {
      {
        var buffer = new Uint8Array(SHORT_SIZE);
        if (stream.read(buffer, 0, SHORT_SIZE) != SHORT_SIZE) {
          throw new DOMException("Unable to read value at the specified position - end of stream was reached.");
        }
        return Utils.bitConverterToInt16(buffer, 0);
      }
    };
    return ZipArchive2;
  }()
);
var ZipArchiveItemHelper = (
  /** @class */
  function() {
    function ZipArchiveItemHelper2() {
      this.headerSignature = 67324752;
      this.checkCrc = true;
      this.crc32 = 0;
    }
    ZipArchiveItemHelper2.prototype.readCentralDirectoryData = function(stream) {
      stream.position += 4;
      this.options = ZipArchive.ReadInt16(stream);
      this.compressionMethod = ZipArchive.ReadInt16(stream);
      this.checkCrc = this.compressionMethod != 99;
      var lastModified = ZipArchive.ReadInt32(stream);
      this.crc32 = Utils.bitConverterToUInt32(ZipArchive.ReadInt32(stream));
      this.compressedSize = ZipArchive.ReadInt32(stream);
      this.originalSize = ZipArchive.ReadInt32(stream);
      var iFileNameLength = ZipArchive.ReadInt16(stream);
      var iExtraFieldLenth = ZipArchive.ReadInt16(stream);
      var iCommentLength = ZipArchive.ReadInt16(stream);
      stream.position += 4;
      this.externalAttributes = ZipArchive.ReadInt32(stream);
      this.localHeaderOffset = ZipArchive.ReadInt32(stream);
      var arrBuffer = new Uint8Array(iFileNameLength);
      stream.read(arrBuffer, 0, iFileNameLength);
      var m_strItemName = Utils.byteToString(arrBuffer);
      m_strItemName = m_strItemName.replace("\\", "/");
      this.name = m_strItemName;
      stream.position += iExtraFieldLenth + iCommentLength;
      if (this.options != 0)
        this.options = 0;
    };
    ZipArchiveItemHelper2.prototype.readData = function(stream, checkCrc) {
      if (stream.length == 0)
        throw new DOMException("stream");
      stream.position = this.localHeaderOffset;
      this.checkCrc = checkCrc;
      this.readLocalHeader(stream);
      this.readCompressedData(stream);
    };
    ZipArchiveItemHelper2.prototype.decompressData = function() {
      if (this.compressionMethod == 8) {
        if (this.originalSize > 0) {
          this.decompressDataOld();
        }
      }
    };
    ZipArchiveItemHelper2.prototype.decompressDataOld = function() {
      var reader = new CompressedStreamReader(this.compressedStream, true);
      var decompressedData;
      if (this.originalSize > 0)
        decompressedData = new Stream(new Uint8Array(this.originalSize));
      var arrBuffer = new Uint8Array(BufferSize);
      var iReadBytes;
      var past = new Uint8Array(0);
      while ((iReadBytes = reader.read(arrBuffer, 0, BufferSize)) > 0) {
        decompressedData.write(arrBuffer.subarray(0, iReadBytes), 0, iReadBytes);
      }
      this.unCompressedStream = decompressedData.toByteArray();
      if (this.checkCrc) {
      }
    };
    ZipArchiveItemHelper2.prototype.readLocalHeader = function(stream) {
      if (stream.length == 0)
        throw new DOMException("stream");
      if (ZipArchive.ReadInt32(stream) != this.headerSignature)
        throw new DOMException("Can't find local header signature - wrong file format or file is corrupt.");
      stream.position += 22;
      var iNameLength = ZipArchive.ReadInt16(stream);
      var iExtraLength = ZipArchive.ReadUInt16(stream);
      if (this.compressionMethod == 99) {
      } else if (iExtraLength > 2) {
        stream.position += iNameLength;
        var headerVal = ZipArchive.ReadInt16(stream);
        if (headerVal == 23)
          throw new DOMException("UnSupported");
        else
          stream.position += iExtraLength - 2;
      } else
        stream.position += iNameLength + iExtraLength;
    };
    ZipArchiveItemHelper2.prototype.readCompressedData = function(stream) {
      var dataStream;
      if (this.compressedSize > 0) {
        var iBytesLeft = this.compressedSize;
        dataStream = new Stream(new Uint8Array(iBytesLeft));
        var arrBuffer = new Uint8Array(BufferSize);
        while (iBytesLeft > 0) {
          var iBytesToRead = Math.min(iBytesLeft, BufferSize);
          if (stream.read(arrBuffer, 0, iBytesToRead) != iBytesToRead)
            throw new DOMException("End of file reached - wrong file format or file is corrupt.");
          dataStream.write(arrBuffer.subarray(0, iBytesToRead), 0, iBytesToRead);
          iBytesLeft -= iBytesToRead;
        }
        this.compressedStream = new Uint8Array(dataStream.inputStream);
      } else if (this.compressedSize < 0) {
      } else if (this.compressedSize == 0) {
      }
    };
    return ZipArchiveItemHelper2;
  }()
);
var ZipArchiveItem = (
  /** @class */
  function() {
    function ZipArchiveItem2(data, itemName) {
      if (data === null || data === void 0) {
        throw new Error("ArgumentException: data cannot be null or undefined");
      }
      if (itemName === null || itemName === void 0) {
        throw new Error("ArgumentException: string cannot be null or undefined");
      }
      if (itemName.length === 0) {
        throw new Error("string cannot be empty");
      }
      this.data = data;
      this.name = itemName;
    }
    Object.defineProperty(ZipArchiveItem2.prototype, "dataStream", {
      get: function() {
        return this.decompressedStream;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ZipArchiveItem2.prototype, "name", {
      /**
       * Get the name of archive item
       * @returns string
       */
      get: function() {
        return this.fileName;
      },
      /**
       * Set the name of archive item
       * @param  {string} value
       */
      set: function(value) {
        this.fileName = value;
      },
      enumerable: true,
      configurable: true
    });
    ZipArchiveItem2.prototype.destroy = function() {
      this.fileName = void 0;
      this.data = void 0;
    };
    return ZipArchiveItem2;
  }()
);

// node_modules/@syncfusion/ej2-compression/src/compression-writer.js
var ARR_LITERAL_CODES = new Int16Array(286);
var ARR_LITERAL_LENGTHS = new Uint8Array(286);
var ARR_DISTANCE_CODES = new Int16Array(30);
var ARR_DISTANCE_LENGTHS = new Uint8Array(30);
var CompressedStreamWriter = (
  /** @class */
  function() {
    function CompressedStreamWriter2(noWrap) {
      this.pendingBuffer = new Uint8Array(1 << 16);
      this.pendingBufLength = 0;
      this.pendingBufCache = 0;
      this.pendingBufBitsInCache = 0;
      this.bufferPosition = 0;
      this.extraBits = 0;
      this.currentHash = 0;
      this.matchStart = 0;
      this.matchLength = 0;
      this.matchPrevAvail = false;
      this.blockStart = 0;
      this.stringStart = 0;
      this.lookAhead = 0;
      this.totalBytesIn = 0;
      this.inputOffset = 0;
      this.inputEnd = 0;
      this.windowSize = 1 << 15;
      this.windowMask = this.windowSize - 1;
      this.hashSize = 1 << 15;
      this.hashMask = this.hashSize - 1;
      this.hashShift = Math.floor((15 + 3 - 1) / 3);
      this.maxDist = this.windowSize - 262;
      this.checkSum = 1;
      this.noWrap = false;
      if (!CompressedStreamWriter2.isHuffmanTreeInitiated) {
        CompressedStreamWriter2.initHuffmanTree();
        CompressedStreamWriter2.isHuffmanTreeInitiated = true;
      }
      this.treeLiteral = new CompressorHuffmanTree(this, 286, 257, 15);
      this.treeDistances = new CompressorHuffmanTree(this, 30, 1, 15);
      this.treeCodeLengths = new CompressorHuffmanTree(this, 19, 4, 7);
      this.arrDistances = new Uint16Array(1 << 14);
      this.arrLiterals = new Uint8Array(1 << 14);
      this.stream = [];
      this.dataWindow = new Uint8Array(2 * this.windowSize);
      this.hashHead = new Int16Array(this.hashSize);
      this.hashPrevious = new Int16Array(this.windowSize);
      this.blockStart = this.stringStart = 1;
      this.noWrap = noWrap;
      if (!noWrap) {
        this.writeZLibHeader();
      }
    }
    Object.defineProperty(CompressedStreamWriter2.prototype, "compressedData", {
      /**
       * get compressed data
       */
      get: function() {
        return this.stream;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(CompressedStreamWriter2.prototype, "getCompressedString", {
      get: function() {
        var compressedString = "";
        if (this.stream !== void 0) {
          for (var i = 0; i < this.stream.length; i++) {
            compressedString += String.fromCharCode.apply(null, this.stream[i]);
          }
        }
        return compressedString;
      },
      enumerable: true,
      configurable: true
    });
    CompressedStreamWriter2.prototype.write = function(data, offset, length) {
      if (data === void 0 || data === null) {
        throw new Error("ArgumentException: data cannot null or undefined");
      }
      var end = offset + length;
      if (0 > offset || offset > end || end > data.length) {
        throw new Error("ArgumentOutOfRangeException: Offset or length is incorrect");
      }
      if (typeof data === "string") {
        var encode = new Encoding(false);
        encode.type = "Utf8";
        data = new Uint8Array(encode.getBytes(data, 0, data.length));
        end = offset + data.length;
      }
      this.inputBuffer = data;
      this.inputOffset = offset;
      this.inputEnd = end;
      if (!this.noWrap) {
        this.checkSum = ChecksumCalculator.checksumUpdate(this.checkSum, this.inputBuffer, this.inputOffset, end);
      }
      while (!(this.inputEnd === this.inputOffset) || !(this.pendingBufLength === 0)) {
        this.pendingBufferFlush();
        this.compressData(false);
      }
    };
    CompressedStreamWriter2.prototype.writeZLibHeader = function() {
      var headerDate = 8 + (7 << 4) << 8;
      headerDate |= (5 >> 2 & 3) << 6;
      headerDate += 31 - headerDate % 31;
      this.pendingBufferWriteShortBytes(headerDate);
    };
    CompressedStreamWriter2.prototype.pendingBufferWriteShortBytes = function(s) {
      this.pendingBuffer[this.pendingBufLength++] = s >> 8;
      this.pendingBuffer[this.pendingBufLength++] = s;
    };
    CompressedStreamWriter2.prototype.compressData = function(finish) {
      var success;
      do {
        this.fillWindow();
        var canFlush = finish && this.inputEnd === this.inputOffset;
        success = this.compressSlow(canFlush, finish);
      } while (this.pendingBufLength === 0 && success);
      return success;
    };
    CompressedStreamWriter2.prototype.compressSlow = function(flush, finish) {
      if (this.lookAhead < 262 && !flush) {
        return false;
      }
      while (this.lookAhead >= 262 || flush) {
        if (this.lookAhead === 0) {
          return this.lookAheadCompleted(finish);
        }
        if (this.stringStart >= 2 * this.windowSize - 262) {
          this.slideWindow();
        }
        var prevMatch = this.matchStart;
        var prevLen = this.matchLength;
        if (this.lookAhead >= 3) {
          this.discardMatch();
        }
        if (prevLen >= 3 && this.matchLength <= prevLen) {
          prevLen = this.matchPreviousBest(prevMatch, prevLen);
        } else {
          this.matchPreviousAvailable();
        }
        if (this.bufferPosition >= 1 << 14) {
          return this.huffmanIsFull(finish);
        }
      }
      return true;
    };
    CompressedStreamWriter2.prototype.discardMatch = function() {
      var hashHead = this.insertString();
      if (hashHead !== 0 && this.stringStart - hashHead <= this.maxDist && this.findLongestMatch(hashHead)) {
        if (this.matchLength <= 5 && (this.matchLength === 3 && this.stringStart - this.matchStart > 4096)) {
          this.matchLength = 3 - 1;
        }
      }
    };
    CompressedStreamWriter2.prototype.matchPreviousAvailable = function() {
      if (this.matchPrevAvail) {
        this.huffmanTallyLit(this.dataWindow[this.stringStart - 1] & 255);
      }
      this.matchPrevAvail = true;
      this.stringStart++;
      this.lookAhead--;
    };
    CompressedStreamWriter2.prototype.matchPreviousBest = function(prevMatch, prevLen) {
      this.huffmanTallyDist(this.stringStart - 1 - prevMatch, prevLen);
      prevLen -= 2;
      do {
        this.stringStart++;
        this.lookAhead--;
        if (this.lookAhead >= 3) {
          this.insertString();
        }
      } while (--prevLen > 0);
      this.stringStart++;
      this.lookAhead--;
      this.matchPrevAvail = false;
      this.matchLength = 3 - 1;
      return prevLen;
    };
    CompressedStreamWriter2.prototype.lookAheadCompleted = function(finish) {
      if (this.matchPrevAvail) {
        this.huffmanTallyLit(this.dataWindow[this.stringStart - 1] & 255);
      }
      this.matchPrevAvail = false;
      this.huffmanFlushBlock(this.dataWindow, this.blockStart, this.stringStart - this.blockStart, finish);
      this.blockStart = this.stringStart;
      return false;
    };
    CompressedStreamWriter2.prototype.huffmanIsFull = function(finish) {
      var len = this.stringStart - this.blockStart;
      if (this.matchPrevAvail) {
        len--;
      }
      var lastBlock = finish && this.lookAhead === 0 && !this.matchPrevAvail;
      this.huffmanFlushBlock(this.dataWindow, this.blockStart, len, lastBlock);
      this.blockStart += len;
      return !lastBlock;
    };
    CompressedStreamWriter2.prototype.fillWindow = function() {
      if (this.stringStart >= this.windowSize + this.maxDist) {
        this.slideWindow();
      }
      while (this.lookAhead < 262 && this.inputOffset < this.inputEnd) {
        var more = 2 * this.windowSize - this.lookAhead - this.stringStart;
        if (more > this.inputEnd - this.inputOffset) {
          more = this.inputEnd - this.inputOffset;
        }
        this.dataWindow.set(this.inputBuffer.subarray(this.inputOffset, this.inputOffset + more), this.stringStart + this.lookAhead);
        this.inputOffset += more;
        this.totalBytesIn += more;
        this.lookAhead += more;
      }
      if (this.lookAhead >= 3) {
        this.updateHash();
      }
    };
    CompressedStreamWriter2.prototype.slideWindow = function() {
      this.dataWindow.set(this.dataWindow.subarray(this.windowSize, this.windowSize + this.windowSize), 0);
      this.matchStart -= this.windowSize;
      this.stringStart -= this.windowSize;
      this.blockStart -= this.windowSize;
      for (var i = 0; i < this.hashSize; ++i) {
        var m = this.hashHead[i] & 65535;
        this.hashHead[i] = m >= this.windowSize ? m - this.windowSize : 0;
      }
      for (var i = 0; i < this.windowSize; i++) {
        var m = this.hashPrevious[i] & 65535;
        this.hashPrevious[i] = m >= this.windowSize ? m - this.windowSize : 0;
      }
    };
    CompressedStreamWriter2.prototype.insertString = function() {
      var match;
      var hash = (this.currentHash << this.hashShift ^ this.dataWindow[this.stringStart + (3 - 1)]) & this.hashMask;
      this.hashPrevious[this.stringStart & this.windowMask] = match = this.hashHead[hash];
      this.hashHead[hash] = this.stringStart;
      this.currentHash = hash;
      return match & 65535;
    };
    CompressedStreamWriter2.prototype.findLongestMatch = function(curMatch) {
      var chainLen = 4096;
      var niceLen = 258;
      var scan = this.stringStart;
      var match;
      var bestEnd = this.stringStart + this.matchLength;
      var bestLength = Math.max(this.matchLength, 3 - 1);
      var limit = Math.max(this.stringStart - this.maxDist, 0);
      var stringEnd = this.stringStart + 258 - 1;
      var scanEnd1 = this.dataWindow[bestEnd - 1];
      var scanEnd = this.dataWindow[bestEnd];
      var data = this.dataWindow;
      if (bestLength >= 32) {
        chainLen >>= 2;
      }
      if (niceLen > this.lookAhead) {
        niceLen = this.lookAhead;
      }
      do {
        if (data[curMatch + bestLength] !== scanEnd || data[curMatch + bestLength - 1] !== scanEnd1 || data[curMatch] !== data[scan] || data[curMatch + 1] !== data[scan + 1]) {
          continue;
        }
        match = curMatch + 2;
        scan += 2;
        while (data[++scan] === data[++match] && data[++scan] === data[++match] && data[++scan] === data[++match] && data[++scan] === data[++match] && data[++scan] === data[++match] && data[++scan] === data[++match] && data[++scan] === data[++match] && data[++scan] === data[++match] && scan < stringEnd) {
        }
        if (scan > bestEnd) {
          this.matchStart = curMatch;
          bestEnd = scan;
          bestLength = scan - this.stringStart;
          if (bestLength >= niceLen) {
            break;
          }
          scanEnd1 = data[bestEnd - 1];
          scanEnd = data[bestEnd];
        }
        scan = this.stringStart;
      } while ((curMatch = this.hashPrevious[curMatch & this.windowMask] & 65535) > limit && --chainLen !== 0);
      this.matchLength = Math.min(bestLength, this.lookAhead);
      return this.matchLength >= 3;
    };
    CompressedStreamWriter2.prototype.updateHash = function() {
      this.currentHash = this.dataWindow[this.stringStart] << this.hashShift ^ this.dataWindow[this.stringStart + 1];
    };
    CompressedStreamWriter2.prototype.huffmanTallyLit = function(literal) {
      this.arrDistances[this.bufferPosition] = 0;
      this.arrLiterals[this.bufferPosition++] = literal;
      this.treeLiteral.codeFrequencies[literal]++;
      return this.bufferPosition >= 1 << 14;
    };
    CompressedStreamWriter2.prototype.huffmanTallyDist = function(dist, len) {
      this.arrDistances[this.bufferPosition] = dist;
      this.arrLiterals[this.bufferPosition++] = len - 3;
      var lc = this.huffmanLengthCode(len - 3);
      this.treeLiteral.codeFrequencies[lc]++;
      if (lc >= 265 && lc < 285) {
        this.extraBits += Math.floor((lc - 261) / 4);
      }
      var dc = this.huffmanDistanceCode(dist - 1);
      this.treeDistances.codeFrequencies[dc]++;
      if (dc >= 4) {
        this.extraBits += Math.floor(dc / 2 - 1);
      }
      return this.bufferPosition >= 1 << 14;
    };
    CompressedStreamWriter2.prototype.huffmanFlushBlock = function(stored, storedOffset, storedLength, lastBlock) {
      this.treeLiteral.codeFrequencies[256]++;
      this.treeLiteral.buildTree();
      this.treeDistances.buildTree();
      this.treeLiteral.calculateBLFreq(this.treeCodeLengths);
      this.treeDistances.calculateBLFreq(this.treeCodeLengths);
      this.treeCodeLengths.buildTree();
      var blTreeCodes = 4;
      for (var i = 18; i > blTreeCodes; i--) {
        if (this.treeCodeLengths.codeLengths[CompressorHuffmanTree.huffCodeLengthOrders[i]] > 0) {
          blTreeCodes = i + 1;
        }
      }
      var opt_len = 14 + blTreeCodes * 3 + this.treeCodeLengths.getEncodedLength() + this.treeLiteral.getEncodedLength() + this.treeDistances.getEncodedLength() + this.extraBits;
      var static_len = this.extraBits;
      for (var i = 0; i < 286; i++) {
        static_len += this.treeLiteral.codeFrequencies[i] * ARR_LITERAL_LENGTHS[i];
      }
      for (var i = 0; i < 30; i++) {
        static_len += this.treeDistances.codeFrequencies[i] * ARR_DISTANCE_LENGTHS[i];
      }
      if (opt_len >= static_len) {
        opt_len = static_len;
      }
      if (storedOffset >= 0 && storedLength + 4 < opt_len >> 3) {
        this.huffmanFlushStoredBlock(stored, storedOffset, storedLength, lastBlock);
      } else if (opt_len == static_len) {
        this.pendingBufferWriteBits((1 << 1) + (lastBlock ? 1 : 0), 3);
        this.treeLiteral.setStaticCodes(ARR_LITERAL_CODES, ARR_LITERAL_LENGTHS);
        this.treeDistances.setStaticCodes(ARR_DISTANCE_CODES, ARR_DISTANCE_LENGTHS);
        this.huffmanCompressBlock();
        this.huffmanReset();
      } else {
        this.pendingBufferWriteBits((2 << 1) + (lastBlock ? 1 : 0), 3);
        this.huffmanSendAllTrees(blTreeCodes);
        this.huffmanCompressBlock();
        this.huffmanReset();
      }
    };
    CompressedStreamWriter2.prototype.huffmanFlushStoredBlock = function(stored, storedOffset, storedLength, lastBlock) {
      this.pendingBufferWriteBits((0 << 1) + (lastBlock ? 1 : 0), 3);
      this.pendingBufferAlignToByte();
      this.pendingBufferWriteShort(storedLength);
      this.pendingBufferWriteShort(~storedLength);
      this.pendingBufferWriteByteBlock(stored, storedOffset, storedLength);
      this.huffmanReset();
    };
    CompressedStreamWriter2.prototype.huffmanLengthCode = function(len) {
      if (len === 255) {
        return 285;
      }
      var code = 257;
      while (len >= 8) {
        code += 4;
        len >>= 1;
      }
      return code + len;
    };
    CompressedStreamWriter2.prototype.huffmanDistanceCode = function(distance) {
      var code = 0;
      while (distance >= 4) {
        code += 2;
        distance >>= 1;
      }
      return code + distance;
    };
    CompressedStreamWriter2.prototype.huffmanSendAllTrees = function(blTreeCodes) {
      this.treeCodeLengths.buildCodes();
      this.treeLiteral.buildCodes();
      this.treeDistances.buildCodes();
      this.pendingBufferWriteBits(this.treeLiteral.treeLength - 257, 5);
      this.pendingBufferWriteBits(this.treeDistances.treeLength - 1, 5);
      this.pendingBufferWriteBits(blTreeCodes - 4, 4);
      for (var rank = 0; rank < blTreeCodes; rank++) {
        this.pendingBufferWriteBits(this.treeCodeLengths.codeLengths[CompressorHuffmanTree.huffCodeLengthOrders[rank]], 3);
      }
      this.treeLiteral.writeTree(this.treeCodeLengths);
      this.treeDistances.writeTree(this.treeCodeLengths);
    };
    CompressedStreamWriter2.prototype.huffmanReset = function() {
      this.bufferPosition = 0;
      this.extraBits = 0;
      this.treeLiteral.reset();
      this.treeDistances.reset();
      this.treeCodeLengths.reset();
    };
    CompressedStreamWriter2.prototype.huffmanCompressBlock = function() {
      for (var i = 0; i < this.bufferPosition; i++) {
        var literalLen = this.arrLiterals[i] & 255;
        var dist = this.arrDistances[i];
        if (dist-- !== 0) {
          var lc = this.huffmanLengthCode(literalLen);
          this.treeLiteral.writeCodeToStream(lc);
          var bits = Math.floor((lc - 261) / 4);
          if (bits > 0 && bits <= 5) {
            this.pendingBufferWriteBits(literalLen & (1 << bits) - 1, bits);
          }
          var dc = this.huffmanDistanceCode(dist);
          this.treeDistances.writeCodeToStream(dc);
          bits = Math.floor(dc / 2 - 1);
          if (bits > 0) {
            this.pendingBufferWriteBits(dist & (1 << bits) - 1, bits);
          }
        } else {
          this.treeLiteral.writeCodeToStream(literalLen);
        }
      }
      this.treeLiteral.writeCodeToStream(256);
    };
    CompressedStreamWriter2.prototype.pendingBufferWriteBits = function(b, count) {
      var uint = new Uint32Array(1);
      uint[0] = this.pendingBufCache | b << this.pendingBufBitsInCache;
      this.pendingBufCache = uint[0];
      this.pendingBufBitsInCache += count;
      this.pendingBufferFlushBits();
    };
    CompressedStreamWriter2.prototype.pendingBufferFlush = function(isClose) {
      this.pendingBufferFlushBits();
      if (this.pendingBufLength > 0) {
        var array = new Uint8Array(this.pendingBufLength);
        array.set(this.pendingBuffer.subarray(0, this.pendingBufLength), 0);
        this.stream.push(array);
      }
      this.pendingBufLength = 0;
    };
    CompressedStreamWriter2.prototype.pendingBufferFlushBits = function() {
      var result = 0;
      while (this.pendingBufBitsInCache >= 8 && this.pendingBufLength < 1 << 16) {
        this.pendingBuffer[this.pendingBufLength++] = this.pendingBufCache;
        this.pendingBufCache >>= 8;
        this.pendingBufBitsInCache -= 8;
        result++;
      }
      return result;
    };
    CompressedStreamWriter2.prototype.pendingBufferWriteByteBlock = function(data, offset, length) {
      var array = data.subarray(offset, offset + length);
      this.pendingBuffer.set(array, this.pendingBufLength);
      this.pendingBufLength += length;
    };
    CompressedStreamWriter2.prototype.pendingBufferWriteShort = function(s) {
      this.pendingBuffer[this.pendingBufLength++] = s;
      this.pendingBuffer[this.pendingBufLength++] = s >> 8;
    };
    CompressedStreamWriter2.prototype.pendingBufferAlignToByte = function() {
      if (this.pendingBufBitsInCache > 0) {
        this.pendingBuffer[this.pendingBufLength++] = this.pendingBufCache;
      }
      this.pendingBufCache = 0;
      this.pendingBufBitsInCache = 0;
    };
    CompressedStreamWriter2.initHuffmanTree = function() {
      var i = 0;
      while (i < 144) {
        ARR_LITERAL_CODES[i] = CompressorHuffmanTree.bitReverse(48 + i << 8);
        ARR_LITERAL_LENGTHS[i++] = 8;
      }
      while (i < 256) {
        ARR_LITERAL_CODES[i] = CompressorHuffmanTree.bitReverse(400 - 144 + i << 7);
        ARR_LITERAL_LENGTHS[i++] = 9;
      }
      while (i < 280) {
        ARR_LITERAL_CODES[i] = CompressorHuffmanTree.bitReverse(0 - 256 + i << 9);
        ARR_LITERAL_LENGTHS[i++] = 7;
      }
      while (i < 286) {
        ARR_LITERAL_CODES[i] = CompressorHuffmanTree.bitReverse(192 - 280 + i << 8);
        ARR_LITERAL_LENGTHS[i++] = 8;
      }
      for (i = 0; i < 30; i++) {
        ARR_DISTANCE_CODES[i] = CompressorHuffmanTree.bitReverse(i << 11);
        ARR_DISTANCE_LENGTHS[i] = 5;
      }
    };
    CompressedStreamWriter2.prototype.close = function() {
      do {
        this.pendingBufferFlush(true);
        if (!this.compressData(true)) {
          this.pendingBufferFlush(true);
          this.pendingBufferAlignToByte();
          if (!this.noWrap) {
            this.pendingBufferWriteShortBytes(this.checkSum >> 16);
            this.pendingBufferWriteShortBytes(this.checkSum & 65535);
          }
          this.pendingBufferFlush(true);
        }
      } while (!(this.inputEnd === this.inputOffset) || !(this.pendingBufLength === 0));
    };
    CompressedStreamWriter2.prototype.destroy = function() {
      this.stream = [];
      this.stream = void 0;
      this.pendingBuffer = void 0;
      this.treeLiteral = void 0;
      this.treeDistances = void 0;
      this.treeCodeLengths = void 0;
      this.arrLiterals = void 0;
      this.arrDistances = void 0;
      this.hashHead = void 0;
      this.hashPrevious = void 0;
      this.dataWindow = void 0;
      this.inputBuffer = void 0;
      this.pendingBufLength = void 0;
      this.pendingBufCache = void 0;
      this.pendingBufBitsInCache = void 0;
      this.bufferPosition = void 0;
      this.extraBits = void 0;
      this.currentHash = void 0;
      this.matchStart = void 0;
      this.matchLength = void 0;
      this.matchPrevAvail = void 0;
      this.blockStart = void 0;
      this.stringStart = void 0;
      this.lookAhead = void 0;
      this.totalBytesIn = void 0;
      this.inputOffset = void 0;
      this.inputEnd = void 0;
      this.windowSize = void 0;
      this.windowMask = void 0;
      this.hashSize = void 0;
      this.hashMask = void 0;
      this.hashShift = void 0;
      this.maxDist = void 0;
      this.checkSum = void 0;
      this.noWrap = void 0;
    };
    CompressedStreamWriter2.isHuffmanTreeInitiated = false;
    return CompressedStreamWriter2;
  }()
);
var CompressorHuffmanTree = (
  /** @class */
  function() {
    function CompressorHuffmanTree2(writer, elementCount, minCodes, maxLength) {
      this.writer = writer;
      this.codeMinCount = minCodes;
      this.maxLength = maxLength;
      this.codeFrequency = new Uint16Array(elementCount);
      this.lengthCount = new Int32Array(maxLength);
    }
    Object.defineProperty(CompressorHuffmanTree2.prototype, "treeLength", {
      get: function() {
        return this.codeCount;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(CompressorHuffmanTree2.prototype, "codeLengths", {
      get: function() {
        return this.codeLength;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(CompressorHuffmanTree2.prototype, "codeFrequencies", {
      get: function() {
        return this.codeFrequency;
      },
      enumerable: true,
      configurable: true
    });
    CompressorHuffmanTree2.prototype.setStaticCodes = function(codes, lengths) {
      var temp = new Int16Array(codes.length);
      temp.set(codes, 0);
      this.codes = temp;
      var lengthTemp = new Uint8Array(lengths.length);
      lengthTemp.set(lengths, 0);
      this.codeLength = lengthTemp;
    };
    CompressorHuffmanTree2.prototype.reset = function() {
      for (var i = 0; i < this.codeFrequency.length; i++) {
        this.codeFrequency[i] = 0;
      }
      this.codes = void 0;
      this.codeLength = void 0;
    };
    CompressorHuffmanTree2.prototype.writeCodeToStream = function(code) {
      this.writer.pendingBufferWriteBits(this.codes[code] & 65535, this.codeLength[code]);
    };
    CompressorHuffmanTree2.prototype.buildCodes = function() {
      var nextCode = new Int32Array(this.maxLength);
      this.codes = new Int16Array(this.codeCount);
      var code = 0;
      for (var bitsCount = 0; bitsCount < this.maxLength; bitsCount++) {
        nextCode[bitsCount] = code;
        code += this.lengthCount[bitsCount] << 15 - bitsCount;
      }
      for (var i = 0; i < this.codeCount; i++) {
        var bits = this.codeLength[i];
        if (bits > 0) {
          this.codes[i] = CompressorHuffmanTree2.bitReverse(nextCode[bits - 1]);
          nextCode[bits - 1] += 1 << 16 - bits;
        }
      }
    };
    CompressorHuffmanTree2.bitReverse = function(value) {
      return CompressorHuffmanTree2.reverseBits[value & 15] << 12 | CompressorHuffmanTree2.reverseBits[value >> 4 & 15] << 8 | CompressorHuffmanTree2.reverseBits[value >> 8 & 15] << 4 | CompressorHuffmanTree2.reverseBits[value >> 12];
    };
    CompressorHuffmanTree2.prototype.getEncodedLength = function() {
      var len = 0;
      for (var i = 0; i < this.codeFrequency.length; i++) {
        len += this.codeFrequency[i] * this.codeLength[i];
      }
      return len;
    };
    CompressorHuffmanTree2.prototype.calculateBLFreq = function(blTree) {
      var maxCount;
      var minCount;
      var count;
      var curLen = -1;
      var i = 0;
      while (i < this.codeCount) {
        count = 1;
        var nextLen = this.codeLength[i];
        if (nextLen === 0) {
          maxCount = 138;
          minCount = 3;
        } else {
          maxCount = 6;
          minCount = 3;
          if (curLen !== nextLen) {
            blTree.codeFrequency[nextLen]++;
            count = 0;
          }
        }
        curLen = nextLen;
        i++;
        while (i < this.codeCount && curLen === this.codeLength[i]) {
          i++;
          if (++count >= maxCount) {
            break;
          }
        }
        if (count < minCount) {
          blTree.codeFrequency[curLen] += count;
        } else if (curLen !== 0) {
          blTree.codeFrequency[16]++;
        } else if (count <= 10) {
          blTree.codeFrequency[17]++;
        } else {
          blTree.codeFrequency[18]++;
        }
      }
    };
    CompressorHuffmanTree2.prototype.writeTree = function(blTree) {
      var maxRepeatCount;
      var minRepeatCount;
      var currentRepeatCount;
      var currentCodeLength = -1;
      var i = 0;
      while (i < this.codeCount) {
        currentRepeatCount = 1;
        var nextLen = this.codeLength[i];
        if (nextLen === 0) {
          maxRepeatCount = 138;
          minRepeatCount = 3;
        } else {
          maxRepeatCount = 6;
          minRepeatCount = 3;
          if (currentCodeLength !== nextLen) {
            blTree.writeCodeToStream(nextLen);
            currentRepeatCount = 0;
          }
        }
        currentCodeLength = nextLen;
        i++;
        while (i < this.codeCount && currentCodeLength === this.codeLength[i]) {
          i++;
          if (++currentRepeatCount >= maxRepeatCount) {
            break;
          }
        }
        if (currentRepeatCount < minRepeatCount) {
          while (currentRepeatCount-- > 0) {
            blTree.writeCodeToStream(currentCodeLength);
          }
        } else if (currentCodeLength !== 0) {
          blTree.writeCodeToStream(16);
          this.writer.pendingBufferWriteBits(currentRepeatCount - 3, 2);
        } else if (currentRepeatCount <= 10) {
          blTree.writeCodeToStream(17);
          this.writer.pendingBufferWriteBits(currentRepeatCount - 3, 3);
        } else {
          blTree.writeCodeToStream(18);
          this.writer.pendingBufferWriteBits(currentRepeatCount - 11, 7);
        }
      }
    };
    CompressorHuffmanTree2.prototype.buildTree = function() {
      var codesCount = this.codeFrequency.length;
      var arrTree = new Int32Array(codesCount);
      var treeLength = 0;
      var maxCount = 0;
      for (var n = 0; n < codesCount; n++) {
        var freq = this.codeFrequency[n];
        if (freq !== 0) {
          var pos = treeLength++;
          var pPos = 0;
          while (pos > 0 && this.codeFrequency[arrTree[pPos = Math.floor((pos - 1) / 2)]] > freq) {
            arrTree[pos] = arrTree[pPos];
            pos = pPos;
          }
          arrTree[pos] = n;
          maxCount = n;
        }
      }
      while (treeLength < 2) {
        arrTree[treeLength++] = maxCount < 2 ? ++maxCount : 0;
      }
      this.codeCount = Math.max(maxCount + 1, this.codeMinCount);
      var leafsCount = treeLength;
      var nodesCount = leafsCount;
      var child = new Int32Array(4 * treeLength - 2);
      var values = new Int32Array(2 * treeLength - 1);
      for (var i = 0; i < treeLength; i++) {
        var node = arrTree[i];
        var iIndex = 2 * i;
        child[iIndex] = node;
        child[iIndex + 1] = -1;
        values[i] = this.codeFrequency[node] << 8;
        arrTree[i] = i;
      }
      this.constructHuffmanTree(arrTree, treeLength, values, nodesCount, child);
      this.buildLength(child);
    };
    CompressorHuffmanTree2.prototype.constructHuffmanTree = function(arrTree, treeLength, values, nodesCount, child) {
      do {
        var first = arrTree[0];
        var last = arrTree[--treeLength];
        var lastVal = values[last];
        var pPos = 0;
        var path = 1;
        while (path < treeLength) {
          if (path + 1 < treeLength && values[arrTree[path]] > values[arrTree[path + 1]]) {
            path++;
          }
          arrTree[pPos] = arrTree[path];
          pPos = path;
          path = pPos * 2 + 1;
        }
        while ((path = pPos) > 0 && values[arrTree[pPos = Math.floor((path - 1) / 2)]] > lastVal) {
          arrTree[path] = arrTree[pPos];
        }
        arrTree[path] = last;
        var second = arrTree[0];
        last = nodesCount++;
        child[2 * last] = first;
        child[2 * last + 1] = second;
        var minDepth = Math.min(values[first] & 255, values[second] & 255);
        values[last] = lastVal = values[first] + values[second] - minDepth + 1;
        pPos = 0;
        path = 1;
        while (path < treeLength) {
          if (path + 1 < treeLength && values[arrTree[path]] > values[arrTree[path + 1]]) {
            path++;
          }
          arrTree[pPos] = arrTree[path];
          pPos = path;
          path = pPos * 2 + 1;
        }
        while ((path = pPos) > 0 && values[arrTree[pPos = Math.floor((path - 1) / 2)]] > lastVal) {
          arrTree[path] = arrTree[pPos];
        }
        arrTree[path] = last;
      } while (treeLength > 1);
    };
    CompressorHuffmanTree2.prototype.buildLength = function(child) {
      this.codeLength = new Uint8Array(this.codeFrequency.length);
      var numNodes = Math.floor(child.length / 2);
      var numLeafs = Math.floor((numNodes + 1) / 2);
      var overflow = 0;
      for (var i = 0; i < this.maxLength; i++) {
        this.lengthCount[i] = 0;
      }
      overflow = this.calculateOptimalCodeLength(child, overflow, numNodes);
      if (overflow === 0) {
        return;
      }
      var iIncreasableLength = this.maxLength - 1;
      do {
        while (this.lengthCount[--iIncreasableLength] === 0) {
        }
        do {
          this.lengthCount[iIncreasableLength]--;
          this.lengthCount[++iIncreasableLength]++;
          overflow -= 1 << this.maxLength - 1 - iIncreasableLength;
        } while (overflow > 0 && iIncreasableLength < this.maxLength - 1);
      } while (overflow > 0);
      this.recreateTree(child, overflow, numLeafs);
    };
    CompressorHuffmanTree2.prototype.recreateTree = function(child, overflow, numLeafs) {
      this.lengthCount[this.maxLength - 1] += overflow;
      this.lengthCount[this.maxLength - 2] -= overflow;
      var nodePtr = 2 * numLeafs;
      for (var bits = this.maxLength; bits !== 0; bits--) {
        var n = this.lengthCount[bits - 1];
        while (n > 0) {
          var childPtr = 2 * child[nodePtr++];
          if (child[childPtr + 1] === -1) {
            this.codeLength[child[childPtr]] = bits;
            n--;
          }
        }
      }
    };
    CompressorHuffmanTree2.prototype.calculateOptimalCodeLength = function(child, overflow, numNodes) {
      var lengths = new Int32Array(numNodes);
      lengths[numNodes - 1] = 0;
      for (var i = numNodes - 1; i >= 0; i--) {
        var childIndex = 2 * i + 1;
        if (child[childIndex] !== -1) {
          var bitLength = lengths[i] + 1;
          if (bitLength > this.maxLength) {
            bitLength = this.maxLength;
            overflow++;
          }
          lengths[child[childIndex - 1]] = lengths[child[childIndex]] = bitLength;
        } else {
          var bitLength = lengths[i];
          this.lengthCount[bitLength - 1]++;
          this.codeLength[child[childIndex - 1]] = lengths[i];
        }
      }
      return overflow;
    };
    CompressorHuffmanTree2.reverseBits = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15];
    CompressorHuffmanTree2.huffCodeLengthOrders = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
    return CompressorHuffmanTree2;
  }()
);
var ChecksumCalculator = (
  /** @class */
  function() {
    function ChecksumCalculator3() {
    }
    ChecksumCalculator3.checksumUpdate = function(checksum, buffer, offset, length) {
      var uint = new Uint32Array(1);
      uint[0] = checksum;
      var checksum_uint = uint[0];
      var s1 = uint[0] = checksum_uint & 65535;
      var s2 = uint[0] = checksum_uint >> ChecksumCalculator3.checkSumBitOffset;
      while (length > 0) {
        var steps = Math.min(length, ChecksumCalculator3.checksumIterationCount);
        length -= steps;
        while (--steps >= 0) {
          s1 = s1 + (uint[0] = buffer[offset++] & 255);
          s2 = s2 + s1;
        }
        s1 %= ChecksumCalculator3.checksumBase;
        s2 %= ChecksumCalculator3.checksumBase;
      }
      checksum_uint = s2 << ChecksumCalculator3.checkSumBitOffset | s1;
      return checksum_uint;
    };
    ChecksumCalculator3.checkSumBitOffset = 16;
    ChecksumCalculator3.checksumBase = 65521;
    ChecksumCalculator3.checksumIterationCount = 3800;
    return ChecksumCalculator3;
  }()
);

// node_modules/@syncfusion/ej2-compression/src/decompressor-huffman-tree.js
var DecompressorHuffmanTree = (
  /** @class */
  function() {
    function DecompressorHuffmanTree2(lengths) {
      this.buildTree(lengths);
    }
    DecompressorHuffmanTree2.init = function() {
      var lengths;
      var index;
      lengths = new Uint8Array(288);
      index = 0;
      while (index < 144) {
        lengths[index++] = 8;
      }
      while (index < 256) {
        lengths[index++] = 9;
      }
      while (index < 280) {
        lengths[index++] = 7;
      }
      while (index < 288) {
        lengths[index++] = 8;
      }
      DecompressorHuffmanTree2.m_LengthTree = new DecompressorHuffmanTree2(lengths);
      lengths = new Uint8Array(32);
      index = 0;
      while (index < 32) {
        lengths[index++] = 5;
      }
      DecompressorHuffmanTree2.m_DistanceTree = new DecompressorHuffmanTree2(lengths);
    };
    DecompressorHuffmanTree2.prototype.prepareData = function(blCount, nextCode, lengths) {
      var code = 0;
      var treeSize = 512;
      for (var i = 0; i < lengths.length; i++) {
        var length_1 = lengths[i];
        if (length_1 > 0) {
          blCount[length_1]++;
        }
      }
      for (var bits = 1; bits <= DecompressorHuffmanTree2.MAX_BITLEN; bits++) {
        nextCode[bits] = code;
        code += blCount[bits] << 16 - bits;
        if (bits >= 10) {
          var start = nextCode[bits] & 130944;
          var end = code & 130944;
          treeSize += end - start >> 16 - bits;
        }
      }
      return { "code": code, "treeSize": treeSize };
    };
    DecompressorHuffmanTree2.prototype.treeFromData = function(blCount, nextCode, lengths, code, treeSize) {
      var tree = new Int16Array(treeSize);
      var pointer = 512;
      var increment = 1 << 7;
      for (var bits = DecompressorHuffmanTree2.MAX_BITLEN; bits >= 10; bits--) {
        var end = code & 130944;
        code -= blCount[bits] << 16 - bits;
        var start = code & 130944;
        for (var i = start; i < end; i += increment) {
          tree[Utils.bitReverse(i)] = Utils.bitConverterInt32ToInt16(-pointer << 4 | bits);
          pointer += 1 << bits - 9;
        }
      }
      for (var i = 0; i < lengths.length; i++) {
        var bits = lengths[i];
        if (bits == 0) {
          continue;
        }
        code = nextCode[bits];
        var revcode = Utils.bitReverse(code);
        if (bits <= 9) {
          do {
            tree[revcode] = Utils.bitConverterInt32ToInt16(i << 4 | bits);
            revcode += 1 << bits;
          } while (revcode < 512);
        } else {
          var subTree = tree[revcode & 511];
          var treeLen = 1 << (subTree & 15);
          subTree = -(subTree >> 4);
          do {
            tree[subTree | revcode >> 9] = Utils.bitConverterInt32ToInt16(i << 4 | bits);
            revcode += 1 << bits;
          } while (revcode < treeLen);
        }
        nextCode[bits] = code + (1 << 16 - bits);
      }
      return tree;
    };
    DecompressorHuffmanTree2.prototype.buildTree = function(lengths) {
      var blCount = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      var nextCode = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      var prepareData = this.prepareData(blCount, nextCode, lengths);
      this.m_Tree = this.treeFromData(blCount, nextCode, lengths, prepareData.code, prepareData.treeSize);
    };
    DecompressorHuffmanTree2.prototype.unpackSymbol = function(input2) {
      var lookahead;
      var symbol;
      if ((lookahead = input2.peekBits(9)) >= 0) {
        if ((symbol = this.m_Tree[lookahead]) >= 0) {
          input2.skipBits(symbol & 15);
          return symbol >> 4;
        }
        var subtree = -(symbol >> 4);
        var bitlen = symbol & 15;
        if ((lookahead = input2.peekBits(bitlen)) >= 0) {
          symbol = this.m_Tree[subtree | lookahead >> 9];
          input2.skipBits(symbol & 15);
          return symbol >> 4;
        } else {
          var bits = input2.availableBits;
          lookahead = input2.peekBits(bits);
          symbol = this.m_Tree[subtree | lookahead >> 9];
          if ((symbol & 15) <= bits) {
            input2.skipBits(symbol & 15);
            return symbol >> 4;
          } else {
            return -1;
          }
        }
      } else {
        var bits = input2.availableBits;
        lookahead = input2.peekBits(bits);
        symbol = this.m_Tree[lookahead];
        if (symbol >= 0 && (symbol & 15) <= bits) {
          input2.skipBits(symbol & 15);
          return symbol >> 4;
        } else {
          return -1;
        }
      }
    };
    Object.defineProperty(DecompressorHuffmanTree2, "lengthTree", {
      /// <summary>
      /// GET huffman tree for encoding and decoding lengths.
      /// </summary>
      get: function() {
        return this.m_LengthTree;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DecompressorHuffmanTree2, "distanceTree", {
      /// <summary>
      /// GET huffman tree for encoding and decoding distances.
      /// </summary>
      get: function() {
        return this.m_DistanceTree;
      },
      enumerable: true,
      configurable: true
    });
    DecompressorHuffmanTree2.MAX_BITLEN = 15;
    return DecompressorHuffmanTree2;
  }()
);

// node_modules/@syncfusion/ej2-compression/src/checksum-calculator.js
var ChecksumCalculator2 = (
  /** @class */
  function() {
    function ChecksumCalculator3() {
    }
    ChecksumCalculator3.ChecksumUpdate = function(checksum, buffer, offset, length) {
      var checkSumUInt = checksum;
      var s1 = checkSumUInt & 65535;
      var s2 = checkSumUInt >> this.DEF_CHECKSUM_BIT_OFFSET;
      while (length > 0) {
        var steps = Math.min(length, this.DEF_CHECKSUM_ITERATIONSCOUNT);
        length -= steps;
        while (--steps >= 0) {
          s1 = s1 + (buffer[offset++] & 255);
          s2 = s2 + s1;
        }
        s1 %= this.DEF_CHECKSUM_BASE;
        s2 %= this.DEF_CHECKSUM_BASE;
      }
      checkSumUInt = s2 << this.DEF_CHECKSUM_BIT_OFFSET | s1;
      checksum = checkSumUInt;
    };
    ChecksumCalculator3.ChecksumGenerate = function(buffer, offset, length) {
      var result = 1;
      ChecksumCalculator3.ChecksumUpdate(result, buffer, offset, length);
      return result;
    };
    ChecksumCalculator3.DEF_CHECKSUM_BIT_OFFSET = 16;
    ChecksumCalculator3.DEF_CHECKSUM_BASE = 65521;
    ChecksumCalculator3.DEF_CHECKSUM_ITERATIONSCOUNT = 3800;
    return ChecksumCalculator3;
  }()
);

// node_modules/@syncfusion/ej2-compression/src/compression-reader.js
var CompressedStreamReader = (
  /** @class */
  function() {
    function CompressedStreamReader2(stream, bNoWrap) {
      this.defaultHuffmanDynamicTree = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
      this.DEF_HEADER_METHOD_MASK = 15 << 8;
      this.DEF_HEADER_INFO_MASK = 240 << 8;
      this.DEF_HEADER_FLAGS_FCHECK = 31;
      this.DEF_HEADER_FLAGS_FDICT = 32;
      this.DEF_HEADER_FLAGS_FLEVEL = 192;
      this.DEF_MAX_WINDOW_SIZE = 65535;
      this.DEF_HUFFMAN_REPEATE_MAX = 258;
      this.DEF_HUFFMAN_END_BLOCK = 256;
      this.DEF_HUFFMAN_LENGTH_MINIMUMCODE = 257;
      this.DEF_HUFFMAN_LENGTH_MAXIMUMCODE = 285;
      this.DEF_HUFFMAN_DISTANCE_MAXIMUMCODE = 29;
      this.mCheckSum = 1;
      this.tBuffer = 0;
      this.mBufferedBits = 0;
      this.mTempBuffer = new Uint8Array(4);
      this.mBlockBuffer = new Uint8Array(this.DEF_MAX_WINDOW_SIZE);
      this.mbNoWrap = false;
      this.mWindowSize = 0;
      this.mCurrentPosition = 0;
      this.mDataLength = 0;
      this.mbCanReadNextBlock = true;
      this.mbCanReadMoreData = true;
      this.mbCheckSumRead = false;
      if (stream == null) {
        throw new DOMException("stream");
      }
      if (stream.length === 0) {
        throw new DOMException("stream - string can not be empty");
      }
      DecompressorHuffmanTree.init();
      this.mInputStream = new Stream(stream);
      this.mbNoWrap = bNoWrap;
      if (!this.mbNoWrap) {
        this.readZLibHeader();
      }
      this.decodeBlockHeader();
    }
    Object.defineProperty(CompressedStreamReader2.prototype, "mBuffer", {
      get: function() {
        return this.tBuffer;
      },
      set: function(value) {
        this.tBuffer = value;
      },
      enumerable: true,
      configurable: true
    });
    CompressedStreamReader2.prototype.peekBits = function(count) {
      if (count < 0) {
        throw new DOMException("count", "Bits count can not be less than zero.");
      }
      if (count > 32) {
        throw new DOMException("count", "Count of bits is too large.");
      }
      if (this.mBufferedBits < count) {
        this.fillBuffer();
      }
      if (this.mBufferedBits < count) {
        return -1;
      }
      var bitMask = ~(4294967295 << count);
      var result = Utils.bitConverterUintToInt32(this.mBuffer & bitMask);
      return result;
    };
    CompressedStreamReader2.prototype.fillBuffer = function() {
      var length = 4 - (this.mBufferedBits >> 3) - ((this.mBufferedBits & 7) !== 0 ? 1 : 0);
      if (length === 0) {
        return;
      }
      var bytesRead = this.mInputStream.read(this.mTempBuffer, 0, length);
      for (var i = 0; i < bytesRead; i++) {
        this.mBuffer = Utils.bitConverterInt32ToUint(this.mBuffer | Utils.bitConverterInt32ToUint(this.mTempBuffer[i] << this.mBufferedBits));
        this.mBufferedBits += 8;
      }
    };
    CompressedStreamReader2.prototype.skipBits = function(count) {
      if (count < 0) {
        throw new DOMException("count", "Bits count can not be less than zero.");
      }
      if (count === 0) {
        return;
      }
      if (count >= this.mBufferedBits) {
        count -= this.mBufferedBits;
        this.mBufferedBits = 0;
        this.mBuffer = 0;
        if (count > 0) {
          this.mInputStream.position += count >> 3;
          count &= 7;
          if (count > 0) {
            this.fillBuffer();
            this.mBufferedBits -= count;
            this.mBuffer = Utils.bitConverterInt32ToUint(this.mBuffer >>> count);
          }
        }
      } else {
        this.mBufferedBits -= count;
        this.mBuffer = Utils.bitConverterInt32ToUint(this.mBuffer >>> count);
      }
    };
    Object.defineProperty(CompressedStreamReader2.prototype, "availableBits", {
      get: function() {
        return this.mBufferedBits;
      },
      enumerable: true,
      configurable: true
    });
    CompressedStreamReader2.prototype.readZLibHeader = function() {
      var header = this.readInt16();
      if (header === -1) {
        throw new DOMException("Header of the stream can not be read.");
      }
      if (header % 31 !== 0) {
        throw new DOMException("Header checksum illegal");
      }
      if ((header & this.DEF_HEADER_METHOD_MASK) !== 8 << 8) {
        throw new DOMException("Unsupported compression method.");
      }
      this.mWindowSize = Math.pow(2, ((header & this.DEF_HEADER_INFO_MASK) >> 12) + 8);
      if (this.mWindowSize > 65535) {
        throw new DOMException("Unsupported window size for deflate compression method.");
      }
      if ((header & this.DEF_HEADER_FLAGS_FDICT) >> 5 === 1) {
        throw new DOMException("Custom dictionary is not supported at the moment.");
      }
    };
    CompressedStreamReader2.prototype.readInt16 = function() {
      var result = this.readBits(8) << 8;
      result |= this.readBits(8);
      return result;
    };
    CompressedStreamReader2.prototype.readBits = function(count) {
      var result = this.peekBits(count);
      if (result === -1) {
        return -1;
      }
      this.mBufferedBits -= count;
      this.mBuffer = Utils.bitConverterInt32ToUint(this.mBuffer >>> count);
      return result;
    };
    CompressedStreamReader2.prototype.decodeBlockHeader = function() {
      if (!this.mbCanReadNextBlock) {
        return false;
      }
      var bFinalBlock = this.readBits(1);
      if (bFinalBlock === -1) {
        return false;
      }
      var blockType = this.readBits(2);
      if (blockType === -1) {
        return false;
      }
      this.mbCanReadNextBlock = bFinalBlock === 0;
      switch (blockType) {
        case 0:
          this.mbReadingUncompressed = true;
          this.skipToBoundary();
          var length_1 = this.readInt16Inverted();
          var lengthComplement = this.readInt16Inverted();
          if (length_1 !== (lengthComplement ^ 65535)) {
            throw new DOMException("Wrong block length.");
          }
          if (length_1 > 65535) {
            throw new DOMException("Uncompressed block length can not be more than 65535.");
          }
          this.mUncompressedDataLength = length_1;
          this.mCurrentLengthTree = null;
          this.mCurrentDistanceTree = null;
          break;
        case 1:
          this.mbReadingUncompressed = false;
          this.mUncompressedDataLength = -1;
          this.mCurrentLengthTree = DecompressorHuffmanTree.lengthTree;
          this.mCurrentDistanceTree = DecompressorHuffmanTree.distanceTree;
          break;
        case 2:
          this.mbReadingUncompressed = false;
          this.mUncompressedDataLength = -1;
          var trees = this.decodeDynamicHeader(this.mCurrentLengthTree, this.mCurrentDistanceTree);
          this.mCurrentLengthTree = trees.lengthTree;
          this.mCurrentDistanceTree = trees.distanceTree;
          break;
        default:
          throw new DOMException("Wrong block type.");
      }
      return true;
    };
    CompressedStreamReader2.prototype.skipToBoundary = function() {
      this.mBuffer = Utils.bitConverterInt32ToUint(this.mBuffer >>> (this.mBufferedBits & 7));
      this.mBufferedBits &= ~7;
    };
    CompressedStreamReader2.prototype.readInt16Inverted = function() {
      var result = this.readBits(8);
      result |= this.readBits(8) << 8;
      return result;
    };
    CompressedStreamReader2.prototype.decodeDynamicHeader = function(lengthTree, distanceTree) {
      var bLastSymbol = 0;
      var iLengthsCount = this.readBits(5);
      var iDistancesCount = this.readBits(5);
      var iCodeLengthsCount = this.readBits(4);
      if (iLengthsCount < 0 || iDistancesCount < 0 || iCodeLengthsCount < 0) {
        throw new DOMException("Wrong dynamic huffman codes.");
      }
      iLengthsCount += 257;
      iDistancesCount += 1;
      var iResultingCodeLengthsCount = iLengthsCount + iDistancesCount;
      var arrResultingCodeLengths = new Uint8Array(iResultingCodeLengthsCount);
      var arrDecoderCodeLengths = new Uint8Array(19);
      iCodeLengthsCount += 4;
      var iCurrentCode = 0;
      while (iCurrentCode < iCodeLengthsCount) {
        var len = this.readBits(3);
        if (len < 0) {
          throw new DOMException("Wrong dynamic huffman codes.");
        }
        arrDecoderCodeLengths[this.defaultHuffmanDynamicTree[iCurrentCode++]] = len;
      }
      var treeInternalDecoder = new DecompressorHuffmanTree(arrDecoderCodeLengths);
      iCurrentCode = 0;
      for (; ; ) {
        var symbol = void 0;
        var bNeedBreak = false;
        symbol = treeInternalDecoder.unpackSymbol(this);
        while ((symbol & ~15) === 0) {
          arrResultingCodeLengths[iCurrentCode++] = bLastSymbol = symbol;
          if (iCurrentCode === iResultingCodeLengthsCount) {
            bNeedBreak = true;
            break;
          }
          symbol = treeInternalDecoder.unpackSymbol(this);
        }
        if (bNeedBreak) {
          break;
        }
        if (symbol < 0) {
          throw new DOMException("Wrong dynamic huffman codes.");
        }
        if (symbol >= 17) {
          bLastSymbol = 0;
        } else if (iCurrentCode === 0) {
          throw new DOMException("Wrong dynamic huffman codes.");
        }
        var miRepSymbol = symbol - 16;
        var bits = CompressedStreamReader2.DEF_HUFFMAN_DYNTREE_REPEAT_BITS[miRepSymbol];
        var count = this.readBits(bits);
        if (count < 0) {
          throw new DOMException("Wrong dynamic huffman codes.");
        }
        count += CompressedStreamReader2.DEF_HUFFMAN_DYNTREE_REPEAT_MINIMUMS[miRepSymbol];
        if (iCurrentCode + count > iResultingCodeLengthsCount) {
          throw new DOMException("Wrong dynamic huffman codes.");
        }
        while (count-- > 0) {
          arrResultingCodeLengths[iCurrentCode++] = bLastSymbol;
        }
        if (iCurrentCode === iResultingCodeLengthsCount) {
          break;
        }
      }
      var tempArray = new Uint8Array(iLengthsCount);
      tempArray.set(arrResultingCodeLengths.subarray(0, iLengthsCount), 0);
      lengthTree = new DecompressorHuffmanTree(tempArray);
      tempArray = arrResultingCodeLengths.slice(iLengthsCount, iLengthsCount + iDistancesCount);
      distanceTree = new DecompressorHuffmanTree(tempArray);
      return { "lengthTree": lengthTree, "distanceTree": distanceTree };
    };
    CompressedStreamReader2.prototype.readHuffman = function() {
      var free = this.DEF_MAX_WINDOW_SIZE - (this.mDataLength - this.mCurrentPosition);
      var dataRead = false;
      var readdata = {};
      while (free >= this.DEF_HUFFMAN_REPEATE_MAX) {
        var symbol = void 0;
        symbol = this.mCurrentLengthTree.unpackSymbol(this);
        while ((symbol & ~255) === 0) {
          readdata[(this.mDataLength + 1) % this.DEF_MAX_WINDOW_SIZE] = symbol;
          this.mBlockBuffer[this.mDataLength++ % this.DEF_MAX_WINDOW_SIZE] = symbol;
          dataRead = true;
          if (--free < this.DEF_HUFFMAN_REPEATE_MAX) {
            return true;
          }
          symbol = this.mCurrentLengthTree.unpackSymbol(this);
        }
        if (symbol < this.DEF_HUFFMAN_LENGTH_MINIMUMCODE) {
          if (symbol < this.DEF_HUFFMAN_END_BLOCK) {
            throw new DOMException("Illegal code.");
          }
          var numDataRead = dataRead ? 1 : 0;
          this.mbCanReadMoreData = this.decodeBlockHeader();
          var numReadMore = this.mbCanReadMoreData ? 1 : 0;
          return numDataRead | numReadMore ? true : false;
        }
        if (symbol > this.DEF_HUFFMAN_LENGTH_MAXIMUMCODE) {
          throw new DOMException("Illegal repeat code length.");
        }
        var iRepeatLength = CompressedStreamReader2.DEF_HUFFMAN_REPEAT_LENGTH_BASE[symbol - this.DEF_HUFFMAN_LENGTH_MINIMUMCODE];
        var iRepeatExtraBits = CompressedStreamReader2.DEF_HUFFMAN_REPEAT_LENGTH_EXTENSION[symbol - this.DEF_HUFFMAN_LENGTH_MINIMUMCODE];
        if (iRepeatExtraBits > 0) {
          var extra = this.readBits(iRepeatExtraBits);
          if (extra < 0) {
            throw new DOMException("Wrong data.");
          }
          iRepeatLength += extra;
        }
        symbol = this.mCurrentDistanceTree.unpackSymbol(this);
        if (symbol < 0 || symbol > CompressedStreamReader2.DEF_HUFFMAN_REPEAT_DISTANCE_BASE.length) {
          throw new DOMException("Wrong distance code.");
        }
        var iRepeatDistance = CompressedStreamReader2.DEF_HUFFMAN_REPEAT_DISTANCE_BASE[symbol];
        iRepeatExtraBits = CompressedStreamReader2.DEF_HUFFMAN_REPEAT_DISTANCE_EXTENSION[symbol];
        if (iRepeatExtraBits > 0) {
          var extra = this.readBits(iRepeatExtraBits);
          if (extra < 0) {
            throw new DOMException("Wrong data.");
          }
          iRepeatDistance += extra;
        }
        for (var i = 0; i < iRepeatLength; i++) {
          this.mBlockBuffer[this.mDataLength % this.DEF_MAX_WINDOW_SIZE] = this.mBlockBuffer[(this.mDataLength - iRepeatDistance) % this.DEF_MAX_WINDOW_SIZE];
          this.mDataLength++;
          free--;
        }
        dataRead = true;
      }
      return dataRead;
    };
    CompressedStreamReader2.prototype.read = function(buffer, offset, length) {
      if (buffer == null) {
        throw new DOMException("buffer");
      }
      if (offset < 0 || offset > buffer.length - 1) {
        throw new DOMException("offset", "Offset does not belong to specified buffer.");
      }
      if (length < 0 || length > buffer.length - offset) {
        throw new DOMException("length", "Length is illegal.");
      }
      var initialLength = length;
      while (length > 0) {
        if (this.mCurrentPosition < this.mDataLength) {
          var inBlockPosition = this.mCurrentPosition % this.DEF_MAX_WINDOW_SIZE;
          var dataToCopy = Math.min(this.DEF_MAX_WINDOW_SIZE - inBlockPosition, this.mDataLength - this.mCurrentPosition);
          dataToCopy = Math.min(dataToCopy, length);
          Utils.arrayCopy(this.mBlockBuffer, inBlockPosition, buffer, offset, dataToCopy);
          this.mCurrentPosition += dataToCopy;
          offset += dataToCopy;
          length -= dataToCopy;
        } else {
          if (!this.mbCanReadMoreData) {
            break;
          }
          var oldDataLength = this.mDataLength;
          if (!this.mbReadingUncompressed) {
            if (!this.readHuffman()) {
              break;
            }
          } else {
            if (this.mUncompressedDataLength === 0) {
              this.mbCanReadMoreData = this.decodeBlockHeader();
              if (!this.mbCanReadMoreData) {
                break;
              }
            } else {
              var inBlockPosition = this.mDataLength % this.DEF_MAX_WINDOW_SIZE;
              var dataToRead = Math.min(this.mUncompressedDataLength, this.DEF_MAX_WINDOW_SIZE - inBlockPosition);
              var dataRead = this.readPackedBytes(this.mBlockBuffer, inBlockPosition, dataToRead);
              if (dataToRead !== dataRead) {
                throw new DOMException("Not enough data in stream.");
              }
              this.mUncompressedDataLength -= dataRead;
              this.mDataLength += dataRead;
            }
          }
          if (oldDataLength < this.mDataLength) {
            var start = oldDataLength % this.DEF_MAX_WINDOW_SIZE;
            var end = this.mDataLength % this.DEF_MAX_WINDOW_SIZE;
            if (start < end) {
              this.checksumUpdate(this.mBlockBuffer, start, end - start);
            } else {
              this.checksumUpdate(this.mBlockBuffer, start, this.DEF_MAX_WINDOW_SIZE - start);
              if (end > 0) {
                this.checksumUpdate(this.mBlockBuffer, 0, end);
              }
            }
          }
        }
      }
      if (!this.mbCanReadMoreData && !this.mbCheckSumRead && !this.mbNoWrap) {
        this.skipToBoundary();
        var checkSum = this.readInt32();
        if (checkSum !== this.mCheckSum) {
          throw new DOMException("Checksum check failed.");
        }
        this.mbCheckSumRead = true;
      }
      return initialLength - length;
    };
    CompressedStreamReader2.prototype.readPackedBytes = function(buffer, offset, length) {
      if (buffer == null) {
        throw new DOMException("buffer");
      }
      if (offset < 0 || offset > buffer.length - 1) {
        throw new DOMException('offset", "Offset can not be less than zero or greater than buffer length - 1.');
      }
      if (length < 0) {
        throw new DOMException('length", "Length can not be less than zero.');
      }
      if (length > buffer.length - offset) {
        throw new DOMException('length", "Length is too large.');
      }
      if ((this.mBufferedBits & 7) !== 0) {
        throw new DOMException("Reading of unalligned data is not supported.");
      }
      if (length === 0) {
        return 0;
      }
      var result = 0;
      while (this.mBufferedBits > 0 && length > 0) {
        buffer[offset++] = this.mBuffer;
        this.mBufferedBits -= 8;
        this.mBuffer = Utils.bitConverterInt32ToUint(this.mBuffer >>> 8);
        length--;
        result++;
      }
      if (length > 0) {
        result += this.mInputStream.read(buffer, offset, length);
      }
      return result;
    };
    CompressedStreamReader2.prototype.readInt32 = function() {
      var result = this.readBits(8) << 24;
      result |= this.readBits(8) << 16;
      result |= this.readBits(8) << 8;
      result |= this.readBits(8);
      return result;
    };
    CompressedStreamReader2.prototype.checksumUpdate = function(buffer, offset, length) {
      ChecksumCalculator2.ChecksumUpdate(this.mCheckSum, buffer, offset, length);
    };
    CompressedStreamReader2.DEF_REVERSE_BITS = new Uint8Array([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]);
    CompressedStreamReader2.DEF_HUFFMAN_DYNTREE_REPEAT_MINIMUMS = [3, 3, 11];
    CompressedStreamReader2.DEF_HUFFMAN_DYNTREE_REPEAT_BITS = [2, 3, 7];
    CompressedStreamReader2.DEF_HUFFMAN_REPEAT_LENGTH_BASE = [
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      13,
      15,
      17,
      19,
      23,
      27,
      31,
      35,
      43,
      51,
      59,
      67,
      83,
      99,
      115,
      131,
      163,
      195,
      227,
      258
    ];
    CompressedStreamReader2.DEF_HUFFMAN_REPEAT_LENGTH_EXTENSION = [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      2,
      2,
      2,
      2,
      3,
      3,
      3,
      3,
      4,
      4,
      4,
      4,
      5,
      5,
      5,
      5,
      0
    ];
    CompressedStreamReader2.DEF_HUFFMAN_REPEAT_DISTANCE_BASE = [
      1,
      2,
      3,
      4,
      5,
      7,
      9,
      13,
      17,
      25,
      33,
      49,
      65,
      97,
      129,
      193,
      257,
      385,
      513,
      769,
      1025,
      1537,
      2049,
      3073,
      4097,
      6145,
      8193,
      12289,
      16385,
      24577
    ];
    CompressedStreamReader2.DEF_HUFFMAN_REPEAT_DISTANCE_EXTENSION = [
      0,
      0,
      0,
      0,
      1,
      1,
      2,
      2,
      3,
      3,
      4,
      4,
      5,
      5,
      6,
      6,
      7,
      7,
      8,
      8,
      9,
      9,
      10,
      10,
      11,
      11,
      12,
      12,
      13,
      13
    ];
    return CompressedStreamReader2;
  }()
);
var Stream = (
  /** @class */
  function() {
    function Stream2(input2) {
      this.position = 0;
      this.inputStream = new Uint8Array(input2.buffer);
    }
    Object.defineProperty(Stream2.prototype, "length", {
      get: function() {
        return this.inputStream.buffer.byteLength;
      },
      enumerable: true,
      configurable: true
    });
    Stream2.prototype.read = function(buffer, start, length) {
      var temp = new Uint8Array(this.inputStream.buffer, this.position + start);
      var data = temp.subarray(0, length);
      buffer.set(data, 0);
      this.position += data.byteLength;
      return data.byteLength;
    };
    Stream2.prototype.readByte = function() {
      return this.inputStream[this.position++];
    };
    Stream2.prototype.write = function(inputBuffer, offset, count) {
      Utils.arrayCopy(inputBuffer, 0, this.inputStream, this.position + offset, count);
      this.position += count;
    };
    Stream2.prototype.toByteArray = function() {
      return new Uint8Array(this.inputStream.buffer);
    };
    return Stream2;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/value-formatter.js
var ValueFormatter = (
  /** @class */
  function() {
    function ValueFormatter2(cultureName) {
      this.intl = new Internationalization();
    }
    ValueFormatter2.prototype.getFormatFunction = function(format, isServerRendered) {
      if (format.type) {
        if (isServerRendered) {
          format.isServerRendered = true;
        }
        return this.intl.getDateFormat(format);
      } else {
        return this.intl.getNumberFormat(format);
      }
    };
    ValueFormatter2.prototype.toView = function(value, format) {
      var result = value;
      if (!isNullOrUndefined(format) && !isNullOrUndefined(value)) {
        result = format(value);
      }
      return result;
    };
    ValueFormatter2.prototype.displayText = function(value, format, isServerRendered) {
      return this.toView(value, this.getFormatFunction(format, isServerRendered));
    };
    return ValueFormatter2;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/csv-helper.js
var CsvHelper = (
  /** @class */
  function() {
    function CsvHelper2(json, separator) {
      this.csvStr = "";
      if (separator === null || separator === void 0) {
        this.separator = ",";
      } else {
        this.separator = separator;
      }
      this.formatter = new ValueFormatter();
      this.isMicrosoftBrowser = !!navigator.msSaveBlob;
      if (json.isServerRendered !== null && json.isServerRendered !== void 0) {
        this.isServerRendered = json.isServerRendered;
      }
      if (json.styles !== null && json.styles !== void 0) {
        this.globalStyles = /* @__PURE__ */ new Map();
        for (var i = 0; i < json.styles.length; i++) {
          if (json.styles[i].name !== void 0 && json.styles[i].numberFormat !== void 0) {
            this.globalStyles.set(json.styles[i].name, json.styles[i].numberFormat);
          }
        }
      }
      if (json.worksheets !== null && json.worksheets !== void 0) {
        this.parseWorksheet(json.worksheets[0]);
      }
    }
    CsvHelper2.prototype.parseWorksheet = function(json) {
      if (json.rows !== null && json.rows !== void 0) {
        this.parseRows(json.rows);
      }
    };
    CsvHelper2.prototype.parseRows = function(rows) {
      var count = 1;
      for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
        var row = rows_1[_i];
        if (row.index !== null && row.index !== void 0) {
          while (count < row.index) {
            this.csvStr += "\r\n";
            count++;
          }
          this.parseRow(row);
        } else {
          throw Error("Row index is missing.");
        }
      }
      this.csvStr += "\r\n";
    };
    CsvHelper2.prototype.parseRow = function(row) {
      if (row.cells !== null && row.cells !== void 0) {
        var count = 1;
        for (var _i = 0, _a = row.cells; _i < _a.length; _i++) {
          var cell = _a[_i];
          if (cell.index !== null && cell.index !== void 0) {
            while (count < cell.index) {
              this.csvStr += this.separator;
              count++;
            }
            this.parseCell(cell);
          } else {
            throw Error("Cell index is missing.");
          }
        }
      }
    };
    CsvHelper2.prototype.parseCell = function(cell) {
      var csv = this.csvStr;
      if (cell.value !== void 0) {
        if (cell.value instanceof Date) {
          if (cell.style !== void 0 && cell.style.numberFormat !== void 0) {
            try {
              csv += this.parseCellValue(this.formatter.displayText(cell.value, { type: "dateTime", skeleton: cell.style.numberFormat }, this.isServerRendered));
            } catch (error) {
              csv += this.parseCellValue(this.formatter.displayText(cell.value, { type: "dateTime", format: cell.style.numberFormat }, this.isServerRendered));
            }
          } else if (cell.style !== void 0 && cell.style.name !== void 0 && this.globalStyles.has(cell.style.name)) {
            try {
              csv += this.parseCellValue(this.formatter.displayText(cell.value, { type: "dateTime", skeleton: this.globalStyles.get(cell.style.name) }, this.isServerRendered));
            } catch (error) {
              csv += this.parseCellValue(this.formatter.displayText(cell.value, { type: "dateTime", format: this.globalStyles.get(cell.style.name) }, this.isServerRendered));
            }
          } else {
            csv += cell.value;
          }
        } else if (typeof cell.value === "boolean") {
          csv += cell.value ? "TRUE" : "FALSE";
        } else if (typeof cell.value === "number") {
          if (cell.style !== void 0 && cell.style.numberFormat !== void 0) {
            csv += this.parseCellValue(this.formatter.displayText(cell.value, { format: cell.style.numberFormat, ignoreCurrency: true }, this.isServerRendered));
          } else if (cell.style !== void 0 && cell.style.name !== void 0 && this.globalStyles.has(cell.style.name)) {
            csv += this.parseCellValue(this.formatter.displayText(cell.value, { format: this.globalStyles.get(cell.style.name), ignoreCurrency: true }, this.isServerRendered));
          } else {
            csv += cell.value;
          }
        } else {
          csv += this.parseCellValue(cell.value);
        }
      }
      this.csvStr = csv;
    };
    CsvHelper2.prototype.parseCellValue = function(value) {
      var val = "";
      var length = value.length;
      for (var start = 0; start < length; start++) {
        if (value[start] === '"') {
          val += value[start].replace('"', '""');
        } else {
          val += value[start];
        }
      }
      value = val;
      if (value.indexOf(this.separator) !== -1 || value.indexOf("\n") !== -1 || value.indexOf('"') !== -1) {
        return value = '"' + value + '"';
      } else {
        return value;
      }
    };
    CsvHelper2.prototype.save = function(fileName) {
      this.buffer = new Blob(["\uFEFF" + this.csvStr], { type: "text/csv;charset=UTF-8" });
      if (this.isMicrosoftBrowser) {
        navigator.msSaveBlob(this.buffer, fileName);
      } else {
        var dataUrl_1 = window.URL.createObjectURL(this.buffer);
        var dwlLink = document.createElementNS("http://www.w3.org/1999/xhtml", "a");
        dwlLink.download = fileName;
        dwlLink.href = dataUrl_1;
        var event_1 = document.createEvent("MouseEvent");
        event_1.initEvent("click", true, true);
        dwlLink.dispatchEvent(event_1);
        setTimeout(function() {
          window.URL.revokeObjectURL(dataUrl_1);
        });
      }
    };
    CsvHelper2.prototype.saveAsBlob = function(encodingType) {
      if (encodingType != void 0) {
        var encoding = new Encoding();
        var encodeString = "UTF-8";
        if (encodingType.toUpperCase() == "ANSI") {
          encoding.type = "Ansi";
          encodeString = "ANSI";
        } else if (encodingType.toUpperCase() == "UNICODE") {
          encoding.type = "Unicode";
          encodeString = "UNICODE";
        } else {
          encoding.type = "Utf8";
          encodeString = "UTF-8";
        }
        var buffer = encoding.getBytes(this.csvStr, 0, this.csvStr.length);
        return new Blob([buffer], { type: "text/csv;charset=" + encodeString });
      } else
        return new Blob(["\uFEFF" + this.csvStr], { type: "text/csv;charset=UTF-8" });
    };
    return CsvHelper2;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/blob-helper.js
var BlobHelper = (
  /** @class */
  function() {
    function BlobHelper2() {
      this.parts = [];
    }
    BlobHelper2.prototype.append = function(part) {
      this.parts.push(part);
      this.blob = void 0;
    };
    BlobHelper2.prototype.getBlob = function() {
      return new Blob(this.parts, { type: "text/plain" });
    };
    return BlobHelper2;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/auto-filters.js
var AutoFilters = (
  /** @class */
  /* @__PURE__ */ function() {
    function AutoFilters2() {
    }
    return AutoFilters2;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/workbook.js
var Workbook = (
  /** @class */
  function() {
    function Workbook2(json, saveType, culture, currencyString, separator) {
      this.sharedStringCount = 0;
      this.unitsProportions = [
        96 / 75,
        96 / 300,
        96,
        96 / 25.4,
        96 / 2.54,
        1,
        96 / 72,
        96 / 72 / 12700
      ];
      this.hyperlinkStyle = { fontColor: "#0000FF", underline: true };
      if (culture !== void 0) {
        this.culture = culture;
      } else {
        this.culture = "en-US";
      }
      if (currencyString !== void 0) {
        this.currency = currencyString;
      } else {
        this.currency = "USD";
      }
      this.intl = new Internationalization(this.culture);
      this.mSaveType = saveType;
      if (saveType === "xlsx") {
        this.mArchive = new ZipArchive();
        this.sharedString = [];
        this.mFonts = [];
        this.mBorders = [];
        this.mStyles = [];
        this.printTitles = /* @__PURE__ */ new Map();
        this.cellStyles = /* @__PURE__ */ new Map();
        this.mNumFmt = /* @__PURE__ */ new Map();
        this.mFills = /* @__PURE__ */ new Map();
        this.mStyles.push(new CellStyle());
        this.mFonts.push(new Font());
        this.cellStyles.set("Normal", new CellStyles());
        this.mCellXfs = [];
        this.mCellStyleXfs = [];
        this.drawingCount = 0;
        this.imageCount = 0;
        if (json.styles !== null && json.styles !== void 0) {
          this.globalStyles = /* @__PURE__ */ new Map();
          for (var i = 0; i < json.styles.length; i++) {
            if (json.styles[i].name !== void 0) {
              if (!this.cellStyles.has(json.styles[i].name)) {
                var cellStyle = new CellStyle();
                cellStyle.isGlobalStyle = true;
                this.parserCellStyle(json.styles[i], cellStyle, "none");
                var cellStylesIn = new CellStyles();
                cellStylesIn.name = cellStyle.name;
                cellStylesIn.xfId = cellStyle.index - 1;
                this.cellStyles.set(cellStylesIn.name, cellStylesIn);
                var tFormat = {};
                if (json.styles[i].numberFormat !== void 0) {
                  tFormat.format = json.styles[i].numberFormat;
                }
                if (json.styles[i].type !== void 0) {
                  tFormat.type = json.styles[i].type;
                } else {
                  tFormat.type = "datetime";
                }
                if (tFormat.format !== void 0) {
                  this.globalStyles.set(json.styles[i].name, tFormat);
                }
              } else {
                throw Error("Style name " + json.styles[i].name + " is already existed");
              }
            }
          }
        }
        if (json.worksheets !== null && json.worksheets !== void 0) {
          this.parserWorksheets(json.worksheets);
        } else {
          throw Error("Worksheet is expected.");
        }
        if (json.builtInProperties !== null && json.builtInProperties !== void 0) {
          this.builtInProperties = new BuiltInProperties();
          this.parserBuiltInProperties(json.builtInProperties, this.builtInProperties);
        }
      } else {
        this.csvHelper = new CsvHelper(json, separator);
      }
    }
    Workbook2.prototype.parserBuiltInProperties = function(jsonBuiltInProperties, builtInProperties) {
      if (jsonBuiltInProperties.author !== null && jsonBuiltInProperties.author !== void 0) {
        builtInProperties.author = jsonBuiltInProperties.author;
      }
      if (jsonBuiltInProperties.comments !== null && jsonBuiltInProperties.comments !== void 0) {
        builtInProperties.comments = jsonBuiltInProperties.comments;
      }
      if (jsonBuiltInProperties.category !== null && jsonBuiltInProperties.category !== void 0) {
        builtInProperties.category = jsonBuiltInProperties.category;
      }
      if (jsonBuiltInProperties.company !== null && jsonBuiltInProperties.company !== void 0) {
        builtInProperties.company = jsonBuiltInProperties.company;
      }
      if (jsonBuiltInProperties.manager !== null && jsonBuiltInProperties.manager !== void 0) {
        builtInProperties.manager = jsonBuiltInProperties.manager;
      }
      if (jsonBuiltInProperties.subject !== null && jsonBuiltInProperties.subject !== void 0) {
        builtInProperties.subject = jsonBuiltInProperties.subject;
      }
      if (jsonBuiltInProperties.title !== null && jsonBuiltInProperties.title !== void 0) {
        builtInProperties.title = jsonBuiltInProperties.title;
      }
      if (jsonBuiltInProperties.createdDate !== null && jsonBuiltInProperties.createdDate !== void 0) {
        builtInProperties.createdDate = jsonBuiltInProperties.createdDate;
      }
      if (jsonBuiltInProperties.modifiedDate !== null && jsonBuiltInProperties.modifiedDate !== void 0) {
        builtInProperties.modifiedDate = jsonBuiltInProperties.modifiedDate;
      }
      if (jsonBuiltInProperties.tags !== null && jsonBuiltInProperties.tags !== void 0) {
        builtInProperties.tags = jsonBuiltInProperties.tags;
      }
      if (jsonBuiltInProperties.status !== null && jsonBuiltInProperties.status !== void 0) {
        builtInProperties.status = jsonBuiltInProperties.status;
      }
    };
    Workbook2.prototype.parserWorksheets = function(json) {
      this.worksheets = new Worksheets();
      var length = json.length;
      for (var i = 0; i < length; i++) {
        var jsonSheet = json[i];
        var sheet = new Worksheet();
        this.mergeCells = new MergeCells();
        this.mergedCellsStyle = /* @__PURE__ */ new Map();
        this.mHyperLinks = [];
        if (jsonSheet.name !== null && jsonSheet.name !== void 0) {
          sheet.name = jsonSheet.name;
        } else {
          sheet.name = "Sheet" + (i + 1).toString();
        }
        if (jsonSheet.enableRtl !== null && jsonSheet.enableRtl !== void 0) {
          sheet.enableRtl = jsonSheet.enableRtl;
        }
        sheet.index = i + 1;
        if (jsonSheet.columns !== null && jsonSheet.columns !== void 0) {
          this.parserColumns(jsonSheet.columns, sheet);
        }
        if (jsonSheet.rows !== null && jsonSheet.rows !== void 0) {
          this.parserRows(jsonSheet.rows, sheet);
        }
        if (jsonSheet.showGridLines !== null && jsonSheet.showGridLines !== void 0) {
          sheet.showGridLines = jsonSheet.showGridLines;
        }
        if (jsonSheet.freeze !== null && jsonSheet.freeze !== void 0) {
          this.parserFreezePanes(jsonSheet.freeze, sheet);
        }
        if (jsonSheet.printTitle !== null && jsonSheet.printTitle !== void 0) {
          this.parserPrintTitle(jsonSheet.printTitle, sheet);
        }
        if (jsonSheet.pageSetup !== void 0) {
          if (jsonSheet.pageSetup.isSummaryRowBelow !== void 0) {
            sheet.isSummaryRowBelow = jsonSheet.pageSetup.isSummaryRowBelow;
          }
        }
        if (jsonSheet.images !== void 0) {
          this.parserImages(jsonSheet.images, sheet);
        }
        if (jsonSheet.autoFilters !== null && jsonSheet.autoFilters !== void 0) {
          this.parseFilters(jsonSheet.autoFilters, sheet);
        }
        sheet.index = i + 1;
        sheet.mergeCells = this.mergeCells;
        sheet.hyperLinks = this.mHyperLinks;
        this.worksheets.push(sheet);
      }
    };
    Workbook2.prototype.mergeOptions = function(fromJson, toJson) {
      var result = {};
      this.applyProperties(fromJson, result);
      this.applyProperties(toJson, result);
      return result;
    };
    Workbook2.prototype.applyProperties = function(sourceJson, destJson) {
      var keys = Object.keys(sourceJson);
      for (var index = 0; index < keys.length; index++) {
        if (keys[index] !== "name") {
          destJson[keys[index]] = sourceJson[keys[index]];
        }
      }
    };
    Workbook2.prototype.getCellName = function(row, column) {
      return this.getColumnName(column) + row.toString();
    };
    Workbook2.prototype.getColumnName = function(col) {
      col--;
      var strColumnName = "";
      do {
        var iCurrentDigit = col % 26;
        col = col / 26 - 1;
        strColumnName = String.fromCharCode(65 + iCurrentDigit) + strColumnName;
      } while (col >= 0);
      return strColumnName;
    };
    Workbook2.prototype.parserPrintTitle = function(json, sheet) {
      var printTitleName = "";
      var titleRowName;
      if (json.fromRow !== null && json.fromRow !== void 0) {
        var fromRow = json.fromRow;
        var toRow = void 0;
        if (json.toRow !== null && json.toRow !== void 0) {
          toRow = json.toRow;
        } else {
          toRow = json.fromRow;
        }
        titleRowName = "$" + fromRow + ":$" + toRow;
      }
      var titleColName;
      if (json.fromColumn !== null && json.fromColumn !== void 0) {
        var fromColumn = json.fromColumn;
        var toColumn = void 0;
        if (json.toColumn !== null && json.toColumn !== void 0) {
          toColumn = json.toColumn;
        } else {
          toColumn = json.fromColumn;
        }
        titleColName = "$" + this.getColumnName(fromColumn) + ":$" + this.getColumnName(toColumn);
      }
      if (titleRowName !== void 0) {
        printTitleName += sheet.name + "!" + titleRowName;
      }
      if (titleColName !== void 0 && titleRowName !== void 0) {
        printTitleName += "," + (sheet.name + "!" + titleColName);
      } else if (titleColName !== void 0) {
        printTitleName += sheet.name + "!" + titleColName;
      }
      if (printTitleName !== "") {
        this.printTitles.set(sheet.index - 1, printTitleName);
      }
    };
    Workbook2.prototype.parserFreezePanes = function(json, sheet) {
      sheet.freezePanes = new FreezePane();
      if (json.row !== null && json.row !== void 0) {
        sheet.freezePanes.row = json.row;
      } else {
        sheet.freezePanes.row = 0;
      }
      if (json.column !== null && json.column !== void 0) {
        sheet.freezePanes.column = json.column;
      } else {
        sheet.freezePanes.column = 0;
      }
      sheet.freezePanes.leftCell = this.getCellName(sheet.freezePanes.row + 1, sheet.freezePanes.column + 1);
    };
    Workbook2.prototype.parserColumns = function(json, sheet) {
      var columnsLength = json.length;
      sheet.columns = [];
      for (var column = 0; column < columnsLength; column++) {
        var col = new Column();
        if (json[column].index !== null && json[column].index !== void 0) {
          col.index = json[column].index;
        } else {
          throw Error("Column index is missing.");
        }
        if (json[column].width !== null && json[column].width !== void 0) {
          col.width = json[column].width;
        }
        sheet.columns.push(col);
      }
    };
    Workbook2.prototype.parserRows = function(json, sheet) {
      var rowsLength = json.length;
      sheet.rows = new Rows();
      var rowId = 0;
      for (var r = 0; r < rowsLength; r++) {
        var row = this.parserRow(json[r], rowId);
        rowId = row.index;
        sheet.rows.add(row);
      }
      this.insertMergedCellsStyle(sheet);
    };
    Workbook2.prototype.insertMergedCellsStyle = function(sheet) {
      var _this = this;
      if (this.mergeCells.length > 0) {
        this.mergedCellsStyle.forEach(function(value, key) {
          var row = sheet.rows.filter(function(item) {
            return item.index === value.y;
          })[0];
          if (!isNullOrUndefined(row)) {
            var cell = row.cells.filter(function(item) {
              return item.index === value.x;
            })[0];
            if (!isNullOrUndefined(cell)) {
              cell.styleIndex = value.styleIndex;
            } else {
              var cells = row.cells.filter(function(item) {
                return item.index <= value.x;
              });
              var insertIndex = 0;
              if (cells.length > 0) {
                insertIndex = row.cells.indexOf(cells[cells.length - 1]) + 1;
              }
              row.cells.splice(insertIndex, 0, _this.createCell(value, key));
            }
          } else {
            var rows = sheet.rows.filter(function(item) {
              return item.index <= value.y;
            });
            var rowToInsert = new Row();
            rowToInsert.index = value.y;
            rowToInsert.cells = new Cells();
            rowToInsert.cells.add(_this.createCell(value, key));
            var insertIndex = 0;
            if (rows.length > 0) {
              insertIndex = sheet.rows.indexOf(rows[rows.length - 1]) + 1;
            }
            sheet.rows.splice(insertIndex, 0, rowToInsert);
          }
        });
      }
    };
    Workbook2.prototype.createCell = function(value, key) {
      var cellToInsert = new Cell();
      cellToInsert.refName = key;
      cellToInsert.index = value.x;
      cellToInsert.cellStyle = new CellStyle();
      cellToInsert.styleIndex = value.styleIndex;
      return cellToInsert;
    };
    Workbook2.prototype.parserRow = function(json, rowIndex) {
      var row = new Row();
      if (json.height !== null && json.height !== void 0) {
        row.height = json.height;
      }
      if (json.index !== null && json.index !== void 0) {
        row.index = json.index;
      } else {
        throw Error("Row index is missing.");
      }
      if (json.grouping !== null && json.grouping !== void 0) {
        this.parseGrouping(json.grouping, row);
      }
      this.parseCells(json.cells, row);
      return row;
    };
    Workbook2.prototype.parseGrouping = function(json, row) {
      row.grouping = new Grouping();
      if (json.outlineLevel !== void 0) {
        row.grouping.outlineLevel = json.outlineLevel;
      }
      if (json.isCollapsed !== void 0) {
        row.grouping.isCollapsed = json.isCollapsed;
      }
      if (json.isHidden !== void 0) {
        row.grouping.isHidden = json.isHidden;
      }
    };
    Workbook2.prototype.parseCells = function(json, row) {
      row.cells = new Cells();
      var cellsLength = json !== void 0 ? json.length : 0;
      var spanMin = 1;
      var spanMax = 1;
      var curCellIndex = 0;
      for (var cellId = 0; cellId < cellsLength; cellId++) {
        var jsonCell = json[cellId];
        var cell = new Cell();
        if (jsonCell.index !== null && jsonCell.index !== void 0) {
          cell.index = jsonCell.index;
        } else {
          throw Error("Cell index is missing.");
        }
        if (cell.index < spanMin) {
          spanMin = cell.index;
        } else if (cell.index > spanMax) {
          spanMax = cell.index;
        }
        cell.refName = this.getCellName(row.index, cell.index);
        if (jsonCell.rowSpan !== null && jsonCell.rowSpan !== void 0) {
          cell.rowSpan = jsonCell.rowSpan - 1;
        } else {
          cell.rowSpan = 0;
        }
        if (jsonCell.colSpan !== null && jsonCell.colSpan !== void 0) {
          cell.colSpan = jsonCell.colSpan - 1;
        } else {
          cell.colSpan = 0;
        }
        if (jsonCell.hyperlink !== null && jsonCell.hyperlink !== void 0) {
          var hyperLink = new HyperLink();
          if (jsonCell.hyperlink.target !== void 0) {
            hyperLink.target = jsonCell.hyperlink.target;
            if (jsonCell.hyperlink.displayText !== void 0) {
              cell.value = jsonCell.hyperlink.displayText;
            } else {
              cell.value = jsonCell.hyperlink.target;
            }
            cell.type = this.getCellValueType(cell.value);
            hyperLink.ref = cell.refName;
            hyperLink.rId = this.mHyperLinks.length + 1;
            this.mHyperLinks.push(hyperLink);
            cell.cellStyle = new CellStyle();
            this.parserCellStyle(jsonCell.style !== void 0 ? this.mergeOptions(jsonCell.style, this.hyperlinkStyle) : this.hyperlinkStyle, cell.cellStyle, "string");
            cell.styleIndex = cell.cellStyle.index;
          }
        }
        if (jsonCell.formula !== null && jsonCell.formula !== void 0) {
          cell.formula = jsonCell.formula;
          cell.type = "formula";
        }
        if (jsonCell.value !== null && jsonCell.value !== void 0) {
          if (cell.formula !== void 0) {
            cell.value = 0;
          } else {
            cell.value = jsonCell.value;
            cell.type = this.getCellValueType(cell.value);
          }
        }
        if (jsonCell.style !== null && jsonCell.style !== void 0 && cell.styleIndex === void 0) {
          cell.cellStyle = new CellStyle();
          if (cell.value instanceof Date) {
            this.parserCellStyle(jsonCell.style, cell.cellStyle, cell.type, 14);
          } else {
            this.parserCellStyle(jsonCell.style, cell.cellStyle, cell.type);
          }
          cell.styleIndex = cell.cellStyle.index;
        } else if (cell.value instanceof Date) {
          cell.cellStyle = new CellStyle();
          this.parserCellStyle({}, cell.cellStyle, cell.type, 14);
          cell.styleIndex = cell.cellStyle.index;
        }
        this.parseCellType(cell);
        this.mergeCells = this.processMergeCells(cell, row.index, this.mergeCells);
        row.cells.add(cell);
        curCellIndex = cell.index + 1;
      }
      row.spans = spanMin + ":" + spanMax;
    };
    Workbook2.prototype.GetColors = function() {
      var colors;
      colors = /* @__PURE__ */ new Map();
      colors.set("WHITE", "FFFFFFFF");
      colors.set("SILVER", "FFC0C0C0");
      colors.set("GRAY", "FF808080");
      colors.set("BLACK", "FF000000");
      colors.set("RED", "FFFF0000");
      colors.set("MAROON", "FF800000");
      colors.set("YELLOW", "FFFFFF00");
      colors.set("OLIVE", "FF808000");
      colors.set("LIME", "FF00FF00");
      colors.set("GREEN", "FF008000");
      colors.set("AQUA", "FF00FFFF");
      colors.set("TEAL", "FF008080");
      colors.set("BLUE", "FF0000FF");
      colors.set("NAVY", "FF000080");
      colors.set("FUCHSIA", "FFFF00FF");
      colors.set("PURPLE", "FF800080");
      return colors;
    };
    Workbook2.prototype.processColor = function(colorVal) {
      if (colorVal.indexOf("#") === 0) {
        return colorVal.replace("#", "FF");
      }
      colorVal = colorVal.toUpperCase();
      this.rgbColors = this.GetColors();
      if (this.rgbColors.has(colorVal)) {
        colorVal = this.rgbColors.get(colorVal);
      } else {
        colorVal = "FF000000";
      }
      return colorVal;
    };
    Workbook2.prototype.processCellValue = function(value, cell) {
      var cellValue = value;
      if (value.indexOf("<font") !== -1 || value.indexOf("<a") !== -1 || value.indexOf("<b>") !== -1 || value.indexOf("<i>") !== -1 || value.indexOf("<u>") !== -1) {
        var processedVal = "";
        var startindex = value.indexOf("<", 0);
        var endIndex = value.indexOf(">", startindex + 1);
        if (startindex >= 0 && endIndex >= 0) {
          if (startindex !== 0) {
            processedVal += '<r><t xml:space="preserve">' + this.processString(value.substring(0, startindex)) + "</t></r>";
          }
          while (startindex >= 0 && endIndex >= 0) {
            endIndex = value.indexOf(">", startindex + 1);
            if (endIndex >= 0) {
              var subString = value.substring(startindex + 1, endIndex);
              startindex = value.indexOf("<", endIndex + 1);
              if (startindex < 0) {
                startindex = cellValue.length;
              }
              var text = cellValue.substring(endIndex + 1, startindex);
              if (text.length !== 0) {
                var subSplit = subString.split(" ");
                if (subSplit.length > 0) {
                  processedVal += "<r><rPr>";
                }
                if (subSplit.length > 1) {
                  for (var _i = 0, subSplit_1 = subSplit; _i < subSplit_1.length; _i++) {
                    var element = subSplit_1[_i];
                    var start = element.trim().substring(0, 5);
                    switch (start) {
                      case "size=":
                        processedVal += '<sz val="' + element.substring(6, element.length - 1) + '"/>';
                        break;
                      case "face=":
                        processedVal += '<rFont val="' + element.substring(6, element.length - 1) + '"/>';
                        break;
                      case "color":
                        processedVal += '<color rgb="' + this.processColor(element.substring(7, element.length - 1)) + '"/>';
                        break;
                      case "href=":
                        var hyperLink = new HyperLink();
                        hyperLink.target = element.substring(6, element.length - 1).trim();
                        hyperLink.ref = cell.refName;
                        hyperLink.rId = this.mHyperLinks.length + 1;
                        this.mHyperLinks.push(hyperLink);
                        processedVal += '<color rgb="FF0000FF"/><u/><b/>';
                        break;
                    }
                  }
                } else if (subSplit.length === 1) {
                  var style = subSplit[0].trim();
                  switch (style) {
                    case "b":
                      processedVal += "<b/>";
                      break;
                    case "i":
                      processedVal += "<i/>";
                      break;
                    case "u":
                      processedVal += "<u/>";
                      break;
                  }
                }
                processedVal += '</rPr><t xml:space="preserve">' + this.processString(text) + "</t></r>";
              }
            }
          }
          if (processedVal === "") {
            return cellValue;
          }
          return processedVal;
        } else {
          return cellValue;
        }
      } else {
        return cellValue;
      }
    };
    Workbook2.prototype.applyGlobalStyle = function(json, cellStyle) {
      var index = 0;
      if (this.cellStyles.has(json.name)) {
        cellStyle.index = this.mStyles.filter(function(a) {
          return a.name === json.name;
        })[0].index;
        cellStyle.name = json.name;
      }
    };
    Workbook2.prototype.parserCellStyle = function(json, cellStyle, cellType, defStyleIndex) {
      if (json.name !== null && json.name !== void 0) {
        if (cellStyle.isGlobalStyle) {
          cellStyle.name = json.name;
        } else {
          this.applyGlobalStyle(json, cellStyle);
          return;
        }
      }
      if (json.backColor !== null && json.backColor !== void 0) {
        cellStyle.backColor = json.backColor;
      }
      cellStyle.borders = new Borders();
      if (json.borders !== null && json.borders !== void 0) {
        this.parserBorder(json.borders, cellStyle.borders.all);
      }
      if (json.leftBorder !== null && json.leftBorder !== void 0) {
        this.parserBorder(json.leftBorder, cellStyle.borders.left);
      }
      if (json.rightBorder !== null && json.rightBorder !== void 0) {
        this.parserBorder(json.rightBorder, cellStyle.borders.right);
      }
      if (json.topBorder !== null && json.topBorder !== void 0) {
        this.parserBorder(json.topBorder, cellStyle.borders.top);
      }
      if (json.bottomBorder !== null && json.bottomBorder !== void 0) {
        this.parserBorder(json.bottomBorder, cellStyle.borders.bottom);
      }
      if (json.fontName !== null && json.fontName !== void 0) {
        cellStyle.fontName = json.fontName;
      }
      if (json.fontSize !== null && json.fontSize !== void 0) {
        cellStyle.fontSize = json.fontSize;
      }
      if (json.fontColor !== null && json.fontColor !== void 0) {
        cellStyle.fontColor = json.fontColor;
      }
      if (json.italic !== null && json.italic !== void 0) {
        cellStyle.italic = json.italic;
      }
      if (json.bold !== null && json.bold !== void 0) {
        cellStyle.bold = json.bold;
      }
      if (json.hAlign !== null && json.hAlign !== void 0) {
        cellStyle.hAlign = json.hAlign.toLowerCase();
      }
      if (json.indent !== null && json.indent !== void 0) {
        cellStyle.indent = json.indent;
        if (!(cellStyle.hAlign === "left" || cellStyle.hAlign === "right")) {
          cellStyle.hAlign = "left";
        }
      }
      if (json.rotation !== null && json.rotation !== void 0) {
        cellStyle.rotation = json.rotation;
      }
      if (json.vAlign !== null && json.vAlign !== void 0) {
        cellStyle.vAlign = json.vAlign.toLowerCase();
      }
      if (json.underline !== null && json.underline !== void 0) {
        cellStyle.underline = json.underline;
      }
      if (json.strikeThrough !== null && json.strikeThrough !== void 0) {
        cellStyle.strikeThrough = json.strikeThrough;
      }
      if (json.wrapText !== null && json.wrapText !== void 0) {
        cellStyle.wrapText = json.wrapText;
      }
      if (json.numberFormat !== null && json.numberFormat !== void 0) {
        if (json.type !== null && json.type !== void 0) {
          cellStyle.numberFormat = this.getNumberFormat(json.numberFormat, json.type);
        } else {
          cellStyle.numberFormat = this.getNumberFormat(json.numberFormat, cellType);
        }
      } else if (defStyleIndex !== void 0) {
        cellStyle.numFmtId = 14;
        cellStyle.numberFormat = "GENERAL";
      } else {
        cellStyle.numberFormat = "GENERAL";
      }
      cellStyle.index = this.processCellStyle(cellStyle);
    };
    Workbook2.prototype.switchNumberFormat = function(numberFormat, type) {
      var format = this.getNumberFormat(numberFormat, type);
      if (format !== numberFormat) {
        var numFmt = this.mNumFmt.get(numberFormat);
        if (numFmt !== void 0) {
          numFmt.formatCode = format;
          if (this.mNumFmt.has(format)) {
            for (var _i = 0, _a = this.mCellStyleXfs; _i < _a.length; _i++) {
              var cellStyleXfs = _a[_i];
              if (cellStyleXfs.numFmtId === numFmt.numFmtId) {
                cellStyleXfs.numFmtId = this.mNumFmt.get(format).numFmtId;
              }
            }
            for (var _b = 0, _c = this.mCellXfs; _b < _c.length; _b++) {
              var cellXfs = _c[_b];
              if (cellXfs.numFmtId === numFmt.numFmtId) {
                cellXfs.numFmtId = this.mNumFmt.get(format).numFmtId;
              }
            }
          }
        }
      }
    };
    Workbook2.prototype.changeNumberFormats = function(value) {
      if (typeof value == "string") {
        var regex = new RegExp(this.currency, "g");
        value = value.replace(regex, "[$" + this.currency + "]");
      } else if (typeof value == "object") {
        for (var i = 0; i < value.length; i++) {
          value[i] = value[i].replace(this.currency, "[$" + this.currency + "]");
        }
      }
      return value;
    };
    Workbook2.prototype.getNumberFormat = function(numberFormat, type) {
      var returnFormat;
      switch (type) {
        case "number":
          try {
            returnFormat = this.intl.getNumberPattern({ format: numberFormat, currency: this.currency, useGrouping: true }, true);
            if (this.currency.length > 1) {
              returnFormat = this.changeNumberFormats(returnFormat);
            }
          } catch (error) {
            returnFormat = numberFormat;
          }
          break;
        case "datetime":
          try {
            returnFormat = this.intl.getDatePattern({ skeleton: numberFormat, type: "dateTime" }, true);
          } catch (error) {
            try {
              returnFormat = this.intl.getDatePattern({ format: numberFormat, type: "dateTime" }, true);
            } catch (error2) {
              returnFormat = numberFormat;
            }
          }
          break;
        case "date":
          try {
            returnFormat = this.intl.getDatePattern({ skeleton: numberFormat, type: "date" }, true);
          } catch (error) {
            try {
              returnFormat = this.intl.getDatePattern({ format: numberFormat, type: "date" }, true);
            } catch (error2) {
              returnFormat = numberFormat;
            }
          }
          break;
        case "time":
          try {
            returnFormat = this.intl.getDatePattern({ skeleton: numberFormat, type: "time" }, true);
          } catch (error) {
            try {
              returnFormat = this.intl.getDatePattern({ format: numberFormat, type: "time" }, true);
            } catch (error2) {
              returnFormat = numberFormat;
            }
          }
          break;
        default:
          returnFormat = numberFormat;
          break;
      }
      return returnFormat;
    };
    Workbook2.prototype.parserBorder = function(json, border) {
      if (json.color !== null && json.color !== void 0) {
        border.color = json.color;
      } else {
        border.color = "#000000";
      }
      if (json.lineStyle !== null && json.lineStyle !== void 0) {
        border.lineStyle = json.lineStyle;
      } else {
        border.lineStyle = "thin";
      }
    };
    Workbook2.prototype.processCellStyle = function(style) {
      if (style.isGlobalStyle) {
        this.processNumFormatId(style);
        this.mStyles.push(style);
        return this.mStyles.length;
      } else {
        var compareResult = this.compareStyle(style);
        if (!compareResult.result) {
          this.processNumFormatId(style);
          this.mStyles.push(style);
          return this.mStyles.length;
        } else {
          return compareResult.index;
        }
      }
    };
    Workbook2.prototype.processNumFormatId = function(style) {
      if (style.numberFormat !== "GENERAL" && !this.mNumFmt.has(style.numberFormat)) {
        var id = this.mNumFmt.size + 164;
        this.mNumFmt.set(style.numberFormat, new NumFmt(id, style.numberFormat));
      }
    };
    Workbook2.prototype.isNewFont = function(toCompareStyle) {
      var result = false;
      var index = 0;
      for (var _i = 0, _a = this.mFonts; _i < _a.length; _i++) {
        var font = _a[_i];
        index++;
        var fontColor = void 0;
        if (toCompareStyle.fontColor !== void 0) {
          fontColor = "FF" + toCompareStyle.fontColor.replace("#", "");
        }
        result = font.color === fontColor && font.b === toCompareStyle.bold && font.i === toCompareStyle.italic && font.u === toCompareStyle.underline && font.strike === toCompareStyle.strikeThrough && font.name === toCompareStyle.fontName && font.sz === toCompareStyle.fontSize;
        if (result) {
          break;
        }
      }
      index = index - 1;
      return { index, result };
    };
    Workbook2.prototype.isNewBorder = function(toCompareStyle) {
      var bStyle = new CellStyle();
      if (this.isAllBorder(toCompareStyle.borders)) {
        return bStyle.borders.all.color === toCompareStyle.borders.all.color && bStyle.borders.all.lineStyle === toCompareStyle.borders.all.lineStyle;
      } else {
        return bStyle.borders.left.color === toCompareStyle.borders.left.color && bStyle.borders.left.lineStyle === toCompareStyle.borders.left.lineStyle && bStyle.borders.right.color === toCompareStyle.borders.right.color && bStyle.borders.right.lineStyle === toCompareStyle.borders.right.lineStyle && bStyle.borders.top.color === toCompareStyle.borders.top.color && bStyle.borders.top.lineStyle === toCompareStyle.borders.top.lineStyle && bStyle.borders.bottom.color === toCompareStyle.borders.bottom.color && bStyle.borders.bottom.lineStyle === toCompareStyle.borders.bottom.lineStyle;
      }
    };
    Workbook2.prototype.isAllBorder = function(toCompareBorder) {
      var allBorderStyle = new CellStyle();
      return allBorderStyle.borders.all.color !== toCompareBorder.all.color && allBorderStyle.borders.all.lineStyle !== toCompareBorder.all.lineStyle;
    };
    Workbook2.prototype.compareStyle = function(toCompareStyle) {
      var result = true;
      var index = 0;
      var globalStyleIndex = 0;
      for (var _i = 0, _a = this.mStyles; _i < _a.length; _i++) {
        var baseStyle = _a[_i];
        result = baseStyle.isGlobalStyle ? false : baseStyle.backColor === toCompareStyle.backColor && baseStyle.bold === toCompareStyle.bold && baseStyle.numFmtId === toCompareStyle.numFmtId && baseStyle.numberFormat === toCompareStyle.numberFormat && baseStyle.type === toCompareStyle.type && baseStyle.fontColor === toCompareStyle.fontColor && baseStyle.fontName === toCompareStyle.fontName && baseStyle.fontSize === toCompareStyle.fontSize && baseStyle.hAlign === toCompareStyle.hAlign && baseStyle.italic === toCompareStyle.italic && baseStyle.underline === toCompareStyle.underline && baseStyle.strikeThrough === toCompareStyle.strikeThrough && baseStyle.vAlign === toCompareStyle.vAlign && baseStyle.indent === toCompareStyle.indent && baseStyle.rotation === toCompareStyle.rotation && baseStyle.wrapText === toCompareStyle.wrapText && (baseStyle.borders.all.color === toCompareStyle.borders.all.color && baseStyle.borders.all.lineStyle === toCompareStyle.borders.all.lineStyle) && (baseStyle.borders.left.color === toCompareStyle.borders.left.color && baseStyle.borders.left.lineStyle === toCompareStyle.borders.left.lineStyle && baseStyle.borders.right.color === toCompareStyle.borders.right.color && baseStyle.borders.right.lineStyle === toCompareStyle.borders.right.lineStyle && baseStyle.borders.top.color === toCompareStyle.borders.top.color && baseStyle.borders.top.lineStyle === toCompareStyle.borders.top.lineStyle && baseStyle.borders.bottom.color === toCompareStyle.borders.bottom.color && baseStyle.borders.bottom.lineStyle === toCompareStyle.borders.bottom.lineStyle);
        if (result) {
          index = baseStyle.index;
          break;
        }
      }
      return { index, result };
    };
    Workbook2.prototype.contains = function(array, item) {
      var index = array.indexOf(item);
      return index > -1 && index < array.length;
    };
    Workbook2.prototype.getCellValueType = function(value) {
      if (value instanceof Date) {
        return "datetime";
      } else if (typeof value === "boolean") {
        return "boolean";
      } else if (typeof value === "number") {
        return "number";
      } else {
        return "string";
      }
    };
    Workbook2.prototype.parseCellType = function(cell) {
      var type = cell.type;
      var saveType;
      var value = cell.value;
      switch (type) {
        case "datetime":
          value = this.toOADate(value);
          if (cell.cellStyle !== void 0 && cell.cellStyle.name !== void 0) {
            if (this.globalStyles.has(cell.cellStyle.name)) {
              var value_1 = this.globalStyles.get(cell.cellStyle.name);
              this.switchNumberFormat(value_1.format, value_1.type);
            }
          }
          saveType = "n";
          break;
        case "boolean":
          value = value ? 1 : 0;
          saveType = "b";
          break;
        case "number":
          saveType = "n";
          if (cell.cellStyle !== void 0 && cell.cellStyle.name !== void 0) {
            if (this.globalStyles.has(cell.cellStyle.name)) {
              this.switchNumberFormat(this.globalStyles.get(cell.cellStyle.name).format, "number");
            }
          }
          break;
        case "string":
          this.sharedStringCount++;
          saveType = "s";
          var sstvalue = this.processCellValue(value, cell);
          if (!this.contains(this.sharedString, sstvalue)) {
            this.sharedString.push(sstvalue);
          }
          value = this.sharedString.indexOf(sstvalue);
          break;
        default:
          break;
      }
      cell.saveType = saveType;
      cell.value = value;
    };
    Workbook2.prototype.parserImages = function(json, sheet) {
      var imagesLength = json.length;
      sheet.images = [];
      var imageId = 0;
      for (var p = 0; p < imagesLength; p++) {
        var image = this.parserImage(json[p]);
        sheet.images.push(image);
      }
    };
    Workbook2.prototype.parseFilters = function(json, sheet) {
      sheet.autoFilters = new AutoFilters();
      if (json.row !== null && json.row !== void 0)
        sheet.autoFilters.row = json.row;
      else
        throw new Error("Argument Null Exception: row null or empty");
      if (json.lastRow !== null && json.lastRow !== void 0)
        sheet.autoFilters.lastRow = json.lastRow;
      else
        throw new Error("Argument Null Exception: lastRow cannot be null or empty");
      if (json.column !== null && json.column !== void 0)
        sheet.autoFilters.column = json.column;
      else
        throw new Error("Argument Null Exception: column cannot be null or empty");
      if (json.lastColumn !== null && json.row !== void 0)
        sheet.autoFilters.lastColumn = json.lastColumn;
      else
        throw new Error("Argument Null Exception: lastColumn cannot be null or empty");
    };
    Workbook2.prototype.parserImage = function(json) {
      var image = new Image();
      if (json.image !== null && json.image !== void 0) {
        image.image = json.image;
      }
      if (json.row !== null && json.row !== void 0) {
        image.row = json.row;
      }
      if (json.column !== null && json.column !== void 0) {
        image.column = json.column;
      }
      if (json.lastRow !== null && json.lastRow !== void 0) {
        image.lastRow = json.lastRow;
      }
      if (json.lastColumn !== null && json.lastColumn !== void 0) {
        image.lastColumn = json.lastColumn;
      }
      if (json.width !== null && json.width !== void 0) {
        image.width = json.width;
      }
      if (json.height !== null && json.height !== void 0) {
        image.height = json.height;
      }
      if (json.horizontalFlip !== null && json.horizontalFlip !== void 0) {
        image.horizontalFlip = json.horizontalFlip;
      }
      if (json.verticalFlip !== null && json.verticalFlip !== void 0) {
        image.verticalFlip = json.verticalFlip;
      }
      if (json.rotation !== null && json.rotation !== void 0) {
        image.rotation = json.rotation;
      }
      return image;
    };
    Workbook2.prototype.saveAsBlob = function(blobSaveType, encodingType) {
      var _this = this;
      switch (blobSaveType) {
        case "text/csv":
          return new Promise(function(resolve, reject) {
            var obj = {};
            obj.blobData = _this.csvHelper.saveAsBlob(encodingType);
            resolve(obj);
          });
        default:
          return new Promise(function(resolve, reject) {
            _this.saveInternal();
            _this.mArchive.saveAsBlob().then(function(blob) {
              var obj = {};
              obj.blobData = new Blob([blob], { type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" });
              resolve(obj);
            });
          });
      }
    };
    Workbook2.prototype.save = function(fileName, proxyUrl) {
      var _this = this;
      if (fileName === null || fileName === void 0 || fileName === "") {
        throw new Error("Argument Null Exception: fileName cannot be null or empty");
      }
      var xlsxMatch = fileName.match(".xlsx$");
      var csvMatch = fileName.match(".csv$");
      if (xlsxMatch !== null && xlsxMatch[0] === "." + this.mSaveType) {
        this.saveInternal();
        this.mArchive.save(fileName).then(function() {
          _this.mArchive.destroy();
        });
      } else if (csvMatch !== null && csvMatch[0] === "." + this.mSaveType) {
        this.csvHelper.save(fileName);
      } else {
        throw Error("Save type and file extension is different.");
      }
    };
    Workbook2.prototype.saveInternal = function() {
      this.saveWorkbook();
      this.saveWorksheets();
      this.saveSharedString();
      this.saveStyles();
      this.saveApp(this.builtInProperties);
      this.saveCore(this.builtInProperties);
      this.saveContentType();
      this.saveTopLevelRelation();
      this.saveWorkbookRelation();
    };
    Workbook2.prototype.saveWorkbook = function() {
      var workbookTemp = '<?xml version="1.0" encoding="utf-8"?><workbook xmlns:r = "http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns= "http://schemas.openxmlformats.org/spreadsheetml/2006/main"><workbookPr codeName="ThisWorkbook" defaultThemeVersion= "153222"/><bookViews><workbookView activeTab="0"/></bookViews>';
      var sheets = "<sheets>";
      var length = this.worksheets.length;
      for (var i = 0; i < length; i++) {
        var sheetName = this.worksheets[i].name;
        sheetName = sheetName.replace("&", "&amp;");
        sheetName = sheetName.replace("<", "&lt;");
        sheetName = sheetName.replace(">", "&gt;");
        sheetName = sheetName.replace('"', "&quot;");
        sheets += '<sheet name="' + sheetName + '" sheetId="' + (i + 1).toString() + '" r:id ="rId' + (i + 1).toString() + '" />';
      }
      sheets += "</sheets>";
      workbookTemp += sheets;
      if (this.printTitles.size > 0) {
        var printTitle_1 = "<definedNames>";
        this.printTitles.forEach(function(value, key) {
          printTitle_1 += '<definedName name="_xlnm.Print_Titles" localSheetId="' + key + '">' + value + "</definedName>";
        });
        printTitle_1 += "</definedNames>";
        workbookTemp += printTitle_1;
      }
      this.addToArchive(workbookTemp + "</workbook>", "xl/workbook.xml");
    };
    Workbook2.prototype.saveWorksheets = function() {
      var length = this.worksheets.length;
      for (var i = 0; i < length; i++) {
        this.saveWorksheet(this.worksheets[i], i);
      }
    };
    Workbook2.prototype.saveWorksheet = function(sheet, index) {
      var sheetBlob = new BlobHelper();
      var sheetString = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><worksheet xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns:x14="http://schemas.microsoft.com/office/spreadsheetml/2009/9/main" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main">';
      if (!sheet.isSummaryRowBelow) {
        sheetString += '<sheetPr><outlinePr summaryBelow="0" ></outlinePr></sheetPr>';
      } else {
        sheetString += "<sheetPr />";
      }
      sheetString += this.saveSheetView(sheet);
      if (sheet.columns !== void 0) {
        var colString = "<cols>";
        for (var _i = 0, _a = sheet.columns; _i < _a.length; _i++) {
          var column = _a[_i];
          if (column.width !== void 0) {
            colString += '<col min="' + column.index + '" max="' + column.index + '" width="' + this.pixelsToColumnWidth(column.width) + '" customWidth="1" />';
          } else {
            colString += '<col min="' + column.index + '" max="' + column.index + '" width="8.43" customWidth="1" />';
          }
        }
        sheetString += colString + "</cols>";
      }
      sheetString += "<sheetData>";
      sheetBlob.append(sheetString);
      sheetString = "";
      if (sheet.rows !== void 0) {
        for (var _b = 0, _c = sheet.rows; _b < _c.length; _b++) {
          var row = _c[_b];
          var rowString = '<row r="' + row.index + '" ';
          if (!isNullOrUndefined(row.spans)) {
            rowString += 'spans="' + row.spans + '" ';
          }
          if (row.height !== void 0) {
            rowString += 'ht="' + this.pixelsToRowHeight(row.height) + '" customHeight="1" ';
          }
          if (row.grouping !== void 0) {
            if (row.grouping.isHidden) {
              rowString += 'hidden="1" ';
            }
            if (row.grouping.outlineLevel !== void 0) {
              rowString += 'outlineLevel="' + row.grouping.outlineLevel + '" ';
            }
            if (row.grouping.isCollapsed) {
              rowString += 'collapsed="1" ';
            }
          }
          rowString += ">";
          for (var _d = 0, _e = row.cells; _d < _e.length; _d++) {
            var cell = _e[_d];
            if (cell !== void 0 && (cell.value !== void 0 || cell.cellStyle !== void 0)) {
              rowString += '<c r="' + cell.refName + '" ';
              if (cell.saveType !== void 0) {
                rowString += 't="' + cell.saveType + '" ';
              }
              if (cell.styleIndex !== void 0) {
                rowString += 's="' + cell.styleIndex + '" ';
              }
              rowString += " >";
              if (cell.formula !== void 0) {
                rowString += "<f>" + cell.formula + "</f>";
              }
              if (cell.value !== void 0) {
                rowString += "<v>" + cell.value + "</v></c>";
              } else {
                rowString += "</c>";
              }
            }
          }
          rowString += "</row>";
          sheetBlob.append(rowString);
        }
      }
      sheetString += "</sheetData>";
      if (sheet.autoFilters !== null && sheet.autoFilters !== void 0)
        sheetString += '<autoFilter ref="' + this.getCellName(sheet.autoFilters.row, sheet.autoFilters.column) + ":" + this.getCellName(sheet.autoFilters.lastRow, sheet.autoFilters.lastColumn) + '"/>';
      if (sheet.mergeCells.length > 0) {
        sheetString += '<mergeCells count="' + sheet.mergeCells.length + '">';
        for (var _f = 0, _g = sheet.mergeCells; _f < _g.length; _f++) {
          var mCell = _g[_f];
          sheetString += '<mergeCell ref="' + mCell.ref + '" />';
        }
        sheetString += "</mergeCells>";
      }
      if (sheet.hyperLinks.length > 0) {
        sheetString += "<hyperlinks>";
        for (var _h = 0, _j = sheet.hyperLinks; _h < _j.length; _h++) {
          var hLink = _j[_h];
          sheetString += '<hyperlink ref="' + hLink.ref + '" r:id="rId' + hLink.rId + '" />';
        }
        sheetString += "</hyperlinks>";
      }
      sheetString += '<pageMargins left="0.75" right="0.75" top="1" bottom="1" header="0.5" footer="0.5" /><headerFooter scaleWithDoc="1" alignWithMargins="0" differentFirst="0" differentOddEven="0" />';
      if (sheet.images != void 0 && sheet.images.length > 0) {
        this.drawingCount++;
        this.saveDrawings(sheet, sheet.index);
        sheetString += '<drawing r:id="rId' + (sheet.hyperLinks.length + 1) + '"/>';
      }
      this.addToArchive(this.saveSheetRelations(sheet), "xl/worksheets/_rels/sheet" + sheet.index + ".xml.rels");
      sheetBlob.append(sheetString + "</worksheet>");
      this.addToArchive(sheetBlob.getBlob(), "xl/worksheets/sheet" + (index + 1) + ".xml");
    };
    Workbook2.prototype.saveDrawings = function(sheet, index) {
      var drawings = new BlobHelper();
      var sheetDrawingString = '<xdr:wsDr xmlns:xdr="http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing" xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main">';
      if (sheet.images !== void 0) {
        var imgId = 0;
        for (var _i = 0, _a = sheet.images; _i < _a.length; _i++) {
          var pic = _a[_i];
          if (pic.height !== void 0 && pic.width !== void 0) {
            this.updatelastRowOffset(sheet, pic);
            this.updatelastColumnOffSet(sheet, pic);
            pic.lastRow -= 1;
            pic.lastColumn -= 1;
          } else if (pic.lastRow !== void 0 && pic.lastColumn !== void 0) {
            pic.lastRowOffset = 0;
            pic.lastColOffset = 0;
          }
          imgId++;
          sheetDrawingString += '<xdr:twoCellAnchor editAs="oneCell">';
          sheetDrawingString += "<xdr:from><xdr:col>";
          sheetDrawingString += pic.column - 1;
          sheetDrawingString += "</xdr:col><xdr:colOff>";
          sheetDrawingString += 0;
          sheetDrawingString += "</xdr:colOff><xdr:row>";
          sheetDrawingString += pic.row - 1;
          sheetDrawingString += "</xdr:row><xdr:rowOff>";
          sheetDrawingString += 0;
          sheetDrawingString += "</xdr:rowOff></xdr:from>";
          sheetDrawingString += "<xdr:to><xdr:col>";
          sheetDrawingString += pic.lastColumn;
          sheetDrawingString += "</xdr:col><xdr:colOff>";
          sheetDrawingString += pic.lastColOffset;
          sheetDrawingString += "</xdr:colOff><xdr:row>";
          sheetDrawingString += pic.lastRow;
          sheetDrawingString += "</xdr:row><xdr:rowOff>";
          sheetDrawingString += pic.lastRowOffset;
          sheetDrawingString += "</xdr:rowOff></xdr:to>";
          sheetDrawingString += "<xdr:pic>";
          sheetDrawingString += "<xdr:nvPicPr>";
          sheetDrawingString += '<xdr:cNvPr id="' + imgId + '" name="Picture ' + imgId + '"> </xdr:cNvPr>';
          sheetDrawingString += '<xdr:cNvPicPr><a:picLocks noChangeAspect="1"/></xdr:cNvPicPr> </xdr:nvPicPr>';
          sheetDrawingString += "<xdr:blipFill>";
          sheetDrawingString += '<a:blip xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" r:embed="rId' + imgId + '" cstate="print">';
          sheetDrawingString += "</a:blip><a:stretch><a:fillRect /></a:stretch></xdr:blipFill>";
          sheetDrawingString += "<xdr:spPr>";
          sheetDrawingString += "<a:xfrm";
          if (pic.rotation != void 0 && pic.rotation <= 3600 && pic.rotation >= -3600) {
            sheetDrawingString += ' rot="' + pic.rotation * 6e4 + '"';
          }
          if (pic.verticalFlip != void 0 && pic.verticalFlip != false) {
            sheetDrawingString += ' flipV="1"';
          }
          if (pic.horizontalFlip != void 0 && pic.horizontalFlip != false) {
            sheetDrawingString += ' flipH="1"';
          }
          sheetDrawingString += "/>";
          sheetDrawingString += '<a:prstGeom prst="rect"><a:avLst /></a:prstGeom></xdr:spPr>';
          sheetDrawingString += "</xdr:pic><xdr:clientData /></xdr:twoCellAnchor>";
          var imageFile = new BlobHelper();
          var imageData = this.convertBase64toImage(pic.image);
          this.imageCount += 1;
          this.addToArchive(imageData, "xl/media/image" + this.imageCount + ".png");
        }
        drawings.append(sheetDrawingString);
        drawings.append("</xdr:wsDr>");
        this.saveDrawingRelations(sheet);
        this.addToArchive(drawings.getBlob(), "xl/drawings/drawing" + this.drawingCount + ".xml");
      }
    };
    Workbook2.prototype.updatelastRowOffset = function(sheet, picture) {
      var iCurHeight = picture.height;
      var iCurRow = picture.row;
      var iCurOffset = 0;
      while (iCurHeight >= 0) {
        var iRowHeight = 0;
        if (sheet.rows !== void 0 && sheet.rows[iCurRow - 1] !== void 0)
          iRowHeight = this.convertToPixels(sheet.rows[iCurRow - 1].height === void 0 ? 15 : sheet.rows[iCurRow - 1].height);
        else
          iRowHeight = this.convertToPixels(15);
        var iSpaceInCell = iRowHeight - iCurOffset * iRowHeight / 256;
        if (iSpaceInCell > iCurHeight) {
          picture.lastRow = iCurRow;
          picture.lastRowOffset = iCurOffset + iCurHeight * 256 / iRowHeight;
          var rowHiddenHeight = 0;
          if (sheet.rows !== void 0 && sheet.rows[iCurRow - 1] !== void 0)
            rowHiddenHeight = this.convertToPixels(sheet.rows[iCurRow - 1].height === void 0 ? 15 : sheet.rows[iCurRow - 1].height);
          else
            rowHiddenHeight = this.convertToPixels(15);
          picture.lastRowOffset = rowHiddenHeight * picture.lastRowOffset / 256;
          picture.lastRowOffset = Math.round(picture.lastRowOffset / this.unitsProportions[7]);
          break;
        } else {
          iCurHeight -= iSpaceInCell;
          iCurRow++;
          iCurOffset = 0;
        }
      }
    };
    Workbook2.prototype.updatelastColumnOffSet = function(sheet, picture) {
      var iCurWidth = picture.width;
      var iCurCol = picture.column;
      var iCurOffset = 0;
      while (iCurWidth >= 0) {
        var iColWidth = 0;
        if (sheet.columns !== void 0 && sheet.columns[iCurCol - 1] !== void 0)
          iColWidth = this.ColumnWidthToPixels(sheet.columns[iCurCol - 1].width === void 0 ? 8.43 : sheet.columns[iCurCol - 1].width);
        else
          iColWidth = this.ColumnWidthToPixels(8.43);
        var iSpaceInCell = iColWidth - iCurOffset * iColWidth / 1024;
        if (iSpaceInCell > iCurWidth) {
          picture.lastColumn = iCurCol;
          picture.lastColOffset = iCurOffset + iCurWidth * 1024 / iColWidth;
          var colHiddenWidth = 0;
          if (sheet.columns !== void 0 && sheet.columns[iCurCol - 1] !== void 0)
            colHiddenWidth = this.ColumnWidthToPixels(sheet.columns[iCurCol - 1].width === void 0 ? 8.43 : sheet.columns[iCurCol - 1].width);
          else
            colHiddenWidth = this.ColumnWidthToPixels(8.43);
          picture.lastColOffset = colHiddenWidth * picture.lastColOffset / 1024;
          picture.lastColOffset = Math.round(picture.lastColOffset / this.unitsProportions[7]);
          break;
        } else {
          iCurWidth -= iSpaceInCell;
          iCurCol++;
          iCurOffset = 0;
        }
      }
    };
    Workbook2.prototype.convertToPixels = function(value) {
      return value * this.unitsProportions[6];
    };
    Workbook2.prototype.convertBase64toImage = function(img) {
      var byteStr = window.atob(img);
      var buffer = new ArrayBuffer(byteStr.length);
      var data = new Uint8Array(buffer);
      for (var i = 0; i < byteStr.length; i++) {
        data[i] = byteStr.charCodeAt(i);
      }
      var blob = new Blob([data], { type: "image/png" });
      return blob;
    };
    Workbook2.prototype.saveDrawingRelations = function(sheet) {
      var drawingRelation = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">';
      var length = sheet.images.length;
      var id = this.imageCount - sheet.images.length;
      for (var i = 1; i <= length; i++) {
        id++;
        drawingRelation += '<Relationship Id="rId' + i + '" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/image" Target="../media/image' + id + '.png" />';
      }
      this.addToArchive(drawingRelation + "</Relationships>", "xl/drawings/_rels/drawing" + this.drawingCount + ".xml.rels");
    };
    Workbook2.prototype.pixelsToColumnWidth = function(pixels) {
      var dDigitWidth = 7;
      var val = pixels > dDigitWidth + 5 ? this.trunc((pixels - 5) / dDigitWidth * 100 + 0.5) / 100 : pixels / (dDigitWidth + 5);
      return val > 1 ? (val * dDigitWidth + 5) / dDigitWidth * 256 / 256 : val * (dDigitWidth + 5) / dDigitWidth * 256 / 256;
    };
    Workbook2.prototype.ColumnWidthToPixels = function(val) {
      var dDigitWidth = 7;
      var fileWidth = val > 1 ? (val * dDigitWidth + 5) / dDigitWidth * 256 / 256 : val * (dDigitWidth + 5) / dDigitWidth * 256 / 256;
      return this.trunc((256 * fileWidth + this.trunc(128 / dDigitWidth)) / 256 * dDigitWidth);
    };
    Workbook2.prototype.trunc = function(x) {
      var n = x - x % 1;
      return n === 0 && (x < 0 || x === 0 && 1 / x !== 1 / 0) ? -0 : n;
    };
    Workbook2.prototype.pixelsToRowHeight = function(pixels) {
      return pixels * this.unitsProportions[5] / this.unitsProportions[6];
    };
    Workbook2.prototype.saveSheetRelations = function(sheet) {
      var relStr = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">';
      for (var _i = 0, _a = sheet.hyperLinks; _i < _a.length; _i++) {
        var hLink = _a[_i];
        relStr += '<Relationship Id="rId' + hLink.rId + '" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink" Target="' + this.processString(hLink.target) + '" TargetMode="External" />';
      }
      if (sheet.images != void 0 && sheet.images.length > 0) {
        relStr += '<Relationship Id="rId' + (sheet.hyperLinks.length + 1) + '" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing" Target="../drawings/drawing' + this.drawingCount + '.xml" />';
      }
      relStr += "</Relationships>";
      return relStr;
    };
    Workbook2.prototype.saveSheetView = function(sheet) {
      var paneString = '<sheetViews><sheetView workbookViewId="0" ';
      if (sheet.enableRtl === true) {
        paneString += 'rightToLeft="1"';
      }
      if (sheet.showGridLines === false) {
        paneString += 'showGridLines="0" >';
      } else {
        paneString += ">";
      }
      if (sheet.freezePanes !== void 0) {
        paneString += '<pane state="frozen" topLeftCell="' + sheet.freezePanes.leftCell + '" ';
        if (sheet.freezePanes.row !== 0) {
          paneString += 'ySplit="' + sheet.freezePanes.row + '" ';
        }
        if (sheet.freezePanes.column !== 0) {
          paneString += 'xSplit="' + sheet.freezePanes.column + '" ';
        }
        paneString += "/>";
      }
      paneString += "</sheetView></sheetViews > ";
      return paneString;
    };
    Workbook2.prototype.saveSharedString = function() {
      var length = this.sharedString.length;
      if (length > 0) {
        var sstStart = '<?xml version="1.0" encoding="utf-8"?><sst uniqueCount="' + length + '" count="' + this.sharedStringCount + '" xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main">';
        var si = "";
        for (var i = 0; i < length; i++) {
          if (this.sharedString[i].indexOf("<r>") !== 0) {
            si += "<si><t>";
            si += this.processString(this.sharedString[i]);
            si += "</t></si>";
          } else {
            si += "<si>";
            si += this.sharedString[i];
            si += "</si>";
          }
        }
        si += "</sst>";
        this.addToArchive(sstStart + si, "xl/sharedStrings.xml");
      }
    };
    Workbook2.prototype.processString = function(value) {
      if (typeof value == "string") {
        if (value.indexOf("&") !== -1) {
          value = value.replace(/&/g, "&amp;");
        }
        if (value.indexOf("<") !== -1) {
          value = value.replace(/</g, "&lt;");
        }
        if (value.indexOf(">") !== -1) {
          value = value.replace(/>/g, "&gt;");
        }
        if (value.indexOf("\v") !== -1) {
          value = value.replace(/\v/g, "_x000B_");
        }
      } else if (typeof value == "object") {
        for (var i = 0; i < value.length; i++) {
          if (value[i].indexOf("&") !== -1) {
            value[i] = value[i].replace(/&/g, "&amp;");
          }
          if (value[i].indexOf("<") !== -1) {
            value[i] = value[i].replace(/</g, "&lt;");
          }
          if (value[i].indexOf(">") !== -1) {
            value[i] = value[i].replace(/>/g, "&gt;");
          }
          if (value[i].indexOf("\v") !== -1) {
            value[i] = value[i].replace(/\v/g, "_x000B_");
          }
        }
      }
      return value;
    };
    Workbook2.prototype.saveStyles = function() {
      this.updateCellXfsStyleXfs();
      var styleTemp = '<?xml version="1.0" encoding="utf-8"?><styleSheet xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="x14ac" xmlns:x14ac="http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac" xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main">';
      styleTemp += this.saveNumberFormats();
      styleTemp += this.saveFonts();
      styleTemp += this.saveFills();
      styleTemp += this.saveBorders();
      styleTemp += this.saveCellStyleXfs();
      styleTemp += this.saveCellXfs();
      styleTemp += this.saveCellStyles();
      this.addToArchive(styleTemp + "</styleSheet>", "xl/styles.xml");
    };
    Workbook2.prototype.updateCellXfsStyleXfs = function() {
      for (var _i = 0, _a = this.mStyles; _i < _a.length; _i++) {
        var style = _a[_i];
        var cellXfs = void 0;
        if (style.isGlobalStyle) {
          cellXfs = new CellStyleXfs();
          cellXfs.xfId = style.index - 1;
        } else {
          cellXfs = new CellXfs();
          cellXfs.xfId = 0;
        }
        var compareFontResult = this.isNewFont(style);
        if (!compareFontResult.result) {
          var font = new Font();
          font.b = style.bold;
          font.i = style.italic;
          font.name = style.fontName;
          font.sz = style.fontSize;
          font.u = style.underline;
          font.strike = style.strikeThrough;
          font.color = "FF" + style.fontColor.replace("#", "");
          this.mFonts.push(font);
          cellXfs.fontId = this.mFonts.length - 1;
        } else {
          cellXfs.fontId = compareFontResult.index;
        }
        if (style.backColor !== "none") {
          var backColor = "FF" + style.backColor.replace("#", "");
          if (this.mFills.has(backColor)) {
            var fillId = this.mFills.get(backColor);
            cellXfs.fillId = fillId;
          } else {
            var fillId = this.mFills.size + 2;
            this.mFills.set(backColor, fillId);
            cellXfs.fillId = fillId;
          }
        } else {
          cellXfs.fillId = 0;
        }
        if (!this.isNewBorder(style)) {
          this.mBorders.push(style.borders);
          cellXfs.borderId = this.mBorders.length;
        } else {
          cellXfs.borderId = 0;
        }
        if (style.numberFormat !== "GENERAL") {
          if (this.mNumFmt.has(style.numberFormat)) {
            var numFmt = this.mNumFmt.get(style.numberFormat);
            cellXfs.numFmtId = numFmt.numFmtId;
          } else {
            var id = this.mNumFmt.size + 164;
            this.mNumFmt.set(style.numberFormat, new NumFmt(id, style.numberFormat));
            cellXfs.numFmtId = id;
          }
        } else {
          if (style.numberFormat === "GENERAL" && style.numFmtId === 14) {
            cellXfs.numFmtId = 14;
          } else {
            cellXfs.numFmtId = 0;
          }
        }
        if (!style.isGlobalStyle) {
          cellXfs.applyAlignment = 1;
        }
        cellXfs.alignment = new Alignment();
        cellXfs.alignment.indent = style.indent;
        cellXfs.alignment.horizontal = style.hAlign;
        cellXfs.alignment.vertical = style.vAlign;
        cellXfs.alignment.wrapText = style.wrapText ? 1 : 0;
        cellXfs.alignment.rotation = style.rotation;
        if (style.isGlobalStyle) {
          this.mCellStyleXfs.push(cellXfs);
          this.mCellXfs.push(cellXfs);
        } else {
          this.mCellXfs.push(cellXfs);
        }
      }
    };
    Workbook2.prototype.saveNumberFormats = function() {
      if (this.mNumFmt.size >= 1) {
        var numFmtStyle_1 = '<numFmts count="' + this.mNumFmt.size + '">';
        this.mNumFmt.forEach(function(value, key) {
          numFmtStyle_1 += '<numFmt numFmtId="' + value.numFmtId + '" formatCode="' + value.formatCode.replace(/"/g, "&quot;") + '" />';
        });
        return numFmtStyle_1 += "</numFmts>";
      } else {
        return "";
      }
    };
    Workbook2.prototype.saveFonts = function() {
      var fontStyle = '<fonts count="' + this.mFonts.length + '">';
      if (this.mFonts.length >= 1) {
        for (var _i = 0, _a = this.mFonts; _i < _a.length; _i++) {
          var font = _a[_i];
          fontStyle += "<font>";
          if (font.b) {
            fontStyle += "<b />";
          }
          if (font.i) {
            fontStyle += "<i />";
          }
          if (font.u) {
            fontStyle += "<u />";
          }
          if (font.strike) {
            fontStyle += "<strike />";
          }
          fontStyle += '<sz val="' + font.sz + '" />';
          fontStyle += '<color rgb="' + font.color + '" />';
          fontStyle += '<name val="' + font.name + '" /></font>';
        }
      }
      return fontStyle + "</fonts>";
    };
    Workbook2.prototype.saveFills = function() {
      var fillsStyle = '<fills count="' + (this.mFills.size + 2) + '"><fill><patternFill patternType="none"></patternFill></fill><fill><patternFill patternType="gray125"></patternFill></fill>';
      if (this.mFills.size >= 1) {
        this.mFills.forEach(function(value, key) {
          fillsStyle += '<fill><patternFill patternType="solid"><fgColor rgb="' + key + '" /><bgColor rgb="FFFFFFFF" /></patternFill></fill>';
        });
      }
      return fillsStyle + "</fills>";
    };
    Workbook2.prototype.saveBorders = function() {
      var bordersStyle = '<borders count="' + (this.mBorders.length + 1) + '"><border><left /><right /><top /><bottom /><diagonal /></border>';
      if (this.mBorders.length >= 1) {
        for (var _i = 0, _a = this.mBorders; _i < _a.length; _i++) {
          var borders = _a[_i];
          if (this.isAllBorder(borders)) {
            var color = borders.all.color.replace("#", "");
            var lineStyle = borders.all.lineStyle;
            bordersStyle += '<border><left style="' + lineStyle + '"><color rgb="FF' + color + '" /></left><right style="' + lineStyle + '"><color rgb="FF' + color + '" /></right><top style="' + lineStyle + '"><color rgb="FF' + color + '" /></top><bottom style="' + lineStyle + '"><color rgb="FF' + color + '" /></bottom></border>';
          } else {
            bordersStyle += '<border><left style="' + borders.left.lineStyle + '"><color rgb="FF' + borders.left.color.replace("#", "") + '" /></left><right style="' + borders.right.lineStyle + '"><color rgb="FF' + borders.right.color.replace("#", "") + '" /></right><top style="' + borders.top.lineStyle + '"><color rgb="FF' + borders.top.color.replace("#", "") + '" /></top><bottom style="' + borders.bottom.lineStyle + '"><color rgb="FF' + borders.bottom.color.replace("#", "") + '" /></bottom></border>';
          }
        }
      }
      return bordersStyle + "</borders>";
    };
    Workbook2.prototype.saveCellStyles = function() {
      var _this = this;
      var cellStyleString = '<cellStyles  count="' + this.cellStyles.size + '">';
      this.cellStyles.forEach(function(value, key) {
        cellStyleString += '<cellStyle name="' + key + '" xfId="' + _this.cellStyles.get(key).xfId + '"';
        if (key === "Normal") {
          cellStyleString += ' builtinId="0"';
        }
        cellStyleString += " />";
      });
      return cellStyleString += "</cellStyles>";
    };
    Workbook2.prototype.saveCellStyleXfs = function() {
      var cellXfsStyle = '<cellStyleXfs count="' + (this.mCellStyleXfs.length + 1) + '"><xf numFmtId="0" fontId="0" fillId="0" borderId="0" />';
      if (this.mCellStyleXfs.length >= 1) {
        for (var _i = 0, _a = this.mCellStyleXfs; _i < _a.length; _i++) {
          var cellStyleXf = _a[_i];
          cellXfsStyle += '<xf numFmtId="' + cellStyleXf.numFmtId + '" fontId="' + cellStyleXf.fontId + '" fillId="' + cellStyleXf.fillId + '" borderId="' + cellStyleXf.borderId + '" ';
          if (cellStyleXf.alignment !== void 0) {
            cellXfsStyle += ">" + this.saveAlignment(cellStyleXf) + "</xf>";
          } else {
            cellXfsStyle += " />";
          }
        }
      }
      return cellXfsStyle + "</cellStyleXfs>";
    };
    Workbook2.prototype.saveCellXfs = function() {
      var cellXfsStyle = '<cellXfs count="' + (this.mCellXfs.length + 1) + '"><xf numFmtId="0" fontId="0" fillId="0" borderId="0" xfId="0" />';
      if (this.mCellXfs.length >= 1) {
        for (var _i = 0, _a = this.mCellXfs; _i < _a.length; _i++) {
          var cellXf = _a[_i];
          cellXfsStyle += '<xf numFmtId="' + cellXf.numFmtId + '" fontId="' + cellXf.fontId + '" fillId="' + cellXf.fillId + '" borderId="' + cellXf.borderId + '" xfId="' + cellXf.xfId + '" ';
          if (cellXf.applyAlignment === 1) {
            cellXfsStyle += 'applyAlignment="1"';
          }
          cellXfsStyle += ">" + this.saveAlignment(cellXf) + "</xf>";
        }
      }
      return cellXfsStyle + "</cellXfs>";
    };
    Workbook2.prototype.saveAlignment = function(cellXf) {
      var alignString = "<alignment ";
      if (cellXf.alignment.horizontal !== void 0) {
        alignString += 'horizontal="' + cellXf.alignment.horizontal + '" ';
      }
      if (cellXf.alignment.indent !== void 0 && cellXf.alignment.indent !== 0) {
        alignString += 'indent="' + cellXf.alignment.indent + '" ';
      } else if (cellXf.alignment.rotation !== void 0 && cellXf.alignment.rotation !== 0) {
        alignString += 'textRotation="' + cellXf.alignment.rotation + '" ';
      }
      if (cellXf.alignment.vertical !== void 0) {
        alignString += 'vertical="' + cellXf.alignment.vertical + '" ';
      }
      alignString += 'wrapText="' + cellXf.alignment.wrapText + '" />';
      return alignString;
    };
    Workbook2.prototype.saveApp = function(builtInProperties) {
      var appString = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><Properties xmlns="http://schemas.openxmlformats.org/officeDocument/2006/extended-properties"><Application>Essential XlsIO</Application>';
      if (builtInProperties !== void 0) {
        if (builtInProperties.manager !== void 0) {
          appString += "<Manager>" + builtInProperties.manager + "</Manager>";
        }
        if (builtInProperties.company !== void 0) {
          appString += "<Company>" + builtInProperties.company + "</Company>";
        }
      }
      this.addToArchive(appString + "</Properties>", "docProps/app.xml");
    };
    Workbook2.prototype.saveCore = function(builtInProperties) {
      var createdDate = /* @__PURE__ */ new Date();
      var coreString = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><cp:coreProperties xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:dcmitype="http://purl.org/dc/dcmitype/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cp="http://schemas.openxmlformats.org/package/2006/metadata/core-properties">';
      if (this.builtInProperties !== void 0) {
        if (builtInProperties.author !== void 0) {
          coreString += "<dc:creator>" + builtInProperties.author + "</dc:creator>";
        }
        if (builtInProperties.subject !== void 0) {
          coreString += "<dc:subject>" + builtInProperties.subject + "</dc:subject>";
        }
        if (builtInProperties.category !== void 0) {
          coreString += "<cp:category>" + builtInProperties.category + "</cp:category>";
        }
        if (builtInProperties.comments !== void 0) {
          coreString += "<dc:description>" + builtInProperties.comments + "</dc:description>";
        }
        if (builtInProperties.title !== void 0) {
          coreString += "<dc:title>" + builtInProperties.title + "</dc:title>";
        }
        if (builtInProperties.tags !== void 0) {
          coreString += "<cp:keywords>" + builtInProperties.tags + "</cp:keywords>";
        }
        if (builtInProperties.status !== void 0) {
          coreString += "<cp:contentStatus>" + builtInProperties.status + "</cp:contentStatus>";
        }
        if (builtInProperties.createdDate !== void 0) {
          coreString += '<dcterms:created xsi:type="dcterms:W3CDTF">' + builtInProperties.createdDate.toISOString() + "</dcterms:created>";
        } else {
          coreString += '<dcterms:created xsi:type="dcterms:W3CDTF">' + createdDate.toISOString() + "</dcterms:created>";
        }
        if (builtInProperties.modifiedDate !== void 0) {
          coreString += '<dcterms:modified xsi:type="dcterms:W3CDTF">' + builtInProperties.modifiedDate.toISOString() + "</dcterms:modified>";
        } else {
          coreString += '<dcterms:modified xsi:type="dcterms:W3CDTF">' + createdDate.toISOString() + "</dcterms:modified>";
        }
      } else {
        coreString += '<dcterms:created xsi:type="dcterms:W3CDTF">' + createdDate.toISOString() + "</dcterms:created>";
        coreString += '<dcterms:modified xsi:type="dcterms:W3CDTF">' + createdDate.toISOString() + "</dcterms:modified>";
      }
      coreString += "</cp:coreProperties>";
      this.addToArchive(coreString, "docProps/core.xml");
    };
    Workbook2.prototype.saveTopLevelRelation = function() {
      var topRelation = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships"><Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument" Target="xl/workbook.xml" /><Relationship Id="rId2" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties" Target="docProps/app.xml" /><Relationship Id="rId3" Type="http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties" Target="docProps/core.xml" /></Relationships>';
      this.addToArchive(topRelation, "_rels/.rels");
    };
    Workbook2.prototype.saveWorkbookRelation = function() {
      var wbRelation = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">';
      var length = this.worksheets.length;
      var count = 0;
      for (var i = 0; i < length; i++, count++) {
        wbRelation += '<Relationship Id="rId' + (i + 1).toString() + '" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet" Target="worksheets/sheet' + (i + 1).toString() + '.xml" />';
      }
      wbRelation += '<Relationship Id="rId' + (++count).toString() + '" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles" Target="styles.xml" />';
      if (this.sharedStringCount > 0) {
        wbRelation += '<Relationship Id="rId' + (++count).toString() + '" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings" Target="sharedStrings.xml" />';
      }
      this.addToArchive(wbRelation + "</Relationships>", "xl/_rels/workbook.xml.rels");
    };
    Workbook2.prototype.saveContentType = function() {
      var contentTypeString = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types"><Default Extension="xml" ContentType="application/xml" /><Default Extension="rels" ContentType="application/vnd.openxmlformats-package.relationships+xml" /><Override PartName="/xl/styles.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml" /><Override PartName="/xl/workbook.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml" /><Override PartName="/docProps/app.xml" ContentType="application/vnd.openxmlformats-officedocument.extended-properties+xml" /><Override PartName="/docProps/core.xml" ContentType="application/vnd.openxmlformats-package.core-properties+xml" />';
      var sheetsOverride = "";
      var length = this.worksheets.length;
      var drawingIndex = 0;
      for (var i = 0; i < length; i++) {
        sheetsOverride += '<Override PartName="/xl/worksheets/sheet' + (i + 1).toString() + '.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml" />';
        if (this.worksheets[i].images != void 0 && this.worksheets[i].images.length > 0) {
          drawingIndex++;
          sheetsOverride += '<Override PartName="/xl/drawings/drawing' + drawingIndex.toString() + '.xml" ContentType="application/vnd.openxmlformats-officedocument.drawing+xml" />';
        }
      }
      if (this.imageCount > 0)
        sheetsOverride += '<Default Extension="png" ContentType="image/png" />';
      if (this.sharedStringCount > 0) {
        contentTypeString += '<Override PartName="/xl/sharedStrings.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml" />';
      }
      this.addToArchive(contentTypeString + sheetsOverride + "</Types>", "[Content_Types].xml");
    };
    Workbook2.prototype.addToArchive = function(xmlString, itemName) {
      if (typeof xmlString === "string") {
        var blob = new Blob([xmlString], { type: "text/plain" });
        var archiveItem = new ZipArchiveItem(blob, itemName);
        this.mArchive.addItem(archiveItem);
      } else {
        var archiveItem = new ZipArchiveItem(xmlString, itemName);
        this.mArchive.addItem(archiveItem);
      }
    };
    Workbook2.prototype.processMergeCells = function(cell, rowIndex, mergeCells) {
      if (cell.rowSpan !== 0 || cell.colSpan !== 0) {
        var mCell = new MergeCell();
        mCell.x = cell.index;
        mCell.width = cell.colSpan;
        mCell.y = rowIndex;
        mCell.height = cell.rowSpan;
        var startCell = this.getCellName(mCell.y, mCell.x);
        var endCell = this.getCellName(rowIndex + mCell.height, cell.index + mCell.width);
        mCell.ref = startCell + ":" + endCell;
        var mergedCell = mergeCells.add(mCell);
        var start = { x: mCell.x, y: mCell.y };
        var end = {
          x: cell.index + mCell.width,
          y: rowIndex + mCell.height
        };
        this.updatedMergedCellStyles(start, end, cell);
      }
      return mergeCells;
    };
    Workbook2.prototype.updatedMergedCellStyles = function(sCell, eCell, cell) {
      for (var x = sCell.x; x <= eCell.x; x++) {
        for (var y = sCell.y; y <= eCell.y; y++) {
          this.mergedCellsStyle.set(this.getCellName(y, x), { x, y, styleIndex: cell.styleIndex });
        }
      }
    };
    Workbook2.prototype.dateToTicks = function(year, month, day) {
      var ticksPerDay = 1e4 * 1e3 * 60 * 60 * 24;
      var daysToMonth365 = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];
      var daysToMonth366 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366];
      if (year >= 1 && year <= 9999 && month >= 1 && month <= 12) {
        var days = this.isLeapYear(year) ? daysToMonth366 : daysToMonth365;
        var y = year - 1;
        var n = y * 365 + (y / 4 | 0) - (y / 100 | 0) + (y / 400 | 0) + days[month - 1] + day - 1;
        return n * ticksPerDay;
      }
      throw new Error("Not a valid date");
    };
    Workbook2.prototype.timeToTicks = function(hour, minute, second) {
      if (hour >= 0 && hour < 24 && minute >= 0 && minute < 60 && second >= 0 && second < 60) {
        var totalSeconds = hour * 3600 + minute * 60 + second;
        return totalSeconds * 1e4 * 1e3;
      }
      throw new Error("Not valid time");
    };
    Workbook2.prototype.isLeapYear = function(year) {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    };
    Workbook2.prototype.toOADate = function(date) {
      var ticks = 0;
      ticks = this.dateToTicks(date.getFullYear(), date.getMonth() + 1, date.getDate()) + this.timeToTicks(date.getHours(), date.getMinutes(), date.getSeconds());
      if (ticks === 0) {
        return 0;
      }
      var ticksPerDay = 1e4 * 1e3 * 60 * 60 * 24;
      var daysTo1899 = (((365 * 4 + 1) * 25 - 1) * 4 + 1) * 4 + ((365 * 4 + 1) * 25 - 1) * 3 - 367;
      var doubleDateOffset = daysTo1899 * ticksPerDay;
      var oaDateMinAsTicks = ((365 * 4 + 1) * 25 - 1 - 365) * ticksPerDay;
      if (ticks < oaDateMinAsTicks) {
        throw new Error("Arg_OleAutDateInvalid");
      }
      var millisPerDay = 1e3 * 60 * 60 * 24;
      return (ticks - doubleDateOffset) / 1e4 / millisPerDay;
    };
    return Workbook2;
  }()
);
var BuiltInProperties = (
  /** @class */
  /* @__PURE__ */ function() {
    function BuiltInProperties2() {
    }
    return BuiltInProperties2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/exports/excel-export.js
var ExcelExport = (
  /** @class */
  function() {
    function ExcelExport2(parent) {
      this.parent = parent;
    }
    ExcelExport2.prototype.initializeExcelExport = function(excelExportOptions) {
      if (excelExportOptions === void 0) {
        excelExportOptions = {};
      }
      var exportColumns = this.getExportColumns(excelExportOptions);
      var exportName = excelExportOptions.fileName || "Schedule";
      var exportType = excelExportOptions.exportType || "xlsx";
      var isIncludeOccurrences = excelExportOptions.includeOccurrences || false;
      var separator;
      if (!isNullOrUndefined(excelExportOptions.separator) && excelExportOptions.separator !== ",") {
        separator = excelExportOptions.separator;
      }
      var eventCollection;
      if (excelExportOptions.customData) {
        eventCollection = !isIncludeOccurrences ? excelExportOptions.customData : this.parent.eventBase.getProcessedEvents(excelExportOptions.customData);
      } else {
        eventCollection = !isIncludeOccurrences ? this.parent.eventsData : this.parent.eventsProcessed;
      }
      this.processWorkbook(exportColumns, exportName, exportType, eventCollection, separator);
    };
    ExcelExport2.prototype.processWorkbook = function(fields, name, type, eventCollection, separator) {
      var _this = this;
      var columns = [];
      var rows = [];
      var columnHeader = [];
      fields.forEach(function(field, i) {
        columns.push({ index: i + 1, width: field.name === "Id" ? 50 : 150 });
      });
      var style = { fontSize: 12, borders: { color: "#E0E0E0" }, bold: true };
      fields.forEach(function(field, i) {
        columnHeader.push({ index: i + 1, value: field.text, style });
      });
      rows.push({ index: 1, cells: columnHeader });
      eventCollection.forEach(function(event, i) {
        var columnData = [];
        fields.forEach(function(field, n) {
          var columnRule = { index: n + 1, value: event[field.name] || "" };
          if (field.name === _this.parent.eventFields.startTime || field.name === _this.parent.eventFields.endTime) {
            var styleRule = { fontSize: 12, numberFormat: "m/d/yyyy h:mm a" };
            columnRule = extend({}, columnRule, { style: styleRule }, true);
          }
          columnData.push(columnRule);
        });
        rows.push({ index: i + 2, cells: columnData });
      });
      var workSheet = [{ columns, rows }];
      var book = new Workbook({ worksheets: workSheet }, type, this.parent.locale, void 0, separator);
      book.save(name + "." + type);
    };
    ExcelExport2.prototype.getExportColumns = function(exportOptions) {
      var _this = this;
      var exportColumns = exportOptions.fieldsInfo || [];
      if (exportColumns.length === 0) {
        var fields = exportOptions.fields || Object.keys(this.parent.eventFields).map(function(field) {
          return _this.parent.eventFields["" + field];
        });
        fields.forEach(function(field) {
          exportColumns.push({ name: field, text: field });
        });
      }
      return exportColumns;
    };
    ExcelExport2.prototype.getModuleName = function() {
      return "excelExport";
    };
    ExcelExport2.prototype.destroy = function() {
      this.parent = null;
    };
    return ExcelExport2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/exports/print.js
var Print = (
  /** @class */
  function() {
    function Print2(parent) {
      this.parent = parent;
    }
    Print2.prototype.print = function(printOptions) {
      if (isNullOrUndefined(printOptions)) {
        this.printScheduler();
      } else {
        this.printSchedulerWithModel(printOptions);
      }
    };
    Print2.prototype.printScheduler = function() {
      var clone = this.parent.element.cloneNode(true);
      clone.id = this.parent.element.id + "_print";
      document.body.appendChild(clone);
      var className = this.parent.currentView === "MonthAgenda" ? ".e-appointment-wrap" : ".e-content-wrap";
      var scrollableEle = this.parent.element.querySelector(className);
      var links = [].slice.call(document.getElementsByTagName("head")[0].querySelectorAll("link, style"));
      var reference = "";
      for (var _i = 0, links_1 = links; _i < links_1.length; _i++) {
        var link = links_1[_i];
        reference += link.outerHTML;
      }
      var div = createElement("div");
      clone.style.width = this.parent.element.offsetWidth + "px";
      var elementWidth = Math.round(parseInt(clone.style.width, 10) / 100) * 100;
      div.appendChild(clone);
      var printWindow = window.open("", "print", "height=550,width=" + elementWidth + ",tabbar=no");
      printWindow.document.write("<!DOCTYPE html><html><head>" + reference + "</head><body>" + div.innerHTML + "<script>(function() { window.ready = true; })();<\/script></body></html>");
      printWindow.document.close();
      printWindow.focus();
      setTimeout(function() {
        if (printWindow.ready && scrollableEle) {
          scrollableEle.scrollLeft = scrollableEle.scrollLeft;
          scrollableEle.scrollTop = scrollableEle.scrollTop;
          var headerTimeCellsScroll = printWindow.document.querySelector(".e-date-header-wrap");
          if (headerTimeCellsScroll) {
            headerTimeCellsScroll.scrollLeft = scrollableEle.scrollLeft;
          }
          var timeCellsScroll = printWindow.document.querySelector(".e-time-cells-wrap");
          if (timeCellsScroll) {
            timeCellsScroll.scrollTop = scrollableEle.scrollTop;
          }
          var contentCellScroll = printWindow.document.querySelector(className);
          if (contentCellScroll) {
            contentCellScroll.scrollLeft = scrollableEle.scrollLeft;
            contentCellScroll.scrollTop = scrollableEle.scrollTop;
          }
          printWindow.print();
          printWindow.close();
        }
      }, 500);
    };
    Print2.prototype.printSchedulerWithModel = function(printOptions) {
      var element = createElement("div", { id: this.parent.element.id + "_print", className: "e-print-schedule" });
      document.body.appendChild(element);
      Schedule.Inject(Day, Week, WorkWeek, Month, Agenda, MonthAgenda, TimelineViews, TimelineMonth, Year, TimelineYear);
      this.printInstance = new Schedule(this.getPrintScheduleModel(printOptions));
      this.printInstance.isPrinting = true;
      this.printInstance.registeredTemplate = this.parent.registeredTemplate;
      this.printInstance.root = this.parent.root ? this.parent.root : this.parent;
      this.printInstance.appendTo(element);
      this.printInstance.on(print2, this.contentReady, this);
      this.printWindow = window.open("", "print", "height=" + window.outerHeight + ",width=" + window.outerWidth + ",tabbar=no");
      this.printWindow.moveTo(0, 0);
      this.printWindow.resizeTo(screen.availWidth, screen.availHeight);
    };
    Print2.prototype.getPrintScheduleModel = function(printOptions) {
      var printModel = {};
      var scheduleProps = [
        "agendaDaysCount",
        "calendarMode",
        "cssClass",
        "currentView",
        "dateFormat",
        "enableRtl",
        "endHour",
        "eventSettings",
        "firstDayOfWeek",
        "firstMonthOfYear",
        "group",
        "height",
        "locale",
        "maxDate",
        "minDate",
        "readonly",
        "resources",
        "rowAutoHeight",
        "selectedDate",
        "showHeaderBar",
        "showTimeIndicator",
        "showWeekNumber",
        "showWeekend",
        "startHour",
        "timeFormat",
        "timeScale",
        "timezone",
        "views",
        "width",
        "workDays",
        "workHours",
        "dateHeaderTemplate",
        "dateRangeTemplate",
        "cellHeaderTemplate",
        "dayHeaderTemplate",
        "monthHeaderTemplate",
        "cellTemplate",
        "resourceHeaderTemplate",
        "headerIndentTemplate",
        "actionBegin",
        "actionComplete",
        "actionFailure",
        "created",
        "dataBinding",
        "dataBound",
        "destroyed",
        "eventRendered",
        "moreEventsClick",
        "navigating",
        "popupOpen",
        "popupClose",
        "renderCell"
      ];
      var scheduleTemplates = [
        "cellHeaderTemplate",
        "dayHeaderTemplate",
        "monthHeaderTemplate",
        "cellTemplate",
        "dateHeaderTemplate",
        "dateRangeTemplate",
        "eventTemplate",
        "resourceHeaderTemplate",
        "headerIndentTemplate"
      ];
      var scheduleEvents = [
        "actionBegin",
        "actionComplete",
        "actionFailure",
        "created",
        "dataBinding",
        "dataBound",
        "destroyed",
        "eventRendered",
        "moreEventsClick",
        "navigating",
        "popupOpen",
        "popupClose",
        "renderCell"
      ];
      var eventSettings;
      var group;
      var timeScale;
      var views;
      for (var _i = 0, scheduleProps_1 = scheduleProps; _i < scheduleProps_1.length; _i++) {
        var key = scheduleProps_1[_i];
        switch (key) {
          case "eventSettings": {
            eventSettings = Object.assign({}, this.parent.eventSettings.properties);
            eventSettings.dataSource = this.parent.eventsData;
            var eventTemplate = !isNullOrUndefined(printOptions.eventSettings) && !isNullOrUndefined(printOptions.eventSettings.template) ? printOptions.eventSettings.template : eventSettings.template;
            eventSettings.template = !this.parent.isAngular && typeof eventTemplate === "function" ? null : eventTemplate;
            printModel.eventSettings = eventSettings;
            break;
          }
          case "group":
            group = isNullOrUndefined(printOptions.group) ? this.parent.group : printOptions.group;
            group.headerTooltipTemplate = null;
            printModel.group = group;
            break;
          case "timeScale":
            timeScale = isNullOrUndefined(printOptions.timeScale) ? this.parent.timeScale : printOptions.timeScale;
            if (!this.parent.isAngular) {
              timeScale.majorSlotTemplate = typeof timeScale.majorSlotTemplate === "function" ? null : timeScale.majorSlotTemplate;
              timeScale.minorSlotTemplate = typeof timeScale.minorSlotTemplate === "function" ? null : timeScale.minorSlotTemplate;
            }
            printModel.timeScale = timeScale;
            break;
          case "views":
            views = isNullOrUndefined(printOptions.views) ? this.parent.views : printOptions.views;
            if (!this.parent.isAngular && views && views.length > 0 && typeof views[0] === "object") {
              var _loop_1 = function(view2) {
                scheduleTemplates.forEach(function(x) {
                  if (!isNullOrUndefined(view2["" + x])) {
                    view2["" + x] = typeof view2["" + x] === "function" ? null : view2["" + x];
                  }
                });
              };
              for (var _a = 0, views_1 = views; _a < views_1.length; _a++) {
                var view = views_1[_a];
                _loop_1(view);
              }
            }
            printModel.views = views;
            break;
          default:
            if (scheduleTemplates.indexOf(key) > -1) {
              printModel["" + key] = isNullOrUndefined(printOptions["" + key]) ? !this.parent.isAngular && typeof this.parent["" + key] === "function" ? null : this.parent["" + key] : !this.parent.isAngular && typeof printOptions["" + key] === "function" ? null : printOptions["" + key];
              break;
            }
            if (scheduleEvents.indexOf(key) > -1) {
              printModel["" + key] = printOptions["" + key];
              break;
            }
            printModel["" + key] = isNullOrUndefined(printOptions["" + key]) ? this.parent["" + key] : printOptions["" + key];
            break;
        }
      }
      return printModel;
    };
    Print2.prototype.contentReady = function() {
      var _this = this;
      this.printWindow = print(this.printInstance.element, this.printWindow);
      this.printWindow.onbeforeunload = function() {
        _this.printInstance.off(print2, _this.contentReady);
        _this.printInstance.element.remove();
        _this.printInstance.destroy();
        _this.printInstance = null;
        _this.printWindow = null;
      };
    };
    Print2.prototype.getModuleName = function() {
      return "print";
    };
    Print2.prototype.destroy = function() {
      this.parent = null;
    };
    return Print2;
  }()
);

// node_modules/@syncfusion/ej2-angular-schedule/fesm2020/syncfusion-ej2-angular-schedule.mjs
var _c0 = ["dateHeaderTemplate"];
var _c1 = ["dateRangeTemplate"];
var _c2 = ["dayHeaderTemplate"];
var _c3 = ["cellHeaderTemplate"];
var _c4 = ["cellTemplate"];
var _c5 = ["eventTemplate"];
var _c6 = ["monthHeaderTemplate"];
var _c7 = ["resourceHeaderTemplate"];
var _c8 = ["headerIndentTemplate"];
var _c9 = ["timeScaleMinorSlotTemplate"];
var _c10 = ["timeScaleMajorSlotTemplate"];
var _c11 = ["groupHeaderTooltipTemplate"];
var _c12 = ["template"];
var _c13 = ["eventSettingsTooltipTemplate"];
var _c14 = ["eventSettingsTemplate"];
var _c15 = ["editorTemplate"];
var _c16 = ["editorHeaderTemplate"];
var _c17 = ["editorFooterTemplate"];
var _c18 = ["quickInfoTemplatesHeader"];
var _c19 = ["quickInfoTemplatesContent"];
var _c20 = ["quickInfoTemplatesFooter"];
var input$3 = ["allowVirtualScrolling", "cellHeaderTemplate", "cellTemplate", "dateFormat", "dateHeaderTemplate", "dateRangeTemplate", "dayHeaderTemplate", "displayDate", "displayName", "enableLazyLoading", "endHour", "eventTemplate", "firstDayOfWeek", "firstMonthOfYear", "group", "headerIndentTemplate", "headerRows", "interval", "isSelected", "maxEventsPerRow", "monthHeaderTemplate", "monthsCount", "numberOfWeeks", "option", "orientation", "readonly", "resourceHeaderTemplate", "showWeekNumber", "showWeekend", "startHour", "timeFormat", "timeScale", "workDays"];
var outputs$5 = [];
var ViewDirective = class extends ComplexBase {
  constructor(viewContainerRef) {
    super();
    this.viewContainerRef = viewContainerRef;
    setValue("currentInstance", this, this.viewContainerRef);
    this.registerEvents(outputs$5);
    this.directivePropList = input$3;
  }
};
ViewDirective.ɵfac = function ViewDirective_Factory(t) {
  return new (t || ViewDirective)(ɵɵdirectiveInject(ViewContainerRef));
};
ViewDirective.ɵdir = ɵɵdefineDirective({
  type: ViewDirective,
  selectors: [["e-view"]],
  contentQueries: function ViewDirective_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, _c0, 5);
      ɵɵcontentQuery(dirIndex, _c1, 5);
      ɵɵcontentQuery(dirIndex, _c2, 5);
      ɵɵcontentQuery(dirIndex, _c3, 5);
      ɵɵcontentQuery(dirIndex, _c4, 5);
      ɵɵcontentQuery(dirIndex, _c5, 5);
      ɵɵcontentQuery(dirIndex, _c6, 5);
      ɵɵcontentQuery(dirIndex, _c7, 5);
      ɵɵcontentQuery(dirIndex, _c8, 5);
      ɵɵcontentQuery(dirIndex, _c9, 5);
      ɵɵcontentQuery(dirIndex, _c10, 5);
      ɵɵcontentQuery(dirIndex, _c11, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.dateHeaderTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.dateRangeTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.dayHeaderTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.cellHeaderTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.cellTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.eventTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.monthHeaderTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.resourceHeaderTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.headerIndentTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.timeScale_minorSlotTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.timeScale_majorSlotTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.group_headerTooltipTemplate = _t.first);
    }
  },
  inputs: {
    allowVirtualScrolling: "allowVirtualScrolling",
    cellHeaderTemplate: "cellHeaderTemplate",
    cellTemplate: "cellTemplate",
    dateFormat: "dateFormat",
    dateHeaderTemplate: "dateHeaderTemplate",
    dateRangeTemplate: "dateRangeTemplate",
    dayHeaderTemplate: "dayHeaderTemplate",
    displayDate: "displayDate",
    displayName: "displayName",
    enableLazyLoading: "enableLazyLoading",
    endHour: "endHour",
    eventTemplate: "eventTemplate",
    firstDayOfWeek: "firstDayOfWeek",
    firstMonthOfYear: "firstMonthOfYear",
    group: "group",
    headerIndentTemplate: "headerIndentTemplate",
    headerRows: "headerRows",
    interval: "interval",
    isSelected: "isSelected",
    maxEventsPerRow: "maxEventsPerRow",
    monthHeaderTemplate: "monthHeaderTemplate",
    monthsCount: "monthsCount",
    numberOfWeeks: "numberOfWeeks",
    option: "option",
    orientation: "orientation",
    readonly: "readonly",
    resourceHeaderTemplate: "resourceHeaderTemplate",
    showWeekNumber: "showWeekNumber",
    showWeekend: "showWeekend",
    startHour: "startHour",
    timeFormat: "timeFormat",
    timeScale: "timeScale",
    workDays: "workDays"
  },
  features: [ɵɵInheritDefinitionFeature]
});
__decorate([Template()], ViewDirective.prototype, "dateHeaderTemplate", void 0);
__decorate([Template()], ViewDirective.prototype, "dateRangeTemplate", void 0);
__decorate([Template()], ViewDirective.prototype, "dayHeaderTemplate", void 0);
__decorate([Template()], ViewDirective.prototype, "cellHeaderTemplate", void 0);
__decorate([Template()], ViewDirective.prototype, "cellTemplate", void 0);
__decorate([Template()], ViewDirective.prototype, "eventTemplate", void 0);
__decorate([Template()], ViewDirective.prototype, "monthHeaderTemplate", void 0);
__decorate([Template()], ViewDirective.prototype, "resourceHeaderTemplate", void 0);
__decorate([Template()], ViewDirective.prototype, "headerIndentTemplate", void 0);
__decorate([Template()], ViewDirective.prototype, "timeScale_minorSlotTemplate", void 0);
__decorate([Template()], ViewDirective.prototype, "timeScale_majorSlotTemplate", void 0);
__decorate([Template()], ViewDirective.prototype, "group_headerTooltipTemplate", void 0);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ViewDirective, [{
    type: Directive,
    args: [{
      selector: "e-views>e-view",
      inputs: input$3,
      outputs: outputs$5,
      queries: {}
    }]
  }], function() {
    return [{
      type: ViewContainerRef
    }];
  }, {
    dateHeaderTemplate: [{
      type: ContentChild,
      args: ["dateHeaderTemplate"]
    }],
    dateRangeTemplate: [{
      type: ContentChild,
      args: ["dateRangeTemplate"]
    }],
    dayHeaderTemplate: [{
      type: ContentChild,
      args: ["dayHeaderTemplate"]
    }],
    cellHeaderTemplate: [{
      type: ContentChild,
      args: ["cellHeaderTemplate"]
    }],
    cellTemplate: [{
      type: ContentChild,
      args: ["cellTemplate"]
    }],
    eventTemplate: [{
      type: ContentChild,
      args: ["eventTemplate"]
    }],
    monthHeaderTemplate: [{
      type: ContentChild,
      args: ["monthHeaderTemplate"]
    }],
    resourceHeaderTemplate: [{
      type: ContentChild,
      args: ["resourceHeaderTemplate"]
    }],
    headerIndentTemplate: [{
      type: ContentChild,
      args: ["headerIndentTemplate"]
    }],
    timeScale_minorSlotTemplate: [{
      type: ContentChild,
      args: ["timeScaleMinorSlotTemplate"]
    }],
    timeScale_majorSlotTemplate: [{
      type: ContentChild,
      args: ["timeScaleMajorSlotTemplate"]
    }],
    group_headerTooltipTemplate: [{
      type: ContentChild,
      args: ["groupHeaderTooltipTemplate"]
    }]
  });
})();
var ViewsDirective = class extends ArrayBase {
  constructor() {
    super("views");
  }
};
ViewsDirective.ɵfac = function ViewsDirective_Factory(t) {
  return new (t || ViewsDirective)();
};
ViewsDirective.ɵdir = ɵɵdefineDirective({
  type: ViewsDirective,
  selectors: [["e-views"]],
  contentQueries: function ViewsDirective_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ViewDirective, 4);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.children = _t);
    }
  },
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ViewsDirective, [{
    type: Directive,
    args: [{
      selector: "ejs-schedule>e-views",
      queries: {
        children: new ContentChildren(ViewDirective)
      }
    }]
  }], function() {
    return [];
  }, null);
})();
var input$2 = ["allowMultiple", "colorField", "cssClassField", "dataSource", "endHourField", "expandedField", "field", "groupIDField", "idField", "name", "query", "startHourField", "textField", "title", "workDaysField"];
var outputs$4 = [];
var ResourceDirective = class extends ComplexBase {
  constructor(viewContainerRef) {
    super();
    this.viewContainerRef = viewContainerRef;
    setValue("currentInstance", this, this.viewContainerRef);
    this.registerEvents(outputs$4);
    this.directivePropList = input$2;
  }
};
ResourceDirective.ɵfac = function ResourceDirective_Factory(t) {
  return new (t || ResourceDirective)(ɵɵdirectiveInject(ViewContainerRef));
};
ResourceDirective.ɵdir = ɵɵdefineDirective({
  type: ResourceDirective,
  selectors: [["e-resource"]],
  inputs: {
    allowMultiple: "allowMultiple",
    colorField: "colorField",
    cssClassField: "cssClassField",
    dataSource: "dataSource",
    endHourField: "endHourField",
    expandedField: "expandedField",
    field: "field",
    groupIDField: "groupIDField",
    idField: "idField",
    name: "name",
    query: "query",
    startHourField: "startHourField",
    textField: "textField",
    title: "title",
    workDaysField: "workDaysField"
  },
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ResourceDirective, [{
    type: Directive,
    args: [{
      selector: "e-resources>e-resource",
      inputs: input$2,
      outputs: outputs$4,
      queries: {}
    }]
  }], function() {
    return [{
      type: ViewContainerRef
    }];
  }, null);
})();
var ResourcesDirective = class extends ArrayBase {
  constructor() {
    super("resources");
  }
};
ResourcesDirective.ɵfac = function ResourcesDirective_Factory(t) {
  return new (t || ResourcesDirective)();
};
ResourcesDirective.ɵdir = ɵɵdefineDirective({
  type: ResourcesDirective,
  selectors: [["e-resources"]],
  contentQueries: function ResourcesDirective_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ResourceDirective, 4);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.children = _t);
    }
  },
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ResourcesDirective, [{
    type: Directive,
    args: [{
      selector: "ejs-schedule>e-resources",
      queries: {
        children: new ContentChildren(ResourceDirective)
      }
    }]
  }], function() {
    return [];
  }, null);
})();
var input$1 = ["option", "template"];
var outputs$3 = [];
var HeaderRowDirective = class extends ComplexBase {
  constructor(viewContainerRef) {
    super();
    this.viewContainerRef = viewContainerRef;
    setValue("currentInstance", this, this.viewContainerRef);
    this.registerEvents(outputs$3);
    this.directivePropList = input$1;
  }
};
HeaderRowDirective.ɵfac = function HeaderRowDirective_Factory(t) {
  return new (t || HeaderRowDirective)(ɵɵdirectiveInject(ViewContainerRef));
};
HeaderRowDirective.ɵdir = ɵɵdefineDirective({
  type: HeaderRowDirective,
  selectors: [["e-header-row"]],
  contentQueries: function HeaderRowDirective_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, _c12, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.template = _t.first);
    }
  },
  inputs: {
    option: "option",
    template: "template"
  },
  features: [ɵɵInheritDefinitionFeature]
});
__decorate([Template()], HeaderRowDirective.prototype, "template", void 0);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HeaderRowDirective, [{
    type: Directive,
    args: [{
      selector: "e-header-rows>e-header-row",
      inputs: input$1,
      outputs: outputs$3,
      queries: {}
    }]
  }], function() {
    return [{
      type: ViewContainerRef
    }];
  }, {
    template: [{
      type: ContentChild,
      args: ["template"]
    }]
  });
})();
var HeaderRowsDirective = class extends ArrayBase {
  constructor() {
    super("headerrows");
  }
};
HeaderRowsDirective.ɵfac = function HeaderRowsDirective_Factory(t) {
  return new (t || HeaderRowsDirective)();
};
HeaderRowsDirective.ɵdir = ɵɵdefineDirective({
  type: HeaderRowsDirective,
  selectors: [["e-header-rows"]],
  contentQueries: function HeaderRowsDirective_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, HeaderRowDirective, 4);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.children = _t);
    }
  },
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HeaderRowsDirective, [{
    type: Directive,
    args: [{
      selector: "ejs-schedule>e-header-rows",
      queries: {
        children: new ContentChildren(HeaderRowDirective)
      }
    }]
  }], function() {
    return [];
  }, null);
})();
var input = ["align", "cssClass", "disabled", "htmlAttributes", "id", "name", "overflow", "prefixIcon", "showAlwaysInPopup", "showTextOn", "suffixIcon", "tabIndex", "template", "text", "tooltipText", "type", "visible", "width"];
var outputs$2 = ["click"];
var ToolbarItemDirective = class extends ComplexBase {
  constructor(viewContainerRef) {
    super();
    this.viewContainerRef = viewContainerRef;
    setValue("currentInstance", this, this.viewContainerRef);
    this.registerEvents(outputs$2);
    this.directivePropList = input;
  }
};
ToolbarItemDirective.ɵfac = function ToolbarItemDirective_Factory(t) {
  return new (t || ToolbarItemDirective)(ɵɵdirectiveInject(ViewContainerRef));
};
ToolbarItemDirective.ɵdir = ɵɵdefineDirective({
  type: ToolbarItemDirective,
  selectors: [["e-toolbaritem"]],
  contentQueries: function ToolbarItemDirective_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, _c12, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.template = _t.first);
    }
  },
  inputs: {
    align: "align",
    cssClass: "cssClass",
    disabled: "disabled",
    htmlAttributes: "htmlAttributes",
    id: "id",
    name: "name",
    overflow: "overflow",
    prefixIcon: "prefixIcon",
    showAlwaysInPopup: "showAlwaysInPopup",
    showTextOn: "showTextOn",
    suffixIcon: "suffixIcon",
    tabIndex: "tabIndex",
    template: "template",
    text: "text",
    tooltipText: "tooltipText",
    type: "type",
    visible: "visible",
    width: "width"
  },
  outputs: {
    click: "click"
  },
  features: [ɵɵInheritDefinitionFeature]
});
__decorate([Template()], ToolbarItemDirective.prototype, "template", void 0);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ToolbarItemDirective, [{
    type: Directive,
    args: [{
      selector: "e-toolbaritems>e-toolbaritem",
      inputs: input,
      outputs: outputs$2,
      queries: {}
    }]
  }], function() {
    return [{
      type: ViewContainerRef
    }];
  }, {
    template: [{
      type: ContentChild,
      args: ["template"]
    }]
  });
})();
var ToolbarItemsDirective = class extends ArrayBase {
  constructor() {
    super("toolbaritems");
  }
};
ToolbarItemsDirective.ɵfac = function ToolbarItemsDirective_Factory(t) {
  return new (t || ToolbarItemsDirective)();
};
ToolbarItemsDirective.ɵdir = ɵɵdefineDirective({
  type: ToolbarItemsDirective,
  selectors: [["e-toolbaritems"]],
  contentQueries: function ToolbarItemsDirective_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ToolbarItemDirective, 4);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.children = _t);
    }
  },
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ToolbarItemsDirective, [{
    type: Directive,
    args: [{
      selector: "ejs-schedule>e-toolbaritems",
      queries: {
        children: new ContentChildren(ToolbarItemDirective)
      }
    }]
  }], function() {
    return [];
  }, null);
})();
var inputs$1 = ["agendaDaysCount", "allowDragAndDrop", "allowInline", "allowKeyboardInteraction", "allowMultiCellSelection", "allowMultiDrag", "allowMultiRowSelection", "allowResizing", "allowSwiping", "calendarMode", "cellHeaderTemplate", "cellTemplate", "cssClass", "currentView", "dateFormat", "dateHeaderTemplate", "dateRangeTemplate", "dayHeaderTemplate", "editorFooterTemplate", "editorHeaderTemplate", "editorTemplate", "enableAdaptiveUI", "enableAllDayScroll", "enableHtmlSanitizer", "enablePersistence", "enableRecurrenceValidation", "enableRtl", "endHour", "eventDragArea", "eventSettings", "firstDayOfWeek", "firstMonthOfYear", "group", "headerIndentTemplate", "headerRows", "height", "hideEmptyAgendaDays", "locale", "maxDate", "minDate", "monthHeaderTemplate", "monthsCount", "quickInfoOnSelectionEnd", "quickInfoTemplates", "readonly", "resourceHeaderTemplate", "resources", "rowAutoHeight", "selectedDate", "showHeaderBar", "showQuickInfo", "showTimeIndicator", "showWeekNumber", "showWeekend", "startHour", "timeFormat", "timeScale", "timezone", "timezoneDataSource", "toolbarItems", "views", "weekRule", "width", "workDays", "workHours"];
var outputs$1 = ["actionBegin", "actionComplete", "actionFailure", "cellClick", "cellDoubleClick", "created", "dataBinding", "dataBound", "destroyed", "drag", "dragStart", "dragStop", "eventClick", "eventDoubleClick", "eventRendered", "hover", "moreEventsClick", "navigating", "popupClose", "popupOpen", "renderCell", "resizeStart", "resizeStop", "resizing", "select", "virtualScrollStart", "virtualScrollStop", "currentViewChange", "selectedDateChange"];
var twoWays$1 = ["currentView", "selectedDate"];
var ScheduleComponent = class ScheduleComponent2 extends Schedule {
  constructor(ngEle, srenderer, viewContainerRef, injector) {
    super();
    this.ngEle = ngEle;
    this.srenderer = srenderer;
    this.viewContainerRef = viewContainerRef;
    this.injector = injector;
    this.tags = ["views", "resources", "headerRows", "toolbarItems"];
    this.element = this.ngEle.nativeElement;
    this.injectedModules = this.injectedModules || [];
    try {
      let mod = this.injector.get("ScheduleDay");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("ScheduleWeek");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("ScheduleWorkWeek");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("ScheduleMonth");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("ScheduleYear");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("ScheduleAgenda");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("ScheduleMonthAgenda");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("ScheduleTimelineViews");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("ScheduleTimelineMonth");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("ScheduleTimelineYear");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("ScheduleResize");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("ScheduleDragAndDrop");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("ScheduleExcelExport");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("ScheduleICalendarExport");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("ScheduleICalendarImport");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("SchedulePrint");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    this.registerEvents(outputs$1);
    this.addTwoWay.call(this, twoWays$1);
    setValue("currentInstance", this, this.viewContainerRef);
    this.context = new ComponentBase();
  }
  ngOnInit() {
    this.context.ngOnInit(this);
  }
  ngAfterViewInit() {
    this.context.ngAfterViewInit(this);
  }
  ngOnDestroy() {
    this.context.ngOnDestroy(this);
  }
  ngAfterContentChecked() {
    this.tagObjects[0].instance = this.childViews;
    if (this.childResources) {
      this.tagObjects[1].instance = this.childResources;
    }
    if (this.childHeaderRows) {
      this.tagObjects[2].instance = this.childHeaderRows;
    }
    if (this.childToolbarItems) {
      this.tagObjects[3].instance = this.childToolbarItems;
    }
    this.context.ngAfterContentChecked(this);
  }
};
ScheduleComponent.ɵfac = function ScheduleComponent_Factory(t) {
  return new (t || ScheduleComponent)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(Injector));
};
ScheduleComponent.ɵcmp = ɵɵdefineComponent({
  type: ScheduleComponent,
  selectors: [["ejs-schedule"]],
  contentQueries: function ScheduleComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, _c0, 5);
      ɵɵcontentQuery(dirIndex, _c1, 5);
      ɵɵcontentQuery(dirIndex, _c2, 5);
      ɵɵcontentQuery(dirIndex, _c4, 5);
      ɵɵcontentQuery(dirIndex, _c3, 5);
      ɵɵcontentQuery(dirIndex, _c13, 5);
      ɵɵcontentQuery(dirIndex, _c14, 5);
      ɵɵcontentQuery(dirIndex, _c15, 5);
      ɵɵcontentQuery(dirIndex, _c16, 5);
      ɵɵcontentQuery(dirIndex, _c17, 5);
      ɵɵcontentQuery(dirIndex, _c6, 5);
      ɵɵcontentQuery(dirIndex, _c9, 5);
      ɵɵcontentQuery(dirIndex, _c10, 5);
      ɵɵcontentQuery(dirIndex, _c7, 5);
      ɵɵcontentQuery(dirIndex, _c8, 5);
      ɵɵcontentQuery(dirIndex, _c18, 5);
      ɵɵcontentQuery(dirIndex, _c19, 5);
      ɵɵcontentQuery(dirIndex, _c20, 5);
      ɵɵcontentQuery(dirIndex, _c11, 5);
      ɵɵcontentQuery(dirIndex, ViewsDirective, 5);
      ɵɵcontentQuery(dirIndex, ResourcesDirective, 5);
      ɵɵcontentQuery(dirIndex, HeaderRowsDirective, 5);
      ɵɵcontentQuery(dirIndex, ToolbarItemsDirective, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.dateHeaderTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.dateRangeTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.dayHeaderTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.cellTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.cellHeaderTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.eventSettings_tooltipTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.eventSettings_template = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.editorTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.editorHeaderTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.editorFooterTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.monthHeaderTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.timeScale_minorSlotTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.timeScale_majorSlotTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.resourceHeaderTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.headerIndentTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.quickInfoTemplates_header = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.quickInfoTemplates_content = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.quickInfoTemplates_footer = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.group_headerTooltipTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.childViews = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.childResources = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.childHeaderRows = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.childToolbarItems = _t.first);
    }
  },
  inputs: {
    agendaDaysCount: "agendaDaysCount",
    allowDragAndDrop: "allowDragAndDrop",
    allowInline: "allowInline",
    allowKeyboardInteraction: "allowKeyboardInteraction",
    allowMultiCellSelection: "allowMultiCellSelection",
    allowMultiDrag: "allowMultiDrag",
    allowMultiRowSelection: "allowMultiRowSelection",
    allowResizing: "allowResizing",
    allowSwiping: "allowSwiping",
    calendarMode: "calendarMode",
    cellHeaderTemplate: "cellHeaderTemplate",
    cellTemplate: "cellTemplate",
    cssClass: "cssClass",
    currentView: "currentView",
    dateFormat: "dateFormat",
    dateHeaderTemplate: "dateHeaderTemplate",
    dateRangeTemplate: "dateRangeTemplate",
    dayHeaderTemplate: "dayHeaderTemplate",
    editorFooterTemplate: "editorFooterTemplate",
    editorHeaderTemplate: "editorHeaderTemplate",
    editorTemplate: "editorTemplate",
    enableAdaptiveUI: "enableAdaptiveUI",
    enableAllDayScroll: "enableAllDayScroll",
    enableHtmlSanitizer: "enableHtmlSanitizer",
    enablePersistence: "enablePersistence",
    enableRecurrenceValidation: "enableRecurrenceValidation",
    enableRtl: "enableRtl",
    endHour: "endHour",
    eventDragArea: "eventDragArea",
    eventSettings: "eventSettings",
    firstDayOfWeek: "firstDayOfWeek",
    firstMonthOfYear: "firstMonthOfYear",
    group: "group",
    headerIndentTemplate: "headerIndentTemplate",
    headerRows: "headerRows",
    height: "height",
    hideEmptyAgendaDays: "hideEmptyAgendaDays",
    locale: "locale",
    maxDate: "maxDate",
    minDate: "minDate",
    monthHeaderTemplate: "monthHeaderTemplate",
    monthsCount: "monthsCount",
    quickInfoOnSelectionEnd: "quickInfoOnSelectionEnd",
    quickInfoTemplates: "quickInfoTemplates",
    readonly: "readonly",
    resourceHeaderTemplate: "resourceHeaderTemplate",
    resources: "resources",
    rowAutoHeight: "rowAutoHeight",
    selectedDate: "selectedDate",
    showHeaderBar: "showHeaderBar",
    showQuickInfo: "showQuickInfo",
    showTimeIndicator: "showTimeIndicator",
    showWeekNumber: "showWeekNumber",
    showWeekend: "showWeekend",
    startHour: "startHour",
    timeFormat: "timeFormat",
    timeScale: "timeScale",
    timezone: "timezone",
    timezoneDataSource: "timezoneDataSource",
    toolbarItems: "toolbarItems",
    views: "views",
    weekRule: "weekRule",
    width: "width",
    workDays: "workDays",
    workHours: "workHours"
  },
  outputs: {
    actionBegin: "actionBegin",
    actionComplete: "actionComplete",
    actionFailure: "actionFailure",
    cellClick: "cellClick",
    cellDoubleClick: "cellDoubleClick",
    created: "created",
    dataBinding: "dataBinding",
    dataBound: "dataBound",
    destroyed: "destroyed",
    drag: "drag",
    dragStart: "dragStart",
    dragStop: "dragStop",
    eventClick: "eventClick",
    eventDoubleClick: "eventDoubleClick",
    eventRendered: "eventRendered",
    hover: "hover",
    moreEventsClick: "moreEventsClick",
    navigating: "navigating",
    popupClose: "popupClose",
    popupOpen: "popupOpen",
    renderCell: "renderCell",
    resizeStart: "resizeStart",
    resizeStop: "resizeStop",
    resizing: "resizing",
    select: "select",
    virtualScrollStart: "virtualScrollStart",
    virtualScrollStop: "virtualScrollStop",
    currentViewChange: "currentViewChange",
    selectedDateChange: "selectedDateChange"
  },
  features: [ɵɵInheritDefinitionFeature],
  decls: 0,
  vars: 0,
  template: function ScheduleComponent_Template(rf, ctx) {
  },
  encapsulation: 2,
  changeDetection: 0
});
__decorate([Template()], ScheduleComponent.prototype, "dateHeaderTemplate", void 0);
__decorate([Template()], ScheduleComponent.prototype, "dateRangeTemplate", void 0);
__decorate([Template()], ScheduleComponent.prototype, "dayHeaderTemplate", void 0);
__decorate([Template()], ScheduleComponent.prototype, "cellTemplate", void 0);
__decorate([Template()], ScheduleComponent.prototype, "cellHeaderTemplate", void 0);
__decorate([Template()], ScheduleComponent.prototype, "eventSettings_tooltipTemplate", void 0);
__decorate([Template()], ScheduleComponent.prototype, "eventSettings_template", void 0);
__decorate([Template()], ScheduleComponent.prototype, "editorTemplate", void 0);
__decorate([Template()], ScheduleComponent.prototype, "editorHeaderTemplate", void 0);
__decorate([Template()], ScheduleComponent.prototype, "editorFooterTemplate", void 0);
__decorate([Template()], ScheduleComponent.prototype, "monthHeaderTemplate", void 0);
__decorate([Template()], ScheduleComponent.prototype, "timeScale_minorSlotTemplate", void 0);
__decorate([Template()], ScheduleComponent.prototype, "timeScale_majorSlotTemplate", void 0);
__decorate([Template()], ScheduleComponent.prototype, "resourceHeaderTemplate", void 0);
__decorate([Template()], ScheduleComponent.prototype, "headerIndentTemplate", void 0);
__decorate([Template()], ScheduleComponent.prototype, "quickInfoTemplates_header", void 0);
__decorate([Template()], ScheduleComponent.prototype, "quickInfoTemplates_content", void 0);
__decorate([Template()], ScheduleComponent.prototype, "quickInfoTemplates_footer", void 0);
__decorate([Template()], ScheduleComponent.prototype, "group_headerTooltipTemplate", void 0);
ScheduleComponent = __decorate([ComponentMixins([ComponentBase])], ScheduleComponent);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ScheduleComponent, [{
    type: Component,
    args: [{
      selector: "ejs-schedule",
      inputs: inputs$1,
      outputs: outputs$1,
      template: "",
      changeDetection: ChangeDetectionStrategy.OnPush,
      queries: {
        childViews: new ContentChild(ViewsDirective),
        childResources: new ContentChild(ResourcesDirective),
        childHeaderRows: new ContentChild(HeaderRowsDirective),
        childToolbarItems: new ContentChild(ToolbarItemsDirective)
      }
    }]
  }], function() {
    return [{
      type: ElementRef
    }, {
      type: Renderer2
    }, {
      type: ViewContainerRef
    }, {
      type: Injector
    }];
  }, {
    dateHeaderTemplate: [{
      type: ContentChild,
      args: ["dateHeaderTemplate"]
    }],
    dateRangeTemplate: [{
      type: ContentChild,
      args: ["dateRangeTemplate"]
    }],
    dayHeaderTemplate: [{
      type: ContentChild,
      args: ["dayHeaderTemplate"]
    }],
    cellTemplate: [{
      type: ContentChild,
      args: ["cellTemplate"]
    }],
    cellHeaderTemplate: [{
      type: ContentChild,
      args: ["cellHeaderTemplate"]
    }],
    eventSettings_tooltipTemplate: [{
      type: ContentChild,
      args: ["eventSettingsTooltipTemplate"]
    }],
    eventSettings_template: [{
      type: ContentChild,
      args: ["eventSettingsTemplate"]
    }],
    editorTemplate: [{
      type: ContentChild,
      args: ["editorTemplate"]
    }],
    editorHeaderTemplate: [{
      type: ContentChild,
      args: ["editorHeaderTemplate"]
    }],
    editorFooterTemplate: [{
      type: ContentChild,
      args: ["editorFooterTemplate"]
    }],
    monthHeaderTemplate: [{
      type: ContentChild,
      args: ["monthHeaderTemplate"]
    }],
    timeScale_minorSlotTemplate: [{
      type: ContentChild,
      args: ["timeScaleMinorSlotTemplate"]
    }],
    timeScale_majorSlotTemplate: [{
      type: ContentChild,
      args: ["timeScaleMajorSlotTemplate"]
    }],
    resourceHeaderTemplate: [{
      type: ContentChild,
      args: ["resourceHeaderTemplate"]
    }],
    headerIndentTemplate: [{
      type: ContentChild,
      args: ["headerIndentTemplate"]
    }],
    quickInfoTemplates_header: [{
      type: ContentChild,
      args: ["quickInfoTemplatesHeader"]
    }],
    quickInfoTemplates_content: [{
      type: ContentChild,
      args: ["quickInfoTemplatesContent"]
    }],
    quickInfoTemplates_footer: [{
      type: ContentChild,
      args: ["quickInfoTemplatesFooter"]
    }],
    group_headerTooltipTemplate: [{
      type: ContentChild,
      args: ["groupHeaderTooltipTemplate"]
    }]
  });
})();
var ScheduleModule = class {
};
ScheduleModule.ɵfac = function ScheduleModule_Factory(t) {
  return new (t || ScheduleModule)();
};
ScheduleModule.ɵmod = ɵɵdefineNgModule({
  type: ScheduleModule,
  declarations: [ScheduleComponent, ViewDirective, ViewsDirective, ResourceDirective, ResourcesDirective, HeaderRowDirective, HeaderRowsDirective, ToolbarItemDirective, ToolbarItemsDirective],
  imports: [CommonModule],
  exports: [ScheduleComponent, ViewDirective, ViewsDirective, ResourceDirective, ResourcesDirective, HeaderRowDirective, HeaderRowsDirective, ToolbarItemDirective, ToolbarItemsDirective]
});
ScheduleModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule]]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ScheduleModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule],
      declarations: [ScheduleComponent, ViewDirective, ViewsDirective, ResourceDirective, ResourcesDirective, HeaderRowDirective, HeaderRowsDirective, ToolbarItemDirective, ToolbarItemsDirective],
      exports: [ScheduleComponent, ViewDirective, ViewsDirective, ResourceDirective, ResourcesDirective, HeaderRowDirective, HeaderRowsDirective, ToolbarItemDirective, ToolbarItemsDirective]
    }]
  }], null, null);
})();
var DayService = {
  provide: "ScheduleDay",
  useValue: Day
};
var WeekService = {
  provide: "ScheduleWeek",
  useValue: Week
};
var WorkWeekService = {
  provide: "ScheduleWorkWeek",
  useValue: WorkWeek
};
var MonthService = {
  provide: "ScheduleMonth",
  useValue: Month
};
var YearService = {
  provide: "ScheduleYear",
  useValue: Year
};
var AgendaService = {
  provide: "ScheduleAgenda",
  useValue: Agenda
};
var MonthAgendaService = {
  provide: "ScheduleMonthAgenda",
  useValue: MonthAgenda
};
var TimelineViewsService = {
  provide: "ScheduleTimelineViews",
  useValue: TimelineViews
};
var TimelineMonthService = {
  provide: "ScheduleTimelineMonth",
  useValue: TimelineMonth
};
var TimelineYearService = {
  provide: "ScheduleTimelineYear",
  useValue: TimelineYear
};
var ResizeService = {
  provide: "ScheduleResize",
  useValue: Resize
};
var DragAndDropService = {
  provide: "ScheduleDragAndDrop",
  useValue: DragAndDrop
};
var ExcelExportService = {
  provide: "ScheduleExcelExport",
  useValue: ExcelExport
};
var ICalendarExportService = {
  provide: "ScheduleICalendarExport",
  useValue: ICalendarExport
};
var ICalendarImportService = {
  provide: "ScheduleICalendarImport",
  useValue: ICalendarImport
};
var PrintService = {
  provide: "SchedulePrint",
  useValue: Print
};
var ScheduleAllModule = class {
};
ScheduleAllModule.ɵfac = function ScheduleAllModule_Factory(t) {
  return new (t || ScheduleAllModule)();
};
ScheduleAllModule.ɵmod = ɵɵdefineNgModule({
  type: ScheduleAllModule,
  imports: [CommonModule, ScheduleModule],
  exports: [ScheduleModule]
});
ScheduleAllModule.ɵinj = ɵɵdefineInjector({
  providers: [DayService, WeekService, WorkWeekService, MonthService, YearService, AgendaService, MonthAgendaService, TimelineViewsService, TimelineMonthService, TimelineYearService, ResizeService, DragAndDropService, ExcelExportService, ICalendarExportService, ICalendarImportService, PrintService],
  imports: [[CommonModule, ScheduleModule], ScheduleModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ScheduleAllModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, ScheduleModule],
      exports: [ScheduleModule],
      providers: [DayService, WeekService, WorkWeekService, MonthService, YearService, AgendaService, MonthAgendaService, TimelineViewsService, TimelineMonthService, TimelineYearService, ResizeService, DragAndDropService, ExcelExportService, ICalendarExportService, ICalendarImportService, PrintService]
    }]
  }], null, null);
})();
var inputs = ["calendarMode", "cssClass", "dateFormat", "enablePersistence", "enableRtl", "endTypes", "firstDayOfWeek", "frequencies", "locale", "maxDate", "minDate", "selectedType", "startDate", "value"];
var outputs = ["change"];
var twoWays = [];
var RecurrenceEditorComponent = class RecurrenceEditorComponent2 extends RecurrenceEditor {
  constructor(ngEle, srenderer, viewContainerRef, injector) {
    super();
    this.ngEle = ngEle;
    this.srenderer = srenderer;
    this.viewContainerRef = viewContainerRef;
    this.injector = injector;
    this.element = this.ngEle.nativeElement;
    this.injectedModules = this.injectedModules || [];
    this.registerEvents(outputs);
    this.addTwoWay.call(this, twoWays);
    setValue("currentInstance", this, this.viewContainerRef);
    this.context = new ComponentBase();
  }
  ngOnInit() {
    this.context.ngOnInit(this);
  }
  ngAfterViewInit() {
    this.context.ngAfterViewInit(this);
  }
  ngOnDestroy() {
    this.context.ngOnDestroy(this);
  }
  ngAfterContentChecked() {
    this.context.ngAfterContentChecked(this);
  }
};
RecurrenceEditorComponent.ɵfac = function RecurrenceEditorComponent_Factory(t) {
  return new (t || RecurrenceEditorComponent)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(Injector));
};
RecurrenceEditorComponent.ɵcmp = ɵɵdefineComponent({
  type: RecurrenceEditorComponent,
  selectors: [["ejs-recurrenceeditor"]],
  inputs: {
    calendarMode: "calendarMode",
    cssClass: "cssClass",
    dateFormat: "dateFormat",
    enablePersistence: "enablePersistence",
    enableRtl: "enableRtl",
    endTypes: "endTypes",
    firstDayOfWeek: "firstDayOfWeek",
    frequencies: "frequencies",
    locale: "locale",
    maxDate: "maxDate",
    minDate: "minDate",
    selectedType: "selectedType",
    startDate: "startDate",
    value: "value"
  },
  outputs: {
    change: "change"
  },
  features: [ɵɵInheritDefinitionFeature],
  decls: 0,
  vars: 0,
  template: function RecurrenceEditorComponent_Template(rf, ctx) {
  },
  encapsulation: 2,
  changeDetection: 0
});
RecurrenceEditorComponent = __decorate([ComponentMixins([ComponentBase])], RecurrenceEditorComponent);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RecurrenceEditorComponent, [{
    type: Component,
    args: [{
      selector: "ejs-recurrenceeditor",
      inputs,
      outputs,
      template: "",
      changeDetection: ChangeDetectionStrategy.OnPush,
      queries: {}
    }]
  }], function() {
    return [{
      type: ElementRef
    }, {
      type: Renderer2
    }, {
      type: ViewContainerRef
    }, {
      type: Injector
    }];
  }, null);
})();
var RecurrenceEditorModule = class {
};
RecurrenceEditorModule.ɵfac = function RecurrenceEditorModule_Factory(t) {
  return new (t || RecurrenceEditorModule)();
};
RecurrenceEditorModule.ɵmod = ɵɵdefineNgModule({
  type: RecurrenceEditorModule,
  declarations: [RecurrenceEditorComponent],
  imports: [CommonModule],
  exports: [RecurrenceEditorComponent]
});
RecurrenceEditorModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule]]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RecurrenceEditorModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule],
      declarations: [RecurrenceEditorComponent],
      exports: [RecurrenceEditorComponent]
    }]
  }], null, null);
})();
var RecurrenceEditorAllModule = class {
};
RecurrenceEditorAllModule.ɵfac = function RecurrenceEditorAllModule_Factory(t) {
  return new (t || RecurrenceEditorAllModule)();
};
RecurrenceEditorAllModule.ɵmod = ɵɵdefineNgModule({
  type: RecurrenceEditorAllModule,
  imports: [CommonModule, RecurrenceEditorModule],
  exports: [RecurrenceEditorModule]
});
RecurrenceEditorAllModule.ɵinj = ɵɵdefineInjector({
  providers: [],
  imports: [[CommonModule, RecurrenceEditorModule], RecurrenceEditorModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RecurrenceEditorAllModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, RecurrenceEditorModule],
      exports: [RecurrenceEditorModule],
      providers: []
    }]
  }], null, null);
})();
export {
  Agenda,
  AgendaService,
  DEFAULT_WEEKS,
  Day,
  DayService,
  DragAndDrop,
  DragAndDropService,
  ExcelExport,
  ExcelExportService,
  Gregorian,
  HeaderRenderer,
  HeaderRowDirective,
  HeaderRowsDirective,
  ICalendarExport,
  ICalendarExportService,
  ICalendarImport,
  ICalendarImportService,
  Islamic,
  MS_PER_DAY,
  MS_PER_MINUTE,
  Month,
  MonthAgenda,
  MonthAgendaService,
  MonthService,
  Print,
  PrintService,
  RecurrenceEditor,
  RecurrenceEditorAllModule,
  RecurrenceEditorComponent,
  RecurrenceEditorModule,
  Resize,
  ResizeService,
  ResourceDirective,
  ResourcesDirective,
  Schedule,
  ScheduleAllModule,
  ScheduleComponent,
  ScheduleModule,
  TimelineMonth,
  TimelineMonthService,
  TimelineViews,
  TimelineViewsService,
  TimelineYear,
  TimelineYearService,
  Timezone,
  ToolbarItemDirective,
  ToolbarItemsDirective,
  ViewBase,
  ViewDirective,
  ViewsDirective,
  WEEK_LENGTH,
  Week,
  WeekService,
  WorkWeek,
  WorkWeekService,
  Year,
  YearService,
  actionBegin,
  actionComplete,
  actionFailure,
  addDays,
  addMonths,
  addYears,
  capitalizeFirstWord,
  cellClick,
  cellDoubleClick,
  cellMouseDown,
  cellSelect,
  contentReady,
  dataBinding,
  dataBound,
  dataReady,
  documentClick,
  drag,
  dragStart,
  dragStop,
  eventClick,
  eventDoubleClick,
  eventRendered,
  eventsLoaded,
  extractObjectFromRule,
  findIndexInData,
  firstDateOfMonth,
  generate,
  generateSummary,
  getCalendarUtil,
  getDateCount,
  getDateFromRecurrenceDateString,
  getDateFromString,
  getDateInMs,
  getDaysCount,
  getElementHeight,
  getElementHeightFromClass,
  getElementTop,
  getElementWidth,
  getElementWidthFromClass,
  getMaxDays,
  getOuterHeight,
  getRecurrenceStringFromDate,
  getScrollBarWidth,
  getStartEndHours,
  getTranslateX,
  getTranslateY,
  getUniversalTime,
  getWeekFirstDate,
  getWeekLastDate,
  getWeekMiddleDate,
  getWeekNumber,
  hover,
  initialEnd,
  initialLoad,
  inlineClick,
  isDaylightSavingTime,
  isIPadDevice,
  isMobile,
  lastDateOfMonth,
  moreEventsClick,
  navigating,
  popupClose,
  popupOpen,
  print2 as print,
  removeChildren,
  renderCell,
  resetScrollbarWidth,
  resetTime,
  resizeStart,
  resizeStop,
  resizing,
  scroll,
  scrollUiUpdate,
  select,
  setTime,
  timezoneData,
  uiUpdate,
  virtualScroll,
  virtualScrollStart,
  virtualScrollStop
};
//# sourceMappingURL=@syncfusion_ej2-angular-schedule.js.map
